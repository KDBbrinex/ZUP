
////////////////////////////////////////////////////////////////////////////////
// Разбор резюме клиент.
// Клиентские процедуры и функции.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик подключаемой команды. Получает вложение, выполняет проверки разбирает его и открывает форму нового кандидата.
//
// Параметры: 
//  МассивОбъектов - Массив - массив объектов взаимодействия. 
//  ДополнительныеПараметры - Структура - структура параметров команды.
//
Процедура СоздатьКандидатаПоВложениюПодключаемый(МассивОбъектов, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'В веб-клиенте функция разбора резюме недоступна.'"));
	Возврат;
	#Иначе
	
	Если МассивОбъектов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Входящее письмо не выбрано. Выберите требуемое письмо.'"));
		Возврат;
	КонецЕсли;
		                                                    
	ТекущееВзаимодействие = МассивОбъектов[0];
	
	Если ТипЗнч(ТекущееВзаимодействие) <> Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда ""Создать кандидата"" может быть выполнена только для входящего письма.'"));
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеТипыВложений = МассивДоступныхРасширений();
	ОбрабатываемыеТипыВложений = СтрСоединить(ОбрабатываемыеТипыВложений,",");
	ОбрабатываемыеТипыВложений = СтрЗаменить(ОбрабатываемыеТипыВложений,".","");
	
	СписокВложений = РазборРезюмеВызовСервера.СписокВложений(ТекущееВзаимодействие, ОбрабатываемыеТипыВложений);
	
	Если СписокВложений.Количество() = 1 Тогда
		Вложение = СписокВложений[0].Значение;        
		СоздатьКандидатаПоВложению(Вложение);
	ИначеЕсли СписокВложений.Количество() > 1 Тогда
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РазборРезюмеКлиент");
		СписокВложений.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОбработатьЗавершениеВыбораВложения", КлиентскийМодуль),НСТр("ru = 'Выберите вложение'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В выбранном письме нет вложений обрабатываемых типов.'"));
		Возврат;
	КонецЕсли; 
	#КонецЕсли
	
КонецПроцедуры

// Начинает процесс работы с файлом-вложением. Разбирает текст резюме и открывает форму нового кандидата.
//
// Параметры: 
//  Вложение - СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы - файл для разбора. 
//
Процедура СоздатьКандидатаПоВложению(Вложение) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Вложение", Вложение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКандидатаПоВложениюПродолжение", РазборРезюмеКлиент, Параметры);
	
	ПровестиИнициализациюВнешнихКомпонент(ОписаниеОповещения);
	
КонецПроцедуры

// Процедура команды. Запускает диалог выбора файла и передает дальше полученный файл резюме для создания нового кандидата.
//
// Параметры: 
//  Источник - ФормаКлиентскогоПриложения - форма с которой была вызвана команда создания кандидата.
//  Вакансия - СправочникСсылка.Вакансии - вакансия из формы элемента которой создается кандидат.
//
Процедура СоздатьКандидатаПоФайлу(Источник, Вакансия = Неопределено) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Вакансия", Вакансия);
	Параметры.Вставить("Источник", Источник);
	Параметры.Вставить("ЗакрытьФормуПослеЗагрузкиКандидатов", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКандидатаПоФайлуПродолжение", РазборРезюмеКлиент, Параметры);
	
	ПровестиИнициализациюВнешнихКомпонент(ОписаниеОповещения);
	
КонецПроцедуры

// Возвращает результат подключения расширения работы с файлами.
//
// Возвращаемое значение:
//  Булево - в тонком клиенте всегда Истина, в браузере Google Chrome всегда Ложь.
//
Функция РасширениеРаботыСФайламиПодключено() Экспорт
	
	Если КлиентПоддерживаетСинхронныеВызовы() Тогда
		Возврат ПодключитьРасширениеРаботыСФайлами();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Выполняется в ходе создания файла с диска после помещения файла (веб без расширения).
//
// Параметры:
//  Результат - Булево - Истина, если файл помещен, и Ложь, если пользователь отказался.
//  Адрес - Строка - адрес данных файла в хранилище.
//  ПолныйПуть - Строка - полное имя выбранного файла.
//  Параметры - Неопределено - не используется.
//
Процедура ЗакончитьСозданиеКандидатаПослеПомещенияФайла(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	ПомещенныеФайлы = Новый Массив();	
	Если Результат Тогда
		ПомещенныеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолныйПуть, Адрес));
	КонецЕсли;
	
	ЗакончитьСозданиеКандидатаПослеПомещенияФайлов(ПомещенныеФайлы, Параметры);
	
КонецПроцедуры	

// Выполняется в ходе создания файла с диска после помещения файла (тонкий и веб с расширением).
//
// Параметры:
//  ПомещенныеФайлы - Неопределено, Массив - результат выполнения операции помещения файлов,
//                                           если файлы поместить не удалось, то Неопределено.
//                                           В противном случае содержит массив файлов для обработки.
//  ПараметрыЗагрузки - Неопределено - не используется.
//
Процедура ЗакончитьСозданиеКандидатаПослеПомещенияФайлов(ПомещенныеФайлы, ПараметрыЗагрузки) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПомещенныхФайлов = ПомещенныеФайлы.Количество();
	Если КоличествоПомещенныхФайлов = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Загрузка файлов не выполнена.'"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоПомещенныхФайлов = 1 Тогда
	
		ФайлРезюмеПараметры = ПомещенныеФайлы[0];
		
		ФайлРезюме = Новый Файл(ФайлРезюмеПараметры.ПолноеИмя);
		
		СтруктураРезюме = СтруктураРезюмеПоФайлу(ФайлРезюме);
		
		Если СтруктураРезюме.ОписаниеОшибки = "" Тогда
			
			ПараметрыВызоваФормы = Новый Структура();
			ПараметрыВызоваФормы.Вставить("СтруктураРезюме", СтруктураРезюме.СтруктураДанныхКандидата);
			ПараметрыВызоваФормы.Вставить("Сайт", ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.ПустаяСсылка"));
			ПараметрыВызоваФормы.Вставить("ФайлРезюмеДляЗагрузки", ФайлРезюмеПараметры.Имя);
			ПараметрыВызоваФормы.Вставить("АдресРезюмеДляЗагрузки", ФайлРезюмеПараметры.Хранение );
			
			ЗначенияЗаполнения = Новый Структура;
			Если ТипЗнч(ПараметрыЗагрузки) = Тип("Структура") И ПараметрыЗагрузки.Свойство("Вакансия") Тогда
				ЗначенияЗаполнения.Вставить("Вакансия", ПараметрыЗагрузки.Вакансия);
			КонецЕсли;
			
			ПодборПерсоналаКлиент.ОткрытьФормуНовогоКандидата(
				ЗначенияЗаполнения, ПараметрыВызоваФормы, ФайлРезюмеПараметры.ПолноеИмя);
		Иначе
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удается создать кандидата по выбранному файлу. 
					 |%1'"),
				 СтруктураРезюме.ОписаниеОшибки);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	Иначе
		
		ПараметрыВызоваФормы = Новый Структура();
		ПараметрыВызоваФормы.Вставить("ПомещенныеФайлы", ПомещенныеФайлы);
		Если ТипЗнч(ПараметрыЗагрузки) = Тип("Структура") Тогда
			
			Если ПараметрыЗагрузки.Свойство("ЗакрытьФормуПослеЗагрузкиКандидатов") Тогда
				ПараметрыВызоваФормы.Вставить("ЗакрытьФормуПослеЗагрузкиКандидатов", ПараметрыЗагрузки.ЗакрытьФормуПослеЗагрузкиКандидатов);
			КонецЕсли;
			
			Если ПараметрыЗагрузки.Свойство("Вакансия") Тогда
				ПараметрыВызоваФормы.Вставить("Вакансия", ПараметрыЗагрузки.Вакансия);
			КонецЕсли;
			
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ЗагрузкаКандидатовИзФайлов.Форма.ЗагрузкаКандидатовИзФайлов", ПараметрыВызоваФормы,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры	

// Формирует структуру резюме из полученного файла.
//
// Параметры:
//  ФайлРезюме - ДвоичныеДанные - сам файл резюме
//  ШаблонРезюме - СправочникСсылка.ИсточникиИнформацииОКандидатах - вариант шаблона для разбора резюме.
//
// Возвращаемое значение:
//  Структура - структура с заполненными данными резюме. 
//
Функция СтруктураРезюмеПоФайлу(Знач ФайлРезюме, Знач ШаблонРезюме = Неопределено) Экспорт
	
	СтруктураОтвета = СтруктураДанныхРезюме();
	
	#Если ВебКлиент Тогда
		
	ТекстСообщения = НСтр("ru = 'В веб-клиенте функция разбора резюме не поддерживается.'");
	ПоказатьПредупреждение(, ТекстСообщения);
	СтруктураОтвета.Вставить("ОписаниеОшибки", ТекстСообщения);
	Возврат СтруктураОтвета;
	#Иначе
	
	Если ТипЗнч(ФайлРезюме) <> Тип("Файл") Тогда
		СтруктураОтвета.Вставить("ОписаниеОшибки", НСтр("ru = 'Ожидается файл резюме.'"));
		Возврат СтруктураОтвета;
	ИначеЕсли НЕ ФайлРезюме.Существует() Тогда 
		СтруктураОтвета.Вставить("ОписаниеОшибки", НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = 'Не найден файл ""%1""'",ФайлРезюме.ПолноеИмя)));
		Возврат СтруктураОтвета;
	КонецЕсли; 
	
	РасширениеФайла = НРег(ФайлРезюме.Расширение);
	Если МассивДоступныхРасширений().Найти(РасширениеФайла) = Неопределено Тогда
		СтруктураОтвета.Вставить("ОписаниеОшибки",НСтр(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = 'Расширение ""%1"" не в ходит в перечень обслуживаемых'",РасширениеФайла)));
		Возврат СтруктураОтвета;
	КонецЕсли; 
	
	ИмяВременногоФайлаРезюме = ПолучитьИмяВременногоФайла(ФайлРезюме.Расширение);
	КопироватьФайл(ФайлРезюме.ПолноеИмя, ИмяВременногоФайлаРезюме);
	ВременныйФайлРезюме = Новый Файл(ИмяВременногоФайлаРезюме);
	
	ТекстРезюме = ТекстИзФайла(ВременныйФайлРезюме, ФайлРезюме.ПолноеИмя);
	
	Если ПустаяСтрока(ТекстРезюме) Тогда
		СтруктураОтвета.Вставить("ОписаниеОшибки", НСтр("ru = 'Не удалось извлечь текст из файла.'"));
		Возврат СтруктураОтвета;
	КонецЕсли; 
	
	СтруктураОтвета = СтруктураРезюмеПоТексту(ТекстРезюме, ШаблонРезюме);
		
	СтруктураДанныхКандидата = СтруктураОтвета.СтруктураДанныхКандидата;
	
	// Извлечение фотографии кандидата
	Фотография = ИзвлечениеФотографии(ВременныйФайлРезюме, ФайлРезюме.ПолноеИмя);
	
	Если ТипЗнч(Фотография) = Тип("Картинка") Тогда
		СтруктураДанныхКандидата.Вставить("Фото",Фотография);
	КонецЕсли; 
	
	// Определения источника резюме
	Если Не ЗначениеЗаполнено(СтруктураДанныхКандидата.ИсточникИнформации) Тогда
		СтруктураДанныхКандидата.ИсточникИнформации = ИсточникИнформацииПоФайлуИТексту(ТекстРезюме, ВременныйФайлРезюме, ФайлРезюме.ПолноеИмя);
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайлаРезюме);
	Исключение
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось удалить временный файл
				           |%1 по причине: %2'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), 
				ИмяВременногоФайлаРезюме, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),
												"Ошибка",
												ТекстСообщения,,
												Истина);
		
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
	#КонецЕсли 
	
КонецФункции

// Формирует структуру резюме из полученного текста.
//  
// Параметры:
//  ТекстРезюме - Строка - текст для извлечения данных резюме
//  ШаблонРезюме - СправочникСсылка.ИсточникиИнформацииОКандидатах - вариант шаблона для разбора резюме.
//
// Возвращаемое значение:
//  Структура - структура с заполненными данными резюме.
//
Функция СтруктураРезюмеПоТексту(Знач ТекстРезюме, Знач ШаблонРезюме = Неопределено) Экспорт
	
	СтруктураОтвета = СтруктураДанныхРезюме();
	
	Если НЕ ПустаяСтрока(ТекстРезюме) Тогда
		
		РазборРезюмеВызовСервера.ПарсингТекста(СтруктураОтвета,ТекстРезюме, ШаблонРезюме);
		
	КонецЕсли; 
	
	Возврат СтруктураОтвета;
КонецФункции

// Возвращает перечень расширений
// 
// Возвращаемое значение:
//  Массив - массив строк с расширениями (например, ".doc").
//
Функция МассивДоступныхРасширений() Экспорт
	Возврат СтрРазделить(".txt;.rtf;.doc;.docx",";",Ложь);
КонецФункции

// Запускает процесс подключения компоненты работы с картинкой из макета.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - содержит процедуру и параметры для передачи результата подключения компоненты.
//
Процедура ПровестиИнициализациюВнешнихКомпонент(ОписаниеОповещения) Экспорт
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для получения картинки из буфера обмена необходимо  установить компоненту.'");
	
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(ОписаниеОповещения, "AddInNativeExtension", "ОбщийМакет.КомпонентаПолученияКартинкиИзБуфера", ПараметрыПодключения);
	
КонецПроцедуры

#Область РаботаСВложением

// Обработчик завершения выбора файла резюме из вложения. Запускает процесс обработки файла из вложения.
//
// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений - выбранное вложение из предложенного списка.
//  Параметры - Структура - структура параметров команды.
//
Процедура ОбработатьЗавершениеВыбораВложения(ВыбранныйЭлемент, Параметры) Экспорт 

	#Если Не ВебКлиент Тогда
		
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		СоздатьКандидатаПоВложению(ВыбранныйЭлемент.Значение);
	КонецЕсли; 
	
	#КонецЕсли

КонецПроцедуры
 
#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Проверяет, поддерживает ли клиент синхронные вызовы.
//
// Возвращаемое значение:
//  Булево - Истина, если веб-клиент поддерживает синхронные вызовы; Ложь, не поддерживает.
//
Функция КлиентПоддерживаетСинхронныеВызовы()
	                         
#Если ВебКлиент Тогда
	// В Chrome расширение не подключается.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияПрограммыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СистемнаяИнформация.ИнформацияПрограммыПросмотра, " ");
	
	Для Каждого ИнформацияПрограммы Из ИнформацияПрограммыМассив Цикл
		Если Найти(ИнформацияПрограммы, "Chrome") > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

#Если НЕ ВебКлиент Тогда

#Область ИзвлечениеТекста

Функция ТекстИзФайла(Знач ФайлРезюме, ПолноеИмяИсходногоФайла = "")
	
	ПолученныйТекст = Неопределено;
	
	РасширениеФайла = НРег(ФайлРезюме.Расширение);
	
	Если РасширениеФайла = ".doc" 
		ИЛИ РасширениеФайла = ".docx"
		ИЛИ РасширениеФайла = ".rtf" Тогда
		Если СтрНайти(ФайлРезюме.Имя, "~$") = 0 Тогда
			ПолученныйТекст = ТекстИзФайлаMicrosoftWord(ФайлРезюме, ПолноеИмяИсходногоФайла);
		КонецЕсли;
	ИначеЕсли РасширениеФайла = ".txt" Тогда 
		ПолученныйТекст = ТекстИзФайлаTXT(ФайлРезюме);
	КонецЕсли; 

	Если Не ПустаяСтрока(ПолученныйТекст) Тогда
		ПолученныйТекст = СтрЗаменить(ПолученныйТекст, Символ(11), "  ");
		ПолученныйТекст = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ПолученныйТекст);
		ПолученныйТекст = ТекстПослеНормализации(ПолученныйТекст);
	КонецЕсли; 
	
	Возврат ПолученныйТекст;
	
КонецФункции

Функция ТекстПослеНормализации(Знач Текст)
	
	// Удаляем символы цитирования и пустые символы по краям строки.
	КодСимволаЦитирования = КодСимвола(">");
	ТекстРезультата = Новый ТекстовыйДокумент;
	Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
		
		Строка = СтрПолучитьСтроку(Текст, Индекс);
		Строка = СокрЛП(Строка);
		Пока КодСимвола(Строка) = КодСимвола(">") Цикл
			Строка = Сред(Строка, 2);
			Строка = СокрЛП(Строка);
			Если Не СтрЗаканчиваетсяНа(Строка, ".") Тогда
				Строка = Строка + ".";
			КонецЕсли;
		КонецЦикла;
		ТекстРезультата.ДобавитьСтроку(Строка);
		
	КонецЦикла;
	Текст = ТекстРезультата.ПолучитьТекст();
	Текст = СокрЛП(Текст);
	
	// Исправляем лишние переводы строки.
	ДлинаТекста = СтрДлина(Текст);
	ОбработатьТекст = Истина;
	Пока ОбработатьТекст Цикл
		// При нормализации используется "!", а не ".", во избежании появления лишних дат.
		Текст = СтрЗаменить(Текст, Символы.ПС + Символы.ПС + Символы.ПС, Символы.ПС + Символы.ПС);
		Текст = СтрЗаменить(Текст, "   ", " ");
		Текст = СтрЗаменить(Текст, "  ", " ");
		Текст = СтрЗаменить(Текст, " " + Символы.ПС, Символы.ПС);
		Текст = СтрЗаменить(Текст, "?.", "?");
		Текст = СтрЗаменить(Текст, "?!", "?");
		Текст = СтрЗаменить(Текст, "!.", "!");
		Текст = СтрЗаменить(Текст, "!!", "!");
		Текст = СтрЗаменить(Текст, ".!", ".");
		Текст = СтрЗаменить(Текст, "--", "-");
		Текст = СокрЛП(Текст);
		
		ОбработатьТекст = ДлинаТекста <> СтрДлина(Текст);
		ДлинаТекста = СтрДлина(Текст);
		
	КонецЦикла;
	
	// АПК:163-выкл.
	// Корректировка ё.
	Текст = СтрЗаменить(Текст, "Ё", "Е");
	Текст = СтрЗаменить(Текст, "ё", "е");
	// АПК:163-вкл.
	
	Возврат Текст;
	
КонецФункции
 
Функция ТекстИзФайлаMicrosoftWord(Знач ФайлРезюме, ПолноеИмяИсходногоФайла = "")
	
	ИмяФайлаДляСообщений = ?(ПолноеИмяИсходногоФайла = "", ФайлРезюме.ПолноеИмя, ПолноеИмяИсходногоФайла);
	ИзвлеченныйТекст = "";
	
	Попытка
		ОбъектWord = Новый COMОбъект("Word.Application");
		ОбъектWord.WordBasic.DisableAutoMacros(1);
		ОбъектWord.Visible = 0;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка работы с приложением MS Word. Рекомендации:
				|Убедитесь, что на клиенте установлена программа Microsoft Word.
				|Подробности:'") + "
				|" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
	Попытка
		Док = ОбъектWord.Documents.Open(ФайлРезюме.ПолноеИмя,0,0,0,,,1,,,,,,,,1);
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка работы с приложением MS Word. Рекомендации:
		|1) Проверьте файл ""%1"", возможно он заблокирован и доступен только для чтения или поврежден.
		|2) Переустановите приложение MS Word или используйте более новую версию приложения.'"), ИмяФайлаДляСообщений);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		
		ОбъектWord.Quit();
		ОбъектWord = Неопределено;
		Возврат "";
	КонецПопытки;
	
	Док.Activate();
	
	Selection = ОбъектWord.Selection;
	Selection.WholeStory();
	ИзвлеченныйТекст = Selection.Text;
	
	ИзвлеченныйТекст = СтрЗаменить(ИзвлеченныйТекст, Символы.ВТаб, Символы.ПС);
	
	Док.Close(False); 
	ОбъектWord.Quit();
	ОбъектWord = Неопределено;
	
	Возврат ИзвлеченныйТекст;
	
КонецФункции

Функция ТекстИзФайлаTXT(Знач ФайлРезюме)
	
	ИзвлеченныйТекст = "";
	
	Извлечение = Новый ИзвлечениеТекста(ФайлРезюме.ПолноеИмя);
	Попытка
		ИзвлеченныйТекст = Извлечение.ПолучитьТекст();
	Исключение
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось извлечь текст из файла
				           |%1 по причине: %2'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), 
				ФайлРезюме.ПолноеИмя, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),
												"Ошибка",
												ТекстСообщения,,
												Истина);
		
	КонецПопытки; 
	
	Возврат	ИзвлеченныйТекст;
	
КонецФункции
 
#КонецОбласти 

#Область ИзвлечениеФото

Функция ИзвлечениеФотографии(Знач ФайлРезюме, ПолноеИмяИсходногоФайла = "")
	
	Если ЭтоФорматMSWord(ФайлРезюме.Расширение) Тогда
		Возврат ФотоИзФайлаWord(ФайлРезюме, ПолноеИмяИсходногоФайла);
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

Функция ФотоИзФайлаWord(Знач ФайлРезюме, ПолноеИмяИсходногоФайла = "")
	
	КэшированныеКомпоненты = ПараметрыПриложения["СтандартныеПодсистемы.ВнешниеКомпоненты.Объекты"];
	
	ИмяФайлаДляСообщений = ?(ПолноеИмяИсходногоФайла = "", ФайлРезюме.ПолноеИмя, ПолноеИмяИсходногоФайла);
	
	ОбъектДляРаботыСКартинкой = Неопределено;
	
	Если ТипЗнч(КэшированныеКомпоненты) = Тип("ФиксированноеСоответствие") Тогда
		ОбъектДляРаботыСКартинкой = КэшированныеКомпоненты.Получить("ОбщийМакет.КомпонентаПолученияКартинкиИзБуфера");
	КонецЕсли;
	
	Если ОбъектДляРаботыСКартинкой = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ОбъектWord = Новый COMОбъект("Word.Application");
		ОбъектWord.WordBasic.DisableAutoMacros(1);
		ОбъектWord.Visible = 0;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка работы с приложением MS Word. Рекомендации:
				|Убедитесь, что на клиенте установлена программа Microsoft Word.
				|Подробности:'") + "
				|" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
	Попытка
		Док = ОбъектWord.Documents.Open(ФайлРезюме.ПолноеИмя,0,0,0,,,1,,,,,,,,1);
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка работы с приложением MS Word. Рекомендации:
		|1) Проверьте файл ""%1"", возможно он заблокирован и доступен только для чтения или поврежден.
		|2) Переустановите приложение MS Word или используйте более новую версию приложения.'"), ИмяФайлаДляСообщений);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		
		ОбъектWord.Quit();
		ОбъектWord = Неопределено;
		Возврат Неопределено;
	КонецПопытки;
	
	Док.Activate();
	
	Selection = ОбъектWord.Selection;
	Selection.WholeStory();
	InlineShapes = Selection.InlineShapes;
	Shapes = ОбъектWord.ActiveDocument.Shapes;
	
	ВставлятьКартинкуИзБуфера = Ложь;
	Если InlineShapes.Count > 0 Тогда
		InlineShapes.Item(1).Select();
		Попытка
			ОбъектWord.Selection.CopyAsPicture();
			ВставлятьКартинкуИзБуфера = Истина;
		Исключение
			ВставлятьКартинкуИзБуфера = Ложь;
			ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка работы с приложением MS Word.
						|Извлечь фото из ""%1""  не удалось. Рекомендации:
						|1) Проверьте файл, возможно он доступен только для чтения или поврежден.'"), ИмяФайлаДляСообщений);
					
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		КонецПопытки;
	ИначеЕсли Shapes.Count Тогда
		Shapes.Item(1).Select();
		Попытка
			ОбъектWord.Selection.CopyAsPicture();
			ВставлятьКартинкуИзБуфера = Истина;
		Исключение
			ВставлятьКартинкуИзБуфера = Ложь;
			ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка работы с приложением MS Word.
						|Извлечь фото из ""%1""  не удалось. Рекомендации:
						|1) Проверьте файл, возможно он доступен только для чтения или поврежден.'"), ИмяФайлаДляСообщений);
					
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;

	Если ВставлятьКартинкуИзБуфера Тогда
		ПутьКФайлу = ОбъектДляРаботыСКартинкой.ПолучитьКартинкуИзБуфера();

		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			Док.Close(False); 
			ОбъектWord.Quit();
			ОбъектWord = Неопределено;
			
			Возврат Новый Картинка(ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
	
	Док.Close(False); 
	ОбъектWord.Quit();
	ОбъектWord = Неопределено;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти 

#Область ИзвлечениеИсточникаИнформации

Функция ИсточникИнформацииПоФайлуИТексту(ТекстРезюме, ВременныйФайлРезюме, ПолноеИмяИсходногоФайла = "")
	
	ИсточникИнформации = Неопределено;
	
	ИсточникИнформации = ИсточникИнформацииПоКлючевымСловам(ТекстРезюме);
	
	Если Не ЗначениеЗаполнено(ИсточникИнформации) Тогда
		
		Если ЭтоФорматMSWord(ВременныйФайлРезюме.Расширение) Тогда
			ИсточникИнформации = ИсточникИнформацииПоЛоготипу(ВременныйФайлРезюме, ПолноеИмяИсходногоФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИсточникИнформации;
	
КонецФункции

Функция ИсточникИнформацииПоКлючевымСловам(ТекстРезюме)
	
	ПерваяСтрока = СтрПолучитьСтроку(ТекстРезюме, 1);
	ПоследняяСтрока = СтрПолучитьСтроку(ТекстРезюме, СтрЧислоСтрок(ТекстРезюме));
	
	СтрокаПоиска = ПерваяСтрока + ПоследняяСтрока;
	
	Если СтрокаСодержитКлюч(СтрокаПоиска, "HeadHunter") Тогда
		ИсточникИнформации = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter");
	ИначеЕсли СтрокаСодержитКлюч(СтрокаПоиска, "SuperJob") Тогда
		ИсточникИнформации = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob");
	ИначеЕсли СтрокаСодержитКлюч(СтрокаПоиска, "Rabota") Тогда
		ИсточникИнформации = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.Rabota");
	ИначеЕсли СтрокаСодержитКлюч(СтрокаПоиска, "RabotaMail") Тогда
		ИсточникИнформации = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.RabotaMail");
	КонецЕсли;
	
	Возврат ИсточникИнформации;
	
КонецФункции

Функция СтрокаСодержитКлюч(СтрокаПоиска, Ключ)
	
	Возврат СтрНайти(НРег(СтрокаПоиска), НРег(Ключ)) > 0;
	
КонецФункции

Функция ИсточникИнформацииПоЛоготипу(ФайлРезюме, ПолноеИмяИсходногоФайла = "")
	
	ИмяФайлаДляСообщений = ?(ПолноеИмяИсходногоФайла = "", ФайлРезюме.ПолноеИмя, ПолноеИмяИсходногоФайла);
	ИсточникИнформации = Неопределено;
	КэшированныеКомпоненты = ПараметрыПриложения["СтандартныеПодсистемы.ВнешниеКомпоненты.Объекты"];
	
	Попытка
		ОбъектWord = Новый COMОбъект("Word.Application");
		ОбъектWord.WordBasic.DisableAutoMacros(1);
		ОбъектWord.Visible = 0;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка работы с приложением MS Word. Рекомендации:
				|Убедитесь, что на клиенте установлена программа Microsoft Word.
				|Подробности:'") + "
				|" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
	Попытка
		Док = ОбъектWord.Documents.Open(ФайлРезюме.ПолноеИмя,0,0,0,,,1,,,,,,,,1);
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка работы с приложением MS Word. Рекомендации:
		|1) Проверьте файл, возможно он заблокирован и доступен только для чтения или поврежден.
		|2) Переустановите приложение MS Word или используйте более новую версию приложения.'"), ИмяФайлаДляСообщений);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		
		ОбъектWord.Quit();
		ОбъектWord = Неопределено;
		Возврат Неопределено;
	КонецПопытки;
	
	Колонтитул = Док.Sections.First.Headers.Item(2).Range;
	
	Если Колонтитул.InlineShapes.Count > 0 Тогда
		
		Логотип = Колонтитул.InlineShapes.Item(1);
		
		ИсточникИнформации = ИсточникИнформацииПоПараметрамЛоготипа(Логотип.Height, Логотип.Width);
		
	КонецЕсли;

	Док.Close(False); 
	ОбъектWord.Quit();
	ОбъектWord = Неопределено;
	
	Возврат ИсточникИнформации;
	
КонецФункции

Функция ИсточникИнформацииПоПараметрамЛоготипа(Высота, Ширина)
	
	ВысотаОкр = Окр(Высота, 0, РежимОкругления.Окр15как20); 
	ШиринаОкр = Окр(Ширина, 0, РежимОкругления.Окр15как20); 
	
	Если (ВысотаОкр = 24 И ШиринаОкр = 43)
		ИЛИ (ВысотаОкр = 43 И ШиринаОкр = 43) Тогда
		
		Возврат ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти 

#КонецЕсли 

// Возвращает пустую структуру резюме кандидата.
//
// Возвращаемое значение:
//  Структура - пустая структура резюме кандидата.
//
Функция СтруктураДанныхРезюме()
	
	СтруктураОтвета = Новый Структура("ОписаниеОшибки, СтруктураДанныхКандидата");
	СтруктураОтвета.ОписаниеОшибки = "";
	СтруктураОтвета.СтруктураДанныхКандидата = ПодборПерсоналаКлиентСервер.ОписаниеРезюмеКандидата();
	СтруктураОтвета.СтруктураДанныхКандидата.Вставить("ПолныйТекстРезюме", "");
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Продолжение процедуры СоздатьКандидатаПоВложению (см. выше).
Процедура СоздатьКандидатаПоВложениюПродолжение(Результат, Параметры) Экспорт
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'В веб-клиенте функция разбора резюме недоступна.'"));
	Возврат;
	#Иначе
	
	Вложение = Параметры.Вложение;
	
	ДанныеРезюме = РазборРезюмеВызовСервера.ДанныеРезюме(Вложение);
	
	Если ПустаяСтрока(ДанныеРезюме.Расширение) Тогда
		СтруктураРезюме = СтруктураРезюмеПоФайлу(Неопределено);
	Иначе
		ИмяФайлаРезюме = ПолучитьИмяВременногоФайла(ДанныеРезюме.Расширение);
	
		ДанныеРезюме.ДвоичныеДанные.Записать(ИмяФайлаРезюме);
		ФайлРезюме = Новый Файл(ИмяФайлаРезюме);
		СтруктураРезюме = СтруктураРезюмеПоФайлу(ФайлРезюме);
		Попытка
			УдалитьФайлы(ИмяФайлаРезюме);
		Исключение
			ИнформацияОшибки = ИнформацияОбОшибке();
		КонецПопытки;
	КонецЕсли; 
			
	ПараметрыВызоваФормы = Новый Структура("СтруктураРезюме", СтруктураРезюме.СтруктураДанныхКандидата);
	ПараметрыВызоваФормы.Вставить("Сайт", ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.ПустаяСсылка"));
	
	ПодборПерсоналаКлиент.ОткрытьФормуНовогоКандидата(, ПараметрыВызоваФормы, ИмяФайлаРезюме);
	
	#КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры СоздатьКандидатаПоФайлу (см. выше).
Процедура СоздатьКандидатаПоФайлуПродолжение(Результат, Параметры) Экспорт
	
	Источник = Параметры.Источник;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	
	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
		УникальныйИдентификатор = Источник.УникальныйИдентификатор;
	КонецЕсли;
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		// Веб-клиент без расширения для работы с файлами.
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьСозданиеКандидатаПослеПомещенияФайла", РазборРезюмеКлиент, Параметры);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения,,,,УникальныйИдентификатор);
			Возврат;
		Исключение
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить файл на сервер по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор	= Ложь;
	ДиалогВыбораФайла.Заголовок				= НСтр("ru = 'Выбор файла'");
	ДиалогВыбораФайла.Фильтр				= НСтр("ru = '(*.txt;*.rtf;*.doc;*.docx;*)|*.txt;*.rtf;*.doc;*.docx;'");
	ДиалогВыбораФайла.МножественныйВыбор 	= РазборРезюмеВызовСервера.ЕстьПраваНаЗагрузкуКандидатовИзФайлов();
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьСозданиеКандидатаПослеПомещенияФайлов", РазборРезюмеКлиент, Параметры);
	
	Попытка
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина,УникальныйИдентификатор);
	Исключение
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить файл на сервер по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоФорматMSWord(Расширение)
	
	СтрокаПоиска = ".doc.docx.rtf";

	Возврат СтрНайти(СтрокаПоиска, НРег(Расширение)) > 0;
	
КонецФункции

// Имя событие для записи в журнал регистрации.
//
// Возвращаемое значение:
//  Строка - Имя события для записи в журнал регистрации.
//
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Разбор резюме'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти 


