#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьКадровыйДокументПоРешениюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Источник.ДополнительныеСвойства.Вставить("ПрежниеКадровыеРешения", КадровыеРешенияПоДокументСсылке(Источник.Ссылка));
	
КонецПроцедуры

Процедура ЗарегистрироватьКадровыйДокументПоРешениюПриЗаписиПриЗаписи(Источник, Отказ) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Решения = КадровыеРешенияПоДокументОбъекту(Источник);
	
	Если Источник.ПометкаУдаления Тогда
		ОчиститьРешения = Источник.ДополнительныеСвойства["ПрежниеКадровыеРешения"];
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОчиститьРешения, Решения, Истина);
	Иначе
		ОчиститьРешения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			Источник.ДополнительныеСвойства["ПрежниеКадровыеРешения"], Решения);
	КонецЕсли;
	
	ИсточникДляБлокировки = Новый ТаблицаЗначений;
	ИсточникДляБлокировки.Колонки.Добавить("Решение", Метаданные.ОпределяемыеТипы.КадровоеРешение.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ИсточникДляБлокировки, Решения, "Решение");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ИсточникДляБлокировки, ОчиститьРешения, "Решение");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КадровыеДокументыПоРешениям");
	ЭлементБлокировки.ИсточникДанных = ИсточникДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Решение", "Решение");
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ПроверитьКадровыеДокументыПоРешениям(Решения, Источник.Ссылка);
		Для Каждого Решение Из Решения Цикл
			НаборЗаписей = РегистрыСведений.КадровыеДокументыПоРешениям.СоздатьНаборЗаписей();
			СтрокаНабора = НаборЗаписей.Добавить();
			СтрокаНабора.КадровыйДокумент = Источник.Ссылка;
			СтрокаНабора.Решение = Решение;
			НаборЗаписей.Отбор.Решение.Установить(Решение);
			НаборЗаписей.Записать();
		КонецЦикла;
		Для Каждого Решение Из ОчиститьРешения Цикл
			НаборЗаписей = РегистрыСведений.КадровыеДокументыПоРешениям.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Решение.Установить(Решение);
			НаборЗаписей.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ПроверитьКадровыеДокументыПоРешениям(Решения, ИсключаемыйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Решения", Решения);
	Запрос.УстановитьПараметр("ИсключаемыйДокумент", ИсключаемыйДокумент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Решение,
		|	КадровыйДокумент
		|ИЗ
		|	РегистрСведений.КадровыеДокументыПоРешениям
		|ГДЕ
		|	Решение В (&Решения)
		|	И КадровыйДокумент <> &ИсключаемыйДокумент";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'На основании решения %1 уже ранее был введен документ %2.'"), 
			Выборка.Решение, 
			Выборка.КадровыйДокумент);
	КонецЦикла;
	
КонецПроцедуры

Функция КадровыеРешенияПоДокументОбъекту(ДокументОбъект)
	
	РеквизитРешение = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДокументОбъект.Метаданные().ПолноеИмя())
		.ОписаниеРеквизитаКадровогоРешения();
	
	Решения = Новый Массив;
	
	ИмяТабличнойЧасти = ИмяТабличнойЧасти(РеквизитРешение);
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			Решения.Добавить(СтрокаТаблицы[РеквизитРешение.Имя]);
		КонецЦикла;
	Иначе
		Решения.Добавить(ДокументОбъект[РеквизитРешение.Имя]);
	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(Решения, ПустыеРешения(РеквизитРешение));

КонецФункции

Функция КадровыеРешенияПоДокументСсылке(ДокументСсылка)

	РеквизитРешение = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДокументСсылка.Метаданные().ПолноеИмя())
		.ОписаниеРеквизитаКадровогоРешения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустыеРешения", ПустыеРешения(РеквизитРешение));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИмяРеквизита КАК Решение
		|ИЗ
		|	#ИмяТаблицы
		|ГДЕ
		|	Ссылка = &Ссылка
		|	И &ИмяРеквизита НЕ В(&ПустыеРешения)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРеквизита", РеквизитРешение.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ПолноеИмяТаблицыПоМетаданнымРеквизита(РеквизитРешение));

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Решение");

КонецФункции

Функция ПолноеИмяТаблицыПоМетаданнымРеквизита(МетаданныеРеквизита) 
	ПутьКРеквизиту = СтрЗаменить(СтрЗаменить(МетаданныеРеквизита.ПолноеИмя(), ".Реквизит.", "."), ".ТабличнаяЧасть.", ".");
	Возврат Лев(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - СтрДлина(МетаданныеРеквизита.Имя) - 1);
КонецФункции

Функция ИмяТабличнойЧасти(МетаданныеРеквизита)
	Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеРеквизита.Родитель()) Тогда
		Возврат МетаданныеРеквизита.Родитель().Имя;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПустыеРешения(РеквизитРешение)

	ПустыеРешения = Новый Массив;
	Для Каждого ТипРешения Из РеквизитРешение.Тип.Типы() Цикл
		ПустыеРешения.Добавить(Новый(ТипРешения));
	КонецЦикла;
	Возврат ПустыеРешения;

КонецФункции

#КонецОбласти