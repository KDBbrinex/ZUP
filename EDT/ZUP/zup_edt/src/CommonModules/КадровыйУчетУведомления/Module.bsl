
#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.10";
	Обработчик.Процедура = "КадровыйУчетУведомления.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f7c97a46-5c7a-4ecc-83cd-40936467db8d");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений: дни рождения сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.176";
	Обработчик.Процедура = "КадровыйУчетУведомления.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("62b04792-e465-424b-b7d3-c2c3b13aea75");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений.'");
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// Процедура выполняет начальное заполнение данных подсистемы уведомлений
//
Процедура ПриНачальномЗаполненииДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("ДниРождения");
	
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		ПараметрыШаблона = Новый Структура();
		
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("ПредназначенДляSMS", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("ТипТекстаПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru='Поздравляем с днем рождения.
			|С уважением, [ДанныеУведомления.Организация]'"));
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru='Поздравление с днем рождения'"), ПараметрыШаблона);
		
		// 	Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления 	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта 	= Перечисления.ВидыТранспортаУведомлений.SMS;
		РассылкаОбъект.Наименование 	= НСтр("ru='Поздравление сотрудников с днем рождения'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Предмет";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		РассылкаОбъект.ВремяОтправки = Дата('00010101090000');
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
	КонецЕсли;
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("ГодовщиныРаботыВКомпании");
	
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		
		ПараметрыШаблона = Новый Структура();
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("ПредназначенДляSMS", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("ТипТекстаПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru = 'Спасибо, что вы с нами уже [ДанныеУведомления.ОтработаноЛетПредставление]
			|С уважением, [ДанныеУведомления.Организация]'"));
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Годовщины работы в компании'"), ПараметрыШаблона);
		
		// Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта	= Перечисления.ВидыТранспортаУведомлений.SMS;
		РассылкаОбъект.Наименование		= НСтр("ru = 'Годовщины работы в компании'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Предмет";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		РассылкаОбъект.ВремяОтправки = Дата('00010101090000');
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
		
	КонецЕсли;
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("ПервыйРабочийДень");
	
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		
		ПараметрыШаблона = Новый Структура();
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("ПредназначенДляSMS", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("ТипТекстаПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru = 'Поздравляем с первым рабочим днем
			|С уважением, [ДанныеУведомления.Организация]'"));
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Первый рабочий день'"), ПараметрыШаблона);
		
		// Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта	= Перечисления.ВидыТранспортаУведомлений.SMS;
		РассылкаОбъект.Наименование		= НСтр("ru = 'Первый рабочий день'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Предмет";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		РассылкаОбъект.ВремяОтправки = Дата('00010101090000');
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
		
	КонецЕсли;
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("ЕжегодноеСобытие");
	
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		
		ПараметрыШаблона = Новый Структура();
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("ПредназначенДляSMS", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("ТипТекстаПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru = 'Поздравляем с праздником
			|С уважением, [ДанныеУведомления.Организация]'"));
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Ежегодное событие'"), ПараметрыШаблона);
		
		// Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта	= Перечисления.ВидыТранспортаУведомлений.SMS;
		РассылкаОбъект.Наименование		= НСтр("ru = 'Ежегодное событие'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Предмет";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		РассылкаОбъект.ВремяОтправки = Дата('00010101090000');
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
		
	КонецЕсли;

	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет дополнить структуру видов уведомлений своими видами уведомлений. 
//
// Параметры:
//  СтруктураДоступныхВидовУведомлений - структура - перечень уведомлений, подключенных в подсистеме
//     * Ключ - Строка - Имя вида уведомления
//     * Значение - Структура - Описание вида уведомления (Структура)
//        * ВидУведомления - Строка, строковый идентификатор вида уведомления.
//        * Описание - Строка, Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//        * Инициализация - Строка, <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения
//                          запросов к базе данных.
//        * ПолучениеДанных - Строка, <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	ОписаниеВидаУведомления = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	ОписаниеВидаУведомления.ВидУведомления 	= НСтр("ru='Дни рождения сотрудников'");
	ОписаниеВидаУведомления.GUID 				= "6bb7c375-fe6e-4dac-b31a-f0c33932e2cd";
	ОписаниеВидаУведомления.Описание 			= НСтр("ru='Уведомление о днях рождения сотрудников.'");
	ОписаниеВидаУведомления.Инициализация 		= "КадровыйУчетУведомления.ИнициализацияВидаУведомленияДР";
	ОписаниеВидаУведомления.ПолучениеДанных 	= "КадровыйУчетУведомления.ПолучениеДанныхВидаУведомленияДР";
	
	СтруктураДоступныхВидовУведомлений.Вставить("ДниРождения", ОписаниеВидаУведомления);
	
	ОписаниеВидаУведомления = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	ОписаниеВидаУведомления.ВидУведомления	= НСтр("ru = 'Отработано лет в компании'");
	ОписаниеВидаУведомления.GUID			= "f93ea8ff-2bcc-4e74-a494-5f13d000bd16";
	ОписаниеВидаУведомления.Описание		= НСтр("ru = 'Годовщина работы в компании.'");
	ОписаниеВидаУведомления.Инициализация	= "КадровыйУчетУведомления.ИнициализацияВидаУведомленияОтработаноЛет";
	ОписаниеВидаУведомления.ПолучениеДанных	= "КадровыйУчетУведомления.ПолучениеДанныхВидаУведомленияОтработаноЛет";
	
	СтруктураДоступныхВидовУведомлений.Вставить("ГодовщиныРаботыВКомпании", ОписаниеВидаУведомления);
	
	ОписаниеВидаУведомления = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	ОписаниеВидаУведомления.ВидУведомления	= НСтр("ru = 'Первый рабочий день'");
	ОписаниеВидаУведомления.GUID			= "82ec4a43-ba62-4407-a6e0-24231bb8e214";
	ОписаниеВидаУведомления.Описание		= НСтр("ru = 'Прием на работу сотрудника.'");
	ОписаниеВидаУведомления.Инициализация	= "КадровыйУчетУведомления.ИнициализацияВидаУведомленияПервыйРабочийДень";
	ОписаниеВидаУведомления.КатегорияСобытия = Перечисления.КатегорииВидовУведомлений.ИзменениеОбъекта;
	
	СтруктураДоступныхВидовУведомлений.Вставить("ПервыйРабочийДень", ОписаниеВидаУведомления);
	
	ОписаниеВидаУведомления = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	ОписаниеВидаУведомления.ВидУведомления	= НСтр("ru = 'Ежегодное событие'");
	ОписаниеВидаУведомления.GUID			= "e200c56b-a2ec-416a-9ba4-6060a13b70fa";
	ОписаниеВидаУведомления.Описание		= НСтр("ru = 'Ежегодное событие.'");
	ОписаниеВидаУведомления.Инициализация	= "КадровыйУчетУведомления.ИнициализацияВидаУведомленияЕжегодноеСобытие";
	ОписаниеВидаУведомления.ПолучениеДанных	= "КадровыйУчетУведомления.ПолучениеДанныхВидаУведомленияЕжегодноеСобытие";
	
	СтруктураДоступныхВидовУведомлений.Вставить("ЕжегодноеСобытие", ОписаниеВидаУведомления);
	
КонецПроцедуры

// Позволяет переопределить имя типа шаблона сообщений по виду уведомления
//
// Параметры:
//   ИмяТипаШаблонаСообщений - Строка - имя типа предмета шаблона, которое необходимо переопределить
//   ВидУведомления - СправочникСсылка.ВидУведомления - связанный вид уведомления
Процедура ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ПервыйРабочийДень") Тогда
		ИмяТипаШаблонаСообщений = "Справочник.ФизическиеЛица";
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при подготовке шаблона сообщения и позволяет установить предмет 
// сообщения, отличный от предмета уведомления.
//
// Параметры:
//  СтрокаСообщения	 - СтрокаТЗ - строка данных уведомления, источник данных для переопределения предмета.
//  Предмет			 - ДокументСсылка, СправочникСсылка - предмет сообщения, который можно переопределить.
//
Процедура ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет) Экспорт
	
	Если СтрокаСообщения.ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ПервыйРабочийДень") Тогда
		Предмет = СтрокаСообщения.ПараметрыСобытия.Получить().ФизическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет заполнить поля, доступные для шаблона
//  соответствующего вида уведомлений.
//
// Параметры:
//  ВидУведомления           - СправочникСсылка.ВидУведомления - вид уведомления - владелец шаблона
//  Реквизиты                - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//                                      и др.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона        - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ДниРождения") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ФизическоеЛицо",НСтр("ru='Предмет'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаСобытия", НСтр("ru='День рождения (в текущем году)'"),Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Возраст", НСтр("ru='Возраст (исполняется), число'"), Новый ОписаниеТипов("Число"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ВозрастПредставление", НСтр("ru='Возраст (исполняется), строка'"), Новый ОписаниеТипов("Число"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Организация", НСтр("ru='Организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Подразделение", НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Должность", НСтр("ru='Должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаПриема", НСтр("ru='Дата приема'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
	ИначеЕсли ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ГодовщиныРаботыВКомпании") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ФизическоеЛицо",НСтр("ru='Предмет'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаПриема", НСтр("ru='Дата приема'"),Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаСобытия", НСтр("ru='Дата приема (в текущем году)'"),Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ОтработаноЛет", НСтр("ru='Отработано лет, число'"), Новый ОписаниеТипов("Число"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ОтработаноЛетПредставление", НСтр("ru='Отработано лет, строка'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Организация", НСтр("ru='Организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Подразделение", НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Должность", НСтр("ru='Должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ИначеЕсли ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ПервыйРабочийДень") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ФизическоеЛицо",НСтр("ru = 'Предмет'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаСобытия", НСтр("ru = 'Дата события'"),Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Организация", НСтр("ru = 'Организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Подразделение", НСтр("ru = 'Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Должность", НСтр("ru = 'Должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ИначеЕсли ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ЕжегодноеСобытие") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ФизическоеЛицо",НСтр("ru = 'Предмет'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаСобытия", НСтр("ru = 'Дата события'"),Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Организация", НСтр("ru = 'Организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Подразделение", НСтр("ru = 'Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Должность", НСтр("ru = 'Должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет переопределить стандартную обработку заполнения прошлого состояния объекта
// и установить свою.
//
// Параметры:
//   Объект                - ДокументОбъект, СправочникОбъект  - источник события - изменившийся объект.
//   СтандартнаяОбработка  - Булево                            - признак стандартной обработки.
//
Процедура ПередЗаписьюПредметаУведомленияОбИзменениях(Объект, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриемНаРаботу") Тогда
		Объект.ДополнительныеСвойства.Вставить("ПрошлоеЗначениеПроведен", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Проведен"));
		Объект.ДополнительныеСвойства.Вставить("ФизическоеЛицо", Объект.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет переопределить стандартную обработку события При записи объекта
// и установить свою.
//
// Параметры:
//   Объект                 - ДокументОбъект, СправочникОбъект  - источник события - изменившийся объект.
//   ЕстьРассылки           - Булево                            - признак наличия активных рассылок\
//   ДополнительныеСвойства - Структура                         - перечень параметров, сохраненных перед записью объекта.
//   СтандартнаяОбработка   - Булево                            - признак стандартной обработки.
//
Процедура ПриЗаписиПредметаУведомленияОбИзменениях(Объект, ЕстьРассылки, ДополнительныеСвойства, СтандартнаяОбработка, ВыполнятьПерезаписьПриНаличииВРегистре = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриемНаРаботу") Тогда
		ДополнительныеСвойства.Вставить("ТекущееЗначениеПроведен", Объект.Проведен);
		ВыполнятьПерезаписьПриНаличииВРегистре = (ДополнительныеСвойства.ТекущееЗначениеПроведен = Истина)
			И (ДополнительныеСвойства.ПрошлоеЗначениеПроведен = Ложь) И Объект.Дата >= НачалоДня(ТекущаяДатаСеанса());
		ДополнительныеСвойства.Вставить("Дата", Объект.Дата);
		ДополнительныеСвойства.Вставить("ФизическоеЛицо", Объект.ФизическоеЛицо);
		ДополнительныеСвойства.Вставить("ДатаПриема", Объект.ДатаПриема);
		ДополнительныеСвойства.Вставить("Ответственный", Объект.Ответственный);
		ДополнительныеСвойства.Вставить("Комментарий", Объект.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при формировании таблицы уведомлений по рассылкам типа "Изменение объекта"
//
// Параметры:
//    РассылкаУведомлений - СправочникСсылка.РассылкаУведомлений - обрабатываемая рассылка уведомлений.
//    ВидУведомления - СправочникСсылка.ВидыУведомлений - обрабатываемый вид уведомления
//    Предмет - СправочникСсылка, ДокументСсылка - ссылка на изменившийся объекта
//    ДатаИзменения - Дата - дата регистрации события изменения объекта.
//    ДополнительныеСвойства - Структура - Дополнительные свойства, которые были заполнены при регистрации изменения объекта
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПриСозданииУведомленийПоИзменениямОбъектов(РассылкаУведомлений, ВидУведомления, Предмет, ДатаИзменения, ДополнительныеСвойства, ТаблицаРезультата) Экспорт
	
	ИмяВидаУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидУведомления, "Имя");
	
	Если ИмяВидаУведомления = "ПервыйРабочийДень" Тогда
		ПрошлоеЗначениеПроведен = Неопределено;
		ТекущееЗначениеПроведен = Неопределено;
		ДополнительныеСвойства.Свойство("ПрошлоеЗначениеПроведен", ПрошлоеЗначениеПроведен);
		ДополнительныеСвойства.Свойство("ТекущееЗначениеПроведен", ТекущееЗначениеПроведен);
		Если ЗначениеЗаполнено(ПрошлоеЗначениеПроведен) И ЗначениеЗаполнено(ТекущееЗначениеПроведен) Тогда
			Если ПрошлоеЗначениеПроведен <> ТекущееЗначениеПроведен И ТекущееЗначениеПроведен = Истина Тогда
				СтрокаРезультата = ТаблицаРезультата.Добавить();
				СтрокаРезультата.Предмет = Предмет;
				СтрокаРезультата.ДатаСобытия = ДатаИзменения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Дни рождения"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияВидаУведомленияДР(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Предмет", НСтр("ru='Именинник'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ТекущаяОрганизация",	НСтр("ru='Текущая организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Подразделение",		НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ТекущаяДолжность",		НСтр("ru='Текущая должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Пол",					НСтр("ru='Пол'"), Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Возраст",				НСтр("ru='Возраст'"), Новый ОписаниеТипов("Число"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ОтработаноЛет",		НСтр("ru='Отработано, лет'"), Новый ОписаниеТипов("Число"));
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Отработано лет в компании"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияВидаУведомленияОтработаноЛет(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Предмет", НСтр("ru = 'Сотрудник'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Организация",		НСтр("ru='Организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Подразделение",	НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Должность",		НСтр("ru='Должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Пол",				НСтр("ru='Пол'"), Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ОтработаноЛет",	НСтр("ru='Отработано, лет'"), Новый ОписаниеТипов("Число"));
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Первый рабочий день"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияВидаУведомленияПервыйРабочийДень(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("ДокументСсылка.ПриемНаРаботу");
	
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Предмет", НСтр("ru = 'Сотрудник'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Организация",		НСтр("ru='Организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Подразделение",	НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Должность",		НСтр("ru='Должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Пол",				НСтр("ru='Пол'"), Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Первый рабочий день"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияВидаУведомленияЕжегодноеСобытие(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Предмет", НСтр("ru = 'Сотрудник'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Организация",		НСтр("ru='Организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Подразделение",	НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Должность",		НСтр("ru='Должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Пол",				НСтр("ru='Пол'"), Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	ДоступныеВидыСравнений = Новый Массив;
	ДоступныеВидыСравнений.Добавить(ВидСравнения.Равно);
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ДеньМесяца",		НСтр("ru='День месяца'"), Новый ОписаниеТипов("Число"), ДоступныеВидыСравнений);
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "НомерМесяца",		НСтр("ru='Номер месяца'"), Новый ОписаниеТипов("Число"), ДоступныеВидыСравнений);
	
КонецПроцедуры

// Процедура заполняет таблицу уведомлений по переданным параметрам и отборам.
//
// Параметры:
//    СтруктураПериода - Структура - два элемента - НачалоПериода и ОкончаниеПериода
//    Отборы - ТаблицаЗначений - перечень отборов событий, заданный пользователем
//       * ЛевоеЗначение - Строка - имя поля отбора в источнике данных.
//       * ВидСравнения - ВидСравнения - Вид сравнения
//       * ЛевоеЗначение - Булево, Число, Строка, Дата, ЛюбаяСсылка - значение отбора.
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПолучениеДанныхВидаУведомленияДР(СтруктураПериода, Знач Отборы, ТаблицаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода = СтруктураПериода.НачалоПериода;
	ОкончаниеПериода = СтруктураПериода.ОкончаниеПериода;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.НачалоПериода = НачалоПериода;
	Параметрыполучения.ОкончаниеПериода = ОкончаниеПериода;
	ПараметрыПолучения.КадровыеДанные =
		"ФизическоеЛицо, Организация, Пол, ВидЗанятости, ДатаПриема, ДатаУвольнения, Подразделение, Должность, ДатаРождения";
	ОтборОтработаноЛет = "";
	ОтборВозраст = "";
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.Использование Тогда
			ВидСравненияСтрокой = УведомленияСервер.ВидСравненияДляЗапроса(Отбор.ВидСравнения);
			Если Не ЗначениеЗаполнено(ВидСравненияСтрокой) Тогда
				Продолжить;
			КонецЕсли;
			Если Отбор.ЛевоеЗначение = "ТекущаяОрганизация" Тогда
				Отбор.ЛевоеЗначение = "Организация";
			ИначеЕсли Отбор.ЛевоеЗначение = "ТекущаяДолжность" Тогда
				Отбор.ЛевоеЗначение = "Должность";
			ИначеЕсли Отбор.ЛевоеЗначение = "Возраст" Тогда
				ОтборВозраст = "%1 " + ВидСравненияСтрокой + Отбор.ПравоеЗначение;
				Продолжить;
			ИначеЕсли Отбор.ЛевоеЗначение = "ОтработаноЛет" Тогда
				ОтборОтработаноЛет = "%1 " + ВидСравненияСтрокой + Отбор.ПравоеЗначение;
				Продолжить;
			КонецЕсли;
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолучения.Отборы, Отбор.ЛевоеЗначение, ВидСравненияСтрокой , Отбор.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Организация КАК Организация,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	КадровыеДанныеСотрудников.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников";

	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ДобавитьУсловияПериода(СхемаЗапроса, "КадровыеДанныеСотрудников.ДатаРождения", НачалоПериода, ОкончаниеПериода);
	
	Если ЗначениеЗаполнено(ОтборВозраст) Тогда
		ВыражениеПоляДата = "КадровыеДанныеСотрудников.ДатаРождения";
		ВыражениеПоляДатаУвольнения = "КадровыеДанныеСотрудников.ДатаУвольнения";
		ДобавитьУсловияПериода(СхемаЗапроса, ВыражениеПоляДата, НачалоПериода, ОкончаниеПериода);
		ДополнитьСхемуЗапросаРазностьЛет(СхемаЗапроса, ВыражениеПоляДата, ВыражениеПоляДатаУвольнения,
			НачалоПериода, ОкончаниеПериода, "Возраст", ОтборВозраст);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтработаноЛет) Тогда
		ВыражениеПоляДата = "КадровыеДанныеСотрудников.ДатаПриема";
		ВыражениеПоляДатаУвольнения = "КадровыеДанныеСотрудников.ДатаУвольнения";
		ДобавитьУсловияПериода(СхемаЗапроса, ВыражениеПоляДата, НачалоПериода, ОкончаниеПериода);
		ДополнитьСхемуЗапросаРазностьЛет(СхемаЗапроса, ВыражениеПоляДата, ВыражениеПоляДатаУвольнения,
			НачалоПериода, ОкончаниеПериода, "ОтработаноЛет", ОтборОтработаноЛет);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("МесяцНачала", Месяц(НачалоПериода));
	Запрос.УстановитьПараметр("МесяцОкончания", Месяц(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ДеньНачала", День(НачалоПериода));
	Запрос.УстановитьПараметр("ДеньОкончания", День(ОкончаниеПериода));
	
	Если ЗначениеЗаполнено(ОтборВозраст) Или ЗначениеЗаполнено(ОтборОтработаноЛет) Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	КонецЕсли;
		
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаВозраста = Дата(Год(НачалоПериода), Месяц(Выборка.ДатаРождения), День(Выборка.ДатаРождения));
		Если ДатаВозраста < НачалоПериода Тогда
			ДатаВозраста = Дата(Год(ОкончаниеПериода), Месяц(Выборка.ДатаРождения), День(Выборка.ДатаРождения));
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаУвольнения) И Выборка.ДатаУвольнения < ДатаВозраста Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаРезультата.Добавить();
		СтрокаТаблицы.Предмет = Выборка.ФизическоеЛицо;
		СтрокаТаблицы.ДатаСобытия = ДатаВозраста;
		ПараметрыСобытия = Новый Структура(
			"Организация, Подразделение, Должность, ДатаПриема, ДатаУвольнения, ВидЗанятости, Пол, Возраст, ВозрастПредставление");
		ЗаполнитьЗначенияСвойств(ПараметрыСобытия, Выборка);
		ПараметрыСобытия.Возраст = ФизическиеЛицаЗарплатаКадрыКлиентСервер.Возраст(Выборка.ДатаРождения, ДатаВозраста);
		ПараметрыСобытия.ВозрастПредставление = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Выборка.ДатаРождения, ДатаВозраста);
		СтрокаТаблицы.ПараметрыСобытия = ПараметрыСобытия;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет таблицу уведомлений по переданным параметрам и отборам.
//
// Параметры:
//    СтруктураПериода - Структура - два элемента - НачалоПериода и ОкончаниеПериода
//    Отборы - ТаблицаЗначений - перечень отборов событий, заданный пользователем
//       * ЛевоеЗначение - Строка - имя поля отбора в источнике данных.
//       * ВидСравнения - ВидСравнения - Вид сравнения
//       * ЛевоеЗначение - Булево, Число, Строка, Дата, ЛюбаяСсылка - значение отбора.
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПолучениеДанныхВидаУведомленияОтработаноЛет(СтруктураПериода, Знач Отборы, ТаблицаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода = СтруктураПериода.НачалоПериода;
	ОкончаниеПериода = СтруктураПериода.ОкончаниеПериода;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.НачалоПериода = НачалоПериода;
	ПараметрыПолучения.ОкончаниеПериода = ОкончаниеПериода;
	ПараметрыПолучения.КадровыеДанные = "ФизическоеЛицо, Организация, Подразделение, Должность, ДатаПриема, ДатаУвольнения, ВидЗанятости, Пол";

	ОтборОтработаноЛет = "";
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.Использование Тогда
			ВидСравненияСтрокой = УведомленияСервер.ВидСравненияДляЗапроса(Отбор.ВидСравнения);
			Если Не ЗначениеЗаполнено(ВидСравненияСтрокой) Тогда
				Продолжить;
			КонецЕсли;
			Если Отбор.ЛевоеЗначение = "ОтработаноЛет" Тогда
				ОтборОтработаноЛет = "%1 " + ВидСравненияСтрокой + Отбор.ПравоеЗначение;
				Продолжить;
			КонецЕсли;
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолучения.Отборы, Отбор.ЛевоеЗначение, ВидСравненияСтрокой , Отбор.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Организация КАК Организация,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	КадровыеДанныеСотрудников.Пол КАК Пол
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников";
	
	ВыражениеПоляДата = "КадровыеДанныеСотрудников.ДатаПриема";
	ВыражениеПоляДатаУвольнения = "КадровыеДанныеСотрудников.ДатаУвольнения";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ДобавитьУсловияПериода(СхемаЗапроса, ВыражениеПоляДата, НачалоПериода, ОкончаниеПериода);
	ДополнитьСхемуЗапросаРазностьЛет(СхемаЗапроса, ВыражениеПоляДата, ВыражениеПоляДатаУвольнения,
		НачалоПериода, ОкончаниеПериода, "ОтработаноЛет", ОтборОтработаноЛет);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();

	Запрос.УстановитьПараметр("МесяцНачала", Месяц(НачалоПериода));
	Запрос.УстановитьПараметр("МесяцОкончания", Месяц(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ДеньНачала", День(НачалоПериода));
	Запрос.УстановитьПараметр("ДеньОкончания", День(ОкончаниеПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаРезультата.Добавить();
		СтрокаТаблицы.Предмет = Выборка.ФизическоеЛицо;
		СтрокаТаблицы.ДатаСобытия = Выборка.ДатаСобытияОтработаноЛет;
		ПараметрыСобытия = Новый Структура(
			"Организация, Подразделение, Должность, ДатаПриема, ДатаУвольнения, ВидЗанятости, Пол, ОтработаноЛет, ОтработаноЛетПредставление");
		ЗаполнитьЗначенияСвойств(ПараметрыСобытия, Выборка);
		ПараметрыСобытия.ОтработаноЛет = Выборка.РазностьЛетОтработаноЛет;
		ПараметрыСобытия.ОтработаноЛетПредставление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 год;;%1 года;%1 лет;'"), Выборка.РазностьЛетОтработаноЛет);
		СтрокаТаблицы.ПараметрыСобытия = ПараметрыСобытия;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет таблицу уведомлений по переданным параметрам и отборам.
//
// Параметры:
//    СтруктураПериода - Структура - два элемента - НачалоПериода и ОкончаниеПериода
//    Отборы - ТаблицаЗначений - перечень отборов событий, заданный пользователем
//       * ЛевоеЗначение - Строка - имя поля отбора в источнике данных.
//       * ВидСравнения - ВидСравнения - Вид сравнения
//       * ЛевоеЗначение - Булево, Число, Строка, Дата, ЛюбаяСсылка - значение отбора.
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПолучениеДанныхВидаУведомленияЕжегодноеСобытие(СтруктураПериода, Знач Отборы, ТаблицаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода = СтруктураПериода.НачалоПериода;
	ОкончаниеПериода = СтруктураПериода.ОкончаниеПериода;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.НачалоПериода = НачалоПериода;
	ПараметрыПолучения.ОкончаниеПериода = ОкончаниеПериода;
	ПараметрыПолучения.КадровыеДанные = "ФизическоеЛицо, Организация, Подразделение, Должность, ВидЗанятости, Пол";

	ДеньМесяца = 0;
	НомерМесяца = 0;
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.Использование Тогда
			Если Отбор.ЛевоеЗначение = "ДеньМесяца" Тогда
				ДеньМесяца = Отбор.ПравоеЗначение;
				Продолжить;
			ИначеЕсли Отбор.ЛевоеЗначение = "НомерМесяца" Тогда
				НомерМесяца = Отбор.ПравоеЗначение;
				Продолжить;
			КонецЕсли;
			
			ВидСравненияСтрокой = УведомленияСервер.ВидСравненияДляЗапроса(Отбор.ВидСравнения);
			Если Не ЗначениеЗаполнено(ВидСравненияСтрокой) Тогда
				Продолжить;
			КонецЕсли;

			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолучения.Отборы, Отбор.ЛевоеЗначение, ВидСравненияСтрокой , Отбор.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ДеньМесяца > 0 И Не НомерМесяца > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСобытия = ДатаСобытияВПериоде(НачалоПериода, ОкончаниеПериода, ДеньМесяца, НомерМесяца);
	Если ДатаСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Организация КАК Организация,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Подразделение КАК Должность,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	КадровыеДанныеСотрудников.Пол КАК Пол
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаРезультата.Добавить();
		СтрокаТаблицы.Предмет = Выборка.ФизическоеЛицо;
		СтрокаТаблицы.ДатаСобытия = ДатаСобытия;
		ПараметрыСобытия = Новый Структура(
			"Организация, Подразделение, Должность, ВидЗанятости, Пол");
		ЗаполнитьЗначенияСвойств(ПараметрыСобытия, Выборка);
		СтрокаТаблицы.ПараметрыСобытия = ПараметрыСобытия;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьУсловияПериода(СхемаЗапроса, ВыражениеПоляДаты, НачалоПериода, ОкончаниеПериода)
	
	Если Не ДобавитьМесяц(НачалоПериода, 12) > ОкончаниеПериода Тогда
		Возврат;
	КонецЕсли;
	
	Пакет0 = СхемаЗапроса.ПакетЗапросов[0];
	Оператор0 = Пакет0.Операторы[0];
	
	ШаблонУсловияПоМесяцам =
		СтрШаблон("МЕСЯЦ(%1) >= &МесяцНачала %2 МЕСЯЦ(%1) <= &МесяцОкончания", ВыражениеПоляДаты, "%1");
	ШаблонУсловияПоДням =
		СтрШаблон("ДЕНЬ(%1) >= &ДеньНачала %2 ДЕНЬ(%1) <= &ДеньОкончания", ВыражениеПоляДаты, "%1");
	
	Если Год(НачалоПериода) = Год(ОкончаниеПериода) Тогда
		ЛогическийОператор = "И";
	Иначе
		ЛогическийОператор = "ИЛИ";
	КонецЕсли;
	Оператор0.Отбор.Добавить(Новый ВыражениеСхемыЗапроса(СтрШаблон(ШаблонУсловияПоМесяцам, ЛогическийОператор)));
	Если Месяц(НачалоПериода) = Месяц(ОкончаниеПериода) Тогда
		ЛогическийОператор = "И";
	Иначе
		ЛогическийОператор = "ИЛИ";
	КонецЕсли;
	Оператор0.Отбор.Добавить(Новый ВыражениеСхемыЗапроса(СтрШаблон(ШаблонУсловияПоДням, ЛогическийОператор)));

КонецПроцедуры

Процедура ДополнитьСхемуЗапросаРазностьЛет(СхемаЗапроса, ВыражениеПоляДата, ВыражениеПоляДатаУвольнения, НачалоПериода, ОкончаниеПериода, ДополнениеПсевдонима = "", ШаблонОтбора = "")
	
	Пакет0 = СхемаЗапроса.ПакетЗапросов[0];
	Оператор0 = Пакет0.Операторы[0];
	
	Если Год(НачалоПериода) = Год(ОкончаниеПериода) Тогда
		ПолеДатаСобытия = СтрШаблон("ДОБАВИТЬКДАТЕ(%1, ГОД, РАЗНОСТЬДАТ(%1, &НачалоПериода, ГОД))", ВыражениеПоляДата);
	Иначе
		ПолеДатаСобытия = СтрШаблон(
			"ВЫБОР
			|	КОГДА ДОБАВИТЬКДАТЕ(%1, ГОД, РАЗНОСТЬДАТ(%1, &НачалоПериода, ГОД)) < &НачалоПериода
			|		ТОГДА ДОБАВИТЬКДАТЕ(%1, ГОД, РАЗНОСТЬДАТ(%1, &НачалоПериода, ГОД) + 1)
			|	ИНАЧЕ ДОБАВИТЬКДАТЕ(%1, ГОД, РАЗНОСТЬДАТ(%1, &НачалоПериода, ГОД))
			|КОНЕЦ", ВыражениеПоляДата);
	КонецЕсли;
	Оператор0.ВыбираемыеПоля.Добавить(ПолеДатаСобытия);
	Пакет0.Колонки[Пакет0.Колонки.Количество() - 1].Псевдоним = СтрШаблон("ДатаСобытия%1", ДополнениеПсевдонима);
	
	ПолеРазностьЛет = СтрШаблон("РАЗНОСТЬДАТ(%1, %2, ГОД)", ВыражениеПоляДата, ПолеДатаСобытия);
	Оператор0.ВыбираемыеПоля.Добавить(ПолеРазностьЛет);
	Пакет0.Колонки[Пакет0.Колонки.Количество() - 1].Псевдоним =  СтрШаблон("РазностьЛет%1", ДополнениеПсевдонима);
		
	УсловиеУволенных = СтрШаблон(
	"ВЫБОР
	|	КОГДА %1 = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ %1 < %2
	|КОНЕЦ", ВыражениеПоляДатаУвольнения, ПолеДатаСобытия);
		
	Оператор0.Отбор.Добавить(Новый ВыражениеСхемыЗапроса(УсловиеУволенных));
		
	Если ЗначениеЗаполнено(ШаблонОтбора) Тогда
		Оператор0.Отбор.Добавить(Новый ВыражениеСхемыЗапроса(СтрШаблон(ШаблонОтбора, ПолеРазностьЛет)));
	КонецЕсли;

КонецПроцедуры

Функция ДатаСобытияВПериоде(НачалоПериода, ОкончаниеПериода, ДеньМесяца, НомерМесяца)
	
	ГодНачало = Год(НачалоПериода);
	ГодОкончание = Год(ОкончаниеПериода);
	
	Если ГодНачало = ГодОкончание Тогда
		ДатаСобытия = Дата(ГодНачало, НомерМесяца, ДеньМесяца);
		Если ДатаСобытия >= НачалоПериода И ДатаСобытия <= ОкончаниеПериода Тогда
			Возврат ДатаСобытия;
		КонецЕсли;
	Иначе
		ДатаСобытия = Дата(ГодНачало, НомерМесяца, ДеньМесяца);
		Если ДатаСобытия >= НачалоПериода И ДатаСобытия <= КонецГода(НачалоПериода) Тогда
			Возврат ДатаСобытия;
		КонецЕсли;
		ДатаСобытия = Дата(ГодНачало + 1, НомерМесяца, ДеньМесяца);
		Если ДатаСобытия >= КонецГода(НачалоПериода) + 1 И ДатаСобытия <= ОкончаниеПериода Тогда
			Возврат ДатаСобытия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
