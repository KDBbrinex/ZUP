#Область ПрограммныйИнтерфейс

#Область ЭтапыРаботыСКандидатами

// Возвращает таблицу с данными по этапу работу с кандидатами.
//
// Параметры:
//	Кандидаты				- Массив - ссылки на элементы справочника Кандидаты.
//	ЭтапРаботы				- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений, содержащая поля:
//		* Кандидат			- СправочникСсылка.Кандидаты - кандидат, приглашенный на этап.
//		* ЭтапРаботы		- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//		* Бронь				- ДокументСсылка.Бронь - документ бронирующий помещение для проводимого этапа.
//		* Помещение			- СправочникСсылка.ТерриторииИПомещения - помещение, в котором будет проходить этап.
//		* Период			- Дата - дата и время начала проведения этапа.
//		* ПериодОкончание	- Дата - дата и время окончания проведения этапа.
//
Функция ДанныеЭтапаРаботыСКандидатами(Кандидаты, ЭтапРаботы) Экспорт
	
	Запрос = ЗапросДанныеЭтапаРаботыСКандидатами(Новый МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы);
	ДанныеЭтапаРаботы = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеЭтапаРаботы;
	
КонецФункции

// Формирует временную таблицу ВТДанныеЭтапаРаботы содержащую поля:
//		* Кандидат			- СправочникСсылка.Кандидаты - кандидат, приглашенный на этап.
//		* ЭтапРаботы		- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//		* Бронь				- ДокументСсылка.Бронь - документ бронирующий помещение для проводимого этапа.
//		* Помещение			- СправочникСсылка.ТерриторииИПомещения - помещение, в котором будет проходить этап.
//		* Период			- Дата - дата и время начала проведения этапа.
//		* ПериодОкончание	- Дата - дата и время окончания проведения этапа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет сформирована временная таблица.
//	Кандидаты				- Массив - ссылки на элементы справочника Кандидаты.
//	ЭтапРаботы				- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//
Процедура СоздатьВТДанныеЭтапаРаботыСКандидатами(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы) Экспорт
	
	Запрос = ЗапросДанныеЭтапаРаботыСКандидатами(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы);
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТДанныеЭтапаРаботы");
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	Объекты.Добавить(Метаданные.Справочники.Вакансии);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.Взаимодействия

// См. ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаВзаимодействий(Объект, Таблица) Экспорт
	ЗаполнитьНаборЗначенийДоступаВзаимодействияСПредметомКандидатом(Объект, Таблица);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Взаимодействия

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "ПодборПерсонала";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("8ff2b10d-ae8f-4065-984f-a3a9113f001e");
	Раздел.Представление = НСтр("ru = 'Подбор персонала'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));

КонецПроцедуры

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе") Тогда
		Возврат;
	КонецЕсли;
	
	Обработчики.Добавить(ПодборПерсонала);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат; // Модель сервиса.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта("Справочник.Кандидаты");
	Если Разделы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадержавшиесяКандидаты = ПодборПерсоналаПроверки.ЗадержавшиесяКандидатыДляТекущихДел();
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗадержавшиесяКандидаты";
		Дело.ЕстьДела       = Истина;
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Задержавшиеся кандидаты'");
		Дело.Количество     = ЗадержавшиесяКандидаты.Количество();
		Дело.Форма          = "Справочник.Кандидаты.Форма.ФормаСписка";
		Дело.ПараметрыФормы = Новый Структура("ЗадержавшиесяКандидаты", ЗадержавшиесяКандидаты);
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

// СтандартныеПодсистемы.РегламентныеЗадания

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// ТехнологияСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе.ИмяМетода);
КонецПроцедуры

// Конец ТехнологияСервиса.ОчередьЗаданий

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Подбор персонала'");
	ГруппаПроверок.Идентификатор				= "КонтрольПодбораПерсонала";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Наличие кандидатов, задержавшихся на одном этапе'");
	Проверка.Причины						= НСтр("ru = 'Кандидат долгое время находится на одном этапе'");
	Проверка.Рекомендация					= НСтр("ru = 'Продолжить работу с кандидатом или отклонить его (если работа завершена)'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаНаличияЗадержавшихсяКандидатов";
	Проверка.ОбработчикПроверки				= "ПодборПерсоналаПроверки.ПроверкаНаличияЗадержавшихсяКандидатов";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

#КонецОбласти

// Формирует таблицу значений с данными всех разрешенных кандидатов указанных физических лиц.
//
// Параметры:
//	ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица. 
//
// Возвращаемое значение - таблица значений
//
Функция КандидатыФизическихЛиц(ФизическиеЛица) Экспорт
	Возврат Справочники.Кандидаты.КандидатыФизическихЛиц(ФизическиеЛица);
КонецФункции

// Добавляет в таблицу взаимоотношений сведения о кандидатах физических лиц.
// 
// Параметры:
// 	Взаимоотношения - ТаблицаЗначений - см. СотрудникиФормы.ТаблицаИсторииВзаимоотношений.
//	ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица.
// 
Процедура ДополнитьИсториюВзаимоотношенийФизическихЛицКандидатами(Взаимоотношения, ФизическиеЛица) Экспорт
	
	Если Не Справочники.Кандидаты.ИспользоватьКандидатов() Тогда
		Возврат;
	КонецЕсли;
	
	Кандидаты = КандидатыФизическихЛиц(ФизическиеЛица);

	Для Каждого СтрокаДанных Из Кандидаты Цикл
		НоваяСтрока = Взаимоотношения.Добавить();
		НоваяСтрока.Ссылка = СтрокаДанных.Кандидат;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.Роль = СотрудникиФормы.РолиФизическогоЛицаИсторииВзаимоотношений().Кандидат;
		НоваяСтрока.ГруппаРоли = СотрудникиФормы.РолиФизическогоЛицаИсторииВзаимоотношений().Кандидат;
		НоваяСтрока.ДатаАктуальности = СтрокаДанных.ДатаРегистрации;
		Если Перечисления.СостоянияСогласования.РешениеПринято(СтрокаДанных.Состояние) Тогда
			НоваяСтрока.ДатаАктуальности = СтрокаДанных.ДатаРешения;
		КонецЕсли;
		НоваяСтрока.Примечание = ОписаниеКандидатаДляСтрокиИсторииВзаимоотношений(СтрокаДанных);
	КонецЦикла;
	
КонецПроцедуры

// См. СотрудникиФормы.РолиФизическогоЛицаИсторииВзаимоотношений.
// 
Процедура ПриЗаполненииРолейФизическогоЛица(Роли) Экспорт
	
	Если Не Справочники.Кандидаты.ИспользоватьКандидатов() Тогда
		Возврат;
	КонецЕсли;

	Роли.Вставить("Кандидат", 3);

КонецПроцедуры

// Формирует таблицу откликов кандидатов на указанную вакансию.
//
//
Функция ОткликиКандидатов(ОтборВакансий, ТолькоНеРассмотренные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Справочники.Вакансии.СоздатьВТВакансииПоОтбору(Запрос.МенеджерВременныхТаблиц, ОтборВакансий);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОткликиКандидатов.Вакансия КАК Вакансия,
		|	ОткликиКандидатов.НомерОтклика КАК НомерОтклика,
		|	ОткликиКандидатов.Фамилия,
		|	ОткликиКандидатов.Имя,
		|	ОткликиКандидатов.Отчество,
		|	ОткликиКандидатов.ДатаРождения,
		|	ОткликиКандидатов.Адрес,
		|	ОткликиКандидатов.Телефон,
		|	ОткликиКандидатов.EMail,
		|	ОткликиКандидатов.Сообщение,
		|	ОткликиКандидатов.ФайлРезюме,
		|	ОткликиКандидатов.Источник,
		|	ОткликиКандидатов.ДатаОтклика,
		|	ОткликиКандидатов.Рассмотрено
		|ИЗ
		|	РегистрСведений.ОткликиКандидатов КАК ОткликиКандидатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВакансииПоОтбору КАК ВакансииПоОтбору
		|		ПО (ВакансииПоОтбору.Вакансия = ОткликиКандидатов.Вакансия)
		|			И (ОткликиКандидатов.Рассмотрено = ЛОЖЬ
		|				ИЛИ &ТолькоНеРассмотренные <> ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вакансия,
		|	НомерОтклика";
		
	Запрос.УстановитьПараметр("ТолькоНеРассмотренные", ТолькоНеРассмотренные);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Для указанных откликов кандидатов устанавливает отметку о том, что отклик рассмотрен.
//
// Параметры 
//	- ОткликиКандидатов - таблица значений, см. ПустаяТаблицаОткликиКандидатов.
//
Процедура УстановитьОткликамКандидатовОтметкуРассмотрено(ОткликиКандидатов) Экспорт
	
	Для Каждого Отклик Из ОткликиКандидатов Цикл
		МенеджерЗаписи = РегистрыСведений.ОткликиКандидатов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Вакансия = Отклик.Вакансия;
		МенеджерЗаписи.НомерОтклика = Отклик.НомерОтклика;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Рассмотрено Тогда
			МенеджерЗаписи.Рассмотрено = Истина;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаОткликиКандидатов() Экспорт
	
	ОткликиКандидатов = Новый ТаблицаЗначений;
	ОткликиКандидатов.Колонки.Добавить("Вакансия", Новый ОписаниеТипов("СправочникСсылка.Вакансии"));
	ОткликиКандидатов.Колонки.Добавить("НомерОтклика", Новый ОписаниеТипов("Число"));
	
	Возврат ОткликиКандидатов;
	
КонецФункции

// Выбирает причину отклонения кандидата, используемую по умолчанию.
//
Функция ПричинаОтклоненияКандидатаПоУмолчанию() Экспорт
	
	Возврат ПодборПерсоналаПовтИсп.ПричинаОтклоненияКандидатаПоУмолчанию();
	
КонецФункции

// Синхронизирует наименования кандидатов при смене ФИО физического лица.
//
Процедура ИзменитьНаименованиеКандидатов(МенеджерВременныхТаблиц) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	ФИОФизЛицПоследнее.Фамилия,
		|	ФИОФизЛицПоследнее.Имя,
		|	ФИОФизЛицПоследнее.Отчество,
		|	Кандидаты.УточнениеНаименования,
		|	Кандидаты.Наименование КАК НаименованиеКандидата,
		|	ФизическиеЛица.УточнениеНаименования КАК УточнениеНаименованияФизЛица
		|ИЗ
		|	ВТФИОФизЛицПоследнее КАК ФИОФизЛицПоследнее
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК Кандидаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ПО Кандидаты.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|		ПО ФИОФизЛицПоследнее.ФизическоеЛицо = Кандидаты.ФизическоеЛицо";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.НаименованиеКандидата);
		НаименованиеКандидата = СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;
		
		ПолноеНаименованиеКандидата = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				Выборка.Фамилия,
				Выборка.Имя,
				Выборка.Отчество,
				Выборка.УточнениеНаименованияФизЛица,
				Выборка.УточнениеНаименования);
		
		Если СокрЛП(НаименованиеКандидата) = ПолноеНаименованиеКандидата Тогда
			Продолжить;
		КонецЕсли;
		
		КандидатОбъект = Выборка.Кандидат.ПолучитьОбъект();
		
		Попытка 
			КандидатОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить имя кандидата %1.
				|Возможно, данные кандидата редактируются другим пользователем'"),
				КандидатОбъект.Наименование);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		КандидатОбъект.Наименование = ПолноеНаименованиеКандидата;
		КандидатОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСостояниеЭтапаРаботыКандидата(Кандидат, ЭтапРаботы, ПрежниеДанныеЭтапа) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.РаботаСКандидатами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Кандидат = Кандидат;
	
	Если ЗначениеЗаполнено(ПрежниеДанныеЭтапа.Период) Тогда
		МенеджерЗаписи.Период = ПрежниеДанныеЭтапа.Период;
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтапРаботы.Период) Тогда
		МенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.Период = ЭтапРаботы.Период;
	МенеджерЗаписи.ЭтапРаботы = ЭтапРаботы.Этап;
	МенеджерЗаписи.СостояниеЭтапа = ЭтапРаботы.Состояние;
	МенеджерЗаписи.Комментарий = ЭтапРаботы.Комментарий;
	МенеджерЗаписи.ШаблонАнкеты = ЭтапРаботы.ШаблонАнкеты;
	
	Если ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		МенеджерЗаписи.ПериодОкончание = ЭтапРаботы.ПериодОкончание;
		МенеджерЗаписи.Бронь = ЭтапРаботы.Бронь;
	Иначе
		Если ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
			МенеджерЗаписи.Бронь = ПрежниеДанныеЭтапа.Бронь;
		Иначе
			МенеджерЗаписи.Бронь = Неопределено;
		КонецЕсли;
		МенеджерЗаписи.ПериодОкончание = Неопределено;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ОписаниеОткликаНаВакансию() Экспорт
	
	Описание = Новый Структура(
		"Фамилия, 
		|Имя, 
		|Отчество, 
		|ДатаРождения, 
		|Адрес, 
		|Телефон, 
		|EMail, 
		|Сообщение, 
		|ФайлРезюме, 
		|Источник, 
		|ДатаОтклика, 
		|ИдентификаторРезюме, 
		|АдресРезюме");
	
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьОткликНаВакансию(Вакансия, ОписаниеОтклика, НомерОтклика = Неопределено) Экспорт
	
	Если НомерОтклика = Неопределено Тогда
		НомерОтклика = РегистрыСведений.ОткликиКандидатов.НомерПоследнегоОтклика(Вакансия) + 1;
	КонецЕсли;
	
	ОткликЗапись = РегистрыСведений.ОткликиКандидатов.СоздатьМенеджерЗаписи();
	ОткликЗапись.Вакансия = Вакансия;
	ОткликЗапись.НомерОтклика = НомерОтклика;
	ЗаполнитьЗначенияСвойств(ОткликЗапись, ОписаниеОтклика);
	ОткликЗапись.Записать(Истина);
	
КонецПроцедуры

Функция ПланируемаяДатаЗакрытияПоУмолчанию(ДатаОткрытия) Экспорт
	
	Настройки = РегистрыСведений.НастройкиПодбораПерсонала.ЗначенияНастроек();
	Если Настройки.ЕдиницаИзмеренияПериодаРаботыСВакансией = Перечисления.Периодичность.День Тогда
		Возврат ДатаОткрытия + (ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах() * Настройки.ПериодРаботыСВакансией);
	ИначеЕсли Настройки.ЕдиницаИзмеренияПериодаРаботыСВакансией = Перечисления.Периодичность.Месяц Тогда
		Возврат ДобавитьМесяц(ДатаОткрытия, Настройки.ПериодРаботыСВакансией);
	Иначе
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
КонецФункции

#Область РегламентныеЗадания

// Регламентное задание ОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе
//
Процедура ОтклонитьКандидатовЗадержавшихсяНаОдномЭтапе() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РезультатПроверкиНаличияЗадержавшихсяКандидатовНаОтклонение();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Кандидаты = Результат.Выгрузить().ВыгрузитьКолонку("Кандидат");
	Решение = ПодборПерсоналаКлиентСервер.ОписаниеРешенияПоКандидату();
	Решение.Решение = Перечисления.СостоянияСогласования.Отклонено;
	Решение.ДатаРешения = ТекущаяДатаСеанса();
	Решение.Причина = РегистрыСведений.НастройкиПодбораПерсонала.ЗначенияНастроек().ПричинаАвтоматическогоОтклонения;
	РезультатВыбора = ПодборПерсоналаКлиентСервер.ОписаниеРешенияПоКандидатам();
	РезультатВыбора.Кандидаты = Кандидаты;
	РезультатВыбора.Решение = Решение;
	УстановитьРешениеПоКандидатам(Кандидаты, РезультатВыбора);
	
	Проверка = КонтрольВеденияУчета.ПроверкаПоИдентификатору("КонтрольПодбораПерсонала.ПроверкаНаличияЗадержавшихсяКандидатов");
	КонтрольВеденияУчета.ВыполнитьПроверку(Проверка);
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаПодборПерсонала", "ПланируемаяДатаЗакрытия", "ПодборПерсонала", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РасходыНаИсточникИнформацииОКандидатах", "НачалоПериодаОказанияУслуги", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОплатаПубликацийВакансий", "НачалоПериодаОказанияУслуги", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасходыНаИсточникиИнформацииОКандидатах", "Период", "ПодборПерсонала", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.Кандидаты";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Наименование,ДатаРегистрации,Резюме,РезюмеТекст,ОжидаемыйДоход,ДатаРешения,КомментарийРешения,ПричинаОтклонения,Состояние";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";

КонецПроцедуры

// См. НастройкиПрограммыПереопределяемый.НастройкиПользователейИПравПриСозданииНаСервере.
Процедура НастройкиПользователейИПравПриСозданииНаСервере(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаДнейДоСкрытия", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ИспользоватьСкрытиеПерсональныхДанных", "Доступность", Ложь);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСкрытиеПерсональныхДанныхКандидатов") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДнейДоСкрытияПерсональныхДанныхСубъектов", "Доступность", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов.
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, Отказ) Экспорт
	
	Отказ = Ложь;
	ПричинаОтменыСкрытия = НСтр("ru = 'субъект не является кандидатом на должность'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ТекущиеСубъектыИсключения = ТаблицаИсключений.ВыгрузитьКолонку("Субъект");
	ТекущиеСубъектыДляСкрытия = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Субъекты, ТекущиеСубъектыИсключения);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеКандидатов = Справочники.Кандидаты.КандидатыФизическихЛиц(ТекущиеСубъектыДляСкрытия);
	УстановитьПривилегированныйРежим(Ложь);
	
	СубъектыДляСкрытия = ДанныеКандидатов.ВыгрузитьКолонку("ФизическоеЛицо");
	СубъектыДляСкрытия = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СубъектыДляСкрытия);
	
	НовыеСубъектыИсключения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеСубъектыДляСкрытия, СубъектыДляСкрытия);
	
	Для Каждого Субъект Из НовыеСубъектыИсключения Цикл
		
		НовоеИсключение = ТаблицаИсключений.Добавить();
		НовоеИсключение.Субъект = Субъект;
		НовоеИсключение.ПричинаОтменыСкрытия = ПричинаОтменыСкрытия;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСкрытииПерсональныхДанныхКандидата(Объект, Отказ) Экспорт
	
	Если Не Объект.ДополнительныеСвойства.Свойство("СкрытиеКонфиденциальнойИнформации") Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, Файлы);
	
	Для Каждого Файл Из Файлы Цикл
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ПометкаУдаления = Истина;
		ФайлОбъект.ДополнительныеСвойства.Вставить("СкрытиеКонфиденциальнойИнформации");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФайлОбъект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf76-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявкаНаПодборПерсонала);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf5a-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Вакансии);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf71-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ИсточникиИнформацииОКандидатах);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf95-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Кандидаты);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4ef-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПричиныОтклоненияКандидатов);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПричиныОткрытияВакансий);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfbf-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПрофилиДолжностей);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ЭтапыРаботыСКандидатами);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.ОценкаЭффективностиИсточниковИнформации") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf99-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РасходыНаИсточникИнформацииОКандидатах);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	Списки.Вставить(Метаданные.Справочники.Вакансии, Истина);
	Списки.Вставить(Метаданные.Справочники.ВакансииПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.Кандидаты, Истина);
	Списки.Вставить(Метаданные.Справочники.КандидатыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаНаПодборПерсонала, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаНаПодборПерсоналаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.КомментарииКандидатов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПротоколыОтправкиСообщенийКандидатам, Истина);
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.ОценкаЭффективностиИсточниковИнформации
	Списки.Вставить(Метаданные.Документы.РасходыНаИсточникИнформацииОКандидатах, Истина);
	Списки.Вставить(Метаданные.Справочники.РасходыНаИсточникИнформацииОКандидатахПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОплатаПубликацийВакансий, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.РасходыНаИсточникиИнформацииОКандидатах, Истина);
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.ОценкаЭффективностиИсточниковИнформации
	
КонецПроцедуры

Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт 

	ОписаниеПрофиля = ОписаниеПрофиляМенеджерПоНаборуПерсонала();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

	ОписаниеПрофиля = ОписаниеПрофиляСтаршийМенеджерПоНаборуПерсонала();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДополнитьОписаниеПрофиляДоступомКИнтерфейсу(ОписаниеПрофиля) Экспорт
	
	ИдентификаторыПрофилей = Новый Массив;
	ИдентификаторыПрофилей.Добавить(ИдентификаторПрофиляМенеджерПоНаборуПерсонала());
	ИдентификаторыПрофилей.Добавить(ИдентификаторПрофиляСтаршийМенеджерПоНаборуПерсонала());
	ИдентификаторыПрофилей.Добавить(ИнструментыРуководителя.ИдентификаторПрофиляРуководительПодразделения());
	
	Если ИдентификаторыПрофилей.Найти(ОписаниеПрофиля.Идентификатор) <> Неопределено Тогда
		ОписаниеПрофиля.Роли.Добавить("ПодсистемаПодборПерсонала");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ЗаполнитьСпискиСОграничениемДоступаВзаимодействий(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.Встреча, Ложь);
	Списки.Вставить(Метаданные.Документы.ЗапланированноеВзаимодействие, Ложь);
	Списки.Вставить(Метаданные.Документы.СообщениеSMS, Ложь);
	Списки.Вставить(Метаданные.Документы.ТелефонныйЗвонок, Ложь);
	Списки.Вставить(Метаданные.Документы.ЭлектронноеПисьмоВходящее, Ложь);
	Списки.Вставить(Метаданные.Документы.ЭлектронноеПисьмоИсходящее, Ложь);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ЗаполнитьОграниченияДоступаВзаимодействий(Список, Ограничение) Экспорт

	Если Список = Метаданные.Документы.Встреча 
		Или Список = Метаданные.Документы.ЗапланированноеВзаимодействие 
		Или Список = Метаданные.Документы.СообщениеSMS 
		Или Список = Метаданные.Документы.ТелефонныйЗвонок Тогда
		Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК Взаимодействия
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК Предметы
		|	ПО Предметы.Взаимодействие = Взаимодействия.Ссылка
		|;
		|РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
		|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
		|	ИЛИ ЗначениеРазрешено(Выразить(Предметы.Предмет КАК Справочник.Кандидаты).ФизическоеЛицо, Отключено КАК Ложь)";
	КонецЕсли;

	Если Список = Метаданные.Документы.ЭлектронноеПисьмоВходящее Тогда
		Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК Взаимодействия
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК Предметы
		|	ПО Предметы.Взаимодействие = Взаимодействия.Ссылка
		|;
		|РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
		|	ИЛИ ЗначениеРазрешено(УчетнаяЗапись, Отключено КАК Ложь)
		|	ИЛИ ЗначениеРазрешено(Выразить(Предметы.Предмет КАК Справочник.Кандидаты).ФизическоеЛицо, Отключено КАК Ложь)";
	КонецЕсли;
	
	Если Список = Метаданные.Документы.ЭлектронноеПисьмоИсходящее Тогда
		Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК Взаимодействия
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК Предметы
		|	ПО Предметы.Взаимодействие = Взаимодействия.Ссылка
		|;
		|РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
		|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
		|	ИЛИ ЗначениеРазрешено(УчетнаяЗапись, Отключено КАК Ложь)
		|	ИЛИ ЗначениеРазрешено(Выразить(Предметы.Предмет КАК Справочник.Кандидаты).ФизическоеЛицо, Отключено КАК Ложь)";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// Процедура выполняет начальное заполнение данных подсистемы уведомлений
//
// Параметры:
//  ПараметрыОбновления  - Структура - описывает текущие параметры обновления
//
Процедура ПриНачальномЗаполненииДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("ЭтапРаботыСКандидатом");
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		ПараметрыШаблона = Новый Структура();
		
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("ПредназначенДляSMS", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru='Здравствуйте. Настоящим подтверждаем приглашение на [ДанныеУведомления.ЭтапРаботы], которое состоится [ДанныеУведомления.ДатаСобытия{ДЛФ=D}] в [ДанныеУведомления.ВремяСобытия].
			|С уважением, [ДанныеУведомления.ОтветственныйПоРаботеСКандидатом]'"));
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.Кандидаты");
		ПараметрыШаблона.Вставить("Назначение", "Кандидаты");
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru='Уведомление кандидату о собеседовании'"), ПараметрыШаблона);
		
		// 	Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления 	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта 	= Перечисления.ВидыТранспортаУведомлений.SMS;
		РассылкаОбъект.Наименование 	= НСтр("ru='Уведомление кандидату о собеседовании'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Предмет";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ДоСобытия;
		РассылкаОбъект.ИнтервалУведомления = 3;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		
		// Отборы
		ЭтапСобеседование = Справочники.ЭтапыРаботыСКандидатами.НайтиПоНаименованию("Собеседование");
		Если ЗначениеЗаполнено(ЭтапСобеседование) Тогда
			НастройкиОтборов = Новый ТаблицаЗначений;
			НастройкиОтборов.Колонки.Добавить("ЛевоеЗначение");
			НастройкиОтборов.Колонки.Добавить("ВидСравнения");
			НастройкиОтборов.Колонки.Добавить("ПравоеЗначение");
			НастройкиОтборов.Колонки.Добавить("Использование");
			НастройкиОтборов.Колонки.Добавить("ОписаниеТипов");
			НастройкиОтборов.Колонки.Добавить("Представление");
			
			СтрокаОтбора = НастройкиОтборов.Добавить();
			СтрокаОтбора.ЛевоеЗначение = "ЭтапРаботы";
			СтрокаОтбора.ПравоеЗначение = ЭтапСобеседование;
			СтрокаОтбора.ВидСравнения = ВидСравнения.Равно;
			СтрокаОтбора.Использование = Истина;
			СтрокаОтбора.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ЭтапыРаботыСКандидатами");
			СтрокаОтбора.Представление = НСтр("ru='Этап работы'");
			
			СтрокаОтбора = НастройкиОтборов.Добавить();
			СтрокаОтбора.ЛевоеЗначение = "СостояниеЭтапа";
			СтрокаОтбора.ПравоеЗначение = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован;
			СтрокаОтбора.ВидСравнения = ВидСравнения.Равно;
			СтрокаОтбора.Использование = Истина;
			СтрокаОтбора.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭтаповРаботыСКандидатами");
			СтрокаОтбора.Представление = НСтр("ru='Состояние этапа'");
			
			СтрокаОтбора = НастройкиОтборов.Добавить();
			СтрокаОтбора.ЛевоеЗначение = "ЦелеваяПозиция";
			СтрокаОтбора.ВидСравнения = ВидСравнения.Равно;
			СтрокаОтбора.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание");
			СтрокаОтбора.Представление = НСтр("ru='Целевая позиция'");
			СтрокаОтбора.ПравоеЗначение 	= СтрокаОтбора.ОписаниеТипов.ПривестиЗначение();
			
			СтрокаОтбора = НастройкиОтборов.Добавить();
			СтрокаОтбора.ЛевоеЗначение = "ЦелевоеПодразделение";
			СтрокаОтбора.ВидСравнения = ВидСравнения.Равно;
			СтрокаОтбора.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
			СтрокаОтбора.Представление = НСтр("ru='Целевое подразделение'");
			СтрокаОтбора.ПравоеЗначение 	= СтрокаОтбора.ОписаниеТипов.ПривестиЗначение();
			
			РассылкаОбъект.Отбор = Новый ХранилищеЗначения(НастройкиОтборов);
			
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
		
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет дополнить структуру видов уведомлений своими видами уведомлений. 
//
// Параметры:
//  СтруктураДоступныхВидовУведомлений - структура - перечень уведомлений, подключенных в подсистеме
//     * Ключ - Строка - Имя вида уведомления
//     * Значение - Структура - Описание вида уведомления (Структура)
//        * ВидУведомления - Строка, строковый идентификатор вида уведомления.
//        * Описание - Строка, Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//        * Инициализация - Строка, <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения
//                          запросов к базе данных.
//        * ПолучениеДанных - Строка, <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	СтруктураЭтапРаботыСКандидатом = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	СтруктураЭтапРаботыСКандидатом.ВидУведомления = НСтр("ru='Назначен этап работы с кандидатом'");
	СтруктураЭтапРаботыСКандидатом.GUID = "1d20ba56-3fe2-4c74-bd98-5a94ab3ef618";
	СтруктураЭтапРаботыСКандидатом.Описание = НСтр("ru='Уведомление о назначенном этапе работы с кандидатом.'");
	СтруктураЭтапРаботыСКандидатом.Инициализация = "ПодборПерсонала.ИнициализацияУведомлениеОбЭтапеРаботыСКандидатом";
	СтруктураЭтапРаботыСКандидатом.ПолучениеДанных = "ПодборПерсонала.ПолучениеДанныхУведомлениеОбЭтапеРаботыСКандидатом";
	
	СтруктураДоступныхВидовУведомлений.Вставить("ЭтапРаботыСКандидатом", СтруктураЭтапРаботыСКандидатом);
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет заполнить поля, доступные для шаблона
//  соответствующего вида уведомлений.
//
// Параметры:
//  ВидУведомления           - СправочникСсылка.ВидУведомления - вид уведомления - владелец шаблона
//  Реквизиты                - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//                                      и др.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона        - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ЭтапРаботыСКандидатом") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаСобытия",НСтр("ru='Дата и время события'"), Новый ОписаниеТипов("Дата"), "ДФ='dd.MM.yyyy HH:mm'");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаСобытияПредставление",НСтр("ru='Дата события'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ВремяСобытия",НСтр("ru='Время события'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Предмет",НСтр("ru='Кандидат'"), Новый ОписаниеТипов("СправочникСсылка.Кандидаты"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ЭтапРаботы",НСтр("ru='Этап работы'"), Новый ОписаниеТипов("СправочникСсылка.ЭтапыРаботыСКандидатами"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.СостояниеЭтапа",НСтр("ru='Состояние этапа'"), Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭтаповРаботыСКандидатами"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ПериодОкончание",НСтр("ru='Окончание'"), Новый ОписаниеТипов("Дата"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Комментарий",НСтр("ru='Комментарий по кандидату'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Вакансия",НСтр("ru='Вакансия'"), Новый ОписаниеТипов("СправочникСсылка.Вакансии"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ОтветственныйПоРаботеСКандидатом",НСтр("ru='Ответственный по кандидату'"), Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ОтветственныйПоВакансии",НСтр("ru='Ответственный по вакансии'"), Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ЦелеваяПозиция",НСтр("ru='Целевая позиция'"), Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ЦелевоеПодразделение",НСтр("ru='Целевое подразделение'"), Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Назначено собеседование"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияУведомлениеОбЭтапеРаботыСКандидатом(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("СправочникСсылка.Кандидаты");
	
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Предмет", НСтр("ru='Кандидат'"), Новый ОписаниеТипов("СправочникСсылка.Кандидаты"));
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "ОтветственныйПоРаботеСКандидатом", НСтр("ru='Ответственный по работе с кандидатом'"), Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "ОтветственныйПоВакансии", НСтр("ru='Ответственный по вакансии'"), Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ЭтапРаботы", НСтр("ru='Этап работы'"), Новый ОписаниеТипов("СправочникСсылка.ЭтапыРаботыСКандидатами"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "СостояниеЭтапа", НСтр("ru='Состояние этапа'"), Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭтаповРаботыСКандидатами"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ЦелеваяПозиция", НСтр("ru='Целевая позиция'"), Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ЦелевоеПодразделение", НСтр("ru='Целевое подразделение'"), Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
КонецПроцедуры

// Процедура заполняет таблицу уведомлений по переданным параметрам и отборам.
//
// Параметры:
//    СтруктураПериода - Структура - два элемента - НачалоПериода и ОкончаниеПериода
//    Отборы - ТаблицаЗначений - перечень отборов событий, заданный пользователем
//       * ЛевоеЗначение - Строка - имя поля отбора в источнике данных.
//       * ВидСравнения - ВидСравнения - Вид сравнения
//       * ЛевоеЗначение - Булево, Число, Строка, Дата, ЛюбаяСсылка - значение отбора.
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПолучениеДанныхУведомлениеОбЭтапеРаботыСКандидатом(СтруктураПериода, Отборы, ТаблицаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", СтруктураПериода.ОкончаниеПериода);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	РаботаСКандидатами.Период КАК ДатаСобытия,
	|	"""" КАК ДатаСобытияПредставление,
	|	РаботаСКандидатами.Кандидат КАК Предмет,
	|	РаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
	|	РаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа,
	|	РаботаСКандидатами.ПериодОкончание КАК ПериодОкончание,
	|	РаботаСКандидатами.Кандидат.Ответственный КАК ОтветственныйПоРаботеСКандидатом,
	|	РаботаСКандидатами.Комментарий КАК Комментарий,
	|	РаботаСКандидатами.Кандидат.Вакансия КАК Вакансия,
	|	РаботаСКандидатами.Кандидат.Вакансия.Ответственный КАК ОтветственныйПоВакансии,
	|	РаботаСКандидатами.Кандидат.Позиция КАК ЦелеваяПозиция,
	|	РаботаСКандидатами.Кандидат.Подразделение КАК ЦелевоеПодразделение
	|ПОМЕСТИТЬ ВТРаботаСКандидатами
	|ИЗ
	|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
	|ГДЕ
	|	РаботаСКандидатами.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РаботаСКандидатами.Период >= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботаСКандидатами.ДатаСобытия КАК ДатаСобытия,
	|	ВТРаботаСКандидатами.ДатаСобытияПредставление КАК ДатаСобытияПредставление,
	|	ВТРаботаСКандидатами.Предмет КАК Предмет,
	|	ВТРаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
	|	ВТРаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа,
	|	ВТРаботаСКандидатами.ПериодОкончание КАК ПериодОкончание,
	|	ВТРаботаСКандидатами.ОтветственныйПоРаботеСКандидатом КАК ОтветственныйПоРаботеСКандидатом,
	|	ВТРаботаСКандидатами.Комментарий КАК Комментарий,
	|	ВТРаботаСКандидатами.Вакансия КАК Вакансия,
	|	ВТРаботаСКандидатами.ОтветственныйПоВакансии КАК ОтветственныйПоВакансии,
	|	ВТРаботаСКандидатами.ЦелеваяПозиция КАК ЦелеваяПозиция,
	|	ВТРаботаСКандидатами.ЦелевоеПодразделение КАК ЦелевоеПодразделение
	|ИЗ
	|	ВТРаботаСКандидатами КАК ВТРаботаСКандидатами");
	
	Если Отборы.Количество() > 0 Тогда
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Отбор;
		Для Каждого СтрокаОтбора Из Отборы Цикл
			Если СтрокаОтбора.Использование Тогда
				ТекстУсловия = УведомленияСервер.ПредставлениеУсловияДляЗапроса(
					СтрокаОтбора.ВидСравнения,
					СтрокаОтбора.ЛевоеЗначение,
					"ВТРаботаСКандидатами." + СтрокаОтбора.ЛевоеЗначение);
				ОтборЗапроса.Добавить(ТекстУсловия);
				Запрос.УстановитьПараметр(СтрокаОтбора.ЛевоеЗначение, СтрокаОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
		ПараметрыСобытия = Новый Структура();
		Для Каждого КолонкаРезультата Из СхемаЗапроса.ПакетЗапросов[0].Колонки Цикл
			ПараметрыСобытия.Вставить(КолонкаРезультата.Псевдоним);
		КонецЦикла;
		ПараметрыСобытия.Вставить("ВремяСобытия");
		Для Каждого СтрокаРезультатаЗапроса Из ТаблицаДанных Цикл
			СтрокаТаблицы = ТаблицаРезультата.Добавить();
			СтрокаТаблицы.Предмет = СтрокаРезультатаЗапроса.Предмет;
			СтрокаТаблицы.ДатаСобытия = СтрокаРезультатаЗапроса.ДатаСобытия;
			ЗаполнитьЗначенияСвойств(ПараметрыСобытия, СтрокаРезультатаЗапроса);
			ПараметрыСобытия.ВремяСобытия = Формат(СтрокаРезультатаЗапроса.ДатаСобытия, "ДФ=HH:mm");
			ПараметрыСобытия.ДатаСобытияПредставление = Формат(СтрокаРезультатаЗапроса.ДатаСобытия, "ДФ=dd.MM.yyyy");
			СтрокаТаблицы.ПараметрыСобытия = ПараметрыСобытия;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ДополнитьОбъектыИзмененияОрганизацийФизическихЛиц(МассивОбъектов) Экспорт
	МассивОбъектов.Добавить(Метаданные.Справочники.Кандидаты);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.Вакансии);
	СписокОбъектов.Добавить(Справочники.Кандидаты);
	СписокОбъектов.Добавить(Справочники.ПрофилиДолжностей);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаПодборПерсонала);
	СписокОбъектов.Добавить(Документы.РасходыНаИсточникИнформацииОКандидатах);
	СписокОбъектов.Добавить(Обработки.ПечатьДолжностнойИнструкции);
	
КонецПроцедуры

Функция СклонениеКандидата(Кандидат, Падеж) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидат", Кандидат);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	ФизическиеЛица.ФИО КАК ФИО,
		|	ФизическиеЛица.Фамилия КАК Фамилия,
		|	ФизическиеЛица.Имя КАК Имя,
		|	ФизическиеЛица.Отчество КАК Отчество,
		|	ФизическиеЛица.Инициалы КАК Инициалы,
		|	ФизическиеЛица.Пол КАК Пол
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК Кандидаты
		|		ПО (Кандидаты.ФизическоеЛицо = ФизическиеЛица.Ссылка)
		|			И (Кандидаты.Ссылка = &Кандидат)";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СклонениеКандидата = "";
	ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.ФИО, Падеж, СклонениеКандидата, Выборка.Пол, Выборка.ФизическоеЛицо);
	
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СклонениеКандидата);
	
КонецФункции

Процедура УстановитьРешениеПоКандидатам(Кандидаты, РезультатВыбора) Экспорт
	
	// Все сопряженные действия выполняем целостно.
	НачатьТранзакцию();
	Попытка
		УстановитьСостояниеКандидатов(Кандидаты, РезультатВыбора);
		ЗакрытьВакансииКандидатов(Кандидаты, РезультатВыбора);
		ОтправитьСообщенияОПринятомРешении(РезультатВыбора);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтменитьРешениеПоКандидатам(Кандидаты) Экспорт
	
	Для Каждого Кандидат Из Кандидаты Цикл
		Справочники.Кандидаты.УстановитьРешениеПоКандидату(Кандидат, Перечисления.СостоянияСогласования.ПустаяСсылка());
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСостояниеКандидатов(Кандидаты, РезультатВыбора)
	
	ДеталиРешения = РезультатВыбора.Решение;
	
	// Устанавливаем решение выбранным кандидатам.
	ПараметрыРешения = Справочники.Кандидаты.ДополнительныеПараметрыРешенияПоКандидату();
	ПараметрыРешения.КомментарийРешения = ДеталиРешения.Комментарий;
	ПараметрыРешения.ПричинаОтклонения = ДеталиРешения.Причина;
	Для Каждого Кандидат Из Кандидаты Цикл
		Справочники.Кандидаты.УстановитьРешениеПоКандидату(Кандидат, ДеталиРешения.Решение, ДеталиРешения.ДатаРешения, ПараметрыРешения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗакрытьВакансииКандидатов(Кандидаты, РезультатВыбора)
	
	// Если указано — закрываем вакансию.
	Если РезультатВыбора.Вакансия.ЗакрыватьВакансию = Истина Тогда
		Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатВыбора.Вакансия.Вакансия);
		Справочники.Вакансии.ЗакрытьВакансии(Вакансии, РезультатВыбора.Вакансия.Дата);
	КонецЕсли;
	
	// Если указано — отклоняем других кандидатов.
	Если РезультатВыбора.ДругиеКандидаты.Отклонять = Истина Тогда
		Для Каждого СтрокаКоллекции Из РезультатВыбора.ДругиеКандидаты.Кандидаты Цикл
			ПараметрыРешения = Справочники.Кандидаты.ДополнительныеПараметрыРешенияПоКандидату();
			ПараметрыРешения.ПричинаОтклонения = СтрокаКоллекции.ПричинаОтклонения;
			Справочники.Кандидаты.УстановитьРешениеПоКандидату(
				СтрокаКоллекции.Кандидат, Перечисления.СостоянияСогласования.Отклонено, РезультатВыбора.ДругиеКандидаты.Дата, ПараметрыРешения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщенияОПринятомРешении(РезультатВыбора)
	
	Отказ = Ложь;
	
	Если РезультатВыбора.ПисьмоОдобрение.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.ПисьмоОдобрение.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.ПисьмоОдобрение.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатВыбора.СообщениеSMSОдобрение.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.СообщениеSMSОдобрение.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.СообщениеSMSОдобрение.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатВыбора.ПисьмоОтказ.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.ПисьмоОтказ.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.ПисьмоОтказ.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатВыбора.СообщениеSMSОтказ.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.СообщениеSMSОтказ.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.СообщениеSMSОтказ.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось отправить одно или несколько сообщений кандидатам'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеКандидатаДляСтрокиИсторииВзаимоотношений(СтрокаДанных)

	ПараметрыШаблона = Новый Структура(
		"Вакансия,
		|Подразделение,
		|Ответственный");
	ЗаполнитьЗначенияСвойств(ПараметрыШаблона, СтрокаДанных);
	Если ЗначениеЗаполнено(СтрокаДанных.ОтветственныйФизическоеЛицо) Тогда
		ПараметрыШаблона["Ответственный"] = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(
			Строка(СтрокаДанных.ОтветственныйФизическоеЛицо));
	КонецЕсли;

	Если Перечисления.СостоянияСогласования.РешениеПринято(СтрокаДанных.Состояние) Тогда
		ПараметрыШаблона.Вставить("ДатаРешения", Формат(СтрокаДанных.ДатаРешения, "ДЛФ=D;"));
		Если СтрокаДанных.Состояние = Перечисления.СостоянияСогласования.Отклонено Тогда
			Шаблон = НСтр("ru = 'Кандидат отклонен [ДатаРешения] по вакансии «[Вакансия]», отв. [Ответственный]'");
			Если ЗначениеЗаполнено(СтрокаДанных.ПричинаОтклонения) Тогда
				Шаблон = Шаблон + " " + НСтр("ru = 'по причине «[Причина]»'");
				ПараметрыШаблона.Вставить("Причина", СтрокаДанных.ПричинаОтклонения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДанных.КомментарийРешения) Тогда
				Шаблон = Шаблон + ", " + НСтр("ru = 'с комментарием: «[КомментарийРешения]»'");
				ПараметрыШаблона.Вставить("КомментарийРешения", СтрокаДанных.КомментарийРешения);
			КонецЕсли;
		ИначеЕсли СтрокаДанных.Состояние = Перечисления.СостоянияСогласования.Согласовано Тогда
			Шаблон = НСтр("ru = 'Кандидат утвержден [ДатаРешения] на вакансию «[Вакансия]», отв. [Ответственный]'");
		КонецЕсли;
	Иначе
		ПараметрыШаблона.Вставить("ДатаРегистрации", Формат(СтрокаДанных.ДатаРегистрации, "ДЛФ=D;"));
		Шаблон = НСтр("ru = 'Кандидат в работе на вакансию «[Вакансия]», поступил [ДатаРегистрации], отв. [Ответственный]'");
		Если Не ЗначениеЗаполнено(ПараметрыШаблона["Вакансия"]) Тогда
			Шаблон = НСтр("ru = 'Кандидат в работе, подразделение «[Подразделение]», поступил [ДатаРегистрации], отв. [Ответственный]'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);

КонецФункции

Функция РезультатПроверкиНаличияЗадержавшихсяКандидатовНаОтклонение()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СостоянияРешениеПринято", Перечисления.СостоянияСогласования.СостоянияРешениеПринято());
	Запрос.УстановитьПараметр("ДнейДоОтклонения", 
		РегистрыСведений.НастройкиПодбораПерсонала.ЗначенияНастроек().ДнейДоОтклонения);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.Ссылка КАК Кандидат,
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущиеЭтапыРаботыСКандидатами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыСКандидатами
		|		ПО ТекущиеЭтапыРаботыСКандидатами.ЭтапРаботы = ЭтапыРаботыСКандидатами.Ссылка
		|			И (НЕ ТекущиеЭтапыРаботыСКандидатами.Кандидат.Состояние В (&СостоянияРешениеПринято))
		|			И (ЭтапыРаботыСКандидатами.ОтклонятьЗадержавшихсяКандидатов = ИСТИНА)
		|			И (ЭтапыРаботыСКандидатами.СпособОтклоненияЗадержавшихсяКандидатов = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияЗадержкиКандидатов.КакЗаданоВНастройках))
		|			И (ТекущиеЭтапыРаботыСКандидатами.ДатаВремя <> &ПустаяДата)
		|			И (РАЗНОСТЬДАТ(ТекущиеЭтапыРаботыСКандидатами.ДатаВремя, &ТекущаяДата, ДЕНЬ) >= &ДнейДоОтклонения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.Ссылка,
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущиеЭтапыРаботыСКандидатами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыСКандидатами
		|		ПО ТекущиеЭтапыРаботыСКандидатами.ЭтапРаботы = ЭтапыРаботыСКандидатами.Ссылка
		|			И (НЕ ТекущиеЭтапыРаботыСКандидатами.Кандидат.Состояние В (&СостоянияРешениеПринято))
		|			И (ЭтапыРаботыСКандидатами.ОтклонятьЗадержавшихсяКандидатов = ИСТИНА)
		|			И (ЭтапыРаботыСКандидатами.СпособОтклоненияЗадержавшихсяКандидатов = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияЗадержкиКандидатов.КакЗаданоВЭтапе))
		|			И (ТекущиеЭтапыРаботыСКандидатами.ДатаВремя <> &ПустаяДата)
		|			И (РАЗНОСТЬДАТ(ТекущиеЭтапыРаботыСКандидатами.ДатаВремя, &ТекущаяДата, ДЕНЬ) >= ЭтапыРаботыСКандидатами.ДнейДоОтклонения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Кандидат";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаполнитьНаборЗначенийДоступаВзаимодействияСПредметомКандидатом(Объект, Таблица)
	
	Предмет = ?(Объект.ДополнительныеСвойства.Свойство("Предмет"), 
		Объект.ДополнительныеСвойства.Предмет, Взаимодействия.ПредметВзаимодействия(Объект.Ссылка));
	Если ТипЗнч(Предмет) <> Тип("СправочникСсылка.Кандидаты") Или Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьНаборыЗначенийДоступаПоУмолчанию(Объект, Таблица);

	НоваяТаблица = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	НоваяТаблица.Добавить().ЗначениеДоступа = Справочники.Кандидаты.ФизическоеЛицоКандидата(Предмет);

	УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НоваяТаблица);
	
КонецПроцедуры

#Область ПрофилиДоступа

Функция ИдентификаторПрофиляМенеджерПоНаборуПерсонала() 
	
	Возврат "31f07ebf-8960-4839-b4f3-36dbab7dc653";
	
КонецФункции

Функция ИдентификаторПрофиляСтаршийМенеджерПоНаборуПерсонала()
	
	Возврат "9ebace86-f46b-4b17-83e7-7ad23d437ec1";
	
КонецФункции

Функция ОписаниеПрофиляМенеджерПоНаборуПерсонала()
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляМенеджерПоНаборуПерсонала();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер по набору персонала'");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	
	// Роли для доступа к функциональности других подсистем.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОбОбразованииФизическихЛиц");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаЗаявокСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАрхиваФизическихЛиц", "ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрейдов", "ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраПлановыхНачислений");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМероприятийАдаптацииУвольнения", "ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРешенийПоКадровымИзменениям", "ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "КонтрольИсполненияМероприятийАдаптацииУвольнения", "ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаписейРабочегоКалендаряСотрудников" ,"ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИспытательногоСрокаСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников", "ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.СостоянияСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДокументовПоРешениям", "ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	
	// Роли на общие объекты КОРП из подсистемы «характеристики персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДействийСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеХарактеристикПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКомпетенцийПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "УправлениеМероприятиемОценкиПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	
	// Роли подсистемы «Подбор персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПрофилейДолжности", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПрофилейДолжности", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВакансий", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВакансий", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхКандидатов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхКандидатов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаПодборПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРасходовНаИсточникиИнформацииОКандидатах", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКомментариевКандидатов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");	
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСогласованияВакансий");
	
	// Роли подсистемы «Электронное интервью».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхЭлектронногоИнтервью", "ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхЭлектронногоИнтервью", "ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью");
	
	// Роли подсистемы «Анализ текучести персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеТекучестиПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПричинУвольненияСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	
	// Роли подсистемы «Чатботы».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийЧатовЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВакансийЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	
	// Роли подсистемы «Бронирование помещений».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБронированияПомещений", "ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений");
	
	// Анкетирование.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШаблоновАнкет", "СтандартныеПодсистемы.Анкетирование");
	
	// Взаимодействия
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВзаимодействий", "СтандартныеПодсистемы.Взаимодействия");

	// Синхронизация календарей.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеСинхронизацииКалендарей", "ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь.СинхронизацияКалендарей");

	// Интеграция с рекрутинговыми сайтами.
	ИнтеграцияРекрутинговыхСайтовРедакция3.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);

	// Роли подсистемы «Разбор резюме».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеЗагрузкиКандидатовИзФайлов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.РазборРезюме");
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи");
	ОписаниеПрофиля.ВидыДоступа.Добавить("УчетныеЗаписиЭлектроннойПочты");
	
	// КонфигурацииЗарплатаКадрыРасширенный
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	// Конец КонфигурацииЗарплатаКадрыРасширенный
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ОписаниеПрофиляСтаршийМенеджерПоНаборуПерсонала()
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийМенеджерПоНаборуПерсонала();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Старший менеджер по набору персонала'");
	
	ЗарплатаКадрыРасширенный.ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляМенеджерПоНаборуПерсонала());
	
	// Роли для доступа к функциональности других подсистем.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШтатногоРасписания");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШаблоновСообщений");
	
	// Роли подсистемы «Подбор персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеВакансииКандидата", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПодбораПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРасходовНаИсточникиИнформацииОКандидатах", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	
	// Роли подсистемы «Электронное интервью».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаЭлектронногоИнтервью", "ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью");
	
	// Роли подсистемы «Анализ текучести персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСоставаПричинУвольнения", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеТекучестиПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПричинУвольненияСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	
	// Роли подсистемы «Чатботы».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВакансийЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	
	// Роли подсистемы «Бронирование помещений».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеТерриторийИПомещений", "ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений");
	
	// Роли подсистемы «Разбор резюме».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеЗагрузкиКандидатовИзФайлов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.РазборРезюме");

	// КонфигурацииЗарплатаКадрыРасширенный
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	// Конец КонфигурацииЗарплатаКадрыРасширенный
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

#КонецОбласти

#Область ЭтапыРаботыСКандидатами

Функция ЗапросДанныеЭтапаРаботыСКандидатами(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	Запрос.УстановитьПараметр("ЭтапРаботы", ЭтапРаботы);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Кандидат,
	|	&ЭтапРаботы КАК ЭтапРаботы,
	|	ЕСТЬNULL(РаботаСКандидатами.Бронь, ЗНАЧЕНИЕ(Документ.Бронь.ПустаяСсылка)) КАК Бронь,
	|	РаботаСКандидатами.ПериодОкончание КАК ПериодОкончание,
	|	РаботаСКандидатами.Период КАК Период
	|ПОМЕСТИТЬ ВТТекущиеДанныеЭтапа
	|ИЗ
	|	Справочник.Кандидаты КАК Кандидаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
	|		ПО (РаботаСКандидатами.Кандидат = Кандидаты.Ссылка)
	|			И (РаботаСКандидатами.ЭтапРаботы = &ЭтапРаботы)
	|ГДЕ
	|	Кандидаты.Ссылка В(&Кандидаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеДанныеЭтапа.Кандидат КАК Кандидат,
	|	ТекущиеДанныеЭтапа.ЭтапРаботы КАК ЭтапРаботы,
	|	ТекущиеДанныеЭтапа.Бронь КАК Бронь,
	|	ТекущиеДанныеЭтапа.Бронь.Помещение КАК Помещение,
	|	ТекущиеДанныеЭтапа.ПериодОкончание КАК ПериодОкончание,
	|	ТекущиеДанныеЭтапа.Период КАК Период
	|ИЗ
	|	ВТТекущиеДанныеЭтапа КАК ТекущиеДанныеЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТекущиеДанныеЭтапа";
	
	Возврат Запрос;
	
КонецФункции

Функция ТекущийЭтапРаботыКандидатов(Кандидаты) Экспорт
	
	Если Кандидаты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Кандидаты не выбраны.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)
		|	И Кандидаты.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Отклонено))";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверяем, что все выбранные кандидаты пока рассматриваются.
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'По одному или нескольким кандидатам уже приняты решения (они одобрены или отклонены). 
                               |Планирование этапа для таких кандидатов недоступно.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	ТекущиеЭтапы.ЭтапРаботы КАК ЭтапРаботы,
		|	ТекущиеЭтапы.Состояние КАК Состояние,
		|	ТекущиеЭтапы.ДатаВремя КАК ДатаВремя
		|ПОМЕСТИТЬ ВТТекущиеЭтапыРаботы
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущиеЭтапы
		|		ПО (ТекущиеЭтапы.Кандидат = Кандидаты.Ссылка)
		|			И (ТекущиеЭтапы.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповРаботыСКандидатами.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповРаботыСКандидатами.Запланирован)))
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)";
	Запрос.Выполнить();
	
	// Проверяем что все этапы существуют.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТТекущиеЭтапыРаботы КАК ТекущиеЭтапы
		|ГДЕ
		|	ЕСТЬNULL(ТекущиеЭтапы.ЭтапРаботы, ЗНАЧЕНИЕ(Справочник.ЭтапыРаботыСКандидатами.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЭтапыРаботыСКандидатами.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверяем наличие этапов для планирования у выбранных кандидатов.
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить этап для планирования для кандидата. 
                               |Список этапов отбора для вакансии не определен, или все этапы пройдены.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// Проверяем единственность этапа.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТТекущиеЭтапыРаботы КАК ТекущиеЭтапы
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеЭтапы.ЭтапРаботы) > 1";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Кандидаты находятся на разных этапах отбора. 
                               |Запланировать следующий этап можно только для кандидатов, находящихся на одинаковом этапе работы.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеЭтапы.ЭтапРаботы КАК ЭтапРаботы
		|ИЗ
		|	ВТТекущиеЭтапыРаботы КАК ТекущиеЭтапы";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЭтапРаботы;
	
КонецФункции

Процедура ПроверитьВозможностьУстановкиЭтапаРаботы(Кандидаты, ЭтапРаботы, Период, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	Запрос.УстановитьПараметр("ЭтапРаботы", ЭтапРаботы);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК ЭтапНаВыбраннуюДату
		|		ПО (ЭтапНаВыбраннуюДату.Кандидат = Кандидаты.Ссылка)
		|			И (ЭтапНаВыбраннуюДату.Период = &Период)
		|			И (ЭтапНаВыбраннуюДату.ЭтапРаботы <> &ЭтапРаботы)
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		Если Кандидаты.Количество() = 1 Тогда
			ФормулировкаКандидата = НСтр("ru = 'кандидата'");
		Иначе
			ФормулировкаКандидата = НСтр("ru = 'одного или нескольких кандидатов'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для %1 на выбранные дату и время уже зарегистрирован этап работы.
                  |Попробуйте выбрать другие дату или время.'"), 
			ФормулировкаКандидата);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСостояниеЭтапаРаботыКандидатов(РезультатВыбора) Экспорт
	
	Кандидаты = РезультатВыбора.Кандидаты;
	ЭтапРаботы = РезультатВыбора.ЭтапРаботы;
	Участники = РезультатВыбора.Участники;
	
	Отказ = Ложь;
	ПроверитьВозможностьУстановкиЭтапаРаботы(Кандидаты, ЭтапРаботы.Этап, ЭтапРаботы.Период, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеЭтапаРаботыСКандидатами(Запрос.МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы.Этап);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрежниеДанныеЭтапа.Кандидат КАК Кандидат,
		|	ПрежниеДанныеЭтапа.Бронь КАК Бронь,
		|	ПрежниеДанныеЭтапа.Помещение КАК Помещение,
		|	ПрежниеДанныеЭтапа.ПериодОкончание КАК ПериодОкончание,
		|	ПрежниеДанныеЭтапа.Период КАК Период
		|ИЗ
		|	ВТДанныеЭтапаРаботы КАК ПрежниеДанныеЭтапа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		Отказ = Ложь;
		БронированиеПомещенийБЗК.ЗадатьБроньПоЭтапу(Запрос.МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы, Отказ);
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось забронировать помещение'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			ПрежниеДанныеЭтапа = Справочники.ЭтапыРаботыСКандидатами.СтруктураДанныхПланированияЭтапа();
			ЗаполнитьЗначенияСвойств(ПрежниеДанныеЭтапа, Выборка);
			СменитьЭтапРаботыКандидата(Выборка.Кандидат, ЭтапРаботы, ПрежниеДанныеЭтапа, РезультатВыбора);
		КонецЦикла;
		ОписаниеРешения = РезультатВыбора.Решение;
		Если ЗначениеЗаполнено(ОписаниеРешения.Кандидаты) Тогда
			УстановитьРешениеПоКандидатам(ОписаниеРешения.Кандидаты, ОписаниеРешения);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	ЗаполнитьВакансииКандидатов(Кандидаты, РезультатВыбора.Вакансии);
	
	СинхронизацияКалендарей.ПослеПланированияЭтапа(Участники, ЭтапРаботы);
	
КонецПроцедуры

Процедура СменитьЭтапРаботыКандидата(Кандидат, ЭтапРаботы, ПрежниеДанныеЭтапа, ДополнительныеПараметры)
	
	Участники = ДополнительныеПараметры.Участники;
	Напоминание = ДополнительныеПараметры.Напоминание;
	Письмо = ДополнительныеПараметры.Письмо;
	СообщениеSMS = ДополнительныеПараметры.СообщениеSMS;
	
	// Записать этап работы с кандидатом.
	УстановитьСостояниеЭтапаРаботыКандидата(Кандидат, ЭтапРаботы, ПрежниеДанныеЭтапа);
	
	РаботаСРабочимКалендаремБЗК.ОбновитьЗаписиКалендаряПоЭтапуРаботыСКандидатом(Кандидат, ЭтапРаботы, Участники, ПрежниеДанныеЭтапа);
	
	// Установить/снять напоминание.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 в %2 запланирован этап «%3» для кандидата %4.'"),
		Формат(Напоминание.Период, "ДЛФ=D"),
		Формат(Напоминание.Период, "ДФ=ЧЧ:мм"),
		ЭтапРаботы.Этап, 
		Кандидат);
	
	УстановитьНапоминание(
		Напоминание.Напоминать, Напоминание.Период, Напоминание.ИнтервалВремени, Кандидат, ТекстСообщения, ПрежниеДанныеЭтапа.Период);
	
	Отказ = Ложь;
	
	// Написать письма и SMS.
	Если Письмо.Написать Тогда
		СформироватьСообщениеИОтправить(Письмо.Шаблон, Кандидат, Отказ);
	КонецЕсли;
	
	Если СообщениеSMS.Написать Тогда
		СформироватьСообщениеИОтправить(СообщениеSMS.Шаблон, Кандидат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось отправить одно или несколько сообщений кандидатам'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТекущийЭтапРаботыКандидатов(КандидатыМассив) Экспорт
	
	Если КандидатыМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВТКандидатыДляПолученияТаблицыЭтапов(МенеджерВТ, КандидатыМассив);
	
	// Составить актуальную таблицу работы с кандидатами.
	ТаблицаЭтапов = ТаблицаЭтаповРаботыСКандидатамиПоВременнойТаблице(МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Кандидат КАК Кандидат,
		|	Кандидаты.Вакансия КАК Вакансия,
		|	Кандидаты.Состояние КАК Состояние,
		|	Кандидаты.Подразделение КАК Подразделение,
		|	Кандидаты.Организация КАК Организация
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Кандидат";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Выбрать для каждого кандидата строку, являющейся текущей.
	ВыборкаКандидатов = РезультатЗапроса.Выбрать();
	Пока ВыборкаКандидатов.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ТекущиеЭтапыРаботыСКандидатами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Кандидат.Установить(ВыборкаКандидатов.Кандидат);
		ОтборСтрок = Новый Структура("Кандидат");
		ОтборСтрок.Кандидат = ВыборкаКандидатов.Кандидат;
		СтрокиКандидата = ТаблицаЭтапов.НайтиСтроки(ОтборСтрок);
		Если СтрокиКандидата.Количество() > 0 Тогда
			ТекущийЭтап = ТекущийЭтапРаботыСКандидатом(СтрокиКандидата, ВыборкаКандидатов.Состояние);
			Если ТекущийЭтап <> Неопределено Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаКандидатов);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЭтап);
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаЭтаповРаботыСКандидатомНаВакансию(Кандидат, Вакансия) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Кандидат", Кандидат);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Кандидат КАК Кандидат,
		|	&Вакансия КАК Вакансия
		|ПОМЕСТИТЬ ВТКандидаты";
	Запрос.Выполнить();
	
	ТаблицаЭтапов = ТаблицаЭтаповРаботыСКандидатамиПоВременнойТаблице(МенеджерВТ);
	
	Возврат ТаблицаЭтапов;
	
КонецФункции

Процедура СоздатьВТКандидатыДляПолученияТаблицыЭтапов(МенеджерВТ, КандидатыМассив)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Кандидаты", КандидатыМассив);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	Кандидаты.Вакансия КАК Вакансия,
		|	Кандидаты.Состояние КАК Состояние,
		|	Кандидаты.Подразделение КАК Подразделение,
		|	Кандидаты.Позиция.Владелец КАК Организация
		|ПОМЕСТИТЬ ВТКандидаты
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТаблицаЭтаповРаботыСКандидатамиПоВременнойТаблице(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Кандидаты.Кандидат КАК Кандидат,
		|	ЕСТЬNULL(РаботаСКандидатами.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВремя,
		|	ЭтапыРаботыВакансии.НомерСтроки КАК НомерСтроки,
		|	ЭтапыРаботыВакансии.ЭтапРаботы КАК ЭтапРаботы,
		|	РаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа,
		|	РаботаСКандидатами.СостояниеЭтапа КАК Состояние,
		|	ЕСТЬNULL(РаботаСКандидатами.ШаблонАнкеты, ЭтапыРаботыВакансии.ШаблонАнкеты) КАК ШаблонАнкеты,
		|	РаботаСКандидатами.ПричинаОтклонения КАК ПричинаОтклонения,
		|	ЕСТЬNULL(РаботаСКандидатами.Комментарий, ЭтапыРаботыВакансии.Комментарий) КАК Комментарий,
		|	ЕСТЬNULL(РаботаСКандидатами.ПериодОкончание, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодОкончание,
		|	РаботаСКандидатами.Бронь КАК Бронь
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыВакансии
		|		ПО (ЭтапыРаботыВакансии.Ссылка = Кандидаты.Вакансия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|		ПО (РаботаСКандидатами.ЭтапРаботы = ЭтапыРаботыВакансии.ЭтапРаботы)
		|			И (РаботаСКандидатами.Кандидат = Кандидаты.Кандидат)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Кандидат,
		|	НомерСтроки";
	
	// Таблица этапов вакансии с отметками о работе кандидатов.
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭтапов.Индексы.Добавить("Кандидат");
	
	// Выборка этапов, отмеченных у кандидатов, но отсутствующих в таблице этапов вакансии.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботаСКандидатами.Кандидат КАК Кандидат,
		|	РаботаСКандидатами.Период КАК ДатаВремя,
		|	РаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
		|	РаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа,
		|	РаботаСКандидатами.СостояниеЭтапа КАК Состояние,
		|	РаботаСКандидатами.Комментарий КАК Комментарий,
		|	РаботаСКандидатами.ШаблонАнкеты КАК ШаблонАнкеты,
		|	РаботаСКандидатами.ПричинаОтклонения КАК ПричинаОтклонения,
		|	РаботаСКандидатами.ПериодОкончание КАК ПериодОкончание,
		|	РаботаСКандидатами.Бронь КАК Бронь
		|ИЗ
		|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКандидаты КАК Кандидаты
		|		ПО (Кандидаты.Кандидат = РаботаСКандидатами.Кандидат)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыВакансии
		|		ПО РаботаСКандидатами.ЭтапРаботы = ЭтапыРаботыВакансии.ЭтапРаботы
		|			И (Кандидаты.Вакансия = ЭтапыРаботыВакансии.Ссылка)
		|ГДЕ
		|	ЭтапыРаботыВакансии.ЭтапРаботы ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаботаСКандидатами.Кандидат,
		|	РаботаСКандидатами.Период";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаЭтапов;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Кандидат") Цикл
		ОтборСтрок = Новый Структура("Кандидат");
		ОтборСтрок.Кандидат = Выборка.Кандидат;
		СтрокиКандидата = ТаблицаЭтапов.НайтиСтроки(ОтборСтрок);
		Пока Выборка.Следующий() Цикл
			Если СтрокиКандидата.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаЭтапов.Добавить();
			Иначе
				Для Каждого СтрокаКандидата Из СтрокиКандидата Цикл
					Если Выборка.ДатаВремя < СтрокаКандидата.ДатаВремя Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				МестоВставки = ТаблицаЭтапов.Индекс(СтрокаКандидата);
				НоваяСтрока = ТаблицаЭтапов.Вставить(МестоВставки);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаЭтапов;
	
КонецФункции

Функция ТекущийЭтапРаботыСКандидатом(РаботаСКандидатом, СостояниеКандидата) Экспорт
	
	ТекущийЭтап = Неопределено;
	ЗавершенныйЭтап = Неопределено;
	Для Каждого СтрокаТаблицы Из РаботаСКандидатом Цикл
		Если СтрокаТаблицы.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден
			Или СтрокаТаблицы.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
			ЗавершенныйЭтап = СтрокаТаблицы;
			Продолжить;
		КонецЕсли;
		ТекущийЭтап = СтрокаТаблицы;
		Прервать;
	КонецЦикла;
	
	Если ТекущийЭтап = Неопределено Тогда
		ТекущийЭтап = ЗавершенныйЭтап;
	КонецЕсли;
	
	Если СостояниеКандидата = Перечисления.СостоянияСогласования.Согласовано
		Или СостояниеКандидата = Перечисления.СостоянияСогласования.Отклонено Тогда
		ТекущийЭтап = ЗавершенныйЭтап;
	КонецЕсли;
	
	Возврат ТекущийЭтап;
	
КонецФункции

Процедура УстановитьНапоминание(Напоминать, Период, ИнтервалВремени, Кандидат, ТекстСообщения, ПрежнийПериод = Неопределено)
	
	Если ЗначениеЗаполнено(ПрежнийПериод) Тогда
		// Снимаем возможное напоминание.
		ОписаниеНапоминания = НапоминанияПользователяКлиентСервер.ОписаниеНапоминания();
		ОписаниеНапоминания.Пользователь = Пользователи.ТекущийПользователь();
		ОписаниеНапоминания.ВремяСобытия = ПрежнийПериод;
		ОписаниеНапоминания.Источник = Кандидат;
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(ОписаниеНапоминания);
	КонецЕсли;	
	
	Если Не Напоминать Тогда
		Возврат;
	КонецЕсли;
	
	НапоминанияПользователяСлужебный.ПодключитьПроизвольноеНапоминание(
		ТекстСообщения, Период, ИнтервалВремени, Кандидат);
	
КонецПроцедуры

Процедура ЗаполнитьВакансииКандидатов(Кандидаты, Вакансии) Экспорт
	
	Соответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Кандидаты, "Вакансия", Истина);
	Вакансии = ОбщегоНазначения.ВыгрузитьКолонку(Соответствие, "Значение");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных).
//
// Описание:
//   В Разделы необходимо добавить метаданные тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.ПодборПерсонала) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.ПодборПерсонала, НСтр("ru = 'Отчеты по подбору персонала'"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СтатистикаПодбораПерсонала);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СтатистикаПодбораПерсонала, "СтатистикаПодбораПерсонала");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьПодборПерсонала");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СтатистикаПодбораПерсонала, "ПоказателиЭффективностиПодбора");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьПодборПерсонала");
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЭффективностьИсточниковИнформацииОКандидатах);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.МассовыйНаборПерсонала);

	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.Кандидаты);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

Функция ШаблоныСообщенийКандидатов(Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстУсловия = "";
	Для Каждого КлючИЗначение Из Отбор Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если Не ПустаяСтрока(ТекстУсловия) Тогда
			ТекстУсловия = ТекстУсловия + " И ";
		КонецЕсли;
		ТекстУсловия = ТекстУсловия + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
	КонецЦикла;
	Если ПустаяСтрока(ТекстУсловия) Тогда
		ТекстУсловия = "ИСТИНА";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяТипаПараметра", Метаданные.Справочники.Кандидаты.ПолноеИмя());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныСообщений.Ссылка КАК Ссылка,
		|	ШаблоныСообщений.Код КАК Код,
		|	ШаблоныСообщений.Наименование КАК Наименование,
		|	ШаблоныСообщений.ПредназначенДляSMS КАК SMS,
		|	ШаблоныСообщений.ПредназначенДляЭлектронныхПисем КАК Email
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = &ИмяТипаПараметра
		|	И НЕ ШаблоныСообщений.ПометкаУдаления
		|	И &ТекстУсловия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ТекстУсловия);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьСообщениеИОтправить(Шаблон, Предмет, Отказ, ДополнительныеПараметры = Неопределено)
	
	РезультатОтправки = ШаблоныСообщений.СформироватьСообщениеИОтправить(Шаблон, Предмет, Новый УникальныйИдентификатор, ДополнительныеПараметры);
	
	Если Не РезультатОтправки.Отправлено Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатОтправки.ОписаниеОшибки, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПрограммы.Вставить("ИспользоватьПодборПерсонала", Константы.ИспользоватьПодборПерсонала.Получить());
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьПодборПерсонала.Установить(Параметры.ИспользоватьПодборПерсонала);
	
КонецПроцедуры

#Область ИнформацияОКандидате

// Возвращает ссылку на приоритетного кандидата.
// Используется для страницы "О кандидате" справочника "Сотрудники".
//
Функция КандидатСотрудника(ФизическоеЛицо, Позиция) Экспорт
	
	МетаданныеСправочника = Метаданные.Справочники.Кандидаты;
	Если ПривилегированныйРежим() Тогда 
		ЕстьПравоЧтения = ПравоДоступа("Чтение", МетаданныеСправочника, ПользователиИнформационнойБазы.ТекущийПользователь());
	Иначе
		ЕстьПравоЧтения = ПравоДоступа("Чтение", МетаданныеСправочника);
	КонецЕсли;
	
	Если Не ЕстьПравоЧтения Тогда
		Возврат Справочники.Кандидаты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Приоритет,
		|	Кандидаты.Ссылка КАК Кандидат
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияКандидата
		|		ПО (Кандидаты.ФизическоеЛицо = &ФизическоеЛицо)
		|			И Кандидаты.Позиция = ПозицияКандидата.Ссылка
		|			И (ПозицияКандидата.Ссылка = &Позиция)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПозицияКандидата.Подразделение = ПозицияСотрудника.Подразделение
		|				И ПозицияКандидата.Должность = ПозицияСотрудника.Должность
		|			ТОГДА 2
		|		КОГДА ПозицияКандидата.Подразделение = ПозицияСотрудника.Подразделение
		|				И ПозицияКандидата.Должность <> ПозицияСотрудника.Должность
		|			ТОГДА 3
		|		КОГДА ПозицияКандидата.Подразделение <> ПозицияСотрудника.Подразделение
		|				И ПозицияКандидата.Должность = ПозицияСотрудника.Должность
		|			ТОГДА 4
		|	КОНЕЦ,
		|	Кандидаты.Ссылка
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияСотрудника
		|		ПО (ПозицияСотрудника.Ссылка = &Позиция)
		|			И (Кандидаты.ФизическоеЛицо = &ФизическоеЛицо)
		|			И Кандидаты.Позиция <> ПозицияСотрудника.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияКандидата
		|		ПО Кандидаты.Позиция = ПозицияКандидата.Ссылка
		|			И (ПозицияКандидата.Ссылка <> ПозицияСотрудника.Ссылка)
		|			И (ПозицияКандидата.Подразделение = ПозицияСотрудника.Подразделение
		|				ИЛИ ПозицияКандидата.Должность = ПозицияСотрудника.Должность)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	Кандидаты.Ссылка
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.ФизическоеЛицо = &ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КандидатСсылка = Неопределено;
	Если Выборка.Следующий() Тогда
		КандидатСсылка = Выборка.Кандидат;
	КонецЕсли;
	
	Возврат КандидатСсылка;
	
КонецФункции

Функция СотрудникКандидата(ФизическоеЛицо, Позиция, ДатаРегистрацииКандидата) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ФизическоеЛицо КАК ФизическоеЛицо,
		|	&Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТФизическиеЛица";
	Запрос.Выполнить();
	
	СоздатьВТСотрудникиКандидатов(МенеджерВременныхТаблиц, ДатаРегистрацииКандидата);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиКандидатов.Сотрудник КАК Сотрудник,
		|	СотрудникиКандидатов.Позиция КАК Позиция,
		|	СотрудникиКандидатов.Организация КАК Организация,
		|	СотрудникиКандидатов.ДатаПриема КАК ДатаПриема
		|ИЗ
		|	ВТСотрудникиКандидатов КАК СотрудникиКандидатов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеСотрудника = Новый Структура(
		"Сотрудник, 
		|Позиция, 
		|Организация, 
		|ДатаПриема");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеСотрудника, Выборка);
	КонецЕсли;
	
	Возврат ОписаниеСотрудника;
	
КонецФункции

Процедура СоздатьВТСотрудникиКандидатов(МенеджерВременныхТаблиц, ДатаАктуальности, ИмяВТФизическиеЛица = "ВТФизическиеЛица")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, ИмяВТФизическиеЛица) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка) КАК ПозицияКандидата,
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка) КАК Позиция,
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриема
			|ПОМЕСТИТЬ ВТСотрудникиКандидатов";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ИменаВТ = Новый Массив;
	
	КадровыеДанные = Новый Массив;
	КадровыеДанные.Добавить("ДолжностьПоШтатномуРасписанию");
	КадровыеДанные.Добавить("ДатаПриема");
	КадровыеДанные.Добавить("Организация");
	
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыСотрудников.ИмяВТФизическиеЛица = ИмяВТФизическиеЛица;
	ПараметрыСотрудников.КадровыеДанные = КадровыеДанные;
	ПараметрыСотрудников.НачалоПериода = ДатаАктуальности;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	ИменаВТ.Добавить("ВТСотрудникиОрганизации");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Приоритет,
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.Позиция КАК ПозицияКандидата,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	Сотрудники.Организация КАК Организация,
		|	Сотрудники.ДатаПриема КАК ДатаПриема
		|ПОМЕСТИТЬ ВТПриоритетыСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияСотрудника
		|		ПО Сотрудники.ДолжностьПоШтатномуРасписанию = ПозицияСотрудника.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ФизическиеЛица.Позиция = ПозицияСотрудника.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПозицияСотрудника.Подразделение = ПозицияКандидата.Подразделение
		|				И ПозицияСотрудника.Должность = ПозицияКандидата.Должность
		|			ТОГДА 2
		|		КОГДА ПозицияСотрудника.Подразделение = ПозицияКандидата.Подразделение
		|				И ПозицияСотрудника.Должность <> ПозицияКандидата.Должность
		|			ТОГДА 3
		|		КОГДА ПозицияСотрудника.Подразделение <> ПозицияКандидата.Подразделение
		|				И ПозицияСотрудника.Должность = ПозицияКандидата.Должность
		|			ТОГДА 4
		|	КОНЕЦ,
		|	ФизическиеЛица.ФизическоеЛицо,
		|	ФизическиеЛица.Позиция,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.Организация,
		|	Сотрудники.ДатаПриема
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияКандидата
		|		ПО Сотрудники.ДолжностьПоШтатномуРасписанию <> ПозицияКандидата.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияСотрудника
		|		ПО Сотрудники.ДолжностьПоШтатномуРасписанию = ПозицияСотрудника.Ссылка
		|			И (ПозицияСотрудника.Ссылка <> ПозицияКандидата.Ссылка)
		|			И (ПозицияСотрудника.Подразделение = ПозицияКандидата.Подразделение
		|				ИЛИ ПозицияСотрудника.Должность = ПозицияКандидата.Должность)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ФизическиеЛица.Позиция = ПозицияКандидата.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	ФизическиеЛица.ФизическоеЛицо,
		|	ФизическиеЛица.Позиция,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.Организация,
		|	Сотрудники.ДатаПриема
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриоритетыСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриоритетыСотрудников.ПозицияКандидата КАК ПозицияКандидата,
		|	МИНИМУМ(ПриоритетыСотрудников.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТМинимальныеПриоритеты
		|ИЗ
		|	ВТПриоритетыСотрудников КАК ПриоритетыСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриоритетыСотрудников.ФизическоеЛицо,
		|	ПриоритетыСотрудников.ПозицияКандидата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриоритетыСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриоритетыСотрудников.ПозицияКандидата КАК ПозицияКандидата,
		|	ПриоритетыСотрудников.Сотрудник КАК Сотрудник,
		|	ПриоритетыСотрудников.Позиция КАК Позиция,
		|	ПриоритетыСотрудников.Организация КАК Организация,
		|	ПриоритетыСотрудников.ДатаПриема КАК ДатаПриема
		|ПОМЕСТИТЬ ВТСотрудникиКандидатов
		|ИЗ
		|	ВТПриоритетыСотрудников КАК ПриоритетыСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныеПриоритеты КАК МинимальныеПриоритеты
		|		ПО (МинимальныеПриоритеты.ФизическоеЛицо = ПриоритетыСотрудников.ФизическоеЛицо)
		|			И (МинимальныеПриоритеты.ПозицияКандидата = ПриоритетыСотрудников.ПозицияКандидата)
		|			И (МинимальныеПриоритеты.Приоритет = ПриоритетыСотрудников.Приоритет)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ИмяВТФизическиеЛица);
	Запрос.Выполнить();
	
	ИменаВТ.Добавить("ВТПриоритетыСотрудников");
	ИменаВТ.Добавить("ВТМинимальныеПриоритеты");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
КонецПроцедуры

Процедура СоздатьВТСостоянияКандидатов(МенеджерВременныхТаблиц, ДатаАктуальности, ИмяВТКандидаты = "ВТКандидаты") Экспорт
	
	ИменаВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустойЭтапРаботы", Справочники.ЭтапыРаботыСКандидатами.ПустаяСсылка());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Кандидат КАК Кандидат,
		|	1 КАК Приоритет,
		|	0 КАК НомерЭтапа,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано) КАК ТекущееСостояние
		|ПОМЕСТИТЬ ВТСостоянияКандидатов
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Кандидаты.Кандидат,
		|	2,
		|	ЕСТЬNULL(ЭтапыВакансии.НомерСтроки, 999),
		|	ЕСТЬNULL(ТекущийЭтап.ЭтапРаботы, &ПустойЭтапРаботы)
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущийЭтап
		|		ПО ТекущийЭтап.Кандидат = Кандидаты.Кандидат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ЭтапыВакансии
		|		ПО ЭтапыВакансии.Ссылка = Кандидаты.Вакансия
		|		И ЭтапыВакансии.ЭтапРаботы = ТекущийЭтап.ЭтапРаботы
		|ГДЕ
		|	Кандидаты.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано)";
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтправкаСообщений

Функция ТекстВHTML(Текст) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
		ЭлементТело.ДобавитьДочерний(ЭлементБлок);
		
		ЭлементТекст = ДокументHTML.СоздатьТекстовыйУзел(Строка);
		ЭлементБлок.ДобавитьДочерний(ЭлементТекст);
		
	КонецЦикла;
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Результат = ЗаписьHTML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОписанияВакансий

Функция ОписанияВакансийПоУмолчанию(Вакансии) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Вакансии.Ссылка КАК Ссылка,
	|	Вакансии.Наименование КАК НаименованиеВакансии,
	|	Вакансии.ДатаОткрытия КАК ДатаОткрытия,
	|	Вакансии.Ответственный КАК Ответственный,
	|	Вакансии.Ответственный.Наименование КАК КонтактноеЛицо,
	|	Вакансии.Позиция КАК Позиция,
	|	ВЫБОР
	|		КОГДА Вакансии.ПредполагаемыйДоход = 0
	|			ТОГДА """"
	|		ИНАЧЕ Вакансии.ПредполагаемыйДоход
	|	КОНЕЦ КАК ПредполагаемыйДоход,
	|	Вакансии.Условия КАК Условия,
	|	Вакансии.Требования КАК Требования,
	|	Вакансии.Обязанности КАК Обязанности,
	|	ЕСТЬNULL(ШтатноеРасписание.Владелец.Наименование, """") КАК Организация,
	|	ЕСТЬNULL(ШтатноеРасписание.Владелец, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияСсылка,
	|	ЕСТЬNULL(ФизическиеЛица.Ссылка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Вакансии КАК Вакансии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО Вакансии.Позиция = ШтатноеРасписание.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Вакансии.Ответственный.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Вакансии.Ссылка В(&Вакансии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеВакансии";
	
	ТаблицаОписаний = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОписаний.Колонки.Добавить("ЭлектроннаяПочтаКонтактногоЛица", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаОписаний.Колонки.Добавить("ТелефонКонтактногоЛица", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаОписаний.Колонки.Добавить("АдресКонтактногоЛица", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Если ТаблицаОписаний.Количество() > 0 Тогда
		
		СписокФизическихЛиц = ТаблицаОписаний.ВыгрузитьКолонку("ФизическоеЛицо");
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокФизическихЛиц);
		
		СписокПользователей = ТаблицаОписаний.ВыгрузитьКолонку("Ответственный");
		СписокПользователей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПользователей);
		
		ЭлектронныеАдресаФизическихЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокФизическихЛиц, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		ТелефоныФизическихЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокФизическихЛиц, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		
		ЭлектронныеАдресаПользователей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокПользователей, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		ТелефоныПользователей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокПользователей, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОписаний Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) Тогда
				
				ФИО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ФизическоеЛицо, "Фамилия,Имя,Отчество,Инициалы");
				СтрокаТаблицы.КонтактноеЛицо = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИО);
				
			КонецЕсли;
			
			ЭлектронныеАдресаТекФизическогоЛица = ЭлектронныеАдресаФизическихЛиц.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.ФизическоеЛицо));
			ТелефоныТекФизическогоЛица = ТелефоныФизическихЛиц.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.ФизическоеЛицо));
			
			ЭлектронныеАдресаТекПользователя = ЭлектронныеАдресаПользователей.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.Ответственный));
			ТелефоныТекПользователя = ТелефоныПользователей.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.Ответственный));
			
			Если ЭлектронныеАдресаТекФизическогоЛица.Количество() > 0 Тогда
				СтрокаТаблицы.ЭлектроннаяПочтаКонтактногоЛица = ЭлектронныеАдресаТекФизическогоЛица[0].Представление;
			ИначеЕсли ЭлектронныеАдресаТекПользователя.Количество() > 0 Тогда
				СтрокаТаблицы.ЭлектроннаяПочтаКонтактногоЛица = ЭлектронныеАдресаТекПользователя[0].Представление;
			КонецЕсли;
			
			Если ТелефоныТекФизическогоЛица.Количество() > 0 Тогда
				СтрокаТаблицы.ТелефонКонтактногоЛица = ТелефоныТекФизическогоЛица[0].Представление;
			ИначеЕсли ТелефоныТекПользователя.Количество() > 0 Тогда
				СтрокаТаблицы.ТелефонКонтактногоЛица = ТелефоныТекПользователя[0].Представление;
			КонецЕсли;
			
			СтрокаТаблицы.АдресКонтактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				СтрокаТаблицы.ОрганизацияСсылка,
				Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
				СтрокаТаблицы.ДатаОткрытия,
				Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаОписаний;
	
КонецФункции

Процедура УдалитьОписанияВакансии(Вакансия, НаименованияОписаний) Экспорт
	
	Для Каждого НаименованиеОписания Из НаименованияОписаний Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ПубликацияВакансий.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
			НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.ДанныеПубликацииВакансий.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
			НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОписаниеВакансии(Вакансия, ИдентификаторОписания, ДанныеОписания) Экспорт
	
	НаименованиеОписания = ДанныеОписания.Наименование;
	РеквизитыОписания = ДанныеОписания.Реквизиты;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОписания) Тогда
		ИдентификаторОписания = ИдентификаторОписанияВакансииИзНаименования(НаименованиеОписания);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Делаем запись о новом описании.
		НаборЗаписей = РегистрыСведений.ПубликацияВакансий.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
		НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Вакансия = Вакансия;
		НоваяЗапись.МестоПубликации = НаименованиеОписания;
		НоваяЗапись.ИдентификаторВакансии = ИдентификаторОписания;
		
		НаборЗаписей.Записать();
		
		// Записываем реквизиты описания.
		НаборЗаписей = РегистрыСведений.ДанныеПубликацииВакансий.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
		НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
		
		Для Каждого КлючИЗначение Из РеквизитыОписания Цикл
			
			НаборЗаписей.Отбор.ПолеДанных.Установить(КлючИЗначение.Ключ);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Вакансия = Вакансия;
			НоваяЗапись.МестоПубликации = НаименованиеОписания;
			НоваяЗапись.ПолеДанных = КлючИЗначение.Ключ;
			НоваяЗапись.Значение = КлючИЗначение.Значение;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Функция ВыборкаСоставаОписанийВакансий(Вакансии = Неопределено, ТолькоАктуальные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Не ОписанияВакансийДоступны() Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Вакансии.ПустаяСсылка) КАК Вакансия,
			|	"""" КАК МестоПубликации,
			|	"""" КАК ИдентификаторОписания";
		Возврат Запрос.Выполнить().Выбрать();
	КонецЕсли;
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПубликацияВакансий.Вакансия КАК Вакансия,
		|	ПубликацияВакансий.МестоПубликации КАК МестоПубликации,
		|	ВЫРАЗИТЬ(ПубликацияВакансий.ИдентификаторВакансии КАК СТРОКА(100)) КАК ИдентификаторОписания
		|ИЗ
		|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВакансий.СрезПоследних КАК ТекущиеСостоянияВакансий
		|		ПО (ТекущиеСостоянияВакансий.Вакансия = ПубликацияВакансий.Вакансия)
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПубликацияВакансий.МестоПубликации) = ТИП(СТРОКА)
		|	#УсловиеОтбораВакансии
		|	#УсловиеОтбораСостоянияВакансии
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторОписания,
		|	Вакансия";
		
	ТекстУсловияОтбораВакансии = "";
	Если Вакансии <> Неопределено Тогда
		Запрос.УстановитьПараметр("Вакансии", Вакансии);
		ТекстУсловияОтбораВакансии = "И ПубликацияВакансий.Вакансия В (&Вакансии)";
	КонецЕсли;
	
	ТекстУсловияОтбораСостоянияВакансии = "";
	Если ТолькоАктуальные Тогда
		ТекстУсловияОтбораСостоянияВакансии = "И (НЕ ТекущиеСостоянияВакансий.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Закрыта), ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Отменена)))";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеОтбораВакансии", ТекстУсловияОтбораВакансии);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеОтбораСостоянияВакансии", ТекстУсловияОтбораСостоянияВакансии);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаДанныхОписанияВакансии(ИдентификаторОписания, Вакансии) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	Запрос.УстановитьПараметр("ИдентификаторОписания", ИдентификаторОписания);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПубликацияВакансий.Вакансия КАК Вакансия,
	|	ПубликацияВакансий.МестоПубликации КАК МестоПубликации
	|ПОМЕСТИТЬ ОписаниеВакансииДляПечати
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|ГДЕ
	|	ПубликацияВакансий.Вакансия В(&Вакансии)
	|	И (ВЫРАЗИТЬ(ПубликацияВакансий.ИдентификаторВакансии КАК СТРОКА(100))) = &ИдентификаторОписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПубликацииВакансий.Вакансия КАК Вакансия,
	|	ДанныеПубликацииВакансий.ПолеДанных КАК ПолеДанных,
	|	ДанныеПубликацииВакансий.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДанныеПубликацииВакансий КАК ДанныеПубликацииВакансий
	|ГДЕ
	|	(ДанныеПубликацииВакансий.Вакансия, ДанныеПубликацииВакансий.МестоПубликации) В
	|			(ВЫБРАТЬ
	|				ОписаниеВакансииДляПечати.Вакансия КАК Вакансия,
	|				ОписаниеВакансииДляПечати.МестоПубликации КАК МестоПубликации
	|			ИЗ
	|				ОписаниеВакансииДляПечати КАК ОписаниеВакансииДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вакансия";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ОписанияВакансийДоступны() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПубликацияВакансий);
	
КонецФункции

Функция ПараметрыОтбора(Объект)
	
	Возврат Новый Структура("Объект", Объект);
	
КонецФункции

Функция ИдентификаторОписанияВакансииИзНаименования(Знач НаименованиеОписания)
	
	ИдентификаторОписания = "";
	Цифры = "1234567890";
	Буквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ ";
	
	НомерСимвола = 1;
	
	Пока НомерСимвола <= СтрДлина(НаименованиеОписания) Цикл
		
		ТекущийСимвол = Сред(НаименованиеОписания, НомерСимвола, 1);
		Если Найти(Буквы, ВРег(ТекущийСимвол)) = 0 И Найти(Цифры, ТекущийСимвол) = 0 Тогда
			ТекущийСимвол = " ";
		КонецЕсли;
		
		ИдентификаторОписания = ИдентификаторОписания + ТекущийСимвол;
		НомерСимвола = НомерСимвола + 1;
		
	КонецЦикла;
	
	Строки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторОписания, " ");
	
	КоличествоСтрок = Строки.Количество();
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < КоличествоСтрок Цикл
		Строки[ИндексСтроки] = ТРег(Строки[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат СтрСоединить(Строки);
	
КонецФункции

#КонецОбласти

#Область ЗащитаПерсональныхДанных

Процедура СкрытьПерсональныеДанныеСубъекта(Параметры, АдресРезультата = "") Экспорт
	
	ЗащитаПерсональныхДанных.СкрытьПерсональныеДанныеСубъектов(Параметры.Субъект, Параметры.СообщатьОбИсключениях);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПричиныОткрытияВакансий.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПричиныОтклоненияКандидатов.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ЭтапыРаботыСКандидатами.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ИсточникиИнформацииОКандидатах.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПодборПерсонала.СформироватьШаблоныСообщений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.24";
	Обработчик.Процедура = "РегистрыСведений.КомментарииКандидатов.ЗаполнениеДоступностиПоПризнакуСкрытый";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("37067dc2-27b5-4707-bb33-d23f36078699");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение доступности комментариев кандидатов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.33";
	Обработчик.Процедура = "ПодборПерсонала.ПеренестиЗначениеИспользоватьПодборПерсонала";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("560d0880-3646-4e20-8060-99dbcbedb362");
	Обработчик.Комментарий = НСтр("ru = 'Перенос настройки использования подбора персонала.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.33";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПодбораПерсонала.УстановитьИспользованиеЗаявокИСогласованияВакансий";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("277e4c95-31ed-4661-9b9c-9702b1e76eae");
	Обработчик.Комментарий = НСтр("ru = 'Установка использования согласования вакансий и заявок на подбор персонала.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.35";
	Обработчик.Процедура = "РегистрыСведений.СогласованиеВакансий.ЗаполнитьСведенияСогласования";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("89caf58a-5a57-4993-8029-b8e4de8f481f");
	Обработчик.Комментарий = НСтр("ru = 'Заполнить сведения о согласовании вакансий.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.10";
	Обработчик.Процедура = "ПодборПерсонала.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a5f41dbb-7a2d-416b-a41e-04dbf3294ce3");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений: подбор персонала.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.7";
	Обработчик.Процедура = "ПодборПерсоналаПроверки.ПриНачальномЗаполненииДанныхКонтроляЗадержкиКандидатов";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("21d8ce80-77e3-45e7-8090-c683f9f1957a");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных контроля задержки кандидатов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.7";
	Обработчик.Процедура = "Справочники.ЭтапыРаботыСКандидатами.ЗаполнитьНастройкиКонтроляЗадержкиКандидатов";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3a8db2ba-fb6c-4250-9812-88b40c901aa2");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение настроек контроля задержки кандидатов в этапах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.16";
	Обработчик.Процедура = "ПодборПерсонала.УточнитьВладельцевШаблоновСообщенийСогласования";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9f4b01f6-1936-41a8-901e-29d4d9381f08");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение ранее созданных шаблонов сообщений согласования кандидатов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.16";
	Обработчик.Процедура = "ПодборПерсонала.УточнитьВладельцевШаблоновСообщенийИзмененияЭтаповРаботы";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ccd9e7e1-a037-49ca-9371-384e2737b871");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение ранее созданных шаблонов сообщений смены этапов работы с кандидатами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.16";
	Обработчик.Процедура = "ПодборПерсонала.ИсправитьБесконтекстныеШаблоныСообщений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("72fdaf33-fe26-461a-bc9d-819a4822b5db");
	Обработчик.Комментарий = НСтр("ru = 'Исправление ранее созданных бесконтекстных шаблонов сообщений.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.16";
	Обработчик.Процедура = "ПодборПерсонала.ЗаменитьУстаревшиеПараметрыШаблоновСообщений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2b94ebbc-580b-43cf-b2d1-1e214ea025f0");
	Обработчик.Комментарий = НСтр("ru = 'Замена устаревших параметров шаблонов сообщений.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.80";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6075c931-4566-47e0-8963-e4ed5efcfb75");
	Обработчик.Процедура = "Справочники.Кандидаты.ЗаполнитьРолиКандидатов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ролей кандидатов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.77";
	Обработчик.Процедура = "ПодборПерсонала.ОбновитьНаборыЗначенийДоступаВзаимодействий";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0293f0ac-2083-4549-9ebd-7b9810a1e4dc");
	Обработчик.Комментарий = НСтр("ru = 'Обновление наборов значений доступа взаимодействий с кандидатами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.15.8";
	Обработчик.Процедура = "ПодборПерсонала.ОбновитьОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0445ee22-e728-4402-bad6-feb24a0b45ac");
	Обработчик.Комментарий = НСтр("ru = 'Обновление регламентного задания по отклонению кандидатов задержавшихся на одном этапе.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.15.10";
	Обработчик.Процедура = "Справочники.ПричиныОтклоненияКандидатов.УточнитьНастройкуПорядкаПричинОтклонения";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("61b6894e-85bb-4838-a049-12ba90abd790");
	Обработчик.Комментарий = НСтр("ru = 'Исправить нарушения порядка причин отклонения кандидатов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.15.62";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПодбораПерсонала.УстановитьПериодРаботыСВакансией";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("760abb1a-b2ad-4b2b-917b-421c78955968");
	Обработчик.Комментарий = НСтр("ru = 'Установка периода работы с вакансией по умолчанию.'");
	
КонецПроцедуры

Процедура СформироватьШаблоныСообщений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныСообщений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	(ШаблоныСообщений.ВладелецШаблона ССЫЛКА Перечисление.ИспользованиеШаблоновСообщенийПриПодбореПерсонала
		|			ИЛИ ШаблоныСообщений.ВладелецШаблона ССЫЛКА Перечисление.СостоянияСогласования)";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;

	// АПК:1223-выкл. Личные местоимения используются в текстах шаблонов 

	// Отправка вакансии.
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Вакансии.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Вакансии.Синоним;
	ПараметрыШаблона.ТипШаблона = "Письмо";
	УстановитьФорматПисьмаШаблонаСообщений(ПараметрыШаблона);	
	ПараметрыШаблона.Тема = НСтр("ru = 'Вакансия «[Вакансии.Наименование]»'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Получатель.Имя] [Получатель.Отчество]!
			 |
			 |Возможно, вам будет интересна вакансия нашей компании «[Вакансии.Наименование]».
			 |
			 |Обязанности:
			 |[Вакансии.Обязанности]
			 |
			 |Требования:
			 |[Вакансии.Требования]
			 |
			 |Условия:
			 |[Вакансии.Условия]
			 |
			 |С уважением, служба персонала [Позиция.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСВакансией;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Описание вакансии'"), ПараметрыШаблона);

	// Отправка одного кандидата.
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "Письмо";
	УстановитьФорматПисьмаШаблонаСообщений(ПараметрыШаблона);	
	ПараметрыШаблона.Тема = НСтр("ru = '[Кандидаты.ФизическоеЛицо.ФИО] «[Кандидаты.Вакансия.Наименование]»'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Получатель.Имя] [Получатель.Отчество]!
			 |
			 |Пожалуйста, рассмотрите резюме кандидата:
			 |[Кандидаты.ФизическоеЛицо.ФИО]
			 |
			 |Материалы во вложении.
			 |			 
			 |С уважением,
			 |[ТекущийПользователь.ФизическоеЛицо.Фамилия] [ТекущийПользователь.ФизическоеЛицо.Имя]'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСКандидатом;
	ПараметрыШаблона.ВыбранныеВложения.Вставить("Резюме");
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Резюме кандидата'"), ПараметрыШаблона);

	// Отправка нескольких кандидатов.
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "Письмо";
	УстановитьФорматПисьмаШаблонаСообщений(ПараметрыШаблона);	
	ПараметрыШаблона.Тема = НСтр("ru = 'Резюме кандидатов'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Получатель.Имя] [Получатель.Отчество]!
			 |
			 |Пожалуйста, рассмотрите резюме кандидатов:
			 |[Списки.СписокКандидатов]
			 |
			 |С уважением,
			 |[ТекущийПользователь.ФизическоеЛицо.Фамилия] [ТекущийПользователь.ФизическоеЛицо.Имя]'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСКандидатами;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Резюме кандидатов'"), ПараметрыШаблона);

	// Кандидат одобрен (письмо).
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "Письмо";
	УстановитьФорматПисьмаШаблонаСообщений(ПараметрыШаблона);	
	ПараметрыШаблона.Тема = НСтр("ru = 'Ваша кандидатура одобрена'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]!
              |
              |Мы рады сообщить вам, что ваша кандидатура одобрена руководством на должность «[Кандидаты.Вакансия]».
              |Для оформления документов ждем вас в нашем офисе по адресу [Кандидаты.Организация.ФактическийАдрес]. 
              |
              |С собой необходимо иметь: паспорт, трудовую книжку, СНИЛС, военный билет (если вы военнообязанный).
              |
              |С уважением, служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОдобрениеКандидата;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат одобрен (письмо)'"), ПараметрыШаблона);
	
	// Кандидат одобрен (SMS).
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "SMS";
	ПараметрыШаблона.Текст = 
		НСтр("ru = '[Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]! Ваша кандидатура одобрена на должность «[Кандидаты.Вакансия]». Для оформления документов ждем вас по адресу: [Кандидаты.Организация.ФактическийАдрес]. С собой иметь: паспорт, трудовую книжку, СНИЛС, военный билет (если вы военнообязанный). Служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОдобрениеКандидата;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат одобрен (SMS)'"), ПараметрыШаблона);
	
	// Кандидат отклонен (письмо).
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "Письмо";
	УстановитьФорматПисьмаШаблонаСообщений(ПараметрыШаблона);	
	ПараметрыШаблона.Тема = НСтр("ru = 'Ответ по вакансии'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]!
              |
              |К сожалению, в конкурсе на вакансию «[Кандидаты.Вакансия]» принято решение в пользу другого кандидата.
              |Благодарим вас за участие.
              |Ваше резюме внесено в базу данных службы персонала. В случае, если у нас возникнет вакансия, подходящая вам по вашим требованиям, мы обязательно вам сообщим.
              |
              |С уважением, служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОтклонениеКандидата;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат отклонен (письмо)'"), ПараметрыШаблона);
	
	// Кандидат отклонен (SMS).
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "SMS";
	ПараметрыШаблона.Текст = 
		НСтр("ru = '[Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]! К сожалению, ваша кандидатура была отклонена в конкурсе на вакансию «[Кандидаты.Вакансия]». Благодарим вас за участие. Служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОтклонениеКандидата;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат отклонен (SMS)'"), ПараметрыШаблона);

	// Приглашение на собеседование (письмо).
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "Письмо";
	УстановитьФорматПисьмаШаблонаСообщений(ПараметрыШаблона);	
	ПараметрыШаблона.Тема = НСтр("ru = 'Приглашение на собеседование'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]!
              |
              |Наша компания [Кандидаты.Организация.Наименование] получила ваш отклик на вакансию «[Кандидаты.Вакансия]».
              |Мы внимательно ознакомились с вашим резюме. Считаем, что ваши знания и навыки соответствуют заявленным требованиям. 
              |
              |Приглашаем вас пройти собеседование со специалистом по подбору персонала [ЭтапРаботы.Дата] в [ЭтапРаботы.Время] в нашем офисе по адресу [Кандидаты.Организация.ФактическийАдрес].
              |
              |Просим взять с собой паспорт.
              |
              |С уважением, служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ИзменениеЭтапаРаботыСКандидатом;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Приглашение на собеседование (письмо)'"), ПараметрыШаблона);
	
	// Приглашение на собеседование (SMS).
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	ПараметрыШаблона.ТипШаблона = "SMS";
	ПараметрыШаблона.Текст = 
		НСтр("ru = '[Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]! Мы ознакомились с вашим резюме на вакансию «[Кандидаты.Вакансия]». Приглашаем вас пройти собеседование [ЭтапРаботы.Дата] в [ЭтапРаботы.Время] по адресу [Кандидаты.Организация.ФактическийАдрес]. Просим взять с собой паспорт. Служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ИзменениеЭтапаРаботыСКандидатом;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Приглашение на собеседование (SMS)'"), ПараметрыШаблона);

	// АПК:1223-вкл. 
	
КонецПроцедуры

Процедура УстановитьФорматПисьмаШаблонаСообщений(ПараметрыШаблона)
	
	Если Взаимодействия.ИспользуетсяПочтовыйКлиент() И Не Взаимодействия.ОтправлятьПисьмаВФорматеHTML() Тогда
		ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗначениеИспользоватьПодборПерсонала(ПараметрыОбновления) Экспорт
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.НастройкиПодбораПерсонала");
	Блокировка.Добавить("Константа.ИспользоватьПодборПерсонала");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, 
			Метаданные.Константы.ИспользоватьПодборПерсонала);
	КонецПопытки;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодбораПерсонала.УдалитьИспользоватьПодборПерсонала КАК УдалитьИспользоватьПодборПерсонала
		|ИЗ
		|	РегистрСведений.НастройкиПодбораПерсонала КАК НастройкиПодбораПерсонала";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОтменитьТранзакцию();
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ЗначениеВРегистре = РезультатЗапроса.Выгрузить()[0].УдалитьИспользоватьПодборПерсонала;
	ЗначениеВКонстанте = Константы.ИспользоватьПодборПерсонала.Получить();
	Если ЗначениеВРегистре = Истина И ЗначениеВКонстанте = Ложь Тогда
		МенеджерЗначения = Константы.ИспользоватьПодборПерсонала.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы.Не удалось зафиксировать транзакцию'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УточнитьВладельцевШаблоновСообщенийСогласования(ПараметрыОбновления = Неопределено) Экспорт

	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить("Справочник.Вакансии");
	НазначенияШаблонов.Добавить("Справочник.Кандидаты");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НазначенияШаблонов", НазначенияШаблонов); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка КАК Ссылка,
		|	ШаблоныСообщений.ВладелецШаблона КАК ВладелецШаблона
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании В(&НазначенияШаблонов)
		|	И ШаблоныСообщений.ВладелецШаблона ССЫЛКА Перечисление.СостоянияСогласования";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
			ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Ложь);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ВладелецШаблона = Перечисления.СостоянияСогласования.Согласовано Тогда
			ШаблонОбъект.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОдобрениеКандидата;
		ИначеЕсли Выборка.ВладелецШаблона = Перечисления.СостоянияСогласования.Отклонено Тогда
			ШаблонОбъект.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОтклонениеКандидата;
		Иначе
			ШаблонОбъект.ВладелецШаблона = Неопределено;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ШаблонОбъект);
	КонецЦикла;

	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура УточнитьВладельцевШаблоновСообщенийИзмененияЭтаповРаботы(ПараметрыОбновления = Неопределено) Экспорт

	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить("Справочник.Вакансии");
	НазначенияШаблонов.Добавить("Справочник.Кандидаты");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НазначенияШаблонов", НазначенияШаблонов); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании В(&НазначенияШаблонов)
		|	И ШаблоныСообщений.ВладелецШаблона ССЫЛКА Справочник.ЭтапыРаботыСКандидатами";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
			ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Ложь);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ИзменениеЭтапаРаботыСКандидатом;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ШаблонОбъект);
	КонецЦикла;

	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура ИсправитьБесконтекстныеШаблоныСообщений(ПараметрыОбновления = Неопределено) Экспорт

	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить("Справочник.Вакансии");
	НазначенияШаблонов.Добавить("Справочник.Кандидаты");

	ОписаниеОднойВакансии = НСтр("ru = 'Описание одной вакансии на ознакомление'");
	ОписаниеНесколькихВакансий = НСтр("ru = 'Описания нескольких вакансий на ознакомление'");
	ВнутренниеСсылкиНаВакансии = НСтр("ru = 'Внутренние ссылки на несколько вакансий'");
	РезюмеОдногоКандидата = НСтр("ru = 'Резюме одного кандидата на ознакомление'");
	РезюмеНесколькихКандидатов = НСтр("ru = 'Резюме нескольких кандидатов на ознакомление'");
	ВнутренниеСсылкиНаКандидатов = НСтр("ru = 'Внутренние ссылки на резюме нескольких кандидатов'");

	НаименованияШаблонов = Новый Массив;
	НаименованияШаблонов.Добавить(ОписаниеОднойВакансии);
	НаименованияШаблонов.Добавить(ОписаниеНесколькихВакансий);
	НаименованияШаблонов.Добавить(ВнутренниеСсылкиНаВакансии);
	НаименованияШаблонов.Добавить(РезюмеОдногоКандидата);
	НаименованияШаблонов.Добавить(РезюмеНесколькихКандидатов);
	НаименованияШаблонов.Добавить(ВнутренниеСсылкиНаКандидатов);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НазначенияШаблонов", НазначенияШаблонов); 
	Запрос.УстановитьПараметр("НаименованияШаблонов", НаименованияШаблонов); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка КАК Ссылка,
		|	ШаблоныСообщений.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании В(&НазначенияШаблонов)
		|	И ШаблоныСообщений.ВладелецШаблона = НЕОПРЕДЕЛЕНО
		|	И ШаблоныСообщений.Наименование В(&НаименованияШаблонов)
		|	И НЕ ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
			ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Ложь);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ШаблонОбъект.Наименование = ОписаниеОднойВакансии Тогда
			ШаблонОбъект.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСВакансией;
			ШаблонОбъект.Наименование = НСтр("ru = 'Описание вакансии'");
			ШаблонОбъект.ТемаПисьма = НСтр("ru = 'Вакансия «[Вакансии.Наименование]»'");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ШаблонОбъект);
		ИначеЕсли ШаблонОбъект.Наименование = РезюмеОдногоКандидата Тогда
			ШаблонОбъект.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСКандидатом;
			ШаблонОбъект.Наименование = НСтр("ru = 'Резюме кандидата'");
			ШаблонОбъект.ТемаПисьма = НСтр("ru = '[Кандидаты.ФизическоеЛицо.ФИО] «[Кандидаты.Вакансия.Наименование]»'");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ШаблонОбъект);
		ИначеЕсли ШаблонОбъект.Наименование = РезюмеНесколькихКандидатов Тогда
			ШаблонОбъект.ВладелецШаблона = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСКандидатами;
			ШаблонОбъект.Наименование = НСтр("ru = 'Резюме кандидатов'");
			ШаблонОбъект.ТемаПисьма = НСтр("ru = 'Резюме кандидатов'");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ШаблонОбъект);
		Иначе
			ШаблонОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;

	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура ЗаменитьУстаревшиеПараметрыШаблоновСообщений(ПараметрыОбновления = Неопределено) Экспорт

	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить("Справочник.Вакансии");
	НазначенияШаблонов.Добавить("Справочник.Кандидаты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НазначенияШаблонов", НазначенияШаблонов); 
	Запрос.УстановитьПараметр("НазначениеКандидаты", "Справочник.Кандидаты"); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании В(&НазначенияШаблонов)
		|	И (ШаблоныСообщений.ТекстШаблонаПисьма ПОДОБНО ""%\[Произвольные.ФИОПолучателя\]%"" СПЕЦСИМВОЛ ""\""
		|			ИЛИ ШаблоныСообщений.ТекстШаблонаПисьмаHTML ПОДОБНО ""%\[Произвольные.ФИОПолучателя\]%"" СПЕЦСИМВОЛ ""\"")
		|	И НЕ ШаблоныСообщений.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании В(&НазначениеКандидаты)
		|	И (ШаблоныСообщений.ТекстШаблонаПисьма ПОДОБНО ""%\[Произвольные.ПредставлениеСпискаПредметов\]%"" СПЕЦСИМВОЛ ""\""
		|			ИЛИ ШаблоныСообщений.ТекстШаблонаПисьмаHTML ПОДОБНО ""%\[Произвольные.ПредставлениеСпискаПредметов\]%"" СПЕЦСИМВОЛ ""\"")
		|	И НЕ ШаблоныСообщений.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
			ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Ложь);

	ЗаменаПараметров = Новый Соответствие;
	ЗаменаПараметров.Вставить("[Произвольные.ФИОПолучателя]", "[Получатель.ФИО]");
	ЗаменаПараметров.Вставить("[Произвольные.ПредставлениеСпискаПредметов]", "[Списки.СписокКандидатов]");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого КлючИЗначение Из ЗаменаПараметров Цикл
			ШаблонОбъект.ТекстШаблонаПисьма = СтрЗаменить(ШаблонОбъект.ТекстШаблонаПисьма, КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ШаблонОбъект.ТекстШаблонаПисьмаHTML = СтрЗаменить(ШаблонОбъект.ТекстШаблонаПисьмаHTML, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ШаблонОбъект);
	КонецЦикла;

	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ОбновитьНаборыЗначенийДоступаВзаимодействий(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Взаимодействие КАК Взаимодействие
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
		|ГДЕ
		|	Предмет ССЫЛКА Справочник.Кандидаты
		|	И Взаимодействие НЕ В (&Обработанные)";
	
	Обработанные = Новый Массив;
	Пока Истина Цикл
		Запрос.УстановитьПараметр("Обработанные", Обработанные);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			УправлениеДоступом.ОбновитьНаборыЗначенийДоступа(Выборка.Взаимодействие, Истина);
			Обработанные.Добавить(Выборка.Взаимодействие);
		КонецЦикла;
	КонецЦикла;

	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ОбновитьОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе(ПараметрыОбновления = Неопределено) Экспорт
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОтклонениеКандидатовЗадержавшихсяНаОдномЭтапе);
	
	Если Задание.Использование = ПолучитьФункциональнуюОпцию("ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе") Тогда
		Возврат;
	КонецЕсли;
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(Задание, 
		ПолучитьФункциональнуюОпцию("ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе"));
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти