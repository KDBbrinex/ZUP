#Область СлужебныйПрограммныйИнтерфейс

#Область ПрофилиБезопасности

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	НовыеРазрешения = Новый Массив;

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		АдресСервера(),
		443,
		НСтр("ru = 'Система онлайн бронирования командировок Smartway (https://smartway.today/)'"));
	НовыеРазрешения.Добавить(Разрешение);

	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

Процедура ЗагрузитьНовыеПоездки(Поездки, Версия, Организация) Экспорт
	
	ПоляСДатами = Новый Массив;
	ПоляСДатами.Добавить("checkin_date");
	ПоляСДатами.Добавить("checkout_date");
	ПоляСДатами.Добавить("book_date");
	ПоляСДатами.Добавить("last_change_date");
	ПоляСДатами.Добавить("event_date");
	ПоляСДатами.Добавить("date_arrive");
	ПоляСДатами.Добавить("date_depart");
	ПоляСДатами.Добавить("birthday");
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("trip.get_after_change", Версия, ПоляСДатами);
	Исключение
		Возврат;
	КонецПопытки;
	
	Версия = ОтветСервиса["result"]["last_version_id"];
	
	ЗаполнитьПоездки(Поездки, ОтветСервиса, Организация);
	
КонецПроцедуры

Процедура ЗагрузитьПоездкиЗаПериод(Поездки, Период, Организация) Экспорт
	
	ПараметрыМетода = Новый Структура(
		"start_date,
		|end_date");
	
	ПараметрыМетода["start_date"] = ДатаВСтроку(Период.ДатаНачала); 
	ПараметрыМетода["end_date"] = ДатаВСтроку(Период.ДатаОкончания);
	
	ПоляСДатами = Новый Массив;
	ПоляСДатами.Добавить("checkin_date");
	ПоляСДатами.Добавить("checkout_date");
	ПоляСДатами.Добавить("book_date");
	ПоляСДатами.Добавить("last_change_date");
	ПоляСДатами.Добавить("event_date");
	ПоляСДатами.Добавить("date_arrive");
	ПоляСДатами.Добавить("date_depart");
	ПоляСДатами.Добавить("birthday");
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("trip.get_by_range", ПараметрыМетода, ПоляСДатами);
	Исключение
		Возврат;
	КонецПопытки;
	
	ЗаполнитьПоездки(Поездки, ОтветСервиса, Организация);
	
КонецПроцедуры

Процедура ОтправитьЗаявкуНаБронирование(ДанныеЗаявки, Состояние) Экспорт
	
	Если ДанныеЗаявки.Отменена Тогда
		ОтправитьОтменуЗаявкиНаБронирование(ДанныеЗаявки, Состояние);
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура(
		"id,
		|travellers,
		|comment,
		|air_items,
		|hotel_items,
		|train_items,
		|transfer_items");
	
	ЗаполнитьПараметрыСозданияЗаявкиНаБронирование(ПараметрыМетода, ДанныеЗаявки);
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("request.save", ПараметрыМетода);
	Исключение
		Состояние = Перечисления.СостоянияБронированияКомандировки.ПустаяСсылка();
		ВызватьИсключение;
	КонецПопытки;
	
	Состояние = Перечисления.СостоянияБронированияКомандировки.Отправлено;
	
КонецПроцедуры

Процедура ЗагрузитьПоездкиПоЗаявке(Поездки, ЗаявкаСсылка, СистемаБронирования) Экспорт
	
	Если СистемаБронирования <> Перечисления.СистемыБронированияКомандировок.Smartway Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаявки = БронированиеКомандировок.ИдентификаторЗаявкиПоСсылке(ЗаявкаСсылка);
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("trip.get_by_request", ИдентификаторЗаявки);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ЗаполнитьПоездки(Поездки, ОтветСервиса);
	
КонецПроцедуры

Процедура ПолучитьБроньПоИдентификатору(ИдентификаторБрони, ДанныеФайла, СистемаБронирования) Экспорт
	
	Если СистемаБронирования <> Перечисления.СистемыБронированияКомандировок.Smartway Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("trip.item_voucher", ИдентификаторБрони);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ДанныеФайла = ПолучитьДвоичныеДанныеИзBase64Строки(ОтветСервиса["result"]["content"]);
	
КонецПроцедуры

Процедура ЗаполнитьСостоянияЗаявокНаБронирование(СостоянияЗаявок) Экспорт
	
	ИдентификаторыЗаявок = СостоянияЗаявок.ВыгрузитьКолонку("ИдентификаторЗаявки");
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("request.status", ИдентификаторыЗаявок);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ОтборСтрок = Новый Структура("ИдентификаторЗаявки");
	Для Каждого КлючИЗначение Из ОтветСервиса["result"] Цикл
		ОтборСтрок.ИдентификаторЗаявки = КлючИЗначение.Ключ;
		НайденныеСтроки = СостоянияЗаявок.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.СостояниеБронирования = СостоянияБронирования(КлючИЗначение.Значение);
			НайденнаяСтрока.СостояниеПолучено = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацииСистемыБронирования(Организации, СистемаБронирования) Экспорт
	
	Если СистемаБронирования <> Перечисления.СистемыБронированияКомандировок.Smartway Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("account.companies", Неопределено);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Для Каждого СтрокаОтвета Из ОтветСервиса["result"] Цикл
		СтрокаОрганизации = Организации.Добавить();
		СтрокаОрганизации.ИНН = СтрокаОтвета["inn"];
		СтрокаОрганизации.КПП = СтрокаОтвета["kpp"];
		СтрокаОрганизации.Наименование = СтрокаОтвета["name"];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАэропортыПоПодстроке(Аэропорты, Подстрока) Экспорт
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("airline.airport_autocomplete", Подстрока);
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаОтвета Из ОтветСервиса["result"] Цикл
		НоваяСтрока = Аэропорты.Добавить();
		НоваяСтрока.Код = СтрокаОтвета["code"];
		НоваяСтрока.Название = СтрокаОтвета["name_rus"];
		НоваяСтрока.Город = СтрокаОтвета["city"]["name_rus"];
		НоваяСтрока.Страна = СтрокаОтвета["country"]["name_rus"];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтанцииПоПодстроке(Станции, Подстрока) Экспорт
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("train.station_autocomplete", Подстрока);
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаОтвета Из ОтветСервиса["result"] Цикл
		НоваяСтрока = Станции.Добавить();
		НоваяСтрока.Код = СтрокаОтвета["code"];
		НоваяСтрока.Название = СтрокаОтвета["name"];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГостиницыПоПодстроке(Гостиницы, Подстрока) Экспорт
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("hotel.autocomplete", Подстрока);
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаОтвета Из ОтветСервиса["result"] Цикл
		НоваяСтрока = Гостиницы.Добавить();
		НоваяСтрока.Код = СтрокаОтвета["id"];
		Если СтрокаОтвета["is_region"] = Истина Тогда
			НоваяСтрока.Город = СтрокаОтвета["name"];
			НоваяСтрока.Страна = СтрокаОтвета["location"];
			НоваяСтрока.ВидЗапроса = Перечисления.ВидыЗапросаБронированияМестаПроживания.Регион;
		Иначе
			НоваяСтрока.Название = СтрокаОтвета["name"];
			НоваяСтрока.Город = СтрокаОтвета["location"];
			НоваяСтрока.ВидЗапроса = Перечисления.ВидыЗапросаБронированияМестаПроживания.Гостиница;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьСотрудников(СистемаБронирования, ДанныеФизическихЛиц, ПараметрыОтправки) Экспорт
	
	Если СистемаБронирования <> Перечисления.СистемыБронированияКомандировок.Smartway Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура("employees");
	
	ЗаполнитьПараметрыОтправкиСотрудников(ПараметрыМетода, ДанныеФизическихЛиц);
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("employees.save", ПараметрыМетода);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ОбработатьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаявкаНаБронирование

Процедура ЗаполнитьПараметрыСозданияЗаявкиНаБронирование(ПараметрыМетода, ДанныеЗаявки)
	
	ПараметрыМетода["id"] = БронированиеКомандировок.ИдентификаторЗаявкиПоСсылке(ДанныеЗаявки.Заявка);
	
	ПараметрыМетода["travellers"] = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеЗаявки.ФизическиеЛица Цикл
		ДобавитьФизическоеЛицоВЗаявкуНаБронирование(ПараметрыМетода["travellers"], СтрокаТаблицы, ДанныеЗаявки);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеЗаявки.Услуги Цикл
		ДобавитьБилетВЗаявкуНаБронирование(ПараметрыМетода, СтрокаТаблицы);
		ДобавитьПроживаниеВЗаявкуНаБронирование(ПараметрыМетода, СтрокаТаблицы);
	КонецЦикла;
	
	ПараметрыМетода["comment"] = ДанныеЗаявки.Пожелания;
	
КонецПроцедуры

Процедура ДобавитьФизическоеЛицоВЗаявкуНаБронирование(ОписанияФизическихЛиц, СтрокаФизическогоЛица, ДанныеЗаявки)
	
	ОписаниеФизлица = ОписаниеФизическогоЛица();
	ЗаполнитьОписаниеФизическогоЛица(ОписаниеФизлица, СтрокаФизическогоЛица, ДанныеЗаявки);
	ОписанияФизическихЛиц.Добавить(ОписаниеФизлица);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеФизическогоЛица(ОписаниеФизлица, СтрокаФизлица, ДанныеЗаявки)
	
	ОписаниеФизлица["id"] = Строка(СтрокаФизлица.Ссылка.УникальныйИдентификатор());
	ОписаниеФизлица["name"] = СтрокаФизлица.Имя;
	ОписаниеФизлица["surname"] = СтрокаФизлица.Фамилия;
	ОписаниеФизлица["patronymic"] = СтрокаФизлица.Отчество;
	ОписаниеФизлица["name_eng"] = СтрокаФизлица.ИмяЛатиницей;
	ОписаниеФизлица["surname_eng"] = СтрокаФизлица.ФамилияЛатиницей;
	ОписаниеФизлица["patronymic_eng"] = СтроковыеФункции.СтрокаЛатиницей(СтрокаФизлица.Отчество);
	ОписаниеФизлица["sex"] = ПолФизическогоЛица(СтрокаФизлица.Пол);
	ОписаниеФизлица["birthday"] = СтрокаФизлица.ДатаРождения;
	ОписаниеФизлица["citizenship_code"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаФизлица.Гражданство, "КодАльфа2");
	ОписаниеФизлица["email"] = СтрокаФизлица.EMail;
	ОписаниеФизлица["mobile_phone"] = СтрокаФизлица.Телефон;
	
	Для Каждого СтрокаДокумента Из СтрокаФизлица.Документы Цикл
		ДобавитьДанныеПаспортаВОписаниеФизическогоЛица(ОписаниеФизлица["documents"], СтрокаДокумента);
	КонецЦикла;
	
	ОписаниеФизлица["companies_inn"].Добавить(ДанныеЗаявки.ИННОрганизации);
	
КонецПроцедуры

Процедура ДобавитьДанныеПаспортаВОписаниеФизическогоЛица(ОписанияДокументов, СтрокаДокумента)
	
	Паспорт = Новый Структура(
		"type,
		|number,
		|due_date");
	
	ОписанияДокументов.Добавить(Паспорт);
	
	Если СтрокаДокумента.ВидДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ") Тогда
		Паспорт["type"] = "foreign_passport";
	Иначе
		Паспорт["type"] = "domestic_passport";
	КонецЕсли;
	
	Паспорт["number"] = СтрокаДокумента.НомерДокумента;
	Если ЗначениеЗаполнено(СтрокаДокумента.СрокДействияДокумента) Тогда
		Паспорт["due_date"] = СтрокаДокумента.СрокДействияДокумента;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьБилетВЗаявкуНаБронирование(ПараметрыМетода, СтрокаУслуги)
	
	Если СтрокаУслуги.ВидУслуги <> Перечисления.ВидыУслугБронированияКомандировок.Билеты Тогда
		Возврат;
	КонецЕсли;
	
	Содержимое = СтрокаУслуги.Содержимое;
	
	ДобавитьАвиаБилетВЗаявкуНаБронирование(ПараметрыМетода, Содержимое);
	ДобавитьБилетНаПоездВЗаявкуНаБронирование(ПараметрыМетода, Содержимое);
	
КонецПроцедуры

Процедура ДобавитьАвиаБилетВЗаявкуНаБронирование(ПараметрыМетода, Содержимое)
	
	Если Содержимое.ВидТранспорта <> Перечисления.ВидыТранспортаБронированияБилетов.Самолет Тогда
		Возврат;
	КонецЕсли;
	
	Авиабилет = Новый Структура(
		"project_id,
		|fare_class,
		|is_direct,
		|routes,
		|travellers");
	
	Авиабилет["fare_class"] = КлассПерелета(Содержимое.КлассПерелета);
	Авиабилет["is_direct"] = Ложь;
	Авиабилет["travellers"] = ПараметрыМетода["travellers"];
	
	Авиабилет["routes"] = Новый Массив;
	Для Каждого СегментМаршрута Из Содержимое.Маршрут Цикл
		ОписаниеСегмента = Новый Структура(
			"departure_airport_code,
			|arrival_airport_code,
			|departure_date");
		ОписаниеСегмента["departure_airport_code"] = СегментМаршрута.ПунктОтправления;
		ОписаниеСегмента["arrival_airport_code"] = СегментМаршрута.ПунктПрибытия;
		ОписаниеСегмента["departure_date"] = СегментМаршрута.ДатаОтправления;
		Авиабилет["routes"].Добавить(ОписаниеСегмента);
	КонецЦикла;
	
	Если ПараметрыМетода["air_items"] = Неопределено Тогда
		ПараметрыМетода["air_items"] = Новый Массив;
	КонецЕсли;
	ПараметрыМетода["air_items"].Добавить(Авиабилет);
	
КонецПроцедуры

Процедура ДобавитьБилетНаПоездВЗаявкуНаБронирование(ПараметрыМетода, Содержимое)
	
	Если Содержимое.ВидТранспорта <> Перечисления.ВидыТранспортаБронированияБилетов.Поезд Тогда
		Возврат;
	КонецЕсли;
	
	БилетНаПоезд = Новый Структура(
		"project_id,
		|departure_station_code,
		|arrival_station_code,
		|departure_date,
		|travellers");
	
	БилетНаПоезд["departure_station_code"] = Содержимое.ПунктОтправления;
	БилетНаПоезд["arrival_station_code"] = Содержимое.ПунктПрибытия;
	БилетНаПоезд["departure_date"] = Содержимое.ДатаОтправления;
	БилетНаПоезд["travellers"] = ПараметрыМетода["travellers"];
	
	Если ПараметрыМетода["train_items"] = Неопределено Тогда
		ПараметрыМетода["train_items"] = Новый Массив;
	КонецЕсли;
	ПараметрыМетода["train_items"].Добавить(БилетНаПоезд);
	
КонецПроцедуры

Процедура ДобавитьПроживаниеВЗаявкуНаБронирование(ПараметрыМетода, СтрокаУслуги)
	
	Если СтрокаУслуги.ВидУслуги <> Перечисления.ВидыУслугБронированияКомандировок.Проживание Тогда
		Возврат;
	КонецЕсли;
	
	БроньОтеля = Новый Структура(
		"project_id,
		|code,
		|is_region,
		|checkin_date,
		|checkout_date,
		|travellers");
	
	БроньОтеля["code"] = СтрокаУслуги.Содержимое.МестоПроживания;
	БроньОтеля["checkin_date"] = СтрокаУслуги.Содержимое.ДатаЗаезда;
	БроньОтеля["checkout_date"] = СтрокаУслуги.Содержимое.ДатаВыезда;
	БроньОтеля["travellers"] = ПараметрыМетода["travellers"];
	БроньОтеля["is_region"] = Ложь;
	Если СтрокаУслуги.Содержимое.ВидЗапроса = Перечисления.ВидыЗапросаБронированияМестаПроживания.Регион Тогда
		БроньОтеля["is_region"] = Истина;
	КонецЕсли;
	
	Если ПараметрыМетода["hotel_items"] = Неопределено Тогда
		ПараметрыМетода["hotel_items"] = Новый Массив;
	КонецЕсли;
	ПараметрыМетода["hotel_items"].Добавить(БроньОтеля);
	
КонецПроцедуры

Функция ОписаниеФизическогоЛица()
	
	ОписаниеФизлица = Новый Структура(
		"id,
		|name,
		|surname,
		|patronymic,
		|name_eng,
		|surname_eng,
		|patronymic_eng,
		|sex,
		|birthday,
		|citizenship_code,
		|email,
		|mobile_phone,
		|documents,
		|companies_inn,
		|airline_bonuses");
	
	ОписаниеФизлица["documents"] = Новый Массив;
	ОписаниеФизлица["companies_inn"] = Новый Массив;
	
	Возврат ОписаниеФизлица;
	
КонецФункции

Процедура ОтправитьОтменуЗаявкиНаБронирование(ДанныеЗаявки, Состояние)
	
	ИдентификаторЗаявки = БронированиеКомандировок.ИдентификаторЗаявкиПоСсылке(ДанныеЗаявки.Заявка);
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("request.cancel", ИдентификаторЗаявки);
	Исключение
		Состояние = Перечисления.СостоянияБронированияКомандировки.ПустаяСсылка();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ОтветСервиса["result"] <> "canceled" Тогда
		Состояние = Перечисления.СостоянияБронированияКомандировки.ПустаяСсылка();
		ТекстСообщения = НСтр("ru = 'Заявка не отменена в системе бронирования. Обратитесь к администратору.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияБронированияКомандировки.Отправлено;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаПоездок

Процедура ЗаполнитьПоездки(Поездки, ОтветСервиса, Организация = Неопределено)
	
	Для Каждого ОписаниеПоездки Из ОтветСервиса["result"]["trips"] Цикл
		НоваяПоездка = БронированиеКомандировок.ДобавитьНовуюПоездку(Поездки);
		НоваяПоездка.СистемаБронирования = Перечисления.СистемыБронированияКомандировок.Smartway;
		НоваяПоездка.ИдентификаторПоездки = ОписаниеПоездки["id"];
		НоваяПоездка.Представление = ОписаниеПоездки["name"];
		НоваяПоездка.МестоНазначения = ОписаниеПоездки["name"];
		НоваяПоездка.ДатаНачала = ОписаниеПоездки["checkin_date"];
		НоваяПоездка.ДатаОкончания = ОписаниеПоездки["checkout_date"];
		НоваяПоездка.ДатаИзменения = ОписаниеПоездки["last_change_date"];
		НоваяПоездка.Сумма = ОписаниеПоездки["amount"];
		Для Каждого ОписаниеЗаказа Из ОписаниеПоездки["items"] Цикл
			Если Не ЗаказСоответствуетОтбору(ОписаниеЗаказа, Организация) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьКПоездкеАвиаБилет(НоваяПоездка, ОписаниеЗаказа);
			ДобавитьКПоездкеБроньОтеля(НоваяПоездка, ОписаниеЗаказа);
			ДобавитьКПоездкеЖДБилет(НоваяПоездка, ОписаниеЗаказа);
		КонецЦикла;
		Если ОписаниеПоездки["status"] = "Cancelled" Тогда
			НоваяПоездка.Отменена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКПоездкеАвиаБилет(Поездка, ОписаниеЗаказа)
	
	Если ОписаниеЗаказа["service_type"] <> "Air" Тогда
		Возврат;
	КонецЕсли;
	
	АвиаБилет = БронированиеКомандировок.ДобавитьАвиаБилет(Поездка);
	АвиаБилет.Идентификатор = ОписаниеЗаказа["id"];
	АвиаБилет.Номер = ОписаниеЗаказа["number"];
	АвиаБилет.Сумма = ОписаниеЗаказа["amount"];
	
	Для Каждого ОписаниеСегментов Из ОписаниеЗаказа["info"] Цикл
		Для Каждого ОписаниеСегмента Из ОписаниеСегментов["segments"] Цикл
			СегментМаршрута = АвиаБилет.Содержимое.Маршрут.Добавить();
			СегментМаршрута.ДатаОтправления = ОписаниеСегмента["date_depart"];
			ОписаниеАэропорта = ОписаниеСегмента["place_depart"];
			СегментМаршрута.ПунктОтправления = БронированиеКомандировок.ПредставлениеАэропорта(ОписаниеАэропорта["city"], ОписаниеАэропорта["country"], ОписаниеАэропорта["place"]);
			ОписаниеАэропорта = ОписаниеСегмента["place_arrive"];
			СегментМаршрута.ПунктПрибытия = БронированиеКомандировок.ПредставлениеАэропорта(ОписаниеАэропорта["city"], ОписаниеАэропорта["country"], ОписаниеАэропорта["place"]);
		КонецЦикла;
	КонецЦикла;
	
	ДобавитьКЗаказуФизическихЛиц(АвиаБилет, ОписаниеЗаказа);
	ДобавитьКЗаказуЗаявку(АвиаБилет, ОписаниеЗаказа);
	ЗаполнитьОрганизацию(АвиаБилет, ОписаниеЗаказа);
	
КонецПроцедуры

Процедура ДобавитьКПоездкеЖДБилет(Поездка, ОписаниеЗаказа)
	
	Если ОписаниеЗаказа["service_type"] <> "Train" Тогда
		Возврат;
	КонецЕсли;
	
	Билет = БронированиеКомандировок.ДобавитьБилетНаПоезд(Поездка);
	Билет.Идентификатор = ОписаниеЗаказа["id"];
	Билет.Номер = ОписаниеЗаказа["number"];
	Билет.Сумма = ОписаниеЗаказа["amount"];
	
	Билет.Содержимое.ПунктОтправления = ОписаниеЗаказа["info"]["station_depart"];
	Билет.Содержимое.ПунктПрибытия = ОписаниеЗаказа["info"]["station_arrive"];
	Билет.Содержимое.ДатаОтправления = ОписаниеЗаказа["checkin_date"];
	
	ДобавитьКЗаказуФизическихЛиц(Билет, ОписаниеЗаказа);
	ДобавитьКЗаказуЗаявку(Билет, ОписаниеЗаказа);
	ЗаполнитьОрганизацию(Билет, ОписаниеЗаказа);
	
КонецПроцедуры

Процедура ДобавитьКПоездкеБроньОтеля(Поездка, ОписаниеЗаказа)
	
	Если ОписаниеЗаказа["service_type"] <> "Hotel" Тогда
		Возврат;
	КонецЕсли;
	
	БроньОтеля = БронированиеКомандировок.ДобавитьУслугуПроживание(Поездка);
	БроньОтеля.Идентификатор = ОписаниеЗаказа["id"];
	БроньОтеля.Номер = ОписаниеЗаказа["number"];
	БроньОтеля.Сумма = ОписаниеЗаказа["amount"];
	БроньОтеля.Содержимое.ДатаЗаезда = ОписаниеЗаказа["checkin_date"];
	БроньОтеля.Содержимое.ДатаВыезда = ОписаниеЗаказа["checkout_date"];
	БроньОтеля.Содержимое.МестоПроживания = БронированиеКомандировок.ПредставлениеГостиницы(ОписаниеЗаказа["info"]["city"], "", ОписаниеЗаказа["info"]["hotel_name"]);
	
	ДобавитьКЗаказуФизическихЛиц(БроньОтеля, ОписаниеЗаказа);
	ДобавитьКЗаказуЗаявку(БроньОтеля, ОписаниеЗаказа);
	ЗаполнитьОрганизацию(БроньОтеля, ОписаниеЗаказа);
	
КонецПроцедуры

Процедура ДобавитьКЗаказуФизическихЛиц(Заказ, ОписаниеЗаказа)
	
	Для Каждого ОписаниеФизлица Из ОписаниеЗаказа["travellers"] Цикл
		НовоеФизическоеЛицо = БронированиеКомандировок.ДобавитьФизическоеЛицо(Заказ);
		НовоеФизическоеЛицо.Идентификатор = ОписаниеФизлица["external_id"];
		НовоеФизическоеЛицо.Фамилия = ОписаниеФизлица["surname"];
		НовоеФизическоеЛицо.Имя = ОписаниеФизлица["name"];
		НовоеФизическоеЛицо.Отчество = ОписаниеФизлица["patronymic"];
		НовоеФизическоеЛицо.ДатаРождения = ОписаниеФизлица["birthday"];
		НовоеФизическоеЛицо.EMail = ОписаниеФизлица["email"];
		НовоеФизическоеЛицо.Телефон = ОписаниеФизлица["phone"];
		Для Каждого ОписаниеДокумента Из ОписаниеФизлица["documents"] Цикл
			НовыйДокумент = НовоеФизическоеЛицо.Документы.Добавить();
			НовыйДокумент.ФизическоеЛицо = НовоеФизическоеЛицо.Ссылка;
			НовыйДокумент.НомерДокумента = ОписаниеДокумента["number"];
			ЗаполнитьВидДокумента(НовыйДокумент, ОписаниеДокумента);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКЗаказуЗаявку(Заказ, ОписаниеЗаказа)
	
	Заказ.ЗаявкаСсылка = БронированиеКомандировок.ЗаявкаНаКомандировкуПоИдентификатору(ОписаниеЗаказа["request_id"]);
	
КонецПроцедуры

Функция ЗаказСоответствуетОтбору(ОписаниеЗаказа, ОрганизацияОтбор)
	
	Если Не ЗначениеЗаполнено(ОрганизацияОтбор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияОтбор, "ИНН");
	
	Если ПустаяСтрока(ИНН) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 не заполнен ИНН. Получение данных бронирования невозможно.'"),
			ОрганизацияОтбор);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если СокрЛП(ОписаниеЗаказа["company"]["inn"]) = СокрЛП(ИНН) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьОрганизацию(Услуга, ОписаниеЗаказа)
	
	Услуга.ИННОрганизации = ОписаниеЗаказа["company"]["inn"];
	
КонецПроцедуры

Процедура ЗаполнитьВидДокумента(НовыйДокумент, ОписаниеДокумента)
	
	Если ОписаниеДокумента["type"] = "ForeignPassport" Тогда
		НовыйДокумент.ВидДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ");
		Возврат;
	КонецЕсли;
	
	Если ОписаниеДокумента["type"] = "DomesticPassport" Тогда
		НовыйДокумент.ВидДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неизвестный тип документа физического лица %1'"),
		ОписаниеДокумента["type"]);
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры

#КонецОбласти

#Область СловариЗначений

Функция ПолФизическогоЛица(Пол)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "male");
	Соответствие.Вставить(Перечисления.ПолФизическогоЛица.Женский, "female");
	
	Возврат Соответствие[Пол];
	
КонецФункции

Функция КлассПерелета(Класс)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.ВидыКлассаБронированияАвиабилетов.Эконом, "econom");
	Соответствие.Вставить(Перечисления.ВидыКлассаБронированияАвиабилетов.Бизнес, "business");
	Соответствие.Вставить(Перечисления.ВидыКлассаБронированияАвиабилетов.Первый, "first");
	
	Возврат Соответствие[Класс];
	
КонецФункции

Функция СостоянияБронирования(Состояние)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("not_processing", Перечисления.СостоянияБронированияКомандировки.Отправлено);
	Соответствие.Вставить("processing", Перечисления.СостоянияБронированияКомандировки.Обработано);
	Соответствие.Вставить("processed", Перечисления.СостоянияБронированияКомандировки.Обработано);
	Соответствие.Вставить("canceled", Перечисления.СостоянияБронированияКомандировки.Отменено);
	Соответствие.Вставить("not_found", Перечисления.СостоянияБронированияКомандировки.ПустаяСсылка());
	
	Возврат Соответствие[Состояние];
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеССервисом

Функция СтруктураОтветаОтСервиса(ИмяМетода, ПараметрыМетода, ПоляСДатами = Неопределено, ПоказыватьСообщения = Неопределено)
	
	СтруктураЗапроса = СтруктураЗапросаКСервису(ИмяМетода, ПараметрыМетода);
	ТекстЗапроса = ДанныеВJSON(СтруктураЗапроса);
	
	Запрос = HTTPЗапросКСервису("");
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	Соединение = HTTPСоединениеСервиса();
	
	Если ПоказыватьСообщения = Неопределено Тогда
		ПоказыватьСообщения = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	КонецЕсли;
	
	Попытка
		Ответ = ВыполнитьЗапросКСервису(Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуСервиса(ИнформацияОбОшибке(), ПоказыватьСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
	СтруктураОтвета = JSONВДанные(Ответ, ПоляСДатами);
	
	Попытка
		ПроверитьОтветСервиса(СтруктураОтвета);
	Исключение
		ЗарегистрироватьОшибкуСервиса(ИнформацияОбОшибке(), ПоказыватьСообщения);
		ВызватьИсключение;
	КонецПопытки;
		
	Возврат СтруктураОтвета;
	
КонецФункции

Функция СтруктураЗапросаКСервису(ИмяМетода, ПараметрыМетода)
	
	ПараметрыЗапроса = Новый Структура(
		"authorization,
		|query");
	ПараметрыЗапроса["authorization"] = СтруктураАвторизации();
	ПараметрыЗапроса["query"] = ПараметрыМетода;
	
	СтруктураЗапроса = Новый Структура(
		"jsonrpc,
		|id,
		|method,
		|params");
	СтруктураЗапроса["jsonrpc"] = "2.0";
	СтруктураЗапроса["id"] = Строка(Новый УникальныйИдентификатор);
	СтруктураЗапроса["method"] = ИмяМетода;
	СтруктураЗапроса["params"] = ПараметрыЗапроса;
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураАвторизации()
	
	Smartway = Перечисления.СистемыБронированияКомандировок.Smartway;
	Настройки = БронированиеКомандировок.НастройкиСистемыБронирования(Smartway);
	
	Если Не ЗначениеЗаполнено(Настройки.Логин) Тогда
		ТекстСообщения = НСтр("ru = 'Доступ к сервису бронирования Smartway не настроен'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтруктураАвторизации = Новый Структура(
		"username,
		|password");
	
	СтруктураАвторизации["username"] = Настройки.Логин;
	СтруктураАвторизации["password"] = Настройки.Пароль;
	
	Возврат СтруктураАвторизации;
	
КонецФункции

Функция HTTPСоединениеСервиса()
	
	АдресСервера = АдресСервера();
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Таймаут = 10;
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Возврат Новый HTTPСоединение(АдресСервера,,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
КонецФункции

Функция АдресСервера()
	
	Возврат "api.smartway.today/v2";
	
КонецФункции

Функция HTTPЗапросКСервису(ТекстЗапроса)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("charset", "UTF-8");
	
	Возврат Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	
КонецФункции

Функция ВыполнитьЗапросКСервису(Соединение, Запрос)
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(Соединение.Сервер);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Результат диагностики:
			           |%2'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			РезультатДиагностики.ОписаниеОшибки);
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при обработке запроса к ресурсу:
			           |%1'"),
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
		
	Возврат Ответ;
	
КонецФункции

Процедура ПроверитьОтветСервиса(СтруктураОтвета)
		
	Если СтруктураОтвета.Свойство("error") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке ответа от сервиса.
                  |Код ошибки: %1,
                  |Сообщение: %2.'"), 
			СтруктураОтвета["error"]["code"], 
			СтруктураОтвета["error"]["message"]);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Не СтруктураОтвета.Свойство("result") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при проверке ответа от сервиса.
                                |Отсутствует поле result.'");
	КонецЕсли;
	
КонецПроцедуры

Функция JSONВДанные(Ответ, ПоляСДатами)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Результат = ПрочитатьJSON(ЧтениеJSON, , ПоляСДатами);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВJSON(СтруктураДанных)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура ЗарегистрироватьОшибкуСервиса(ИнформацияОбОшибке, ПоказыватьСообщения)
	
	ИмяСобытия = НСтр("ru = 'Бронирование командировок.Обращение к сервису Smartway'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Если Не ПоказыватьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при обращении к сервису Smartway. Обратитесь к администратору.
			       |Техническая информация:
			       |%1'"), 
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаСотрудников

Процедура ЗаполнитьПараметрыОтправкиСотрудников(ПараметрыМетода, ДанныеФизическихЛиц)
	
	ПараметрыМетода["employees"] = Новый Массив;
	Для Каждого СтрокаФизическоеЛицо Из ДанныеФизическихЛиц Цикл
		ДобавитьСотрудникаВСписокОтправляемых(ПараметрыМетода["employees"], СтрокаФизическоеЛицо);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСотрудникаВСписокОтправляемых(ОписанияСотрудников, СтрокаФизическоеЛицо)
	
	ОписаниеСотрудника = ОписаниеСотрудникаДляОтправки();
	ЗаполнитьОписаниеСотрудника(ОписаниеСотрудника, СтрокаФизическоеЛицо);
	ОписанияСотрудников.Добавить(ОписаниеСотрудника);
	
КонецПроцедуры

Функция ОписаниеСотрудникаДляОтправки()
	
	ОписаниеСотрудника = ОписаниеФизическогоЛица();
	ОписаниеСотрудника.Вставить("is_archive");
	ОписаниеСотрудника.Вставить("bonuses");
	ОписаниеСотрудника.Удалить("airline_bonuses");
	
	Возврат ОписаниеСотрудника;
	
КонецФункции

Процедура ЗаполнитьОписаниеСотрудника(ОписаниеСотрудника, СтрокаФизическоеЛицо)
	
	ОписаниеСотрудника["id"] = СтрокаФизическоеЛицо.Идентификатор;
	ОписаниеСотрудника["name"] = СтрокаФизическоеЛицо.Имя;
	ОписаниеСотрудника["surname"] = СтрокаФизическоеЛицо.Фамилия;
	ОписаниеСотрудника["patronymic"] = СтрокаФизическоеЛицо.Отчество;
	ОписаниеСотрудника["name_eng"] = СтрокаФизическоеЛицо.ИмяЛатиницей;
	ОписаниеСотрудника["surname_eng"] = СтрокаФизическоеЛицо.ФамилияЛатиницей;
	ОписаниеСотрудника["patronymic_eng"] = СтрокаФизическоеЛицо.ОтчествоЛатиницей;
	ОписаниеСотрудника["sex"] = ПолФизическогоЛица(СтрокаФизическоеЛицо.Пол);
	ОписаниеСотрудника["birthday"] = СтрокаФизическоеЛицо.ДатаРождения;
	ОписаниеСотрудника["citizenship_code"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаФизическоеЛицо.Гражданство, "КодАльфа2");
	ОписаниеСотрудника["email"] = СтрокаФизическоеЛицо.EMail;
	ОписаниеСотрудника["mobile_phone"] = СтрокаФизическоеЛицо.Телефон;
	ОписаниеСотрудника["is_archive"] = СтрокаФизическоеЛицо.Архивный;
	
	Для Каждого СтрокаДокумента Из СтрокаФизическоеЛицо.Документы Цикл
		ДобавитьДанныеПаспортаВОписаниеФизическогоЛица(ОписаниеСотрудника["documents"], СтрокаДокумента);
	КонецЦикла;
	
	Для каждого СтрокаИНН Из СтрокаФизическоеЛицо.Организации Цикл
		ОписаниеСотрудника["companies_inn"].Добавить(СтрокаИНН);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки)

	ТекстСообщения = "";

	Если ОтветСервиса.Свойство("error") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке ответа от сервиса.
                  |Код ошибки: %1,
                  |Сообщение: %2.'"), 
			ОтветСервиса["error"]["code"], 
			ОтветСервиса["error"]["message"]);
		ПараметрыОтправки.ТекстОшибки = ТекстСообщения;
	КонецЕсли;

	Если Не ОтветСервиса.Свойство("result") Тогда
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка при проверке ответа от сервиса. Отсутствует поле result.'");
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
							|Ошибка при проверке ответа от сервиса. Отсутствует поле result.'"), ТекстСообщения);
		КонецЕсли;
	Иначе
		Если ОтветСервиса.Свойство("result") Тогда
			Если ОтветСервиса["result"].Количество() > 0 Тогда
				ЗаполнитьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПараметрыОтправки.ТекстОшибки = ТекстСообщения;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки)

	ДанныеФизическихЛиц.Индексы.Добавить("Идентификатор");
	ПараметрыОтправки.ТаблицаОтправляемыхФизическихЛиц.Индексы.Добавить("ФизическоеЛицо");

	Для каждого СтрокаРезультата Из ОтветСервиса["result"] Цикл

		ОтборПоИдентификатору = Новый Структура("Идентификатор", СтрокаРезультата.id);
		ФизическиеЛицаПоИдентификатору = ДанныеФизическихЛиц.НайтиСтроки(ОтборПоИдентификатору);
		Если ФизическиеЛицаПоИдентификатору.Количество() > 0 Тогда

			ОтборПоФизическомуЛицу = Новый Структура("ФизическоеЛицо", ФизическиеЛицаПоИдентификатору[0].Ссылка);
			ФизическиеЛица = ПараметрыОтправки.ТаблицаОтправляемыхФизическихЛиц.НайтиСтроки(ОтборПоФизическомуЛицу);
			Если ФизическиеЛица.Количество() > 0 Тогда

				ФизическиеЛица[0].Отправлено = СтрокаРезультата["success"];
				Если ЗначениеЗаполнено(СтрокаРезультата["error"]) Тогда
					ФизическиеЛица[0].Комментарий = СтрокаРезультата["error"];
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Функция ДатаВСтроку(Дата)
	
	Возврат Формат(Дата, "ДФ=yyyy-MM-ddTHH:mm:ss; ДП=0001-01-01T00:00:00");
	
КонецФункции

#КонецОбласти