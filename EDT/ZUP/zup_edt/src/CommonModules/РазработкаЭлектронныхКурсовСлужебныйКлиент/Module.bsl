#Область СлужебныеПроцедурыИФункции

// Порядок элементов

// Перемещает элемент вверх или вниз в таблице
//
Процедура ПереместитьЭлемент(Направление, Таблица) Экспорт
	
	Если Таблица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаЭлемент = Таблица.ТекущиеДанные.Ссылка;
	
	РазработкаЭлектронныхКурсовСлужебныйВызовСервера.ПереместитьЭлемент(Направление, СсылкаНаЭлемент);
	
	Таблица.Обновить();
	
КонецПроцедуры

// Работа с документами Word

Функция ЕстьПоддержкаДокументов() Экспорт
	
	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие; // Глобальная переменная
	КонецЕсли;	

	ИмяПараметра = "ЭлектронныеРесурсы.ЕстьПоддержкаДокументов";
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
	
		ЕстьПоддержка = Ложь;
		
		#Если НЕ ВебКлиент Тогда
			
		СистемнаяИнформация = Новый СистемнаяИнформация();
				
		ТипПлатформыНаКлиенте = СистемнаяИнформация.ТипПлатформы;

		Если ТипПлатформыНаКлиенте = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыНаКлиенте = ТипПлатформы.Windows_x86_64 Тогда		
			
			ЕстьПоддержка = Истина;
			
		КонецЕсли;	
			
		#КонецЕсли	
			
		ПараметрыПриложения.Вставить(ИмяПараметра, ЕстьПоддержка);
		
	Иначе
		
		ЕстьПоддержка = ПараметрыПриложения[ИмяПараметра];	
		
	КонецЕсли;
	
	Возврат ЕстьПоддержка;
	
КонецФункции

Функция ДиалогВыбораФайлаПоТипу(Знач ТипФайла, Знач Заголовок, Знач ИмяТипа) Экспорт
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Заголовок;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;	
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	
	Если ТипФайла <> Неопределено Тогда
		
		Если ТипЗнч(ТипФайла) <> Тип("Массив") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипФайла);
		Иначе
			МассивТипов = ТипФайла;
		КонецЕсли;
		
		РасширенияФайлов = Новый Массив;
		
		Для каждого ТипФайла Из МассивТипов Цикл
			
			РасширенияФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.СоответствиеРасширенияИТипаЭлементаРесурса(ТипФайла);
			
			Для каждого РасширениеФайла Из РасширенияФайла Цикл
			
				Если РасширенияФайлов.Найти(РасширениеФайла) = Неопределено Тогда
					РасширенияФайлов.Добавить(РасширениеФайла);
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;		
		
		СписокРасширений = "";
		
		Для каждого Элемент Из РасширенияФайлов Цикл		
			Расширение = СтрЗаменить(Элемент.Ключ, "_", ".");			
			СписокРасширений = СписокРасширений + "*" + Расширение + ";"; 			
		КонецЦикла;
		
		СписокРасширений = Лев(СписокРасширений, СтрДлина(СписокРасширений)-1);		
		ДиалогВыбораФайла.Фильтр = ИмяТипа + "("+СписокРасширений+")|"+СписокРасширений+"";			
		
	КонецЕсли;
		
	Возврат ДиалогВыбораФайла;
	
КонецФункции

Процедура СформироватьДокументДляСохраненияВБазе(ПараметрыЗагрузки = Неопределено) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	// Делаем проверки
	//
	
	Если ПараметрыЗагрузки = Неопределено
		ИЛИ	НЕ ПараметрыЗагрузки.Свойство("Приложение")
		ИЛИ НЕ ПараметрыЗагрузки.Свойство("УникальныйИдентификатор")
		ИЛИ НЕ ПараметрыЗагрузки.Свойство("ПутьКДокументу") Тогда
		
		ВызватьИсключение НСтр("ru = 'Отсутствуют обязательные параметры загрузки документа'")
		
	КонецЕсли;
		
	ФайлДокумента = Новый Файл(ПараметрыЗагрузки.ПутьКДокументу);
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиентСервер.ФайлСуществует(ФайлДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Файл не найден:'") + ПараметрыЗагрузки.ПутьКДокументу
	КонецЕсли;
	
	// Получаем переменные
	//
	
	ПутьКФайлуДокумента    = ПараметрыЗагрузки.ПутьКДокументу;	
	ПутьККаталогуДокумента = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ФайлДокумента.Путь);
	
	Если ПараметрыЗагрузки.Свойство("ФайлыДляУдаления") Тогда
		ФайлыДляУдаления = ПараметрыЗагрузки.ФайлыДляУдаления;
	Иначе
		ФайлыДляУдаления = Новый Массив;
	КонецЕсли;
	
	ПриложениеWord = ПараметрыЗагрузки.Приложение;
	
	ФайлыДляСохранения = Новый Массив(); // Файлы, которые реально будут сохранены в базе
	
	ДокументДляСохранения = Неопределено;
	
	ДокументДляСохранения = ФайлДокумента;
	
	// Формируем HTML вариант документа
	//
	
	Попытка
		ДокументКакHTML = ПриложениеWord.Documents.Open(ПутьКФайлуДокумента,,,Ложь);
	Исключение				
		// Записываем ошибку в журнал
		ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(ПриложениеWord, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		// Исключение не создаем, так как оно будет вызвано в ЗакрытьCOMПриложение
		Возврат;
	КонецПопытки;

	ДокументКакHTML.WebOptions.AllowPNG = Истина;
	ДокументКакHTML.WebOptions.Encoding = 65001;
	ДокументКакHTML.WebOptions.BrowserLevel = 2;
	ДокументКакHTML.WebOptions.OptimizeForBrowser = Истина;
	ДокументКакHTML.WebOptions.RelyOnCSS = Истина;
	
	ФайлHTML = Новый Файл(РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПутьКФайлуЗапускаДокумента(ПутьККаталогуДокумента));				
	ФайлыДляУдаления.Добавить(ФайлHTML.ПолноеИмя);	
	ДокументКакHTML.SaveAs(ФайлHTML.ПолноеИмя, 10,,,Ложь,,,,,,,65001); //wdFormatFilteredHTML, UTF-8		
	ФайлHTMLДополнения = Новый Файл(ПутьККаталогуДокумента + ФайлHTML.ИмяБезРасширения + ".files");
	
	Если ЭлектронноеОбучениеСлужебныйКлиентСервер.ФайлСуществует(ФайлHTMLДополнения) Тогда
		ФайлыДляУдаления.Добавить(ФайлHTMLДополнения.ПолноеИмя);	
	КонецЕсли;	
	
	// Обрабатываем гиперссылки
	//
	
	Для каждого Гиперссылка Из ДокументКакHTML.Hyperlinks Цикл		
		Гиперссылка.Target = "_blank"; // Все ссылки считаем внешними		
	КонецЦикла;
	
	ДокументКакHTML.Save();	
	
	// Обрабатываем дополнительные файлы страницы (картинки в этих файлах)
	//
					
	Если ПараметрыЗагрузки <> Неопределено 
		И ПараметрыЗагрузки.Свойство("НастройкиКартинок") 
		И ЭлектронноеОбучениеСлужебныйКлиентСервер.ФайлСуществует(ФайлHTMLДополнения) Тогда
		
		ПриложениеShell = Новый COMОбъект("shell.application");
		
		// Ищем все картинки в оригинальном каталоге.
		// Каждая картинка будет основой для серии картинок.
		// Серия картинок может содержать одну и более картинок.
		// Сейчас серия может содержать максимум две картинки - оригинальная и в формате PNG.
		
		СерииКартинокФайлы = ЭлектронноеОбучениеСлужебныйКлиентСервер.ИскатьФайлы(ФайлHTMLДополнения.ПолноеИмя, "image*.*", Ложь);		
		
		Для каждого ФайлКартинки Из СерииКартинокФайлы Цикл
			
			НоваяСерияКартинок = Новый Структура("Имя, Картинки", ФайлКартинки.ИмяБезРасширения, Новый Массив());			
			ДобавитьКартинкуВСерию(НоваяСерияКартинок.Картинки, ФайлКартинки, ПриложениеShell);			
			ПараметрыЗагрузки.НастройкиКартинок.СерииКартинок.Добавить(НоваяСерияКартинок);
			
		КонецЦикла;
		
		// Ищем картинки PNG
		Попытка		
			ДокументКакHTMLПолный = ПриложениеWord.Documents.Open(ПутьКФайлуДокумента,,,Ложь);
		Исключение				
			ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(ПриложениеWord, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЭлектронноеОбучениеСлужебныйКлиентСервер.СобытиеЖурналаРегистрацииЭлектронныхКурсов(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		ДокументКакHTMLПолный.WebOptions.AllowPNG = Истина;
		ДокументКакHTMLПолный.WebOptions.Encoding = 65001;
		ДокументКакHTMLПолный.WebOptions.BrowserLevel = 2;
		ДокументКакHTMLПолный.WebOptions.OptimizeForBrowser = Истина;
		ДокументКакHTMLПолный.WebOptions.RelyOnCSS = Истина;
		
		ФайлHTMLПолный = Новый Файл(ПутьККаталогуДокумента + ФайлHTML.ИмяБезРасширения + "_full.html");
		
		ФайлыДляУдаления.Добавить(ФайлHTMLПолный.ПолноеИмя);
		
		ДокументКакHTMLПолный.SaveAs(ФайлHTMLПолный.ПолноеИмя, 8,,,Ложь,,,,,,,65001); //wdFormatHTML, UTF-8
		
		ДокументКакHTMLПолный.Close();
		
		ФайлHTMLПолныйДополнения = Новый Файл(ПутьККаталогуДокумента + ФайлHTML.ИмяБезРасширения + "_full.files");
		
		Если ЭлектронноеОбучениеСлужебныйКлиентСервер.ФайлСуществует(ФайлHTMLПолныйДополнения) Тогда
			
			ФайлыДляУдаления.Добавить(ФайлHTMLПолныйДополнения.ПолноеИмя);
			
			КартинкиСтандартные = ЭлектронноеОбучениеСлужебныйКлиентСервер.ИскатьФайлы(ФайлHTMLДополнения.ПолноеИмя, "image*.*", Ложь);
			КартинкиИсходные    = ЭлектронноеОбучениеСлужебныйКлиентСервер.ИскатьФайлы(ФайлHTMLПолныйДополнения.ПолноеИмя, "image*.*", Ложь);
			
			Если КартинкиСтандартные.Количество() = КартинкиИсходные.Количество() Тогда // Картинки не будут перепутаны
				
				// Копируем исходные картинки
				
				Для каждого СтандартныйФайл Из КартинкиСтандартные Цикл
					
					// Ищем исходный файл
					
					ИсходныйФайлСтандартного = Неопределено;
					
					Для каждого ИсходныйФайл Из КартинкиИсходные Цикл
						Если ИсходныйФайл.ИмяБезРасширения = СтандартныйФайл.ИмяБезРасширения Тогда
							ИсходныйФайлСтандартного = ИсходныйФайл;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ИсходныйФайлСтандартного = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйДополнительныйФайл = Новый Файл(ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ФайлHTMLДополнения.ПолноеИмя) + ИсходныйФайлСтандартного.ИмяБезРасширения + "_src" + ИсходныйФайлСтандартного.Расширение);
						
					ЭлектронноеОбучениеСлужебныйКлиентСервер.СкопироватьФайл(ИсходныйФайлСтандартного.ПолноеИмя, НовыйДополнительныйФайл.ПолноеИмя);
						
					// Добавляем новую картинку PNG в серию
						
					ТекСерияКартинок = Неопределено;
					
					Для каждого Строка Из ПараметрыЗагрузки.НастройкиКартинок.СерииКартинок Цикл
					
						Если Строка.Имя = СтандартныйФайл.ИмяБезРасширения Тогда
							ТекСерияКартинок = Строка;
							Прервать;
						КонецЕсли;
					
					КонецЦикла;
					
					Если ТекСерияКартинок <> Неопределено Тогда
						ДобавитьКартинкуВСерию(ТекСерияКартинок.Картинки, НовыйДополнительныйФайл, ПриложениеShell);	
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;			
			
		КонецЕсли;		
						
	КонецЕсли; // Обработка доп. файлов
	
	// Закрываем документ
	//
	
	ДокументКакHTML.Close();	
	
	// Получаем данные для индексирования
	//
	
	Если ПараметрыЗагрузки.Свойство("ТекстовыеДанныеДляИндексирования") Тогда
		
		Извлечение = Новый ИзвлечениеТекста(ФайлHTML.ПолноеИмя);
		
		ТекстФайла = "";
		
		Попытка			
			ТекстФайла = Извлечение.ПолучитьТекст();			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Произошла ошибка при извлечении текста из файла: %1'"), ФайлHTML.ПолноеИмя);
			ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецПопытки;
		
		ПараметрыЗагрузки.ТекстовыеДанныеДляИндексирования = ТекстФайла;
		
	КонецЕсли;	
	
	// Копируем получившийся HTML в один каталог
	//
	
	КаталогДляСохраненияHTML = ПолучитьИмяВременногоФайла("");	
	ЭлектронноеОбучениеСлужебныйКлиентСервер.НовыйКаталог(КаталогДляСохраненияHTML);	
	ФайлыДляУдаления.Добавить(КаталогДляСохраненияHTML);
	
	КаталогДляСохраненияHTML = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляСохраненияHTML);	

	ЭлектронноеОбучениеСлужебныйКлиентСервер.СкопироватьФайл(ФайлHTML.ПолноеИмя, КаталогДляСохраненияHTML + ФайлHTML.Имя);
	
	Если ЭлектронноеОбучениеСлужебныйКлиентСервер.ФайлСуществует(ФайлHTMLДополнения) Тогда
		
		КаталогДляСохраненияДопФайлов = КаталогДляСохраненияHTML + ФайлHTMLДополнения.Имя;
		
		ЭлектронноеОбучениеСлужебныйКлиентСервер.НовыйКаталог(КаталогДляСохраненияДопФайлов);
		
		КаталогДляСохраненияДопФайлов = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляСохраненияДопФайлов);
		
		ДопФайлы = ЭлектронноеОбучениеСлужебныйКлиентСервер.ИскатьФайлы(ФайлHTMLДополнения.ПолноеИмя, "*", Ложь);
		
		Для каждого ДопФайл Из ДопФайлы Цикл		
			ЭлектронноеОбучениеСлужебныйКлиентСервер.СкопироватьФайл(ДопФайл.ПолноеИмя, КаталогДляСохраненияДопФайлов + ДопФайл.Имя);				
		КонецЦикла;
		
	КонецЕсли;
	
	// Упаковываем HTML каталог
    //	
	
	ПутьКАрхивуZIP = ПолучитьИмяВременногоФайла("zip");
	
	ФайлZIP = Новый ЗаписьZipФайла(ПутьКАрхивуZIP,,,МетодСжатияZIP.Копирование);							
	ФайлZIP.Добавить(КаталогДляСохраненияHTML + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути,  РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ФайлZIP.Записать();		

	ФайлыДляУдаления.Добавить(ПутьКАрхивуZIP);
	ФайлыДляСохранения.Добавить(Новый Файл(ПутьКАрхивуZIP));
	
	// Помещаем файл в хранилище на сервере	
	//
	
	ФайлыДляСохранения.Добавить(ДокументДляСохранения);	
	ПараметрыЗагрузки.СтруктураФайлов.Добавить(ЭлектронноеОбучениеСлужебныйКлиентСервер.НовоеОписаниеФайла(ФайлДокумента, ПараметрыЗагрузки.КонтекстФайла));	
	Для каждого ФайлДляСохранения Из ФайлыДляСохранения Цикл		
		ПараметрыЗагрузки.ПередаваемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлДляСохранения.ПолноеИмя));
	КонецЦикла;	
	
	ПоместитьФайлыВХранилище(ПараметрыЗагрузки.ПередаваемыеФайлы, ПараметрыЗагрузки.ПереданныеФайлы, ПараметрыЗагрузки.УникальныйИдентификатор);
		
	// Удаляем старые файлы
	//
	
	Для каждого ПутьКФайлу Из ФайлыДляУдаления Цикл		
		ЭлектронноеОбучениеСлужебныйКлиентСервер.УдалитьВременныйФайл(ПутьКФайлу);		
	КонецЦикла;	
	
	#КонецЕсли
	
КонецПроцедуры

Функция ПриложениеMSWord(ПриложениеWord)
	
	#Если НЕ ВебКлиент Тогда
		
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(ПриложениеWord) Тогда

		Попытка
			ПриложениеWord = Новый COMObject("Word.Application");
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Программа MS Word не найдена.'") + ОписаниеОшибки());
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЭлектронноеОбучениеСлужебныйКлиентСервер.СобытиеЖурналаРегистрацииЭлектронныхКурсов(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПриложениеWord = Неопределено;
		КонецПопытки;
		
		ПриложениеWord.Visible = Ложь;
		
	КонецЕсли;
	
	Возврат ПриложениеWord;
	
	#КонецЕсли
	
КонецФункции

Процедура ИнициализироватьПриложениеРаботыСДокументами(Приложение) Экспорт
	
	#Если НЕ ВебКлиент Тогда

	// Инициализируем приложение
	//
	
	Если Приложение = Неопределено Тогда
		Приложение = Новый Структура("Пользовательское, Скрытое, Версия, Документ, РабочийКаталог, ПропуститьЗапись");
	КонецЕсли;
	
	Приложение.ПропуститьЗапись = Ложь;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		ИЛИ НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда		
			
		Приложение.Пользовательское = ПриложениеMSWord(Приложение.Пользовательское);
		Приложение.Скрытое = ПриложениеMSWord(Приложение.Скрытое);
		Приложение.Скрытое.Visible = Ложь;
		
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		ИЛИ НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда
		
		Приложение = Неопределено;		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка инициализации приложения'"));		
		Возврат;
		
	КонецЕсли;
	
	Если Приложение.Версия = Неопределено Тогда
		Приложение.Версия = Число(ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(Приложение.Пользовательское.Version, ".")[0]);	
	КонецЕсли;
	
	// Рабочий каталог
	//
	
	РабочийКаталог = Новый Структура("Путь, Документ, Копия, ФайлДляСохранения, ЭтоВременный, ИмяФайла");		
		
	РабочийКаталог.Путь = ПолучитьИмяВременногоФайла("");
	РабочийКаталог.ЭтоВременный = Истина;
	ЭлектронноеОбучениеСлужебныйКлиентСервер.НовыйКаталог(РабочийКаталог.Путь);	
	РабочийКаталог.Путь = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог.Путь);			

	// Путь для сохранения документа
	
	РабочийКаталог.Документ = РабочийКаталог.Путь + "doc";	
	ЭлектронноеОбучениеСлужебныйКлиентСервер.НовыйКаталог(РабочийКаталог.Документ);	
	РабочийКаталог.Документ = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог.Документ);			
		
	// Имя файла
	
	РабочийКаталог.ИмяФайла = ""; // Заполним ниже после открытия/создания документа			
	
	// Путь для хранения копии документа
	
	РабочийКаталог.Копия = ПолучитьИмяВременногоФайла("");	
	ЭлектронноеОбучениеСлужебныйКлиентСервер.НовыйКаталог(РабочийКаталог.Копия);			
	РабочийКаталог.Копия = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог.Копия);
	
	Приложение.РабочийКаталог = РабочийКаталог;
	
	#КонецЕсли
	
КонецПроцедуры

Процедура ОткрытьДокумент(Приложение, ВладелецФормы, Форма, Скрытно, МестоХраненияДокументаВБазе, СвойстваЭлементаКурса) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	ИнициализироватьПриложениеРаботыСДокументами(Приложение);	
	
	РабочийКаталог = Приложение.РабочийКаталог;
	
	// Открываем документ
	//	
	
	Если НЕ ДокументДоступен(Приложение) Тогда
	
		ДобавитьОбработчик Приложение.Пользовательское.Quit, Форма.ПриЗакрытииВнешнегоПриложения;
		ДобавитьОбработчик Приложение.Пользовательское.DocumentBeforeSave, Форма.ПриЗаписиДокумента;	
		ДобавитьОбработчик Приложение.Пользовательское.DocumentBeforeClose, Форма.ПриЗакрытииДокумента;
		
		СвойстваШаблона = Неопределено;	
			
		Если МестоХраненияДокументаВБазе = Неопределено Тогда // Нет файла для открытия			
						
			Если СвойстваШаблона = Неопределено Тогда		
				Приложение.Документ = Приложение.Пользовательское.Documents.Add();
			Иначе
				Приложение.Документ = Приложение.Пользовательское.Documents.Add(СвойстваШаблона.ПутьКФайлу);
			КонецЕсли;	
			
			Если СвойстваЭлементаКурса = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СвойстваЭлементаКурса.Наименование) Тогда
				НаименованиеФайла = НСтр("ru = 'Документ'");
			Иначе
				НаименованиеФайла = СвойстваЭлементаКурса.Наименование;
			КонецЕсли;

			Приложение.ПропуститьЗапись = Истина;
			
			Если Приложение.Версия < 12 Тогда
				
				Если Приложение.Версия < 11 Тогда					
					Приложение.Документ.SaveAs2000(РабочийКаталог.Документ + НаименованиеФайла + ".doc", 0,,,Ложь);					
				Иначе					
					Приложение.Документ.SaveAs(РабочийКаталог.Документ + НаименованиеФайла + ".doc", 0,,,Ложь);					
				КонецЕсли;
				
			Иначе				
				Приложение.Документ.SaveAs(РабочийКаталог.Документ + НаименованиеФайла, 16,,, Ложь);				
			КонецЕсли;		
			
		Иначе
			
			ПолучитьФайл(МестоХраненияДокументаВБазе, РабочийКаталог.Документ + СвойстваЭлементаКурса.ИмяФайла, Ложь);
			
			Попытка
				Приложение.Документ = Приложение.Пользовательское.Documents.Open(РабочийКаталог.Документ + СвойстваЭлементаКурса.ИмяФайла,,,Ложь);
			Исключение				
				// Записываем в журнал ошибку
				ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(Приложение.Пользовательское, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Ошибку не показываем
				Возврат;
			КонецПопытки;			
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РабочийКаталог.ИмяФайла) Тогда
			РабочийКаталог.ИмяФайла = Приложение.Документ.Name;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определяем видимость приложения
	//
	
	Если Скрытно Тогда		
		Приложение.Пользовательское.Visible = Ложь;		
	Иначе				
		Приложение.Пользовательское.Visible = Истина;		
		Приложение.Пользовательское.WindowState = 2;
		Приложение.Пользовательское.WindowState = 1;			
	КонецЕсли;	
	
	#КонецЕсли
	
КонецПроцедуры

Функция ЕстьОткрытыеДокументы(Приложение) Экспорт
	
	Возврат ?(
	
		Приложение <> Неопределено
		И Приложение.Пользовательское <> Неопределено
		И ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		И Приложение.Пользовательское.Documents.Count > 0
		
		, Истина, Ложь);
		
		
КонецФункции

Процедура ПриЗакрытииФормыДокумента(Приложение, УдалятьCOMПриложенияПриЗакрытии, Форма) Экспорт
	
	Если Приложение <> Неопределено Тогда
		
		Если Приложение.Пользовательское <> Неопределено Тогда
		
			Попытка
				УдалитьОбработчик Приложение.Пользовательское.Quit, Форма.ПриЗакрытииВнешнегоПриложения;	
				УдалитьОбработчик Приложение.Пользовательское.DocumentBeforeSave, Форма.ПриЗаписиДокумента;	
				УдалитьОбработчик Приложение.Пользовательское.DocumentBeforeClose, Форма.ПриЗакрытииДокумента;	
			Исключение
				// Обработка исключения не требуется
			КонецПопытки;
			
			Если Приложение.Документ <> Неопределено Тогда
			
				Попытка
					Приложение.Документ.Close(0);
				Исключение	
					// Обработка исключения не требуется
				КонецПопытки;
				
			КонецЕсли;		
			
			Если УдалятьCOMПриложенияПриЗакрытии Тогда
				
				Если НЕ ЕстьОткрытыеДокументы(Приложение) Тогда
					// Нельзя удалять приложение, если есть открытые документы,
					// так как они могут не сохраниться.
					ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(Приложение.Пользовательское);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
			
		Если Приложение.Скрытое <> Неопределено
			И УдалятьCOMПриложенияПриЗакрытии Тогда
			
			ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(Приложение.Скрытое);

		КонецЕсли;		
		
			
		РабочийКаталог = Приложение.РабочийКаталог;
		
		Если РабочийКаталог <> Неопределено Тогда
			
			Если РабочийКаталог.ЭтоВременный Тогда
			
				Если ЗначениеЗаполнено(РабочийКаталог.Путь) Тогда					
					ЭлектронноеОбучениеСлужебныйКлиентСервер.УдалитьВременныйФайл(РабочийКаталог.Путь);					
				КонецЕсли;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочийКаталог.Копия) Тогда 				
				ЭлектронноеОбучениеСлужебныйКлиентСервер.УдалитьВременныйФайл(РабочийКаталог.Копия); // Удаляем каталог с копией файла (всегда)								
			КонецЕсли;
			
		КонецЕсли;	
		
		Если УдалятьCOMПриложенияПриЗакрытии Тогда
			Приложение = Неопределено;
		КонецЕсли;		
		
	КонецЕсли;			
	
КонецПроцедуры

Функция ДокументДоступен(Приложение) Экспорт
	
	Если Приложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Приложение.Документ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяДокумента = Неопределено;
	
	Попытка
		ИмяДокумента = Приложение.Документ.Name;
	Исключение
		Приложение.Документ = Неопределено;
		// Обработка исключения не требуется
	КонецПопытки;
	
	Возврат ?(ИмяДокумента = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ДокументМодифицирован(Приложение) Экспорт
	
	Если НЕ ДокументДоступен(Приложение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Приложение.Документ.Saved Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НовоеОписаниеКартинокДокумента(ВариантЗагрузкиКартинок = Неопределено) Экспорт
	Возврат Новый Структура("ВариантЗагрузкиКартинок, СерииКартинок", ?(ВариантЗагрузкиКартинок = Неопределено, ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиКартинокДокументовЭлектронныхКурсов.УвеличиватьСтандартные"),  ВариантЗагрузкиКартинок), Новый Массив()); // Информация о картинках, содержащихся в документе
КонецФункции

Процедура ДобавитьКартинкуВСерию(МассивКартинокСерии, ФайлКартинки, ПриложениеShell)
	
	ОбъектКаталога = ПриложениеShell.NameSpace(ФайлКартинки.Путь);
	ОбъектЭлемента   = ОбъектКаталога.ParseName(ФайлКартинки.Имя) ;

	МассивКартинокСерии.Добавить(Новый Структура("Имя, РазмерКартинки, РазмерФайла", ФайлКартинки.Имя, ОбъектЭлемента.ExtendedProperty("Dimensions"), ФайлКартинки.Размер()));
	
КонецПроцедуры

// Работа с презентациями

Функция ПриложениеPowerPoint(ПриложениеPPT)
	
	#Если НЕ ВебКлиент Тогда
		
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(ПриложениеPPT) Тогда

		Попытка
			ПриложениеPPT = Новый COMObject("PowerPoint.Application");
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Программа PowerPoint не найдена.'") + ОписаниеОшибки());
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЭлектронноеОбучениеСлужебныйКлиентСервер.СобытиеЖурналаРегистрацииЭлектронныхКурсов(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПриложениеPPT = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПриложениеPPT;
	
	#КонецЕсли
	
КонецФункции

Процедура ИнициализироватьПриложениеРаботыСПрезентациями(Приложение) Экспорт
	
	#Если НЕ ВебКлиент Тогда

	// Инициализируем приложение
	//
	
	Если Приложение = Неопределено Тогда
		Приложение = Новый Структура("Пользовательское, Скрытое, Версия, ХранениеВБазе, ХранениеНаДиске, ХранениеНаДискеКопия, Презентация, ВыйтиИзРежимаРедактированияПослеЗаписи");
	КонецЕсли;
	
	Приложение.ВыйтиИзРежимаРедактированияПослеЗаписи = Ложь;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда		
		Приложение.Пользовательское = ПриложениеPowerPoint(Приложение.Пользовательское);
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда		
		Приложение.Скрытое = ПриложениеPowerPoint(Приложение.Скрытое);
	КонецЕсли;		
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда		
		Приложение = Неопределено;		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка инициализации приложения'"));		
		Возврат;		
	КонецЕсли;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда		
		Приложение = Неопределено;		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка инициализации приложения'"));		
		Возврат;		
	КонецЕсли;	
	
	Если Приложение.Версия = Неопределено Тогда
		Приложение.Версия = Число(ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(Приложение.Пользовательское.Version, ".")[0]);
	КонецЕсли;
	
	Если ТипЗнч(Приложение.Версия) <> Тип("Число")
		ИЛИ Приложение.Версия < 12 Тогда
		
		ВызватьИсключение НСтр("ru = 'Для работы с презентациями PowerPoint на компьютере должен быть установлен MS Office 2007 или выше'")
		
	КонецЕсли;	
			
	#КонецЕсли
	
КонецПроцедуры

Функция ПрезентацияДоступна(Приложение) Экспорт
	
	Если Приложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Приложение.Презентация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПрезентации = Неопределено;
	
	Попытка
		ИмяПрезентации = Приложение.Презентация.Name;
	Исключение
		Приложение.Презентация = Неопределено;
		// Обработка исключения не требуется
	КонецПопытки;
	
	Возврат ?(ИмяПрезентации = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ПрезентацияМодифицирована(Приложение) Экспорт
	
	Если НЕ ПрезентацияДоступна(Приложение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Приложение.Презентация.Saved Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьОткрытыеПрезентации(Приложение) Экспорт
	
	Возврат ?(
	
		Приложение <> Неопределено
		И Приложение.Пользовательское <> Неопределено
		И ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		И Приложение.Пользовательское.Presentations.Count > 0
		
		, Истина, Ложь);
		
		
КонецФункции

// Работа с видео

Функция ЕстьПоддержкаРаботыСВидео() Экспорт
	
	#Если ВебКлиент Тогда
		
	Возврат Ложь;
		
	#Иначе
		
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	ТипПлатформыНаКлиенте = СистемнаяИнформация.ТипПлатформы;

	Если ТипПлатформыНаКлиенте <> ТипПлатформы.Windows_x86 И ТипПлатформыНаКлиенте <> ТипПлатформы.Windows_x86_64 Тогда		
		Возврат Ложь;		
	КонецЕсли;	
	
	Возврат Истина;
		
	#КонецЕсли	
	
КонецФункции

Процедура ИзменитьРазмерыПропорционально(Увеличивать, Ширина, Высота, СтараяШирина = Неопределено, СтараяВысота = Неопределено) Экспорт
	
	Если МожноИзменятьРазмерыПропорционально(Ширина, Высота) Тогда
		
		ШиринаЧисло = Число(Ширина);
		ВысотаЧисло = Число(Высота);		
		
		Если СтараяШирина = Неопределено
			И СтараяВысота = Неопределено Тогда
			
			Если ТипЗнч(Увеличивать) <> Тип("Булево") Тогда
				ВызватьИсключение НСтр("ru = 'Неверный тип параметра Увеличивать'");
			КонецЕсли;
				
			СтараяВысота = ВысотаЧисло;
			СтараяШирина = ШиринаЧисло;			
						
			Если Увеличивать Тогда				
				ШиринаЧисло = ШиринаЧисло + 10; 				
			Иначе				
				ШиринаЧисло = ШиринаЧисло - 10;				
			КонецЕсли;
			
			ВысотаЧисло = Окр(ШиринаЧисло * (СтараяВысота / СтараяШирина), 0);
			
			Ширина = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(ШиринаЧисло);
			Высота = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(ВысотаЧисло);
			
		Иначе
			
			Если ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(СтараяШирина) Тогда
				СтараяШиринаЧисло = Число(СтараяШирина);
			Иначе
				СтараяШиринаЧисло = 0;
			КонецЕсли;
			
			Если ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(СтараяВысота) Тогда
				СтараяВысотаЧисло = Число(СтараяВысота);
			Иначе
				СтараяВысотаЧисло = 0;
			КонецЕсли;			
			
			Если ШиринаЧисло <> СтараяШиринаЧисло И СтараяШиринаЧисло > 0 Тогда
				
				Если ШиринаЧисло > СтараяШиринаЧисло Тогда
					Высота = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяВысотаЧисло * (ШиринаЧисло/СтараяШиринаЧисло),0)
							 );
				Иначе
					Высота = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяВысотаЧисло / (СтараяШиринаЧисло/ШиринаЧисло),0)
							 );
				КонецЕсли;				
				
				СтараяВысота = Высота;
				СтараяШирина = Ширина;
				
			ИначеЕсли ВысотаЧисло <> СтараяВысотаЧисло И СтараяВысотаЧисло > 0 Тогда 
				
				Если ВысотаЧисло > СтараяВысотаЧисло Тогда
					Ширина = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяШиринаЧисло * (ВысотаЧисло/СтараяВысотаЧисло),0)
							 );
				Иначе
					Ширина = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяШиринаЧисло / (СтараяВысотаЧисло/ВысотаЧисло),0)
							 );
				КонецЕсли;				
				
				СтараяШирина = Ширина;
				СтараяВысота = Высота;
				
			Иначе
				
				Возврат; // Ничего не изменилось
				
			КонецЕсли;
			
		КонецЕсли;
		
			
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно определить соотношение ширины и высоты'"));
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция МожноИзменятьРазмерыПропорционально(Ширина, Высота) Экспорт
	
	Возврат (ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(Ширина)
		И ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(Высота)
		И Число(Ширина) > 0
		И Число(Высота) > 0);
	
КонецФункции

// Общее

Процедура ПоместитьФайлыВХранилище(СписокФайлов, СписокРазмещенныхФайлов, УникальныйИдентификатор) Экспорт
	
	#Если ВебКлиент Тогда
		
	ВызватьИсключение НСтр("ru = 'Возможность недоступна в веб-клиенте.'");
		
	#Иначе
		
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Файл Из СписокФайлов Цикл
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.Имя);
		ОписаниеПереданногоФайла = Новый Структура("Имя, Хранение");
		ОписаниеПереданногоФайла.Имя = Файл.Имя;
		ОписаниеПереданногоФайла.Хранение = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СписокРазмещенныхФайлов.Добавить(ОписаниеПереданногоФайла);
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти
