
#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf29-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПериодыОтсутствияСотрудников);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ПериодыОтсутствияСотрудников, Истина);
	Списки.Вставить(Метаданные.Справочники.ПериодыОтсутствияСотрудниковПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|Документ.ПериодыОтсутствияСотрудников.Чтение.ГруппыФизическихЛиц
		|Документ.ПериодыОтсутствияСотрудников.Чтение.Организации
		|Документ.ПериодыОтсутствияСотрудников.Изменение.ГруппыФизическихЛиц
		|Документ.ПериодыОтсутствияСотрудников.Изменение.Организации
		|Справочник.ПериодыОтсутствияСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПериодыОтсутствияСотрудниковПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПериодыОтсутствияСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПериодыОтсутствияСотрудниковПрисоединенныеФайлы.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПериодыОтсутствияСотрудников);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует движения по регистру сведений ПериодыОтсутствияСотрудников.
Процедура СформироватьДвиженияПериодыОтсутствияСотрудников(Движения, ТаблицаДвижений) Экспорт
	
	Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
		ЗаполнитьЗначенияСвойств(Движения.ПериодыОтсутствияСотрудников.Добавить(), СтрокаТаблицыДвижений);
	КонецЦикла;
	
	Если Движения.ПериодыОтсутствияСотрудников.Количество() > 0 Тогда
		Движения.ПериодыОтсутствияСотрудников.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПериодыОтсутствияСотрудников", "ПериодРегистрации", "Зарплата", "Организация");
	
КонецПроцедуры

// Проверяет, что периоды отсутствий закрыты документами начислений
Процедура ПроверитьПериодыОтсутствияПоСпискуСотрудников(Сотрудники, ПериодРегистрации, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Начало", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Окончание", КонецМесяца(ПериодРегистрации));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыОтсутствияСотрудников.Организация КАК Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало КАК Начало,
		|	ПериодыОтсутствияСотрудников.Окончание КАК Окончание,
		|	ПериодыОтсутствияСотрудников.ВидОтсутствия КАК ВидОтсутствия,
		|	ПериодыОтсутствияСотрудников.ЧастьСмены КАК ЧастьСмены,
		|	ПериодыОтсутствияСотрудников.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТПериодыОтсутствия
		|ИЗ
		|	РегистрСведений.ПериодыОтсутствияСотрудников КАК ПериодыОтсутствияСотрудников
		|ГДЕ
		|	ПериодыОтсутствияСотрудников.Сотрудник В(&Сотрудники)
		|	И ПериодыОтсутствияСотрудников.Начало МЕЖДУ &Начало И &Окончание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыОтсутствия.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствия";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ПроверитьПериодыОтсутствияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Отказ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет, что периоды отсутствий закрыты документами начислений
Процедура ПроверитьПериодыОтсутствияПоТаблицеСотрудников(ТаблицаСотрудников, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.Начало КАК Начало,
		|	ТаблицаСотрудников.Окончание КАК Окончание
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыОтсутствияСотрудников.Организация КАК Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало КАК Начало,
		|	ПериодыОтсутствияСотрудников.Окончание КАК Окончание,
		|	ПериодыОтсутствияСотрудников.ВидОтсутствия КАК ВидОтсутствия,
		|	ПериодыОтсутствияСотрудников.ЧастьСмены КАК ЧастьСмены,
		|	ПериодыОтсутствияСотрудников.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТПериодыОтсутствия
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтсутствияСотрудников КАК ПериодыОтсутствияСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = ПериодыОтсутствияСотрудников.Сотрудник
		|			И (ПериодыОтсутствияСотрудников.Начало МЕЖДУ ТаблицаСотрудников.Начало И ТаблицаСотрудников.Окончание)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыОтсутствия.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствия";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ПроверитьПериодыОтсутствияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Отказ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьПериодыОтсутствияПоВременнойТаблице(МенеджерВременныхТаблиц, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = РезультатЗапросаПоДокументамНачислений(Запрос.МенеджерВременныхТаблиц, Ложь);
	Выборка = РезультатЗапроса.Выбрать();
	
	СписокОтсутствийСотрудников = Новый Массив;
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ОтсутствияСотрудника = Новый Массив;
			
			Пока Выборка.СледующийПоЗначениюПоля("Начало") Цикл
				
				ДатыОтсутствий = ДатыИнтервала(Выборка.Начало, Выборка.Окончание);
				Если ЗначениеЗаполнено(Выборка.НачалоСостояния) Тогда
					
					Пока Выборка.Следующий() Цикл
						ВычеркнутьПериодИзДатИнтервала(ДатыОтсутствий, Выборка.НачалоСостояния, Выборка.ОкончаниеСостояния);
					КонецЦикла;
					
				КонецЕсли;
				
				Если ДатыОтсутствий.Количество() > 0 Тогда
					
					ОтсутствияСотрудника.Добавить(Новый Структура("ВидОтсутствия,Регистратор,ДатыОтсутствий"
						,Выборка.ВидОтсутствия, Выборка.РегистраторОтсутствия, ДатыОтсутствий));
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОтсутствияСотрудника.Количество() > 0 Тогда
				СписокОтсутствийСотрудников.Добавить(Новый Структура("Сотрудник,Отсутствия", Выборка.Сотрудник, ОтсутствияСотрудника));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СписокОтсутствийСотрудников.Количество() > 0 Тогда
		
		Для Каждого ОтсутствияСотрудника Из СписокОтсутствийСотрудников Цикл
			
			НесколькоОтсутствий = ОтсутствияСотрудника.Отсутствия.Количество() > 1;
			ВыведеноПервоеСообщение = Ложь;
			
			Для Каждого ОписаниеОтсутствия Из ОтсутствияСотрудника.Отсутствия Цикл
				
				ПериодыДат = ПериодыСпискаДат(ОписаниеОтсутствия.ДатыОтсутствий);
				
				Если НесколькоОтсутствий И Не ВыведеноПервоеСообщение Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru='По сотруднику %1 не оформлены начисления по отсутствиям:'"),
						ОтсутствияСотрудника.Сотрудник);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения, ОписаниеОтсутствия.Регистратор, , , Отказ);
					
				КонецЕсли;
				
				Если НесколькоОтсутствий Тогда
					
					ТекстСообщения = СтрШаблон(" - %2: %3",
						ОтсутствияСотрудника.Сотрудник,
						ОписаниеОтсутствия.ВидОтсутствия,
						ПредставлениеПериодов(ПериодыДат));
					
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru='По сотруднику %1 не оформлены начисления по отсутствию (%2): %3'"),
						ОтсутствияСотрудника.Сотрудник,
						ОписаниеОтсутствия.ВидОтсутствия,
						ПредставлениеПериодов(ПериодыДат));
					
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения, ОписаниеОтсутствия.Регистратор, , , Отказ);
				
				ВыведеноПервоеСообщение = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОписаниеПрофиляРуководительПодразделения(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПериодовОтсутствияСотрудников");
	
КонецПроцедуры

Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	Для Каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		
		Если ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляКадровикРасчетчик()
			Или ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийКадровикРасчетчик() Тогда
			
			ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПериодовОтсутствияСотрудников");
			
		ИначеЕсли ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляАудитор() Тогда
			
			ОписаниеПрофиля.Роли.Добавить("ЧтениеПериодовОтсутствияСотрудников");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатыИнтервала(Начало, Окончание) Экспорт
	
	СоответствиеДатИнтервала = Новый Соответствие;
	
	ДатаИнтервала = Начало;
	Пока ДатаИнтервала <= Окончание Цикл
		
		СоответствиеДатИнтервала.Вставить(ДатаИнтервала, Истина);
		ДатаИнтервала = КонецДня(ДатаИнтервала) + 1;
		
	КонецЦикла;
	
	Возврат СоответствиеДатИнтервала;
	
КонецФункции

Процедура ВычеркнутьПериодИзДатИнтервала(ДатыИнтервала, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		
		ДатаПериода = НачалоПериода;
		Пока ДатаПериода <= ОкончаниеПериода Цикл
			
			ДатыИнтервала.Удалить(ДатаПериода);
			ДатаПериода = КонецДня(ДатаПериода) + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПериодыСпискаДат(ДатыОтсутствий) Экспорт
	
	ПериодыОтсутствий = Новый Массив;
	Если ДатыОтсутствий.Количество() > 0 Тогда
		
		СписокДат = Новый СписокЗначений;
		СписокДат.ЗагрузитьЗначения(ОбщегоНазначения.ВыгрузитьКолонку(ДатыОтсутствий, "Ключ"));
		СписокДат.СортироватьПоЗначению();
		
		ПериодыОтсутствий = Новый Массив;
		НачалоПериода = Неопределено;
		ОкончаниеПериода = Неопределено;
		
		Для Каждого ОписаниеДаты Из СписокДат Цикл
			
			ДатаСписка = ОписаниеДаты.Значение;
			Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
				НачалоПериода = ДатаСписка;
				ОкончаниеПериода = ДатаСписка;
			Иначе
				
				Если ОкончаниеПериода <> НачалоДня(ДатаСписка - 1) Тогда
					
					ПериодыОтсутствий.Добавить(Новый Структура("Начало,Окончание", НачалоПериода, ОкончаниеПериода));
					
					НачалоПериода = ДатаСписка;
					ОкончаниеПериода = ДатаСписка;
					
				Иначе
					ОкончаниеПериода = ДатаСписка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПериодыОтсутствий.Добавить(Новый Структура("Начало,Окончание", НачалоПериода, ОкончаниеПериода));
		
	КонецЕсли;
	
	Возврат ПериодыОтсутствий;
	
КонецФункции

Функция ПредставлениеПериодов(ПериодыОтсутствий)
	
	ПредставленияПериодов = Новый Массив;
	Для Каждого ПериодОтсутствия Из ПериодыОтсутствий Цикл
		ПредставленияПериодов.Добавить(ПредставлениеПериодаПоДатамНачалаИОкончания(ПериодОтсутствия.Начало, ПериодОтсутствия.Окончание));
	КонецЦикла;
	
	Возврат СтрСоединить(ПредставленияПериодов, "; ");
	
КонецФункции

Функция ПредставлениеПериодаПоДатамНачалаИОкончания(Начало, Окончание)
	
	Если Начало = Окончание Тогда
		Возврат Формат(Начало, "ДЛФ=D");
	КонецЕсли;
	
	Возврат СтрШаблон("%1 - %2", Формат(Начало, "ДЛФ=D"), Формат(Окончание, "ДЛФ=D"));
	
КонецФункции

Функция ДокументыНачисленийИОстаткиДатОтсутствия(Организация, Сотрудник, Начало, Окончание, ЧастьСмены) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("ЧастьСмены", ЧастьСмены);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&Сотрудник КАК Сотрудник,
		|	&Начало КАК Начало,
		|	&Окончание КАК Окончание,
		|	&ЧастьСмены КАК ЧастьСмены,
		|	НЕОПРЕДЕЛЕНО КАК ВидОтсутствия,
		|	НЕОПРЕДЕЛЕНО КАК Регистратор
		|ПОМЕСТИТЬ ВТПериодыОтсутствия";
	
	Запрос.Выполнить();
	
	РезультатЗапроса = РезультатЗапросаПоДокументамНачислений(Запрос.МенеджерВременныхТаблиц, Истина);
	Выборка = РезультатЗапроса.Выбрать();
	
	ДокументыНачисления = Новый СписокЗначений;
	ДатыОтсутствий = ДатыИнтервала(Начало, Окончание);
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("Начало") Цикл
				
				Пока Выборка.Следующий() Цикл
					
					ПерерасчетЗарплаты.ДобавитьПричинуПерерасчета(ДокументыНачисления, Выборка.Регистратор);
					ВычеркнутьПериодИзДатИнтервала(ДатыОтсутствий, Выборка.НачалоСостояния, Выборка.ОкончаниеСостояния);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ОбщегоНазначения.ВыгрузитьКолонку(ДатыОтсутствий, "Ключ"));
	СписокДат.СортироватьПоЗначению();
	
	Возврат Новый Структура("ДокументыНачисления,ОстатокДатОтсутствия" , ДокументыНачисления, СписокДат);
	
КонецФункции

Процедура ЗаполнитьТаблицуОтсутствийДокументамиНачислений(МенеджерВременныхТаблиц, ТаблицаОтсутствий, ДоступноЗакрытиеОтсутствий) Экспорт
	
	РезультатЗапроса = РезультатЗапросаПоДокументамНачислений(МенеджерВременныхТаблиц, Истина);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("Начало") Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Организация", Выборка.Организация);
				СтруктураПоиска.Вставить("Сотрудник", Выборка.Сотрудник);
				СтруктураПоиска.Вставить("Начало", Выборка.Начало);
				
				СтрокиТаблицыОтсутствий = ТаблицаОтсутствий.НайтиСтроки(СтруктураПоиска);
				Если СтрокиТаблицыОтсутствий.Количество() > 0 Тогда
					
					СтрокаТаблицыОтсутствий = СтрокиТаблицыОтсутствий[0];
					ДатыОтсутствий = ДатыИнтервала(СтрокаТаблицыОтсутствий.Начало, СтрокаТаблицыОтсутствий.Окончание);
				
					Пока Выборка.Следующий() Цикл
						
						УстановитьПривилегированныйРежим(Истина);
						ПерерасчетЗарплаты.ДобавитьПричинуПерерасчета(СтрокаТаблицыОтсутствий.ДокументыНачисления, Выборка.Регистратор);
						УстановитьПривилегированныйРежим(Ложь);
						
						ВычеркнутьПериодИзДатИнтервала(ДатыОтсутствий, Выборка.НачалоСостояния, Выборка.ОкончаниеСостояния);
						
					КонецЦикла;
					
					Если ДатыОтсутствий.Количество() = 0 Тогда
						СтрокаТаблицыОтсутствий.ЗакрытПолностью = Истина;
						СтрокаТаблицыОтсутствий.ПериодЗакрыт = Истина;
					Иначе
						
						СтрокаТаблицыОтсутствий.ПериодЗакрыт = Истина;
						Если ДоступноЗакрытиеОтсутствий Тогда
							
							СтрокаТаблицыОтсутствий.ДокументыНачисления.Вставить(
								0, Неопределено, ПредставлениеКомандыЗакрытияПоВидуОтсутствия(СтрокаТаблицыОтсутствий.ВидОтсутствия));
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеКомандыЗакрытияПоВидуОтсутствия(ВидОтсутствия, ДоступноЗакрытиеОтсутствий = Истина) Экспорт
	
	Если Не ДоступноЗакрытиеОтсутствий Тогда
		ПредставлениеКоманды = НСтр("ru='Не оформлено'")
	Иначе
		
		ПолноеИмяМетаданныхДокумента = ОтсутствияСотрудниковКлиентСервер.ИменаДокументовВидовОтсутствия().Получить(ВидОтсутствия);
		
		МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданныхДокумента);
		Если СозданиеДокументаДоступно(МетаданныеДокумента) Тогда
			ПредставлениеКоманды = НСтр("ru='Оформить'") + """" + МетаданныеДокумента.Синоним + """";
		Иначе
			ПредставлениеКоманды = НСтр("ru='Оформить начисление'")
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеКоманды;
	
КонецФункции

Функция СозданиеДокументаДоступно(МетаданныеДокумента) Экспорт
	
	Возврат ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеДокумента.ПолноеИмя())
		И ПравоДоступа("Добавление", МетаданныеДокумента);
	
КонецФункции

Функция РезультатЗапросаПоДокументамНачислений(МенеджерВременныхТаблиц, ТолькоПериодыСостояний) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТипыОтсутствий = Новый Массив;
	
	СписокИменМетаданныхДокументов = ИменаМетаданныхДокументовОтсутствий();
	Для Каждого ИмяМетаданныхДокумента Из СписокИменМетаданныхДокументов Цикл
		ТипыОтсутствий.Добавить(Тип(СтрЗаменить(ИмяМетаданныхДокумента, "Документ.", "ДокументСсылка.")));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТипыОтсутствий", ТипыОтсутствий);
	
	КатегорииОтсутствий = Новый Массив;
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	КатегорииОтсутствий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	
	Запрос.УстановитьПараметр("КатегорииОтсутствий", КатегорииОтсутствий);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыОтсутствияСотрудников.Организация КАК Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало КАК Начало,
		|	ДанныеСостоянийСотрудников.Регистратор КАК Регистратор,
		|	ДанныеСостоянийСотрудников.Состояние КАК Состояние,
		|	ДанныеСостоянийСотрудников.Начало КАК НачалоСостояния,
		|	ДанныеСостоянийСотрудников.Окончание КАК ОкончаниеСостояния
		|ПОМЕСТИТЬ ВТОтклоненияОтсутствий
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
		|		ПО ПериодыОтсутствияСотрудников.Сотрудник = ДанныеСостоянийСотрудников.Сотрудник
		|			И ПериодыОтсутствияСотрудников.Начало >= ДанныеСостоянийСотрудников.Начало
		|			И ПериодыОтсутствияСотрудников.Начало <= ДанныеСостоянийСотрудников.Окончание
		|			И (ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) В (&ТипыОтсутствий))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыОтсутствияСотрудников.Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало,
		|	ДанныеСостоянийСотрудников.Регистратор,
		|	ДанныеСостоянийСотрудников.Состояние,
		|	ДанныеСостоянийСотрудников.Начало,
		|	ДанныеСостоянийСотрудников.Окончание
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
		|		ПО ПериодыОтсутствияСотрудников.Сотрудник = ДанныеСостоянийСотрудников.Сотрудник
		|			И ПериодыОтсутствияСотрудников.Окончание >= ДанныеСостоянийСотрудников.Начало
		|			И ПериодыОтсутствияСотрудников.Окончание <= ДанныеСостоянийСотрудников.Окончание
		|			И ПериодыОтсутствияСотрудников.Начало < ДанныеСостоянийСотрудников.Начало
		|			И (ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) В (&ТипыОтсутствий))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыОтсутствияСотрудников.Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало,
		|	ДанныеСостоянийСотрудников.Регистратор,
		|	ДанныеСостоянийСотрудников.Состояние,
		|	ДанныеСостоянийСотрудников.Начало,
		|	ДанныеСостоянийСотрудников.Окончание
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
		|		ПО ПериодыОтсутствияСотрудников.Сотрудник = ДанныеСостоянийСотрудников.Сотрудник
		|			И ПериодыОтсутствияСотрудников.Начало < ДанныеСостоянийСотрудников.Начало
		|			И ПериодыОтсутствияСотрудников.Окончание > ДанныеСостоянийСотрудников.Окончание
		|			И (ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) В (&ТипыОтсутствий))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыОтсутствияСотрудников.Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало,
		|	ОтработанноеВремяПоСотрудникам.Регистратор,
		|	ПериодыОтсутствияСотрудников.ВидОтсутствия,
		|	ПериодыОтсутствияСотрудников.Начало,
		|	ПериодыОтсутствияСотрудников.Окончание
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|		ПО ПериодыОтсутствияСотрудников.Сотрудник = ОтработанноеВремяПоСотрудникам.Сотрудник
		|			И (НАЧАЛОПЕРИОДА(ПериодыОтсутствияСотрудников.Начало, МЕСЯЦ) <= ОтработанноеВремяПоСотрудникам.Период)
		|			И ПериодыОтсутствияСотрудников.Начало = ОтработанноеВремяПоСотрудникам.ДатаНачала
		|			И (ОтработанноеВремяПоСотрудникам.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииОтсутствий))
		|			И (ОтработанноеВремяПоСотрудникам.ВремяВЧасах)
		|ГДЕ
		|	ПериодыОтсутствияСотрудников.ЧастьСмены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыОтсутствияСотрудников.Организация КАК Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало КАК Начало,
		|	ПериодыОтсутствияСотрудников.Окончание КАК Окончание,
		|	ПериодыОтсутствияСотрудников.ВидОтсутствия КАК ВидОтсутствия,
		|	ПериодыОтсутствияСотрудников.Регистратор КАК РегистраторОтсутствия,
		|	ОтклоненияОтсутствий.Регистратор КАК Регистратор,
		|	ОтклоненияОтсутствий.Состояние КАК Состояние,
		|	ОтклоненияОтсутствий.НачалоСостояния КАК НачалоСостояния,
		|	ОтклоненияОтсутствий.ОкончаниеСостояния КАК ОкончаниеСостояния
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтклоненияОтсутствий КАК ОтклоненияОтсутствий
		|		ПО ПериодыОтсутствияСотрудников.Организация = ОтклоненияОтсутствий.Организация
		|			И ПериодыОтсутствияСотрудников.Сотрудник = ОтклоненияОтсутствий.Сотрудник
		|			И ПериодыОтсутствияСотрудников.Начало = ОтклоненияОтсутствий.Начало
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Сотрудник,
		|	Начало";
	
	Если Не ТолькоПериодыСостояний Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтклоненияОтсутствий КАК ОтклоненияОтсутствий",
			"ЛЕВОЕ СОЕДИНЕНИЕ ВТОтклоненияОтсутствий КАК ОтклоненияОтсутствий");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИменаМетаданныхДокументовОтсутствий()
	
	СписокИменМетаданныхДокументов = Новый Массив;
	
	СписокИменМетаданныхДокументов.Добавить("Документ.БольничныйЛист");
	СписокИменМетаданныхДокументов.Добавить("Документ.ПрогулНеявка");
	СписокИменМетаданныхДокументов.Добавить("Документ.Отгул");
	СписокИменМетаданныхДокументов.Добавить("Документ.Отпуск");
	СписокИменМетаданныхДокументов.Добавить("Документ.Командировка");
	
	СписокИменМетаданныхДокументов.Добавить("Документ.ОтпускБезСохраненияОплаты");
	СписокИменМетаданныхДокументов.Добавить("Документ.ОтпускПоУходуЗаРебенком");
	СписокИменМетаданныхДокументов.Добавить("Документ.ОплатаПоСреднемуЗаработку");
	
	// Документы на список сотрудников
	
	СписокИменМетаданныхДокументов.Добавить("Документ.ПростойСотрудников");
	СписокИменМетаданныхДокументов.Добавить("Документ.ОтгулСписком");
	СписокИменМетаданныхДокументов.Добавить("Документ.ПрогулНеявкаСписком");
	
	СписокИменМетаданныхДокументов.Добавить("Документ.ОтпускБезСохраненияОплатыСписком");
	
	Возврат СписокИменМетаданныхДокументов;
	
КонецФункции

Процедура СоздатьКонтекстноеМенюОформленияОтсутствий(Форма, ИмяГруппыКнопок, ИмяГруппыКнопокПрочие) Экспорт
	
	ДокументыВидыПериодов = ОтсутствияСотрудниковКлиентСервер.ДокументыВидыПериодовОтсутствия();
	Для Каждого ОписаниеДокументаВидаПериода Из ДокументыВидыПериодов Цикл
		
		ДобавитьКомандуСозданияОтсутствия(Форма, ОписаниеДокументаВидаПериода.ПолноеИмяОбъектаМетаданных,
			ОписаниеДокументаВидаПериода.ВидПериодаОтсутствия <> ПредопределенноеЗначение("Перечисление.ВидыПериодовОтсутствияСотрудников.ПустаяСсылка"),
			ИмяГруппыКнопок, ИмяГруппыКнопокПрочие);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКомандуСозданияОтсутствия(Форма, ПолноеИмяОбъектаМетаданных, ДобавлятьКонтекстноЗависимуюКоманду, ИмяГруппыКнопок, ИмяГруппыКнопокПрочие)
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	Если СозданиеДокументаДоступно(МетаданныеДокумента) Тогда
		
		Команды = Форма.Команды;
		Элементы = Форма.Элементы;
		
		ГруппаКнопок = Элементы.Найти(ИмяГруппыКнопок);
		ГруппаКнопокПрочие = Элементы.Найти(ИмяГруппыКнопокПрочие);
		
		ИмяДокумента = МетаданныеДокумента.Имя;
		Если Команды.Найти(ИмяДокумента) = Неопределено Тогда
			
			Форма.ДоступныеДляСозданияДокументыНачислений.Добавить(ПолноеИмяОбъектаМетаданных, МетаданныеДокумента.Синоним);
			
			Команда = Команды.Добавить(ИмяДокумента);
			Команда.Заголовок = МетаданныеДокумента.Синоним;
			Команда.Действие = "Подключаемый_ОформитьОтсутствие";
			
			Если ДобавлятьКонтекстноЗависимуюКоманду Тогда
				
				КомандаКонтекстногоМеню = Элементы.Вставить(
					ИмяДокумента + "ПоУмолчанию", Тип("КнопкаФормы"),
					ГруппаКнопок,
					ГруппаКнопокПрочие);
				
				КомандаКонтекстногоМеню.ИмяКоманды = ИмяДокумента;
				
			КонецЕсли;
			
			КомандаКонтекстногоМеню = Элементы.Добавить(
				ИмяДокумента, Тип("КнопкаФормы"), ГруппаКнопокПрочие);
			
			КомандаКонтекстногоМеню.ИмяКоманды = ИмяДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти