////////////////////////////////////////////////////////////////////////////////
// Подсистема "Охрана труда"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ОхранаТрудаИспользуется() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьНесчастныеСлучаиНаПроизводстве")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьИнструктажиПоОхранеТруда");
	
КонецФункции

#Область СпециальнаяОценкаУсловийТруда

// Процедура переопределяет обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности*".
//
// Параметры: - (см. РегламентированнаяОтчетностьПереопределяемый.ЗаписьОбъектовРегламентированнойОтчетности).
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ДекларацияСоответствияУсловийТруда") Тогда
		СтандартнаяОбработка = Ложь;
		ОтчетныйПериод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаПодачи");
		ПараметрыОтчета = РегламентированнаяОтчетность.СвойстваПрочихОтчетов(Ссылка);
		УстановитьПривилегированныйРежим(Истина);
		РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(ПараметрыОтчета);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность.
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	ДокументДекларацияСоответствия = Новый Массив;
	СоответствиеСсылокСвойствам = Новый Соответствие;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("ДокументСсылка.ДекларацияСоответствияУсловийТруда") Тогда
			ДокументДекларацияСоответствия.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументДекларацияСоответствия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументДекларацияСоответствия", ДокументДекларацияСоответствия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДекларацияСоответствияУсловийТруда.Ссылка,
	|	ДекларацияСоответствияУсловийТруда.Дата КАК ДатаСоздания,
	|	ДекларацияСоответствияУсловийТруда.Организация,
	|	ДекларацияСоответствияУсловийТруда.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	ДекларацияСоответствияУсловийТруда.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(ДекларацияСоответствияУсловийТруда.ДатаПодачи, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДекларацияСоответствияУсловийТруда.ДатаПодачи, МЕСЯЦ) КАК ДатаОкончания,
	|	ДекларацияСоответствияУсловийТруда.Комментарий,
	|	ДекларацияСоответствияУсловийТруда.НомерКорректировки
	|ИЗ
	|	Документ.ДекларацияСоответствияУсловийТруда КАК ДекларацияСоответствияУсловийТруда
	|ГДЕ
	|	ДекларацияСоответствияУсловийТруда.Ссылка В(&ДокументДекларацияСоответствия)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
		ЗапрашиваемыеДанные.ВариантОтчета = ?(Выборка.НомерКорректировки = 0, "П", "К/" + Строка(Выборка.НомерКорректировки));
	КонецЦикла;
	
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//		
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ДекларацияСоответствияУсловийТруда");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Отчетность в фонды'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаОтчета2014Кв1_ФормаОтчета";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СтатистикаФорма1Туст;
	
КонецПроцедуры

// Процедура заполняет список используемых регламентированных отчетов.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(СписокРегламентированныхОтчетов) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		ЭлементСписка = СписокРегламентированныхОтчетов.НайтиПоЗначению("РегламентированныйОтчетСоответствиеУсловийТруда");
		Если ЭлементСписка <> Неопределено Тогда
			СписокРегламентированныхОтчетов.Удалить(ЭлементСписка);
		КонецЕсли;
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеРеглотчетности

// Процедура заполняет структуру показателей.
// Ключ структуры - идентификатор показателя.
// Значение структуры - массив из двух элементов:
// 	- признак автозаполнения показателя,
//	- признак расшифровки показателя.
//
// Параметры:
// 	ПоказателиОтчета - структура показателей отчета.
//
Процедура ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесчастныеСлучаиНаПроизводстве") Тогда
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000040001003", Истина, Ложь);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000040002003", Истина, Ложь);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000050000103", Истина, Ложь);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000050000104", Истина, Ложь);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000050000105", Истина, Ложь);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000050000106", Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
Процедура ЗначенияПоказателей_4ФСС_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	ОписаниеТаблиц = Новый Структура("Таблица5,Таблица3_4");
	РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, ПараметрыОтчета.ДатаКонцаПериодаОтчета, Организация, ОписаниеТаблиц);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") И Контейнер.Свойство("Таблица5") Тогда
		Результат = ОписаниеТаблиц.Таблица5;
		Если Результат.Количество() > 0 Тогда
			СтрокаДанных = Результат[0];
			ЗаполнитьЗначенияСвойств(Контейнер.Таблица5, СтрокаДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесчастныеСлучаиНаПроизводстве") И Контейнер.Свойство("Таблица3_4") Тогда
		Результат = ОписаниеТаблиц.Таблица3_4;
		Если Результат.Количество() > 0 Тогда
			СтрокаДанных = Результат[0];
			ЗаполнитьЗначенияСвойств(Контейнер.Таблица3_4, СтрокаДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет структуру показателей.
// Ключ структуры - идентификатор показателя.
// Значение структуры - массив из двух элементов:
// 	- признак автозаполнения показателя,
//	- признак расшифровки показателя.
//
// Параметры:
// 	ПоказателиОтчета - структура показателей отчета.
//
Процедура ОписаниеПоказателей_4ФСС_2014Кв1(ПоказателиОтчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100000103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100000104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100000105", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100000106", Истина, Истина);
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
Процедура ЗначенияПоказателей_4ФСС_2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	ОписаниеТаблиц = Новый Структура("Раздел2_10");
	РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, Организация, ОписаниеТаблиц);
	
	Если Контейнер.Свойство("Раздел2_10") Тогда
		Результат = ОписаниеТаблиц.Раздел2_10;
		Если Результат.Количество() > 0 Тогда
			СтрокаДанных = Результат[0];
			ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_10, СтрокаДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет структуру показателей.
// Ключ структуры - идентификатор показателя.
// Значение структуры - массив из двух элементов:
// 	- признак автозаполнения показателя,
//	- признак расшифровки показателя.
//
// Параметры:
// 	ПоказателиОтчета - структура показателей отчета.
//
Процедура ОписаниеПоказателей_1Туст_2014Кв1(ПоказателиОтчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010105", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010203", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010204", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010205", Истина, Истина);
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
Процедура ЗначенияПоказателей_1Туст_2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноВызываемыеПроцедурыИзПодписейДокументовИСведенийОбОтветственныхЛицах

// Дополняет соответствие идентификаторов описаний подписей описанием реквизитов подписи ответственного за охрану труда.
//
// Параметры:
//   РолиПодписантов - Массив - Элементы создаются методом ПодписиДокументов.ИменаРеквизитовРолиПодписанта().
//
Процедура ДобавитьРольОтветственногоЗаОхрануТруда(РолиПодписантов) Экспорт
	
	ОписаниеРеквизитов = ОписаниеРеквизитовРолиОтветственныйЗаОхрануТруда();
	РольОтветственныйЗаОхрануТруда = ПодписиДокументов.ИменаРеквизитовРолиПодписанта(ОписаниеРеквизитов.ФизическоеЛицо, ОписаниеРеквизитов.Должность, ОписаниеРеквизитов.ОснованиеПодписи);
	РолиПодписантов.Добавить(РольОтветственныйЗаОхрануТруда);
	
КонецПроцедуры

// Дополняет таблицу описания ответственных лиц организаций.
//
// Параметры:
//   ТаблицаОтветственных - ТаблицаЗначений - см. СведенияОбОтветственныхЛицах.ТаблицаОтветственныхЛицОрганизаций()
//
Процедура ДополнитьТаблицуОтветственныхЛицОтветственнымЗаОхрануТруда(ТаблицаОтветственных) Экспорт
	
	ОписаниеРеквизитов = ОписаниеРеквизитовРолиОтветственныйЗаОхрануТруда();
	
	НоваяСтрока = ТаблицаОтветственных.Добавить();
	
	НоваяСтрока.Ключ = ОписаниеРеквизитов.ФизическоеЛицо;
	НоваяСтрока.Должность = ОписаниеРеквизитов.Должность;
	НоваяСтрока.НаименованиеДолжности = ОписаниеРеквизитов.Должность + "Строкой";
	НоваяСтрока.ОснованиеПодписи = ОписаниеРеквизитов.ОснованиеПодписи;
	
КонецПроцедуры

// Дополняет временную таблицу сведениями об ответственном за охрану труда.
//
// Параметры:
//		МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер временных таблиц.
//		СписокФизическихЛиц		 - Массив -  список физических лиц, для которых необходимо получить ответственных.
//		ИмяСоздаваемойВТ		 - Строка - имя создаваемой ВТ.
//
Процедура ДополнитьВТОтветственныхЛицОтветственнымиЗаОхрануТруда(МенеджерВременныхТаблиц, СписокФизическихЛиц, ИмяСоздаваемойВТ = "ВТОтветственныеЛица") Экспорт
	
	Если Не ОхранаТрудаИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РольОтветственныйЗаОхрануТруда", НСтр("ru='Ответственный за охрану труда'"));
	Запрос.УстановитьПараметр("ТекущийПериод", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбОтветственныхЛицахСрезПоследних.Организация КАК Организация,
	|	СведенияОбОтветственныхЛицахСрезПоследних.ОтветственныйЗаОхрануТруда КАК ФизическоеЛицо,
	|	&РольОтветственныйЗаОхрануТруда КАК РольОтветственногоЛица
	|ПОМЕСТИТЬ ВТОтветственныеЗаОхрануТрудаВнутренний
	|ИЗ
	|	РегистрСведений.СведенияОбОтветственныхЛицах.СрезПоследних(&ТекущийПериод, ) КАК СведенияОбОтветственныхЛицахСрезПоследних
	|ГДЕ
	|	СведенияОбОтветственныхЛицахСрезПоследних.ОтветственныйЗаОхрануТруда В(&СписокФизическихЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛица.Организация КАК Организация,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛица.РольОтветственногоЛица КАК РольОтветственногоЛица
	|ПОМЕСТИТЬ ВТОтветственныеЛицаПромежуточный
	|ИЗ
	|	#ВТОтветственныеЛица КАК ОтветственныеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТОтветственныеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛицаПромежуточный.Организация КАК Организация,
	|	ОтветственныеЛицаПромежуточный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаПромежуточный.РольОтветственногоЛица КАК РольОтветственногоЛица
	|ПОМЕСТИТЬ #ВТОтветственныеЛица
	|ИЗ
	|	ВТОтветственныеЛицаПромежуточный КАК ОтветственныеЛицаПромежуточный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтветственныеЗаОхрануТруда.Организация,
	|	ОтветственныеЗаОхрануТруда.ФизическоеЛицо,
	|	ОтветственныеЗаОхрануТруда.РольОтветственногоЛица
	|ИЗ
	|	ВТОтветственныеЗаОхрануТрудаВнутренний КАК ОтветственныеЗаОхрануТруда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОтветственныеЛицаПромежуточный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОтветственныеЗаОхрануТрудаВнутренний";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТОтветственныеЛица", ИмяСоздаваемойВТ);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// Процедура обеспечивает сбор сведений о хранении данных, 
// относящихся к персональным.
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	// Специальная оценка условий труда
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПодготовкаСпецоценкиУсловийТруда";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник";
	НовыеСведения.ПоляДоступа		= "Сотрудники.Пол,Сотрудники.ДатаРождения,Сотрудники.СтраховойНомерПФР,Сотрудники.Инвалидность";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	// Несчастные случаи
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НесчастныйСлучайНаПроизводстве";
	НовыеСведения.ПоляРегистрации	= "Пострадавшие.Пострадавший";
	НовыеСведения.ПоляДоступа		= "Пострадавшие.СтажОбщийВид,Пострадавшие.СтажОбщийДатаОтсчета,Пострадавшие.СтажОбщийРазмерМесяцев,Пострадавшие.СтажОбщийРазмерДней,Пострадавшие.СтажОбщийИсчисляетсяСДатыПриема,Пострадавшие.СтажОбщийПредставление";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НесчастныйСлучайНаПроизводстве";
	НовыеСведения.ПоляРегистрации	= "Пострадавшие.Пострадавший";
	НовыеСведения.ПоляДоступа		= "Пострадавшие.СтажРаботыНаПредприятииЛет,Пострадавшие.СтажРаботыНаПредприятииМесяцев,Пострадавшие.СтажРаботыНаПредприятииДней,Пострадавшие.СтажВОрганизацииПредставление";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НесчастныйСлучайНаПроизводстве";
	НовыеСведения.ПоляРегистрации	= "Очевидцы.Очевидец";
	НовыеСведения.ПоляДоступа		= "Очевидцы.Адрес,Очевидцы.АдресПредставление,Очевидцы.КонтактныйТелефон,Очевидцы.КонтактныйТелефонПредставление";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НесчастныйСлучайНаПроизводстве";
	НовыеСведения.ПоляРегистрации	= "Инструктажи.Пострадавший";
	НовыеСведения.ПоляДоступа		= "Инструктажи.ВидИнструктажа,Инструктажи.ДатаПрохождения";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПоследствияНесчастногоСлучая";
	НовыеСведения.ПоляРегистрации	= "Пострадавшие.Пострадавший";
	НовыеСведения.ПоляДоступа		= "РешениеПрокуратуры,Пострадавшие.ОкончательныйДиагноз";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПоследствияНесчастногоСлучая";
	НовыеСведения.ПоляРегистрации	= "Пострадавшие.Пострадавший";
	НовыеСведения.ПоляДоступа		= "СтоимостьИспорченногоОборудования,СтоимостьРазрушенныхЗданий,ПрочиеРасходы,СуммарныйМатериальныйУщерб,Пострадавшие.РазмерЕжемесячнойВыплаты";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзмененияДанных

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "ОхранаТруда";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("333c9370-3da2-4347-ae9d-84e3c314d942");
	Раздел.Представление = НСтр("ru = 'Охрана труда'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));

КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	// Специальная оценка условий труда
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДекларацияСоответствияУсловийТруда",					"ДатаПодачи",			"ОхранаТруда", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодготовкаСпецоценкиУсловийТруда",					"ДатаНачала",			"ОхранаТруда", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РезультатыСпецоценкиУсловийТруда",					"ДатаРезультатов",		"ОхранаТруда", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.РезультатыСпециальнойОценкиУсловийТруда",		"Период",				"ОхранаТруда", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеДатыСпециальнойОценкиУсловийТруда",	"Период",				"ОхранаТруда", "Организация");
	
	// Несчастные случаи
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НесчастныйСлучайНаПроизводстве",						"ДатаПроисшествия",		"ОхранаТруда", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПоследствияНесчастногоСлучая",						"ДатаПроисшествия",		"ОхранаТруда", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПротоколОпросаУчастникаНесчастногоСлучая",			"ДатаПроисшествия",		"ОхранаТруда", "Организация");
	
	// Инструктажи
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИнструктажПоОхранеТруда",							"ДатаПроведения",		"ОхранаТруда", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ИнструктажиПоОхранеТруда",					"Период",				"ОхранаТруда", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных).
//
// Описание:
//   В Разделы необходимо добавить метаданные тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.ОхранаТруда) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.ОхранаТруда, НСтр("ru = 'Отчеты по охране труда'"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РабочиеМестаПодлежащиеСпециальнойОценкеУсловийТруда);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РезультатыСпециальнойОценкиУсловийТруда);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.НесчастныеСлучаиНаПроизводстве);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ИнструктажиПоОхранеТруда);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЖурналРегистрацииИнструктажа);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РабочиеМестаПодлежащиеСпециальнойОценкеУсловийТруда, "РабочиеМестаПодлежащиеСпециальнойОценкеУсловийТруда");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьСпециальнуюОценкуУсловийТруда");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РезультатыСпециальнойОценкиУсловийТруда, "РезультатыСпециальнойОценкиУсловийТруда");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьСпециальнуюОценкуУсловийТруда");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.НесчастныеСлучаиНаПроизводстве, "СведенияОНесчастныхСлучаях");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьНесчастныеСлучаиНаПроизводстве");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.НесчастныеСлучаиНаПроизводстве, "ПричиныНесчастныхСлучаев");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьНесчастныеСлучаиНаПроизводстве");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.НесчастныеСлучаиНаПроизводстве, "СведенияОПострадавших");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьНесчастныеСлучаиНаПроизводстве");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.НесчастныеСлучаиНаПроизводстве, "УщербОтНесчастныхСлучаев");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьНесчастныеСлучаиНаПроизводстве");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИнструктажиПоОхранеТруда, "КонтролируемыеИнструктажи");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьИнструктажиПоОхранеТруда");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИнструктажиПоОхранеТруда, "ПросроченныеИнструктажи");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьИнструктажиПоОхранеТруда");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ЖурналРегистрацииИнструктажа, "ЖурналРегистрацииВводногоИнструктажа");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьИнструктажиПоОхранеТруда");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ЖурналРегистрацииИнструктажа, "ЖурналРегистрацииИнструктажаНаРабочемМесте");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьИнструктажиПоОхранеТруда");
	
КонецПроцедуры

#КонецОбласти

// Возвращает сведения специальной оценки условий труда по рабочим местам
//
// Параметры:
//		РабочиеМеста - Массив рабочих мест, по которым требуется вернуть сведения о спецоценке
//		ДатаСведений - Дата, на которую требуется получить сведения о спецоценке.
//
// Возвращаемое значение:
//		СведенияСпецоценкиУсловийТруда - Соответствие
//				Ключ - Ссылка на рабочее место
//				Значение - Структура
//					СведенияСОУТ - Строка - Сведения спецоценки по рабочему месту
//					СведенияОПСОУТ - Строка - Сведения об организации, проводившей спецоценку рабочего места.
//
Функция СведенияСпецоценкиУсловийТрудаПоРабочимМестам(РабочиеМеста, ДатаСведений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочиеМеста", РабочиеМеста);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатыСпециальнойОценкиУсловийТруда.Период КАК ДатаСОУТ,
	|	РезультатыСпециальнойОценкиУсловийТруда.РабочееМесто КАК РабочееМесто,
	|	РезультатыСпециальнойОценкиУсловийТруда.КлассУсловийТруда КАК КлассУсловийТруда,
	|	ЕСТЬNULL(НомераРабочихМестСпециальнойОценкиУсловийТруда.Номер, """") КАК НомерРабочегоМеста,
	|	ЕСТЬNULL(Контрагенты.ИНН, """") КАК ИННОПСОУТ,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, """") КАК НаименованиеОПСОУТ
	|ПОМЕСТИТЬ ВТРабочиеМеста
	|ИЗ
	|	РегистрСведений.РезультатыСпециальнойОценкиУсловийТруда.СрезПоследних(&ДатаСведений, РабочееМесто В (&РабочиеМеста)) КАК РезультатыСпециальнойОценкиУсловийТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераРабочихМестСпециальнойОценкиУсловийТруда КАК НомераРабочихМестСпециальнойОценкиУсловийТруда
	|		ПО РезультатыСпециальнойОценкиУсловийТруда.РабочееМесто = НомераРабочихМестСпециальнойОценкиУсловийТруда.РабочееМесто
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда КАК РезультатыСпецоценкиУсловийТруда
	|		ПО РезультатыСпециальнойОценкиУсловийТруда.Регистратор = РезультатыСпецоценкиУсловийТруда.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (РезультатыСпецоценкиУсловийТруда.Исполнитель = Контрагенты.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	NULL КАК ДатаСОУТ,
	|	ШтатноеРасписание.Ссылка КАК РабочееМесто,
	|	"""" КАК КлассУсловийТруда,
	|	"""" КАК НомерРабочегоМеста,
	|	"""" КАК ИННОПСОУТ,
	|	"""" КАК НаименованиеОПСОУТ
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&РабочиеМеста)
	|	И НЕ ШтатноеРасписание.Ссылка В
	|				(ВЫБРАТЬ
	|					РабочиеМеста.РабочееМесто
	|				ИЗ
	|					ВТРабочиеМеста КАК РабочиеМеста)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РабочиеМеста.ДатаСОУТ,
	|	РабочиеМеста.РабочееМесто,
	|	РабочиеМеста.КлассУсловийТруда,
	|	РабочиеМеста.НомерРабочегоМеста,
	|	РабочиеМеста.ИННОПСОУТ,
	|	РабочиеМеста.НаименованиеОПСОУТ
	|ИЗ
	|	ВТРабочиеМеста КАК РабочиеМеста";
	
	СведенияСпецоценкиУсловийТруда = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияСОУТ = Новый Структура;
		Если ЗначениеЗаполнено(Выборка.КлассУсловийТруда) Тогда
			СведенияСОУТ.Вставить("СведенияСОУТ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Специальная оценка условий труда проведена %1 Индивидуальный номер рабочего места %2. Класс условий труда - %3'"),
					Формат(Выборка.ДатаСОУТ, "ДЛФ=ДД"),
					?(ПустаяСтрока(Выборка.НомерРабочегоМеста), НСтр("ru = 'не указан'"), Выборка.НомерРабочегоМеста),
					Выборка.КлассУсловийТруда));
			СведенияСОУТ.Вставить("СведенияОПСОУТ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, ИНН %2'"),
					Выборка.НаименованиеОПСОУТ,
					Выборка.ИННОПСОУТ));
		Иначе
			СведенияСОУТ.Вставить("СведенияСОУТ", НСтр("ru = 'Не проводилась'"));
			СведенияСОУТ.Вставить("СведенияОПСОУТ", "");
		КонецЕсли;
		СведенияСпецоценкиУсловийТруда.Вставить(Выборка.РабочееМесто, СведенияСОУТ);
	КонецЦикла;
	
	Возврат СведенияСпецоценкиУсловийТруда;
	
КонецФункции

// Возвращает сведения специальной оценки условий труда по рабочему месту
// см. описание ОхранаТруда.СведенияСпецоценкиУсловийТрудаПоРабочимМестам.
//
Функция СведенияСпецоценкиУсловийТрудаПоРабочемуМесту(РабочееМесто, ДатаСведений) Экспорт
	
	Сведения = СведенияСпецоценкиУсловийТрудаПоРабочимМестам(РабочееМесто, ДатаСведений);
	Возврат Сведения.Получить(РабочееМесто);
	
КонецФункции

#КонецОбласти

#Область Инструктажи

Функция ИнструктажиСотрудниковПоОхранеТруда(Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнструктажиПоОхранеТруда.Регистратор КАК Документ,
	|	ИнструктажиПоОхранеТруда.ВидИнструктажа КАК ВидИнструктажа,
	|	ИнструктажиПоОхранеТруда.Период КАК ДатаПроведения,
	|	ИнструктажиПоОхранеТруда.Сотрудник КАК Сотрудник,
	|	ИнструктажиПоОхранеТруда.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ИнструктажиПоОхранеТруда.СрезПоследних(, Сотрудник В (&Сотрудники)) КАК ИнструктажиПоОхранеТруда";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СписокВыбораПериодаПроведенияИнструктажей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК КоличествоРаз,
	|	1 КАК КоличествоПериодов,
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц) КАК Периодичность,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТПредопределенныеЗначения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	1,
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	1,
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	1,
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Год),
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	2,
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Год),
	|	5
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыИнструктажейПоОхранеТруда.КоличествоРаз КАК КоличествоРаз,
	|	ВидыИнструктажейПоОхранеТруда.КоличествоПериодов КАК КоличествоПериодов,
	|	ВидыИнструктажейПоОхранеТруда.Периодичность КАК Периодичность,
	|	КОЛИЧЕСТВО(ВидыИнструктажейПоОхранеТруда.Периодичность) КАК КоличествоПериода
	|ПОМЕСТИТЬ ВТВыбранныеЗначения
	|ИЗ
	|	Справочник.ВидыИнструктажейПоОхранеТруда КАК ВидыИнструктажейПоОхранеТруда
	|ГДЕ
	|	ВидыИнструктажейПоОхранеТруда.КоличествоРаз <> 0
	|	И ВидыИнструктажейПоОхранеТруда.КоличествоПериодов <> 0
	|	И ВидыИнструктажейПоОхранеТруда.Периодичность <> ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыИнструктажейПоОхранеТруда.КоличествоРаз,
	|	ВидыИнструктажейПоОхранеТруда.КоличествоПериодов,
	|	ВидыИнструктажейПоОхранеТруда.Периодичность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеЗначения.КоличествоРаз КАК КоличествоРаз,
	|	ВыбранныеЗначения.КоличествоПериодов КАК КоличествоПериодов,
	|	ВыбранныеЗначения.Периодичность КАК Периодичность,
	|	ВыбранныеЗначения.КоличествоПериода КАК КоличествоИспользованияПериода,
	|	0 КАК Приоритет
	|ИЗ
	|	ВТВыбранныеЗначения КАК ВыбранныеЗначения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПредопределенныеЗначения.КоличествоРаз,
	|	ПредопределенныеЗначения.КоличествоПериодов,
	|	ПредопределенныеЗначения.Периодичность,
	|	1,
	|	ПредопределенныеЗначения.Приоритет
	|ИЗ
	|	ВТПредопределенныеЗначения КАК ПредопределенныеЗначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыбранныеЗначения КАК ВыбранныеЗначения
	|		ПО (ВыбранныеЗначения.КоличествоРаз = ПредопределенныеЗначения.КоличествоРаз)
	|			И (ВыбранныеЗначения.КоличествоПериодов = ПредопределенныеЗначения.КоличествоПериодов)
	|			И (ВыбранныеЗначения.Периодичность = ПредопределенныеЗначения.Периодичность)
	|ГДЕ
	|	ВыбранныеЗначения.Периодичность ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоИспользованияПериода УБЫВ,
	|	Приоритет";
	
	СписокВыбораПериода = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПериода = Новый Структура("КоличествоРаз, КоличествоПериодов, Периодичность",
			Выборка.КоличествоРаз, Выборка.КоличествоПериодов, Выборка.Периодичность);
		СписокВыбораПериода.Добавить(СтруктураПериода, ПредставлениеПериодаПоСтруктуре(СтруктураПериода));
	КонецЦикла;
	
	СписокВыбораПериода.Добавить(ПроизвольноеЗначениеСпискаВыбораПроведенияИнструктажей());
	
	Возврат СписокВыбораПериода;
	
КонецФункции

Функция ПроизвольноеЗначениеСпискаВыбораПроведенияИнструктажей() Экспорт
	Возврат "Произвольно";
КонецФункции

#КонецОбласти

// Заполняет описателей профилей групп доступа, предназначенных для 
// работы с зарплатным и кадровым функционалом
// см. УправлениеДоступомПереопределяемый.ЗаполнитьПоставляемыеПрофилиГруппДоступа.
//
Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыОхранаТруда(ОписанияПрофилей, ПараметрыОбновления) Экспорт 
	
	ОписаниеПрофиля = ОписаниеПрофиляСпециалистПоОхранеТруда();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляСтаршийСпециалистПоОхранеТруда();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.Инструктажи") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf93-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИнструктажПоОхранеТруда);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dc002-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыИнструктажейПоОхранеТруда);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.НесчастныеСлучаи") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf64-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НесчастныйСлучайНаПроизводстве);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf9a-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПоследствияНесчастногоСлучая);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf84-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПротоколОпросаУчастникаНесчастногоСлучая);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f0-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыПроисшествий);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4ea-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПоследствияНесчастныхСлучаев);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf46-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПричиныПроисшествий);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СпециальнаяОценкаУсловийТруда") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ДекларацияСоответствияУсловийТруда);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfbe-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПодготовкаСпецоценкиУсловийТруда);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf36-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РезультатыСпецоценкиУсловийТруда);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеДатыСпециальнойОценкиУсловийТруда, Истина);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.Инструктажи") Тогда
		Списки.Вставить(Метаданные.Документы.ИнструктажПоОхранеТруда, Истина);
		Списки.Вставить(Метаданные.Справочники.ИнструктажПоОхранеТрудаПрисоединенныеФайлы, Истина);
		Списки.Вставить(Метаданные.РегистрыСведений.ИнструктажиПоОхранеТруда, Истина);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.НесчастныеСлучаи") Тогда
		Списки.Вставить(Метаданные.Документы.НесчастныйСлучайНаПроизводстве, Истина);
		Списки.Вставить(Метаданные.Документы.ПоследствияНесчастногоСлучая, Истина);
		Списки.Вставить(Метаданные.Документы.ПротоколОпросаУчастникаНесчастногоСлучая, Истина);
		Списки.Вставить(Метаданные.Справочники.НесчастныйСлучайНаПроизводствеПрисоединенныеФайлы, Истина);
		Списки.Вставить(Метаданные.Справочники.ПоследствияНесчастногоСлучаяПрисоединенныеФайлы, Истина);
		Списки.Вставить(Метаданные.Справочники.ПротоколОпросаУчастникаНесчастногоСлучаяПрисоединенныеФайлы, Истина);
		Списки.Вставить(Метаданные.ЖурналыДокументов.НесчастныеСлучаи, Истина);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СпециальнаяОценкаУсловийТруда") Тогда
		Списки.Вставить(Метаданные.Документы.ДекларацияСоответствияУсловийТруда, Истина);
		Списки.Вставить(Метаданные.Документы.ПодготовкаСпецоценкиУсловийТруда, Истина);
		Списки.Вставить(Метаданные.Документы.РезультатыСпецоценкиУсловийТруда, Истина);
		Списки.Вставить(Метаданные.Справочники.ДекларацияСоответствияУсловийТрудаПрисоединенныеФайлы, Истина);
		Списки.Вставить(Метаданные.Справочники.ПодготовкаСпецоценкиУсловийТрудаПрисоединенныеФайлы, Истина);
		Списки.Вставить(Метаданные.Справочники.РезультатыСпецоценкиУсловийТрудаПрисоединенныеФайлы, Истина);
		Списки.Вставить(Метаданные.ЖурналыДокументов.СпецоценкаУсловийТруда, Истина);
		Списки.Вставить(Метаданные.РегистрыСведений.АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда, Истина);
		Списки.Вставить(Метаданные.РегистрыСведений.НомераРабочихМестСпециальнойОценкиУсловийТруда, Истина);
		Списки.Вставить(Метаданные.РегистрыСведений.ПредставленияРабочихМест, Истина);
		Списки.Вставить(Метаданные.РегистрыСведений.РезультатыСпециальнойОценкиУсловийТруда, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СпециальнаяОценкаУсловийТруда

Функция ДанныеПоРабочимМестам(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация = Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода = ДатаНачала;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода = ДатаОкончания;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
	КадровыеДанные = "ДолжностьПоШтатномуРасписанию, Пол, ДатаРождения, Инвалидность, СтраховойНомерПФР";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.РабочееМесто, КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию) КАК РабочееМесто,
	|	ЕСТЬNULL(АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.АналогичноеРабочееМесто, НЕОПРЕДЕЛЕНО) КАК АналогичноеМесто,
	|	КлассыУсловийТрудаПоДолжностямСрезПоследних.КлассУсловийТруда КАК КлассУсловийТруда,
	|	КлассыУсловийТрудаПоДолжностямСрезПоследних.ДатаРегистрацииИзменений КАК ДатаПредыдущейОценки
	|ПОМЕСТИТЬ ВТРабочиеМеста
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда КАК АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда
	|		ПО КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.АналогичноеРабочееМесто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&ДатаНачала, ) КАК КлассыУсловийТрудаПоДолжностямСрезПоследних
	|		ПО КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = КлассыУсловийТрудаПоДолжностямСрезПоследних.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДокументыСКомиссией.Документ) КАК Документ
	|ПОМЕСТИТЬ ВТДокументыСКомиссией
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПодготовкаСпецоценкиУсловийТруда.Ссылка) КАК Документ
	|	ИЗ
	|		Документ.ПодготовкаСпецоценкиУсловийТруда КАК ПодготовкаСпецоценкиУсловийТруда
	|	ГДЕ
	|		ПодготовкаСпецоценкиУсловийТруда.Организация = &Организация
	|		И ПодготовкаСпецоценкиУсловийТруда.ДатаНачала < &ДатаНачала
	|		И ПодготовкаСпецоценкиУсловийТруда.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(РезультатыСпецоценкиУсловийТруда.Ссылка)
	|	ИЗ
	|		Документ.РезультатыСпецоценкиУсловийТруда КАК РезультатыСпецоценкиУсловийТруда
	|	ГДЕ
	|		РезультатыСпецоценкиУсловийТруда.Организация = &Организация
	|		И РезультатыСпецоценкиУсловийТруда.ДатаНачала < &ДатаНачала
	|		И РезультатыСпецоценкиУсловийТруда.Проведен) КАК ДокументыСКомиссией
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПодготовкаСпецоценкиУсловийТрудаКомиссия.ЧленКомиссии, РезультатыСпецоценкиУсловийТрудаКомиссия.ЧленКомиссии) КАК ЧленКомиссии,
	|	ЕСТЬNULL(ПодготовкаСпецоценкиУсловийТрудаКомиссия.Должность, РезультатыСпецоценкиУсловийТрудаКомиссия.Должность) КАК Должность,
	|	ЕСТЬNULL(ПодготовкаСпецоценкиУсловийТрудаКомиссия.РольВКомиссии, РезультатыСпецоценкиУсловийТрудаКомиссия.РольВКомиссии) КАК РольВКомиссии
	|ИЗ
	|	ВТДокументыСКомиссией КАК ДокументыСКомиссией
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодготовкаСпецоценкиУсловийТруда.Комиссия КАК ПодготовкаСпецоценкиУсловийТрудаКомиссия
	|		ПО ДокументыСКомиссией.Документ = ПодготовкаСпецоценкиУсловийТрудаКомиссия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда.Комиссия КАК РезультатыСпецоценкиУсловийТрудаКомиссия
	|		ПО ДокументыСКомиссией.Документ = РезультатыСпецоценкиУсловийТрудаКомиссия.Ссылка
	|ГДЕ
	|	(ПодготовкаСпецоценкиУсловийТрудаКомиссия.ЧленКомиссии ЕСТЬ НЕ NULL 
	|			ИЛИ РезультатыСпецоценкиУсловийТрудаКомиссия.ЧленКомиссии ЕСТЬ НЕ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМеста.РабочееМесто КАК РабочееМесто,
	|	ЕСТЬNULL(ПредставленияРабочихМест.Представление, """") КАК ПредставлениеРабочегоМеста,
	|	РабочиеМеста.АналогичноеМесто КАК АналогичноеМесто,
	|	РабочиеМеста.КлассУсловийТруда КАК КлассУсловийТрудаПоРезультатамПредыдущейОценки,
	|	РабочиеМеста.ДатаПредыдущейОценки КАК ДатаПредыдущейОценки
	|ИЗ
	|	ВТРабочиеМеста КАК РабочиеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияРабочихМест КАК ПредставленияРабочихМест
	|		ПО РабочиеМеста.РабочееМесто = ПредставленияРабочихМест.РабочееМесто
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеМеста.РабочееМесто,
	|	РабочиеМеста.ДатаПредыдущейОценки,
	|	РабочиеМеста.АналогичноеМесто,
	|	РабочиеМеста.КлассУсловийТруда,
	|	ЕСТЬNULL(ПредставленияРабочихМест.Представление, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочиеМеста.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК РабочееМесто,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	КадровыеДанныеСотрудников.ДатаРождения КАК ДатаРождения,
	|	КадровыеДанныеСотрудников.Инвалидность КАК Инвалидность,
	|	КадровыеДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ОбновитьАналогичныеРабочиеМестаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьАналогичныеРабочиеМеста(Источник.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьАналогичныеРабочиеМестаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьАналогичныеРабочиеМеста();
	
КонецПроцедуры

Процедура ОбновитьАналогичныеРабочиеМеста(ИсточникСсылка = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Исключим документ при отмене проведения
	Запрос.УстановитьПараметр("Ссылка", ИсточникСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписание.Ссылка КАК РабочееМесто,
	|	ПодготовкаСпецоценкиУсловийТрудаРабочиеМеста.ПредставлениеРабочегоМеста КАК ПредставлениеРабочегоМеста,
	|	ПодготовкаСпецоценкиУсловийТрудаРабочиеМеста.Ссылка КАК Документ,
	|	НЕОПРЕДЕЛЕНО КАК ОсновноеРабочееМесто,
	|	ПодготовкаСпецоценкиУсловийТруда.Организация КАК Организация
	|ПОМЕСТИТЬ ВТВсеРабочиеМеста
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодготовкаСпецоценкиУсловийТруда.РабочиеМеста КАК ПодготовкаСпецоценкиУсловийТрудаРабочиеМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодготовкаСпецоценкиУсловийТруда КАК ПодготовкаСпецоценкиУсловийТруда
	|			ПО ПодготовкаСпецоценкиУсловийТрудаРабочиеМеста.Ссылка = ПодготовкаСпецоценкиУсловийТруда.Ссылка
	|		ПО ШтатноеРасписание.Ссылка = ПодготовкаСпецоценкиУсловийТрудаРабочиеМеста.РабочееМесто
	|ГДЕ
	|	ПодготовкаСпецоценкиУсловийТруда.Проведен
	|	И ПодготовкаСпецоценкиУсловийТруда.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка,
	|	"""",
	|	ПодготовкаСпецоценкиУсловийТрудаАналогичныеМеста.Ссылка,
	|	ПодготовкаСпецоценкиУсловийТрудаАналогичныеМеста.РабочееМесто,
	|	ПодготовкаСпецоценкиУсловийТруда.Организация
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодготовкаСпецоценкиУсловийТруда.АналогичныеМеста КАК ПодготовкаСпецоценкиУсловийТрудаАналогичныеМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодготовкаСпецоценкиУсловийТруда КАК ПодготовкаСпецоценкиУсловийТруда
	|			ПО ПодготовкаСпецоценкиУсловийТрудаАналогичныеМеста.Ссылка = ПодготовкаСпецоценкиУсловийТруда.Ссылка
	|		ПО ШтатноеРасписание.Ссылка = ПодготовкаСпецоценкиУсловийТрудаАналогичныеМеста.АналогичноеМесто
	|ГДЕ
	|	ПодготовкаСпецоценкиУсловийТруда.Проведен
	|	И ПодготовкаСпецоценкиУсловийТруда.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка,
	|	РезультатыСпецоценкиУсловийТрудаРабочиеМеста.ПредставлениеРабочегоМеста,
	|	РезультатыСпецоценкиУсловийТрудаРабочиеМеста.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	РезультатыСпецоценкиУсловийТруда.Организация
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда.РабочиеМеста КАК РезультатыСпецоценкиУсловийТрудаРабочиеМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда КАК РезультатыСпецоценкиУсловийТруда
	|			ПО РезультатыСпецоценкиУсловийТрудаРабочиеМеста.Ссылка = РезультатыСпецоценкиУсловийТруда.Ссылка
	|		ПО ШтатноеРасписание.Ссылка = РезультатыСпецоценкиУсловийТрудаРабочиеМеста.РабочееМесто
	|ГДЕ
	|	РезультатыСпецоценкиУсловийТруда.Проведен
	|	И РезультатыСпецоценкиУсловийТруда.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка,
	|	"""",
	|	РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.Ссылка,
	|	РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.РабочееМесто,
	|	РезультатыСпецоценкиУсловийТруда.Организация
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда.АналогичныеМеста КАК РезультатыСпецоценкиУсловийТрудаАналогичныеМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда КАК РезультатыСпецоценкиУсловийТруда
	|			ПО РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.Ссылка = РезультатыСпецоценкиУсловийТруда.Ссылка
	|		ПО ШтатноеРасписание.Ссылка = РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.АналогичноеМесто
	|ГДЕ
	|	РезультатыСпецоценкиУсловийТруда.Проведен
	|	И РезультатыСпецоценкиУсловийТруда.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеРабочиеМеста.РабочееМесто КАК РабочееМесто,
	|	МАКСИМУМ(ВсеРабочиеМеста.Документ) КАК Документ
	|ПОМЕСТИТЬ ВТМаксимальныеРабочиеМеста
	|ИЗ
	|	ВТВсеРабочиеМеста КАК ВсеРабочиеМеста
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеРабочиеМеста.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеРабочиеМеста.РабочееМесто КАК АналогичноеРабочееМесто,
	|	ВсеРабочиеМеста.ОсновноеРабочееМесто КАК РабочееМесто,
	|	ВсеРабочиеМеста.Организация КАК Организация
	|ИЗ
	|	ВТМаксимальныеРабочиеМеста КАК МаксимальныеРабочиеМеста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеРабочиеМеста КАК ВсеРабочиеМеста
	|		ПО МаксимальныеРабочиеМеста.РабочееМесто = ВсеРабочиеМеста.РабочееМесто
	|			И МаксимальныеРабочиеМеста.Документ = ВсеРабочиеМеста.Документ
	|ГДЕ
	|	ВсеРабочиеМеста.ОсновноеРабочееМесто <> НЕОПРЕДЕЛЕНО";
	
	НаборЗаписей = РегистрыСведений.АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	НаборЗаписей.Записать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеРабочиеМеста.РабочееМесто КАК РабочееМесто,
	|	ВсеРабочиеМеста.ПредставлениеРабочегоМеста КАК Представление,
	|	ВсеРабочиеМеста.Организация
	|ИЗ
	|	ВТМаксимальныеРабочиеМеста КАК МаксимальныеРабочиеМеста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеРабочиеМеста КАК ВсеРабочиеМеста
	|		ПО МаксимальныеРабочиеМеста.РабочееМесто = ВсеРабочиеМеста.РабочееМесто
	|			И МаксимальныеРабочиеМеста.Документ = ВсеРабочиеМеста.Документ
	|ГДЕ
	|	ВсеРабочиеМеста.ПредставлениеРабочегоМеста <> """"";
	
	НаборЗаписей = РегистрыСведений.ПредставленияРабочихМест.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОписаниеПрофиляСпециалистПоОхранеТруда()

	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСпециалистПоОхранеТруда();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Специалист по охране труда'");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаОхранаТруда");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	
	// Спецоценка
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСпециальнойОценкиУсловийТруда");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСпециальнойОценкиУсловийТруда");
	
	// Несчастные случаи
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНесчастныхСлучаев");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНесчастныхСлучаев");
	
	// Инструктажи
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИнструктажейПоОхранеТруда");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИнструктажейПоОхранеТруда");
	
	// Медицинские осмотры.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаключенийМедицинскогоОсмотра");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНаправленийНаМедицинскийОсмотр");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеМедицинскиеОсмотры");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВредныхФакторовВидовРаботРабочихМест");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовМедицинскихОсмотров");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМедицинскихОрганизаций");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийПоКадровымИзменениям");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДокументовПоРешениям");
	
	// Текущие дела.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиТекущиеДела");
	
	// Штатное расписание
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания"); // Справочник
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеШтатногоРасписанияПоОхранеТруда"); // Изменение в части охраны труда
	
	// Физические лица
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры"); // Справочник
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная"); // Форма стажа
	
	// Сотрудники
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников"); // Справочник
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАрхиваФизическихЛиц", "ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц"); // Справочник
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИспытательногоСрокаСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников"); // Справочник
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная"); // Данные для подбора
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников"); // Сведения о состояниях сотрудника
	
	// Кадровая история
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная"); // Регистр сведений КадроваяИсторияСотрудников
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБольничныхЛистов"); // заполнение БЛ в документе
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМедицинскихОрганизаций"); // заполнение БЛ в документе
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЭЛН"); // заполнение БЛ в документе
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели"); // Формирование отчетов
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОбОбразованииФизическихЛиц"); // Формирование отчетов
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПродолжительностиДоговоров");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОбученияРазвития"); // Получение стажировки
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	// КонфигурацииЗарплатаКадрыРасширенный
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	// Конец КонфигурацииЗарплатаКадрыРасширенный
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ИдентификаторПрофиляСпециалистПоОхранеТруда()
	
	Возврат "b8a947b9-83fb-4cb5-8df1-b89d1314c563";
	
КонецФункции

Функция ОписаниеПрофиляСтаршийСпециалистПоОхранеТруда()

	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийСпециалистПоОхранеТруда();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Старший специалист по охране труда'");
	
	ЗарплатаКадрыРасширенный.ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляСпециалистПоОхранеТруда());
	
	// Медицинские осмотры.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКлассификаторовВредныхФакторовВидовРабот");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВредныхФакторовВидовРаботРабочихМест");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМедицинскихОрганизаций");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ИдентификаторПрофиляСтаршийСпециалистПоОхранеТруда() 
	
	Возврат "6be5d0fd-de2a-4adc-bc3b-8ab3a7f9ef9d";
	
КонецФункции

#КонецОбласти

#Область Периодичность

Функция ПредставлениеПериодаПоСтруктуре(СтруктураПериода) Экспорт
	
	Если СтруктураПериода.КоличествоРаз = 1 И СтруктураПериода.КоличествоПериодов = 1 Тогда
		Если СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
			Возврат "ежегодно";
		ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
			Возврат "ежедекадно";
		ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
			Возврат "ежедневно";
		ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			Возврат "ежеквартально";
		ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			Возврат "ежемесячно";
		ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
			Возврат "еженедельно";
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеРаз = "раз";
	ПоследнееЧисло = Число(Прав(СтруктураПериода.КоличествоРаз, 1));
	Последние2Числа = Число(Прав(СтруктураПериода.КоличествоРаз, 2));
	Если ПоследнееЧисло > 1 И ПоследнееЧисло < 5 И Последние2Числа <> 12 И Последние2Числа <> 13 И Последние2Числа <> 14 Тогда
		ПредставлениеРаз = "раза";
	КонецЕсли;
	ПредставлениеКоличестваРаз = СокрЛП(НРег(ЧислоПрописью(СтруктураПериода.КоличествоРаз, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'"))));
	
	ПредставлениеПериодичности = НРег(СтруктураПериода.Периодичность);
	Если СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		ПредставлениеПериодичности = НРег(ЧислоПрописью(СтруктураПериода.КоличествоПериодов, "Л = ru_RU", НСтр("ru = 'год,года,лет,м,,,,,0'")));
	ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		ПредставлениеПериодичности = НРег(ЧислоПрописью(СтруктураПериода.КоличествоПериодов, "Л = ru_RU", НСтр("ru = 'декаду,декады,декад,ж,,,,,0'")));
	ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		ПредставлениеПериодичности = НРег(ЧислоПрописью(СтруктураПериода.КоличествоПериодов, "Л = ru_RU", НСтр("ru = 'день,дня,дней,м,,,,,0'")));
	ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		ПредставлениеПериодичности = НРег(ЧислоПрописью(СтруктураПериода.КоличествоПериодов, "Л = ru_RU", НСтр("ru = 'квартал,квартала,кварталов,м,,,,,0'")));
	ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		ПредставлениеПериодичности = НРег(ЧислоПрописью(СтруктураПериода.КоличествоПериодов, "Л = ru_RU", НСтр("ru = 'месяц,месяца,месяцев,м,,,,,0'")));
	ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		ПредставлениеПериодичности = НРег(ЧислоПрописью(СтруктураПериода.КоличествоПериодов, "Л = ru_RU", НСтр("ru = 'неделю,недели,недель,ж,,,,,0'")));
	ИначеЕсли СтруктураПериода.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		ПредставлениеПериодичности = НРег(ЧислоПрописью(СтруктураПериода.КоличествоПериодов, "Л = ru_RU", НСтр("ru = 'полугодие,полугодия,полугодий,с,,,,,0'")));
	КонецЕсли;
	
	Если СтруктураПериода.КоличествоПериодов = 1 Тогда
		ПредставлениеПериодичности = СтрЗаменить(ПредставлениеПериодичности, "один ", "");
		ПредставлениеПериодичности = СтрЗаменить(ПредставлениеПериодичности, "одно ", "");
		ПредставлениеПериодичности = СтрЗаменить(ПредставлениеПериодичности, "одна ", "");
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 %2 в %3'");
	ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонПредставления, ПредставлениеКоличестваРаз, ПредставлениеРаз, ПредставлениеПериодичности);
	
	Возврат ПредставлениеПериода;
	
КонецФункции

Процедура СоздатьВТСрокиДействияПоПериоду(МенеджерВременныхТаблиц, ИмяВТПериода, ИмяДатыПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*,
	|	ВЫБОР
	|		КОГДА ТаблицаПериодов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, ДЕНЬ, ТаблицаПериодов.КоличествоПериодов)
	|		КОГДА ТаблицаПериодов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, НЕДЕЛЯ, ТаблицаПериодов.КоличествоПериодов)
	|		КОГДА ТаблицаПериодов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, МЕСЯЦ, ТаблицаПериодов.КоличествоПериодов)
	|		КОГДА ТаблицаПериодов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, КВАРТАЛ, ТаблицаПериодов.КоличествоПериодов)
	|		КОГДА ТаблицаПериодов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, ГОД, ТаблицаПериодов.КоличествоПериодов)
	|		КОГДА ТаблицаПериодов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, ДЕКАДА, ТаблицаПериодов.КоличествоПериодов)
	|		КОГДА ТаблицаПериодов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, ПОЛУГОДИЕ, ТаблицаПериодов.КоличествоПериодов)
	|	КОНЕЦ КАК СрокОкончанияПериода
	|ПОМЕСТИТЬ ВТСрокиОкончанияПоПериоду
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаПериодов.ДатаПериода", "ТаблицаПериодов." + ИмяДатыПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаПериодов", ИмяВТПериода);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*,
	|	ВЫБОР
	|		КОГДА ТаблицаПериодов.КоличествоРаз = 0
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТаблицаПериодов.ДатаПериода, ДЕНЬ, РАЗНОСТЬДАТ(ТаблицаПериодов.ДатаПериода, ТаблицаПериодов.СрокОкончанияПериода, ДЕНЬ) / ТаблицаПериодов.КоличествоРаз)
	|	КОНЕЦ КАК СрокДействия
	|ПОМЕСТИТЬ ВТСрокиДействияПоПериоду
	|ИЗ
	|	ВТСрокиОкончанияПоПериоду КАК ТаблицаПериодов";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаПериодов.ДатаПериода", "ТаблицаПериодов." + ИмяДатыПериода);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеглотчетности

Процедура РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, КонецПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") И ОписаниеТаблиц.Свойство("Таблица5") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто) КАК П000050000104,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
		|					ИЛИ РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
		|					ИЛИ РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
		|					ИЛИ РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
		|				ТОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто
		|		КОНЕЦ) КАК П000050000105,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
		|				ТОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто
		|		КОНЕЦ) КАК П000050000106
		|ПОМЕСТИТЬ ВТРезультаты
		|ИЗ
		|	РегистрСведений.РезультатыСпециальнойОценкиУсловийТруда.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	ШтатноеРасписание.Утверждена
		|	И ШтатноеРасписание.ДатаУтверждения < &НачалоПериода
		|	И (ШтатноеРасписание.ДатаЗакрытия > &НачалоПериода
		|			ИЛИ ШтатноеРасписание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ШтатноеРасписание.Ссылка) КАК П000050000103,
		|	Результаты.П000050000104,
		|	Результаты.П000050000105,
		|	Результаты.П000050000106
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультаты КАК Результаты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ШтатноеРасписание.Владелец = &Организация
		|	И ШтатноеРасписание.Утверждена
		|	И ШтатноеРасписание.ДатаУтверждения < &НачалоПериода
		|	И (ШтатноеРасписание.ДатаЗакрытия > &НачалоПериода
		|			ИЛИ ШтатноеРасписание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	Результаты.П000050000104,
		|	Результаты.П000050000105,
		|	Результаты.П000050000106";
		
		ОписаниеТаблиц.Таблица5 = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесчастныеСлучаиНаПроизводстве") И ОписаниеТаблиц.Свойство("Таблица3_4") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НесчастныйСлучайНаПроизводствеПострадавшие.Пострадавший) КАК П000040001003,
		|	ВЫБОР
		|		КОГДА НесчастныйСлучайНаПроизводстве.СтепеньТяжестиТравмы = ЗНАЧЕНИЕ(Перечисление.СтепениТяжестиТравмыНаПроизводстве.СоСмертельнымИсходом)
		|			ТОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НесчастныйСлучайНаПроизводствеПострадавшие.Пострадавший)
		|	КОНЕЦ КАК П000040002003
		|ИЗ
		|	Документ.НесчастныйСлучайНаПроизводстве.Пострадавшие КАК НесчастныйСлучайНаПроизводствеПострадавшие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НесчастныйСлучайНаПроизводстве КАК НесчастныйСлучайНаПроизводстве
		|		ПО (НесчастныйСлучайНаПроизводстве.Ссылка = НесчастныйСлучайНаПроизводствеПострадавшие.Ссылка)
		|ГДЕ
		|	НесчастныйСлучайНаПроизводстве.ДатаПроисшествия МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НесчастныйСлучайНаПроизводстве.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	НесчастныйСлучайНаПроизводстве.СтепеньТяжестиТравмы";
		
		ОписаниеТаблиц.Таблица3_4 = Запрос.Выполнить().Выгрузить();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто) КАК П000100000104,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|					ИЛИ РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|					ИЛИ РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|					ИЛИ РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|				ТОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто
	|		КОНЕЦ) КАК П000100000105,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|				ТОГДА РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто
	|		КОНЕЦ) КАК П000100000106
	|ПОМЕСТИТЬ ВТРезультаты
	|ИЗ
	|	РегистрСведений.РезультатыСпециальнойОценкиУсловийТруда.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО РезультатыСпециальнойОценкиУсловийТрудаСрезПоследних.РабочееМесто = ШтатноеРасписание.Ссылка
	|ГДЕ
	|	ШтатноеРасписание.Утверждена
	|	И ШтатноеРасписание.ДатаУтверждения < &НачалоПериода
	|	И (ШтатноеРасписание.ДатаЗакрытия > &НачалоПериода
	|			ИЛИ ШтатноеРасписание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШтатноеРасписание.Ссылка) КАК П000100000103,
	|	Результаты.П000100000104,
	|	Результаты.П000100000105,
	|	Результаты.П000100000106
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультаты КАК Результаты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ШтатноеРасписание.Утверждена
	|	И ШтатноеРасписание.ДатаУтверждения < &НачалоПериода
	|	И (ШтатноеРасписание.ДатаЗакрытия > &НачалоПериода
	|			ИЛИ ШтатноеРасписание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	Результаты.П000100000104,
	|	Результаты.П000100000105,
	|	Результаты.П000100000106";
	
	ОписаниеТаблиц.Раздел2_10 = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// Специальная оценка условий труда
	СписокОбъектов.Добавить(Документы.ДекларацияСоответствияУсловийТруда); 
	СписокОбъектов.Добавить(Документы.ПодготовкаСпецоценкиУсловийТруда);
	СписокОбъектов.Добавить(Документы.РезультатыСпецоценкиУсловийТруда);
	
	// Несчастные случаи
	СписокОбъектов.Добавить(Документы.НесчастныйСлучайНаПроизводстве);
	СписокОбъектов.Добавить(Документы.ПоследствияНесчастногоСлучая);
	СписокОбъектов.Добавить(Документы.ПротоколОпросаУчастникаНесчастногоСлучая);
	
	// Инструктажи
	СписокОбъектов.Добавить(Документы.ИнструктажПоОхранеТруда);
	
КонецПроцедуры

// Разбивает текст на строки определенной длины, с переносом по словам, для вывода в печатные формы.
//
// Параметры:
//		ВходнойТекст - Строка - Текст, который требуется разбить на строки
//		СтрокаДлинСтрок - Строка - Значения длин строк по порядку, разделенные запятыми, например:
//				"10, 20, 40" - Первая строка будет длиной 10 символов, 2-я - 20 символов, 3-я - 40 символов и т.д.
// Возвращаемое значение:
//		ВозвращаемыйМассив - массив строк.
//
Функция СтрокиДляПечатнойФормы(Знач ВходнойТекст, СтрокаДлинСтрок) Экспорт
	
	МассивДлинСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаДлинСтрок, ",");
	
	ВозвращаемыйМассив = Новый Массив;
	
	ВходнойТекст = СтрЗаменить(ВходнойТекст, Символы.ПС, " ");
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ВходнойТекст, " ");
	
	ИндексСледующейФормируемойСтроки = 0;
	ДопустимаяДлинаФормируемойСтроки = Число(МассивДлинСтрок[0]);
	ВременнаяСтрока = "";
	ПредВременнаяСтрока = "";
	Для Каждого ТекущееСлово Из МассивСлов Цикл
		ВременнаяСтрока = ВременнаяСтрока + ТекущееСлово + " ";
		
		Если СтрДлина(ВременнаяСтрока) >= ДопустимаяДлинаФормируемойСтроки Тогда
			ВозвращаемыйМассив.Добавить(ПредВременнаяСтрока);
			ИндексСледующейФормируемойСтроки = ВозвращаемыйМассив.Количество();
			Если МассивДлинСтрок.Количество() > ИндексСледующейФормируемойСтроки Тогда
				ДопустимаяДлинаФормируемойСтроки = Число(МассивДлинСтрок[ИндексСледующейФормируемойСтроки]);
			Иначе
				ДопустимаяДлинаФормируемойСтроки = Число(МассивДлинСтрок[МассивДлинСтрок.Количество()-1]);
			КонецЕсли;
			ВременнаяСтрока = ТекущееСлово + " ";
		КонецЕсли;
		ПредВременнаяСтрока = ВременнаяСтрока;
	КонецЦикла;
	ВозвращаемыйМассив.Добавить(ВременнаяСтрока);
	
	Пока ВозвращаемыйМассив.Количество() < МассивДлинСтрок.Количество() Цикл
		ВозвращаемыйМассив.Добавить("");
	КонецЦикла;
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

Процедура ВывестиСтрокиМассива(ДокументРезультат, ДопОбласть, МассивСтрок, ИндексПервойСтроки) Экспорт
	
	Для Шаг = ИндексПервойСтроки По МассивСтрок.Количество()-1 Цикл
		ДопОбласть.Параметры.ТекстСтроки = МассивСтрок[Шаг];
		ДокументРезультат.Вывести(ДопОбласть);
	КонецЦикла;
	
КонецПроцедуры

#Область УсловноВызываемыеПроцедурыИзПодписейДокументовИСведенийОбОтветственныхЛицах

// Описание полей ответственного за охрану труда в документах и сведениях об ответственных лицах.
//
Функция ОписаниеРеквизитовРолиОтветственныйЗаОхрануТруда()
	ОписаниеРеквизитов = ПодписиДокументов.ОписаниеРеквизитовПодписанта();
	
	ОписаниеРеквизитов.ФизическоеЛицо = "ОтветственныйЗаОхрануТруда";
	ОписаниеРеквизитов.Должность = "ДолжностьОтветственногоЗаОхрануТруда";
	ОписаниеРеквизитов.ОснованиеПодписи = "ОснованиеПодписиОтветственногоЗаОхрануТруда";
	
	Возврат ОписаниеРеквизитов;
КонецФункции

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("ИспользоватьИнструктажиПоОхранеТруда", Форма.ИспользоватьИнструктажиПоОхранеТруда);
	СохраняемыеРеквизиты.Вставить("НастройкиСпециальнойОценкиУсловийТруда", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиСпециальнойОценкиУсловийТруда, Метаданные.РегистрыСведений.НастройкиСпециальнойОценкиУсловийТруда));
	СохраняемыеРеквизиты.Вставить("НастройкиНесчастныхСлучаевНаПроизводстве", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиНесчастныхСлучаевНаПроизводстве, Метаданные.РегистрыСведений.НастройкиНесчастныхСлучаевНаПроизводстве));
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("ИспользоватьИнструктажиПоОхранеТруда") Тогда
		Форма["ИспользоватьИнструктажиПоОхранеТруда"] = СохраненныеНастройки["ИспользоватьИнструктажиПоОхранеТруда"];
	КонецЕсли;
	Если СохраненныеНастройки.Свойство("НастройкиСпециальнойОценкиУсловийТруда") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиСпециальнойОценкиУсловийТруда"], СохраненныеНастройки["НастройкиСпециальнойОценкиУсловийТруда"]);
	КонецЕсли;
	Если СохраненныеНастройки.Свойство("НастройкиНесчастныхСлучаевНаПроизводстве") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиНесчастныхСлучаевНаПроизводстве"], СохраненныеНастройки["НастройкиНесчастныхСлучаевНаПроизводстве"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьИнструктажиПоОхранеТруда = Константы.ИспользоватьИнструктажиПоОхранеТруда.Получить();
	
	Настройки = РегистрыСведений.НастройкиСпециальнойОценкиУсловийТруда.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиСпециальнойОценкиУсловийТруда);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиСпециальнойОценкиУсловийТруда, НастройкиСтруктура);
	
	Настройки = РегистрыСведений.НастройкиНесчастныхСлучаевНаПроизводстве.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиНесчастныхСлучаевНаПроизводстве);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиНесчастныхСлучаевНаПроизводстве, НастройкиСтруктура);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПрограммы.Вставить("ИспользоватьИнструктажиПоОхранеТруда", Константы.ИспользоватьИнструктажиПоОхранеТруда.Получить());
	
	Настройки = РегистрыСведений.НастройкиСпециальнойОценкиУсловийТруда.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиСпециальнойОценкиУсловийТруда);
	НастройкиПрограммы.Вставить("НастройкиСпециальнойОценкиУсловийТруда", НастройкиСтруктура);
	
	Настройки = РегистрыСведений.НастройкиНесчастныхСлучаевНаПроизводстве.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиНесчастныхСлучаевНаПроизводстве);
	НастройкиПрограммы.Вставить("НастройкиНесчастныхСлучаевНаПроизводстве", НастройкиСтруктура);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьИнструктажиПоОхранеТруда.Установить(Параметры.ИспользоватьИнструктажиПоОхранеТруда);
	
	Настройки = РегистрыСведений.НастройкиСпециальнойОценкиУсловийТруда.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиСпециальнойОценкиУсловийТруда);
	Настройки.Записать();
	
	Настройки = РегистрыСведений.НастройкиНесчастныхСлучаевНаПроизводстве.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиНесчастныхСлучаевНаПроизводстве);
	Настройки.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыИнструктажейПоОхранеТруда.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыПроисшествий) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ВидыПроисшествий.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ПричиныПроисшествий) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ПричиныПроисшествий.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.32";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f3de0d1f-5676-462f-9fb1-d8285f45530c");
	Обработчик.Процедура = "ОхранаТруда.ЗаполнитьОснованиеКлассовУсловийТрудаПоДолжностям";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение оснований изменений классов условий труда по документам охраны труда.'");
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеКлассовУсловийТрудаПоДолжностям(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассыУсловийТрудаПоДолжностям.Период КАК Период,
		|	КлассыУсловийТрудаПоДолжностям.Должность КАК Должность,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК ДатаРегистрацииИзменений,
		|	РезультатыСпецоценкиУсловийТруда.Ссылка КАК Основание
		|ИЗ
		|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда.РабочиеМеста КАК РезультатыСпецоценкиУсловийТруда
		|		ПО КлассыУсловийТрудаПоДолжностям.Должность = РезультатыСпецоценкиУсловийТруда.РабочееМесто
		|			И КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда = РезультатыСпецоценкиУсловийТруда.КлассУсловийТруда
		|			И КлассыУсловийТрудаПоДолжностям.Период = РезультатыСпецоценкиУсловийТруда.Ссылка.ДатаРезультатов
		|ГДЕ
		|	КлассыУсловийТрудаПоДолжностям.Основание = НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлассыУсловийТрудаПоДолжностям.Период,
		|	КлассыУсловийТрудаПоДолжностям.Должность,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений,
		|	РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.Ссылка
		|ИЗ
		|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда.АналогичныеМеста КАК РезультатыСпецоценкиУсловийТрудаАналогичныеМеста
		|		ПО КлассыУсловийТрудаПоДолжностям.Должность = РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.АналогичноеМесто
		|			И КлассыУсловийТрудаПоДолжностям.Период = РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.Ссылка.ДатаРезультатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезультатыСпецоценкиУсловийТруда.РабочиеМеста КАК РезультатыСпецоценкиУсловийТрудаРабочиеМеста
		|		ПО (РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.РабочееМесто = РезультатыСпецоценкиУсловийТрудаРабочиеМеста.РабочееМесто)
		|			И КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда = РезультатыСпецоценкиУсловийТрудаРабочиеМеста.КлассУсловийТруда
		|			И (РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.Ссылка = РезультатыСпецоценкиУсловийТрудаРабочиеМеста.Ссылка)
		|ГДЕ
		|	КлассыУсловийТрудаПоДолжностям.Основание = НЕОПРЕДЕЛЕНО";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Должность.Установить(Выборка.Должность);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузкаДанных

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	
	Типы.Добавить(Метаданные.Справочники.ВидыПроисшествий);
	Типы.Добавить(Метаданные.Справочники.ПричиныПроисшествий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
