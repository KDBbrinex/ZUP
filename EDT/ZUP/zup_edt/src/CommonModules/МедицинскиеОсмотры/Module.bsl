
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НаправлениеНаМедицинскийОсмотр",				"ДатаОсмотра",	"ОхранаТруда",	"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаключениеМедицинскогоОсмотра",				"ДатаОсмотра",	"ОхранаТруда",	"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.МедицинскиеОсмотры",					"Период",		"ОхранаТруда",	"ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.МедицинскиеОсмотрыПоВидамРабот",		"Период",		"ОхранаТруда",	"ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.МедицинскиеОсмотрыПоВреднымФакторам",	"Период",		"ОхранаТруда",	"ГоловнаяОрганизация");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

// СтандартныеПодсистемы.ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НаправлениеНаМедицинскийОсмотр";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "ДатаРождения";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ЗаключениеМедицинскогоОсмотра";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "РезультатОсмотра,ПояснениеРезультата";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.ОхранаТруда) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.ОхранаТруда.Подсистемы.МедицинскиеОсмотры, НСтр("ru = 'Медицинские осмотры'"));
	КонецЕсли;
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.МедицинскиеОсмотры);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеПериодическихМедицинскихОсмотров.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеПериодическихМедицинскихОсмотров.ИмяМетода);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// СтандартныеПодсистемы.Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.НаправлениеНаМедицинскийОсмотр); 
	СписокОбъектов.Добавить(Документы.ЗаключениеМедицинскогоОсмотра); 
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.РегламентныеЗадания

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеПериодическихМедицинскихОсмотров;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьМедицинскиеОсмотры;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf80-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаключениеМедицинскогоОсмотра);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4fe-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НаправлениеНаМедицинскийОсмотр);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	Обработчики.Добавить(МедицинскиеОсмотры);
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат; // Модель сервиса.
	КонецЕсли;
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.МедицинскиеОсмотры) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта("Обработка.МедицинскиеОсмотры");
	Если Разделы.Количество() = 0 Тогда
		// Не вынесены в командный интерфейс.
		РазделОхранаТруда = Метаданные.Подсистемы.Найти("ОхранаТруда");
		Если РазделОхранаТруда = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Разделы.Добавить(РазделОхранаТруда);
	КонецЕсли;
	
	ИстекшиеОсмотры = ИстекшиеПериодическиеМедицинскиеОсмотры();
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ИстекшиеПериодическиеМедицинскиеОсмотры";
		Дело.ЕстьДела       = Ложь;
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Медицинские осмотры'");
		Дело.Количество		= 0;
		Дело.Подсказка      = НСтр("ru = 'Истекли сроки обязательных периодических медицинских осмотров. Сотрудникам необходимо немедленно пройти осмотр.'");
		Если ИстекшиеОсмотры <> Неопределено Тогда
			Дело.ЕстьДела = Истина;
			Дело.Количество = ИстекшиеОсмотры.Количество;
			Дело.ПараметрыФормы = Новый Структура("Организация", ИстекшиеОсмотры.Организация);
			Дело.Форма = "Обработка.МедицинскиеОсмотры.Форма.Форма";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ЗаключениеМедицинскогоОсмотраПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаключениеМедицинскогоОсмотра, Истина);
	Списки.Вставить(Метаданные.Документы.НаправлениеНаМедицинскийОсмотр, Истина);
	Списки.Вставить(Метаданные.Справочники.НаправлениеНаМедицинскийОсмотрПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВредныеФакторыПозицииШтатногоРасписания, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВыданныеНаправленияНаМедицинскийОсмотр, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МедицинскиеОсмотры, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МедицинскиеОсмотрыПоВидамРабот, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МедицинскиеОсмотрыПоВреднымФакторам, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОтстранениеОтРаботыПоРезультатамМедицинскогоОсмотра, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПериодическиеМедицинскиеОсмотры, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания, Истина);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПериодичностьМедицинскихОсмотров(Позиция) Экспорт
	
	ОписаниеПериодичности = ОписаниеПериодичностиОсмотров();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодичностьОсмотров.КратностьОсмотра КАК Кратность,
		|	ПериодичностьОсмотров.ПериодичностьОсмотра КАК Периодичность,
		|	ПериодичностьОсмотров.ЕдиницаПериодичностиОсмотра КАК ЕдиницаПериодичности,
		|	ПериодичностьОсмотров.ПредставлениеПериодичностиОсмотра КАК Представление
		|ИЗ
		|	РегистрСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания КАК ПериодичностьОсмотров
		|ГДЕ
		|	ПериодичностьОсмотров.Позиция = &Позиция";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ОписаниеПериодичности;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ОписаниеПериодичности, Выборка);
	
	Возврат ОписаниеПериодичности;
	
КонецФункции

Функция ПоследнийОсмотр(ФизическоеЛицо, Позиция, ДатаАктуальности = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МедицинскиеОсмотры.Период КАК Период,
		|	МедицинскиеОсмотры.Регистратор КАК Регистратор,
		|	МедицинскиеОсмотры.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МедицинскиеОсмотры.Позиция КАК Позиция,
		|	МедицинскиеОсмотры.РезультатОсмотра КАК РезультатОсмотра,
		|	МедицинскиеОсмотры.ТипОсмотра КАК ТипОсмотра,
		|	МедицинскиеОсмотры.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.МедицинскиеОсмотры.СрезПоследних(
		|			&ДатаАктуальности,
		|			ФизическоеЛицо = &ФизическоеЛицо
		|				И Позиция = &Позиция) КАК МедицинскиеОсмотры";
	Если ДатаАктуальности = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", "");
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

Функция СледующийОсмотр(ФизическоеЛицо, Позиция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодическиеОсмотры.ДатаСледующегоОсмотра КАК ДатаСледующегоОсмотра,
		|	ПериодическиеОсмотры.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодическиеОсмотры.Позиция КАК Позиция,
		|	ПериодическиеОсмотры.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодическиеОсмотры.РезультатОсмотра КАК РезультатОсмотра,
		|	ПериодическиеОсмотры.ДатаПройденногоОсмотра КАК ДатаПройденногоОсмотра,
		|	ПериодическиеОсмотры.Направление КАК Направление,
		|	ПериодическиеОсмотры.Заключение КАК Заключение
		|ИЗ
		|	РегистрСведений.ПериодическиеМедицинскиеОсмотры КАК ПериодическиеОсмотры
		|ГДЕ
		|	ПериодическиеОсмотры.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПериодическиеОсмотры.Позиция = &Позиция";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

Функция ВыданноеНаправление(ФизическоеЛицо, Позиция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыданныеНаправления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВыданныеНаправления.Позиция КАК Позиция,
		|	ВыданныеНаправления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВыданныеНаправления.Направление КАК Направление,
		|	ВыданныеНаправления.Заключение КАК Заключение
		|ИЗ
		|	РегистрСведений.ВыданныеНаправленияНаМедицинскийОсмотр.СрезПоследних(
		|			,
		|			ФизическоеЛицо = &ФизическоеЛицо
		|				И Позиция = &Позиция) КАК ВыданныеНаправления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

Функция ВредныеФакторыТребующиеОсмотра(ФизическоеЛицо, Позиция, ДатаАктуальности) Экспорт
	
	ВредныеФакторы = Новый ТаблицаЗначений;
	ВредныеФакторы.Колонки.Добавить("ВредныйФактор", Новый ОписаниеТипов("СправочникСсылка.ВредныеОпасныеПроизводственныеФакторы"));
	ВредныеФакторы.Колонки.Добавить("ДатаОсмотра", Новый ОписаниеТипов("Дата"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВредныеФакторыПозиции(МенеджерВременныхТаблиц, Позиция);
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТВредныеФакторыПозиции") Тогда
		Возврат ВредныеФакторы;
	КонецЕсли;
	
	СоздатьВТПериодичностьВредныхФакторов(МенеджерВременныхТаблиц, "ВТВредныеФакторыПозиции");
	СоздатьВТОсмотрыПоВреднымФакторамФизическогоЛица(МенеджерВременныхТаблиц, ФизическоеЛицо, ДатаАктуальности);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВредныеФакторыПозиции.Позиция КАК Позиция,
		|	ВредныеФакторыПозиции.ВредныйФактор КАК ВредныйФактор,
		|	ОсмотрыПоВреднымФакторам.ДатаОсмотра КАК ДатаОсмотра,
		|	ОсмотрыПоВреднымФакторам.РезультатОсмотра КАК РезультатОсмотра,
		|	ПериодичностьВредныхФакторов.Кратность КАК Кратность,
		|	ПериодичностьВредныхФакторов.Периодичность КАК Периодичность,
		|	ПериодичностьВредныхФакторов.ЕдиницаПериодичности КАК ЕдиницаПериодичности
		|ИЗ
		|	ВТВредныеФакторыПозиции КАК ВредныеФакторыПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсмотрыПоВреднымФакторам КАК ОсмотрыПоВреднымФакторам
		|		ПО (ОсмотрыПоВреднымФакторам.ВредныйФактор = ВредныеФакторыПозиции.ВредныйФактор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодичностьВредныхФакторов КАК ПериодичностьВредныхФакторов
		|		ПО (ПериодичностьВредныхФакторов.ВредныйФактор = ВредныеФакторыПозиции.ВредныйФактор)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ДатаОсмотра) Тогда
			// Осмотр не проводился.
			НоваяСтрока = ВредныеФакторы.Добавить();
			НоваяСтрока.ВредныйФактор = Выборка.ВредныйФактор;
			НоваяСтрока.ДатаОсмотра = ДатаАктуальности;
			Продолжить;
		КонецЕсли;
		// Осмотр проводился, проверяем его актуальность.
		ОписаниеПериодичности = ОписаниеПериодичностиОсмотров();
		ЗаполнитьЗначенияСвойств(ОписаниеПериодичности, Выборка);
		ДатаСледующегоОсмотра = ДатаСледующегоОсмотра(Выборка.ДатаОсмотра, ОписаниеПериодичности);
		Если ДатаСледующегоОсмотра > ДатаАктуальности Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ВредныеФакторы.Добавить();
		НоваяСтрока.ВредныйФактор = Выборка.ВредныйФактор;
		НоваяСтрока.ДатаОсмотра = ДатаСледующегоОсмотра;
	КонецЦикла;
	
	Возврат ВредныеФакторы;
	
КонецФункции

Функция ВидыРаботТребующиеОсмотра(ФизическоеЛицо, Позиция, ДатаАктуальности) Экспорт
	
	ВидыРабот = Новый ТаблицаЗначений;
	ВидыРабот.Колонки.Добавить("ВидРабот", Новый ОписаниеТипов("СправочникСсылка.ВидыРаботМедицинскихОсмотров"));
	ВидыРабот.Колонки.Добавить("ДатаОсмотра", Новый ОписаниеТипов("Дата"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВидыРаботПозиции(МенеджерВременныхТаблиц, Позиция);

	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТВидыРаботПозиции") Тогда
		Возврат ВидыРабот;
	КонецЕсли;
	
	СоздатьВТПериодичностьВидовРабот(МенеджерВременныхТаблиц, "ВТВидыРаботПозиции");
	СоздатьВТОсмотрыПоВидамРаботФизическогоЛица(МенеджерВременныхТаблиц, ФизическоеЛицо, ДатаАктуальности);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРаботПозиции.Позиция КАК Позиция,
		|	ВидыРаботПозиции.ВидРабот КАК ВидРабот,
		|	ОсмотрыПоВидамРабот.ДатаОсмотра КАК ДатаОсмотра,
		|	ОсмотрыПоВидамРабот.РезультатОсмотра КАК РезультатОсмотра,
		|	ПериодичностьВидовРабот.Кратность КАК Кратность,
		|	ПериодичностьВидовРабот.Периодичность КАК Периодичность,
		|	ПериодичностьВидовРабот.ЕдиницаПериодичности КАК ЕдиницаПериодичности
		|ИЗ
		|	ВТВидыРаботПозиции КАК ВидыРаботПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсмотрыПоВидамРабот КАК ОсмотрыПоВидамРабот
		|		ПО (ОсмотрыПоВидамРабот.ВидРабот = ВидыРаботПозиции.ВидРабот)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодичностьВидовРабот КАК ПериодичностьВидовРабот
		|		ПО (ПериодичностьВидовРабот.ВидРабот = ВидыРаботПозиции.ВидРабот)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ДатаОсмотра) Тогда
			// Осмотр не проводился.
			НоваяСтрока = ВидыРабот.Добавить();
			НоваяСтрока.ВидРабот = Выборка.ВидРабот;
			НоваяСтрока.ДатаОсмотра = ДатаАктуальности;
			Продолжить;
		КонецЕсли;
		// Осмотр проводился, проверяем его актуальность.
		ОписаниеПериодичности = ОписаниеПериодичностиОсмотров();
		ЗаполнитьЗначенияСвойств(ОписаниеПериодичности, Выборка);
		ДатаСледующегоОсмотра = ДатаСледующегоОсмотра(Выборка.ДатаОсмотра, ОписаниеПериодичности);
		Если ДатаСледующегоОсмотра > ДатаАктуальности Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ВидыРабот.Добавить();
		НоваяСтрока.ВидРабот = Выборка.ВидРабот;
		НоваяСтрока.ДатаОсмотра = ДатаСледующегоОсмотра;
	КонецЦикла;
	
	Возврат ВидыРабот;
	
КонецФункции

Функция ОсмотрыПоВреднымФакторамФизическогоЛица(ФизическоеЛицо, Позиция, ДатаАктуальности = Неопределено) Экспорт
	
	ОсмотрыПоФакторам = Новый ТаблицаЗначений;
	ОсмотрыПоФакторам.Колонки.Добавить("ВредныйФактор", Новый ОписаниеТипов("СправочникСсылка.ВредныеОпасныеПроизводственныеФакторы"));
	ОсмотрыПоФакторам.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("Структура"));
	ОсмотрыПоФакторам.Колонки.Добавить("ПоследнийОсмотр", Новый ОписаниеТипов("Дата"));
	ОсмотрыПоФакторам.Колонки.Добавить("СледующийОсмотр", Новый ОписаниеТипов("Дата"));
	ОсмотрыПоФакторам.Колонки.Добавить("Результат", Новый ОписаниеТипов("ПеречислениеСсылка.РезультатыМедицинскогоОсмотра"));
	ОсмотрыПоФакторам.Колонки.Добавить("СостояниеПроцент", Новый ОписаниеТипов("Число"));
	ОсмотрыПоФакторам.Колонки.Добавить("Требуется", Новый ОписаниеТипов("Булево"));
	ОсмотрыПоФакторам.Колонки.Добавить("Регистратор");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВредныеФакторыПозиции(МенеджерВременныхТаблиц, Позиция);
	СоздатьВТОсмотрыПоВреднымФакторамФизическогоЛица(МенеджерВременныхТаблиц, ФизическоеЛицо, ДатаАктуальности);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсмотрыПоВреднымФакторам.ВредныйФактор КАК ВредныйФактор,
		|	ОсмотрыПоВреднымФакторам.ДатаОсмотра КАК ПоследнийОсмотр,
		|	ОсмотрыПоВреднымФакторам.Регистратор КАК Регистратор,
		|	ОсмотрыПоВреднымФакторам.РезультатОсмотра КАК РезультатОсмотра,
		|	ВЫБОР
		|		КОГДА ВредныеФакторыПозиции.ВредныйФактор ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяПозицией
		|ПОМЕСТИТЬ ВТСостояниеОсмотров
		|ИЗ
		|	ВТОсмотрыПоВреднымФакторам КАК ОсмотрыПоВреднымФакторам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВредныеФакторыПозиции КАК ВредныеФакторыПозиции
		|		ПО (ВредныеФакторыПозиции.ВредныйФактор = ОсмотрыПоВреднымФакторам.ВредныйФактор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВредныеФакторыПозиции.ВредныйФактор,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА
		|ИЗ
		|	ВТВредныеФакторыПозиции КАК ВредныеФакторыПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсмотрыПоВреднымФакторам КАК ОсмотрыПоВреднымФакторам
		|		ПО ВредныеФакторыПозиции.ВредныйФактор = ОсмотрыПоВреднымФакторам.ВредныйФактор
		|ГДЕ
		|	ОсмотрыПоВреднымФакторам.ВредныйФактор ЕСТЬ NULL";
	Запрос.Выполнить();
	
	СоздатьВТПериодичностьВредныхФакторов(МенеджерВременныхТаблиц, "ВТСостояниеОсмотров");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеОсмотров.ВредныйФактор КАК ВредныйФактор,
		|	СостояниеОсмотров.ПоследнийОсмотр КАК ПоследнийОсмотр,
		|	СостояниеОсмотров.Регистратор КАК Регистратор,
		|	СостояниеОсмотров.РезультатОсмотра КАК Результат,
		|	СостояниеОсмотров.ТребуетсяПозицией КАК Требуется,
		|	ПериодичностьВредныхФакторов.Кратность КАК Кратность,
		|	ПериодичностьВредныхФакторов.Периодичность КАК Периодичность,
		|	ПериодичностьВредныхФакторов.ЕдиницаПериодичности КАК ЕдиницаПериодичности
		|ИЗ
		|	ВТСостояниеОсмотров КАК СостояниеОсмотров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодичностьВредныхФакторов КАК ПериодичностьВредныхФакторов
		|		ПО (ПериодичностьВредныхФакторов.ВредныйФактор = СостояниеОсмотров.ВредныйФактор)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьСтрокуТаблицыОсмотровПоФакторам(ОсмотрыПоФакторам, Выборка);
	КонецЦикла;
	
	Возврат ОсмотрыПоФакторам;
	
КонецФункции

Функция ОсмотрыПоВидамРаботФизическогоЛица(ФизическоеЛицо, Позиция, ДатаАктуальности = Неопределено) Экспорт
	
	ОсмотрыПоВидамРабот = Новый ТаблицаЗначений;
	ОсмотрыПоВидамРабот.Колонки.Добавить("ВидРабот", Новый ОписаниеТипов("СправочникСсылка.ВидыРаботМедицинскихОсмотров"));
	ОсмотрыПоВидамРабот.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("Структура"));
	ОсмотрыПоВидамРабот.Колонки.Добавить("ПоследнийОсмотр", Новый ОписаниеТипов("Дата"));
	ОсмотрыПоВидамРабот.Колонки.Добавить("СледующийОсмотр", Новый ОписаниеТипов("Дата"));
	ОсмотрыПоВидамРабот.Колонки.Добавить("Результат", Новый ОписаниеТипов("ПеречислениеСсылка.РезультатыМедицинскогоОсмотра"));
	ОсмотрыПоВидамРабот.Колонки.Добавить("СостояниеПроцент", Новый ОписаниеТипов("Число"));
	ОсмотрыПоВидамРабот.Колонки.Добавить("Требуется", Новый ОписаниеТипов("Булево"));
	ОсмотрыПоВидамРабот.Колонки.Добавить("Регистратор");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВидыРаботПозиции(МенеджерВременныхТаблиц, Позиция);
	СоздатьВТОсмотрыПоВидамРаботФизическогоЛица(МенеджерВременныхТаблиц, ФизическоеЛицо, ДатаАктуальности);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсмотрыПоВидамРабот.ВидРабот КАК ВидРабот,
		|	ОсмотрыПоВидамРабот.ДатаОсмотра КАК ПоследнийОсмотр,
		|	ОсмотрыПоВидамРабот.Регистратор КАК Регистратор,
		|	ОсмотрыПоВидамРабот.РезультатОсмотра КАК РезультатОсмотра,
		|	ВЫБОР
		|		КОГДА ВидыРаботПозиции.ВидРабот ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяПозицией
		|ПОМЕСТИТЬ ВТСостояниеОсмотров
		|ИЗ
		|	ВТОсмотрыПоВидамРабот КАК ОсмотрыПоВидамРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыРаботПозиции КАК ВидыРаботПозиции
		|		ПО (ВидыРаботПозиции.ВидРабот = ОсмотрыПоВидамРабот.ВидРабот)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыРаботПозиции.ВидРабот,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА
		|ИЗ
		|	ВТВидыРаботПозиции КАК ВидыРаботПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсмотрыПоВидамРабот КАК ОсмотрыПоВидамРабот
		|		ПО ВидыРаботПозиции.ВидРабот = ОсмотрыПоВидамРабот.ВидРабот
		|ГДЕ
		|	ОсмотрыПоВидамРабот.ВидРабот ЕСТЬ NULL";
	Запрос.Выполнить();
	
	СоздатьВТПериодичностьВидовРабот(МенеджерВременныхТаблиц, "ВТСостояниеОсмотров");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеОсмотров.ВидРабот КАК ВидРабот,
		|	СостояниеОсмотров.ПоследнийОсмотр КАК ПоследнийОсмотр,
		|	СостояниеОсмотров.Регистратор КАК Регистратор,
		|	СостояниеОсмотров.РезультатОсмотра КАК Результат,
		|	СостояниеОсмотров.ТребуетсяПозицией КАК Требуется,
		|	ПериодичностьВидовРабот.Кратность КАК Кратность,
		|	ПериодичностьВидовРабот.Периодичность КАК Периодичность,
		|	ПериодичностьВидовРабот.ЕдиницаПериодичности КАК ЕдиницаПериодичности
		|ИЗ
		|	ВТСостояниеОсмотров КАК СостояниеОсмотров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодичностьВидовРабот КАК ПериодичностьВидовРабот
		|		ПО (ПериодичностьВидовРабот.ВидРабот = СостояниеОсмотров.ВидРабот)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьСтрокуТаблицыОсмотровПоФакторам(ОсмотрыПоВидамРабот, Выборка);
	КонецЦикла;
	
	Возврат ОсмотрыПоВидамРабот;
	
КонецФункции

#Область ПодключениеСобытийОбновленияПериодическихОсмотров

Процедура ЗарегистрироватьИзменениеКадровойИсторииДляМедосмотровПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОбновленияКадровойИсторииДляМедосмотров(Источник);
	
	ЗарегистрироватьОбновлениеПериодическихОсмотров(Источник.ДополнительныеСвойства.ТаблицаОбновлениеПериодическихОсмотров);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеФизическогоЛицаДляМедосмотровПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбновленияПериодическихОсмотров = НоваяТаблицаОбновлениеПериодическихОсмотров();
	
	ЗаполнитьТаблицуОбновленияПериодическихОсмотровПоФизическомуЛицу(ТаблицаОбновленияПериодическихОсмотров, Источник);
	
	ЗарегистрироватьОбновлениеПериодическихОсмотров(ТаблицаОбновленияПериодическихОсмотров);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОбновленияПериодическихОсмотровПоФизическимЛицам(ТаблицаОбновлениеПериодическихОсмотров, ФизическиеЛица) Экспорт

	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ОтборыМассив = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОтборыМассив, "ФизическоеЛицо", "В", ФизическиеЛица);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОтборыМассив, "ОформленПоТрудовомуДоговору", "=", Истина);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОтборыМассив, "ДатаУвольнения", "<", ТекущаяДатаСеанса());
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(МенеджерВТ, Ложь, ОтборыМассив, "ГоловнаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК КадровыеДанные";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОбновлениеПериодическихОсмотров.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеВводаНаОсновании

Процедура ЗаполнитьКадровыйПереводПоЗаключениюМедицинскогоОсмотра(ДокументОбъект, Основание) Экспорт
	ЗаполнитьДокументОтстраненияПоЗаключениюМедицинскогоОсмотра(ДокументОбъект, Основание);	
КонецПроцедуры

Процедура ЗаполнитьУвольнениеПоЗаключениюМедицинскогоОсмотра(ДокументОбъект, Основание) Экспорт
	ЗаполнитьДокументОтстраненияПоЗаключениюМедицинскогоОсмотра(ДокументОбъект, Основание);
КонецПроцедуры

Процедура ПриЗаписиДокументаОтстранения(ДокументОбъект) Экспорт
	
	Если Не ДокументОбъект.ДополнительныеСвойства.Свойство("Основание") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОтстранениеОтРаботыПоРезультатамМедицинскогоОсмотра.СоздатьНаборЗаписей();
	
	СтрокаНабора = НаборЗаписей.Добавить();
	СтрокаНабора.ДокументОтстранения = ДокументОбъект.Ссылка;
	СтрокаНабора.ЗаключениеМедицинскогоОсмотра = ДокументОбъект.ДополнительныеСвойства["Основание"];
	СтрокаНабора.Организация = ДокументОбъект.Организация;
	СтрокаНабора.ФизическоеЛицо = ДокументОбъект.ФизическоеЛицо;
	
	НаборЗаписей.Отбор.ДокументОтстранения.Установить(ДокументОбъект.Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьОплатуПоСреднемуПоНаправлениюНаМедицинскийОсмотр(ДокументОбъект, Основание) Экспорт
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.НаправлениеНаМедицинскийОсмотр") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНаправления = Документы.НаправлениеНаМедицинскийОсмотр.ДанныеНаправления(Основание);
	Если ДанныеНаправления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеНаправления.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Документ направления на медицинский осмотр не проведен'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Сотрудник = СотрудникПоФизическомуЛицу(
		ДанныеНаправления.ФизическоеЛицо, 
		ДанныеНаправления.Позиция, 
		ДанныеНаправления.Организация);
		
	ДокументОбъект["ДатаНачала"] = ДанныеНаправления.ДатаОсмотра;
	ДокументОбъект["ДатаОкончания"] = ДанныеНаправления.ДатаОсмотра;
	ДокументОбъект.Заполнить(Сотрудник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВредныеОпасныеПроизводственныеФакторы.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыРаботМедицинскихОсмотров.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.52";
	Обработчик.Процедура = "Справочники.ВредныеОпасныеПроизводственныеФакторы.НачальноеЗаполнение";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f5a8af6b-77e8-40f1-8834-cb24ee43fb44");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение классификатора вредных (опасных) производственных факторов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.52";
	Обработчик.Процедура = "Справочники.ВидыРаботМедицинскихОсмотров.НачальноеЗаполнение";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("767e0487-b9de-4bf2-b9a8-4b130c822eb5");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение классификатора видов работ, при выполнении которых требуется обязательное прохождение медицинских осмотров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.59";
	Обработчик.Процедура = "МедицинскиеОсмотры.ОбновитьПериодическиеОсмотрыУволенныхСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dbb42dcc-fbe8-4be1-82c6-f81b507b57b2");
	Обработчик.Комментарий = НСтр("ru = 'Обновление периодических медицинских осмотров для уволенных сотрудников.'");
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.РегистрыСведений.КадроваяИсторияСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОбновлениеПериодическихМедицинскихОсмотров;
	
	// Метаданные.Справочники.ФизическиеЛица
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Справочники.ФизическиеЛица;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОбновлениеПериодическихМедицинскихОсмотров;
	
	// Метаданные.РегистрыСведений.МедицинскиеОсмотры
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.МедицинскиеОсмотры;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОбновлениеПериодическихМедицинскихОсмотров;
	
	// Метаданные.РегистрыСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОбновлениеПериодическихМедицинскихОсмотров;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзла() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	// После создания нового узла нужно полностью заполнить вторичные данные, 
	// т.к. они не включаются в состав начального образа.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.Ссылка В (&Обработанные)";
	
	Обработанные = Новый Массив;
	Пока Истина Цикл
		Запрос.УстановитьПараметр("Обработанные", Обработанные);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		ФизическиеЛица = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		ТаблицаОбновления = НоваяТаблицаОбновлениеПериодическихОсмотров();
		ЗаполнитьТаблицуОбновленияПериодическихОсмотровПоФизическимЛицам(ТаблицаОбновления, ФизическиеЛица);
		ЗарегистрироватьОбновлениеПериодическихОсмотров(ТаблицаОбновления);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Обработанные, ФизическиеЛица);
	КонецЦикла;
	
	ЗапуститьОбновлениеПериодическихОсмотров();
	
КонецПроцедуры

#КонецОбласти

#Область ОснованияДляОбновленияПериодическихОсмотров

Процедура ЗаполнитьТаблицуОбновленияКадровойИсторииДляМедосмотров(Источник) Экспорт
	
	ТаблицаОбновления = НоваяТаблицаОбновлениеПериодическихОсмотров();
	
	ИзменившиесяДанные = Источник.ТаблицаИзменившихсяДанныхНабора();
	
	Если ИзменившиесяДанные <> Неопределено Тогда
		// Анализируем изменения того, что влияет на осмотры: позиции, даты.
		Для Каждого СтрокаТаблицы Из ИзменившиесяДанные Цикл
			Если СтрокаТаблицы["Добавление"] = Истина Или СтрокаТаблицы["Удаление"] = Истина Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаОбновления.Добавить(), СтрокаТаблицы);
			Иначе
				Если СтрокаТаблицы["ИзменилсяРесурсДолжностьПоШтатномуРасписанию"] = Истина Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаОбновления.Добавить(), СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ТаблицаОбновлениеПериодическихОсмотров", ТаблицаОбновления);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеПериодическихОсмотров

Процедура ОбновлениеПериодическихМедицинскихОсмотров() Экспорт
	
	// Регламентные задания блокируются на время служебных операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеПериодическихМедицинскихОсмотров);
	
	ОбновитьПериодическиеОсмотры();
	
КонецПроцедуры

Процедура ЗапуститьОбновлениеПериодическихОсмотров(Организация = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда 
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(Организация);
	Параметры.Добавить(ФизическиеЛица);
	
	ФоновыеЗадания.Выполнить("МедицинскиеОсмотры.ОбновитьПериодическиеОсмотры", Параметры);
	
КонецПроцедуры

Процедура ОбновитьПериодическиеОсмотры(Организация = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ДанныеНабора.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеНабора.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	РегистрСведений.ОбновлениеПериодическихМедицинскихОсмотров КАК ДанныеНабора
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Если Организация <> Неопределено Тогда
		ОтборЗапроса.Добавить("ДанныеНабора.ГоловнаяОрганизация = &ГоловнаяОрганизация");
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	КонецЕсли;
	Если ФизическиеЛица <> Неопределено Тогда
		ОтборЗапроса.Добавить("ДанныеНабора.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Истина Цикл
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбновлениеПериодическихМедицинскихОсмотров"); 
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГоловнаяОрганизация", "ГоловнаяОрганизация");
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ТаблицаОбновления = РезультатЗапроса.Выгрузить();
			ОбновитьПериодическиеОсмотрыФизическихЛиц(ТаблицаОбновления);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПериодическиеОсмотрыОрганизацииДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	Попытка
		ОбновитьПериодическиеОсмотры(Параметры.Организация);
	Исключение
		ПредставлениеОбработки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление периодических осмотров по организации %1'"), 
			Параметры.Организация);
		ЗарегистрироватьОшибкуОбработкиМедицинскихОсмотров(ИнформацияОбОшибке(), ПредставлениеОбработки);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьПериодическиеОсмотрыФизическихЛицДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	Попытка
		ОбновитьПериодическиеОсмотры(, Параметры.ФизическиеЛица);
	Исключение
		ПредставлениеОбработки = НСтр("ru = 'Обновление периодических осмотров по физическим лицам'"); 
		ЗарегистрироватьОшибкуОбработкиМедицинскихОсмотров(ИнформацияОбОшибке(), ПредставлениеОбработки);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьПериодическиеОсмотрыФизическихЛиц(ТаблицаОбновления)
	
	ПериодическиеОсмотры = НоваяТаблицаПериодическиеОсмотры();
	
	ЗаполнитьТаблицуПериодическихОсмотров(ПериодическиеОсмотры, ТаблицаОбновления);
	
	ПериодическиеОсмотры.Индексы.Добавить("ФизическоеЛицо, ГоловнаяОрганизация");
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, ГоловнаяОрганизация");
	Для Каждого СтрокаТаблицы Из ТаблицаОбновления Цикл
		// Заполняем набор периодических осмотров.
		НаборОсмотры = РегистрыСведений.ПериодическиеМедицинскиеОсмотры.СоздатьНаборЗаписей();
		НаборОсмотры.Отбор.ФизическоеЛицо.Установить(СтрокаТаблицы.ФизическоеЛицо);
		НаборОсмотры.Отбор.ГоловнаяОрганизация.Установить(СтрокаТаблицы.ГоловнаяОрганизация);
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
		НайденныеСтроки = ПериодическиеОсмотры.НайтиСтроки(ОтборСтрок);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденныеСтроки, НаборОсмотры);
		// Подготавливаем к очистке набор обновления.
		НаборОбновления = РегистрыСведений.ОбновлениеПериодическихМедицинскихОсмотров.СоздатьНаборЗаписей();
		НаборОбновления.Отбор.ФизическоеЛицо.Установить(СтрокаТаблицы.ФизическоеЛицо);
		НаборОбновления.Отбор.ГоловнаяОрганизация.Установить(СтрокаТаблицы.ГоловнаяОрганизация);
		НачатьТранзакцию();
		Попытка
			НаборОсмотры.Записать();
			НаборОбновления.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПериодическихОсмотров(ПериодическиеОсмотры, ТаблицаОбновления)
	
	Если ТаблицаОбновления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Получаем сотрудников и позиции.
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСотрудников.КадровыеДанные = "ДолжностьПоШтатномуРасписанию,ГоловнаяОрганизация,ДатаНачала,ДатаРождения";
	ПараметрыСотрудников.СписокФизическихЛиц = ТаблицаОбновления.ВыгрузитьКолонку("ФизическоеЛицо");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСотрудников.Отборы, "ДатаУвольнения", "=", Дата(1, 1, 1));
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Истина, ПараметрыСотрудников);
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВТ, "ВТСотрудникиОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаОбновления", ТаблицаОбновления);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбновления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаОбновления.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОбновления
		|ИЗ
		|	&ТаблицаОбновления КАК ТаблицаОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	Сотрудники.ДатаНачала КАК ДатаНачала,
		|	Сотрудники.ДатаРождения КАК ДатаРождения,
		|	ДОБАВИТЬКДАТЕ(Сотрудники.ДатаРождения, ГОД, 21) КАК Дата21Год,
		|	ПериодичностьОсмотров.КратностьОсмотра КАК Кратность,
		|	ПериодичностьОсмотров.ПериодичностьОсмотра КАК Периодичность,
		|	ПериодичностьОсмотров.ЕдиницаПериодичностиОсмотра КАК ЕдиницаПериодичности
		|ПОМЕСТИТЬ ВТСотрудникиТребующиеОсмотра
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновления КАК ТаблицаОбновления
		|		ПО (ТаблицаОбновления.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ТаблицаОбновления.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания КАК ПериодичностьОсмотров
		|		ПО (ПериодичностьОсмотров.Позиция = Сотрудники.ДолжностьПоШтатномуРасписанию)";
	Запрос.Выполнить();
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВТ, "ВТСотрудникиТребующиеОсмотра") Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем сведения о последнем пройденном осмотре.
	СоздатьВТПройденныеОсмотры(МенеджерВТ, "ВТСотрудникиТребующиеОсмотра");
	
	// Сотрудники, хотя бы раз проходившие осмотр на той позиции, на которой сейчас работают.
	// Для них просто отсчитаем дату следующего осмотра.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.Позиция КАК Позиция,
		|	Сотрудники.Дата21Год КАК Дата21Год,
		|	ПройденныеОсмотры.ДатаОсмотра КАК ДатаПройденногоОсмотра,
		|	ПройденныеОсмотры.РезультатОсмотра КАК РезультатОсмотра,
		|	ПройденныеОсмотры.Заключение КАК Заключение,
		|	ПройденныеОсмотры.Направление КАК Направление,
		|	Сотрудники.Кратность КАК Кратность,
		|	Сотрудники.Периодичность КАК Периодичность,
		|	Сотрудники.ЕдиницаПериодичности КАК ЕдиницаПериодичности
		|ИЗ
		|	ВТСотрудникиТребующиеОсмотра КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПройденныеОсмотры КАК ПройденныеОсмотры
		|		ПО (ПройденныеОсмотры.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ПройденныеОсмотры.Позиция = Сотрудники.Позиция)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ПериодическиеОсмотры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ОписаниеПериодичности = ОписаниеПериодичностиОсмотров();
		ЗаполнитьЗначенияСвойств(ОписаниеПериодичности, Выборка);
		ДатаСледующегоОсмотра = ДатаСледующегоОсмотра(Выборка.ДатаПройденногоОсмотра, ОписаниеПериодичности);
		Если Выборка.ДатаПройденногоОсмотра < Выборка.Дата21Год Тогда
			ДатаСледующегоОсмотра = Мин(ДатаСледующегоОсмотра, ДобавитьМесяц(Выборка.ДатаПройденногоОсмотра, 12));
		КонецЕсли;
		НоваяСтрока.ДатаСледующегоОсмотра = ДатаСледующегоОсмотра;
	КонецЦикла;
	
	// Никогда не проходившие осмотр на этой позиции
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.Позиция КАК Позиция,
		|	Сотрудники.Дата21Год КАК Дата21Год,
		|	Сотрудники.ДатаНачала КАК ДатаНачала
		|ПОМЕСТИТЬ ВТСотрудникиНеПроходившиеОсмотрНаПозиции
		|ИЗ
		|	ВТСотрудникиТребующиеОсмотра КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПройденныеОсмотры КАК ПройденныеОсмотры
		|		ПО (ПройденныеОсмотры.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ПройденныеОсмотры.Позиция = Сотрудники.Позиция)
		|ГДЕ
		|	ПройденныеОсмотры.ДатаОсмотра ЕСТЬ NULL";
	Запрос.Выполнить();
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВТ, "ВТСотрудникиНеПроходившиеОсмотрНаПозиции") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВредныеФакторыПозиции.ВредныйФактор КАК ВредныйФактор
		|ПОМЕСТИТЬ ВТТребуемыеВредныеФакторы
		|ИЗ
		|	ВТСотрудникиНеПроходившиеОсмотрНаПозиции КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВредныеФакторыПозицииШтатногоРасписания КАК ВредныеФакторыПозиции
		|		ПО (ВредныеФакторыПозиции.Позиция = Сотрудники.Позиция)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВидыРаботПозиции.ВидРабот КАК ВидРабот
		|ПОМЕСТИТЬ ВТТребуемыеВидыРабот
		|ИЗ
		|	ВТСотрудникиНеПроходившиеОсмотрНаПозиции КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания КАК ВидыРаботПозиции
		|		ПО (ВидыРаботПозиции.Позиция = Сотрудники.Позиция)";
	Запрос.Выполнить();
	
	СоздатьВТОсмотрыПоВреднымФакторам(МенеджерВТ, "ВТТребуемыеВредныеФакторы");
	СоздатьВТОсмотрыПоВидамРабот(МенеджерВТ, "ВТТребуемыеВидыРабот");
	
	// Выявляются люди и позиции, которым 
	// - не получается "перезачесть" из-за как минимум одного вредного фактора (вида работ),
	// - можно полностью "перезачесть" осмотр по вредным факторам (видам работ).
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТСотрудникиОсмотрНаПозицииНельзяПерезачесть
		|ИЗ
		|	ВТСотрудникиНеПроходившиеОсмотрНаПозиции КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВредныеФакторыПозицииШтатногоРасписания КАК ВредныеФакторыПозиции
		|		ПО (ВредныеФакторыПозиции.Позиция = Сотрудники.Позиция)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсмотрыПоВреднымФакторам КАК ПройденныеОсмотрыПоВреднымФакторам
		|		ПО (ПройденныеОсмотрыПоВреднымФакторам.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ПройденныеОсмотрыПоВреднымФакторам.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|			И (ПройденныеОсмотрыПоВреднымФакторам.ВредныйФактор = ВредныеФакторыПозиции.ВредныйФактор)
		|ГДЕ
		|	ПройденныеОсмотрыПоВреднымФакторам.ДатаОсмотра ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.Позиция
		|ИЗ
		|	ВТСотрудникиНеПроходившиеОсмотрНаПозиции КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания КАК ВидыРаботПозиции
		|		ПО (ВидыРаботПозиции.Позиция = Сотрудники.Позиция)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсмотрыПоВидамРабот КАК ПройденныеОсмотрыПоВидамРабот
		|		ПО (ПройденныеОсмотрыПоВидамРабот.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ПройденныеОсмотрыПоВидамРабот.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|			И (ПройденныеОсмотрыПоВидамРабот.ВидРабот = ВидыРаботПозиции.ВидРабот)
		|ГДЕ
		|	ПройденныеОсмотрыПоВидамРабот.ДатаОсмотра ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.Позиция КАК Позиция,
		|	КадровыеДанные.ДатаНачала КАК ДатаСледующегоОсмотра
		|ИЗ
		|	ВТСотрудникиОсмотрНаПозицииНельзяПерезачесть КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиТребующиеОсмотра КАК КадровыеДанные
		|		ПО (КадровыеДанные.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (КадровыеДанные.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|			И (КадровыеДанные.Позиция = Сотрудники.Позиция)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Перечисляем тех, кому не получилось перезачесть осмотр из-за одного или нескольких вредных факторов (видов работ).
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПериодическиеОсмотры.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.Позиция КАК Позиция,
		|	Сотрудники.Дата21Год КАК Дата21Год
		|ПОМЕСТИТЬ ВТСотрудникиОсмотрНаПозицииМожноПерезачесть
		|ИЗ
		|	ВТСотрудникиНеПроходившиеОсмотрНаПозиции КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОсмотрНаПозицииНельзяПерезачесть КАК НельзяПерезачесть
		|		ПО (НельзяПерезачесть.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (НельзяПерезачесть.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|			И (НельзяПерезачесть.Позиция = Сотрудники.Позиция)
		|ГДЕ
		|	НельзяПерезачесть.Позиция ЕСТЬ NULL";
	Запрос.Выполнить();
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВТ, "ВТСотрудникиОсмотрНаПозицииМожноПерезачесть") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.Позиция КАК Позиция,
		|	Сотрудники.Дата21Год КАК Дата21Год,
		|	ПройденныеОсмотрыПоВреднымФакторам.ДатаОсмотра КАК ДатаПройденногоОсмотра,
		|	ПройденныеОсмотрыПоВреднымФакторам.Направление КАК Направление,
		|	ПройденныеОсмотрыПоВреднымФакторам.Заключение КАК Заключение,
		|	ПройденныеОсмотрыПоВреднымФакторам.РезультатОсмотра КАК РезультатОсмотра,
		|	ВредныеФакторы.КратностьОсмотра КАК Кратность,
		|	ВредныеФакторы.ПериодичностьОсмотра КАК Периодичность,
		|	ВредныеФакторы.ЕдиницаПериодичностиОсмотра КАК ЕдиницаПериодичности
		|ИЗ
		|	ВТСотрудникиОсмотрНаПозицииМожноПерезачесть КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВредныеФакторыПозицииШтатногоРасписания КАК ВредныеФакторыПозиции
		|		ПО (ВредныеФакторыПозиции.Позиция = Сотрудники.Позиция)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВредныеОпасныеПроизводственныеФакторы КАК ВредныеФакторы
		|		ПО (ВредныеФакторы.Ссылка = ВредныеФакторыПозиции.ВредныйФактор)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсмотрыПоВреднымФакторам КАК ПройденныеОсмотрыПоВреднымФакторам
		|		ПО (ПройденныеОсмотрыПоВреднымФакторам.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ПройденныеОсмотрыПоВреднымФакторам.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|			И (ПройденныеОсмотрыПоВреднымФакторам.ВредныйФактор = ВредныеФакторыПозиции.ВредныйФактор)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.Позиция,
		|	Сотрудники.Дата21Год КАК Дата21Год,
		|	ПройденныеОсмотрыПоВидамРабот.ДатаОсмотра,
		|	ПройденныеОсмотрыПоВидамРабот.Направление,
		|	ПройденныеОсмотрыПоВидамРабот.Заключение,
		|	ПройденныеОсмотрыПоВидамРабот.РезультатОсмотра,
		|	ВидыРабот.КратностьОсмотра,
		|	ВидыРабот.ПериодичностьОсмотра,
		|	ВидыРабот.ЕдиницаПериодичностиОсмотра
		|ИЗ
		|	ВТСотрудникиОсмотрНаПозицииМожноПерезачесть КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания КАК ВидыРаботПозиции
		|		ПО (ВидыРаботПозиции.Позиция = Сотрудники.Позиция)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРаботМедицинскихОсмотров КАК ВидыРабот
		|		ПО (ВидыРабот.Ссылка = ВидыРаботПозиции.ВидРабот)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсмотрыПоВидамРабот КАК ПройденныеОсмотрыПоВидамРабот
		|		ПО (ПройденныеОсмотрыПоВидамРабот.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ПройденныеОсмотрыПоВидамРабот.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|			И (ПройденныеОсмотрыПоВидамРабот.ВидРабот = ВидыРаботПозиции.ВидРабот)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Позиция";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл
			НоваяСтрока = ПериодическиеОсмотры.Добавить();
			Пока Выборка.Следующий() Цикл
				ОписаниеПериодичности = ОписаниеПериодичностиОсмотров();
				ЗаполнитьЗначенияСвойств(ОписаниеПериодичности, Выборка);
				ДатаСледующегоОсмотра = ДатаСледующегоОсмотра(Выборка.ДатаПройденногоОсмотра, ОписаниеПериодичности);
				Если Выборка.ДатаПройденногоОсмотра < Выборка.Дата21Год Тогда
					ДатаСледующегоОсмотра = Мин(ДатаСледующегоОсмотра, ДобавитьМесяц(Выборка.ДатаПройденногоОсмотра, 12));
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаСледующегоОсмотра) Тогда
					НоваяСтрока.ДатаСледующегоОсмотра = ДатаСледующегоОсмотра;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Иначе
					Если ДатаСледующегоОсмотра < НоваяСтрока.ДатаСледующегоОсмотра Тогда
						НоваяСтрока.ДатаСледующегоОсмотра = ДатаСледующегоОсмотра;
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяТаблицаПериодическиеОсмотры()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	Таблица.Колонки.Добавить("ДатаПройденногоОсмотра", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаСледующегоОсмотра", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Направление", Новый ОписаниеТипов("ДокументСсылка.НаправлениеНаМедицинскийОсмотр"));
	Таблица.Колонки.Добавить("Заключение", Новый ОписаниеТипов("ДокументСсылка.ЗаключениеМедицинскогоОсмотра"));
	Таблица.Колонки.Добавить("РезультатОсмотра", Новый ОписаниеТипов("ПеречислениеСсылка.РезультатыМедицинскогоОсмотра"));
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ОснованияДляОбновленияПериодическихОсмотров

Функция НоваяТаблицаОбновлениеПериодическихОсмотров() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗарегистрироватьОбновлениеПериодическихОсмотров(ТаблицаОбновления) Экспорт
	
	Если ТаблицаОбновления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбновления.Свернуть("ФизическоеЛицо, ГоловнаяОрганизация");
	
	НаборЗаписей = РегистрыСведений.ОбновлениеПериодическихМедицинскихОсмотров.СоздатьНаборЗаписей();
	Для Каждого СтрокаТаблицы Из ТаблицаОбновления Цикл
		НаборЗаписей.Очистить();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
		НаборЗаписей.Отбор["ФизическоеЛицо"].Установить(СтрокаТаблицы["ФизическоеЛицо"]);
		НаборЗаписей.Отбор["ГоловнаяОрганизация"].Установить(СтрокаТаблицы["ГоловнаяОрганизация"]);
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОбновленияПериодическихОсмотровПоФизическомуЛицу(ТаблицаОбновлениеПериодическихОсмотров, ФизическоеЛицоОбъект)
	
	Если ФизическоеЛицоОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДатаРождения = ФизическоеЛицоОбъект.ДатаРождения;
	
	ОбновлятьПериодическиеОсмотрыФизическогоЛица = Ложь;
	Если Не ФизическоеЛицоОбъект.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		ОбновлятьПериодическиеОсмотрыФизическогоЛица = Истина;
	Иначе
		ПрежниеЗначения = ФизическоеЛицоОбъект.ДополнительныеСвойства["ПрежниеЗначения"];
		Если ДатаРождения <> ПрежниеЗначения.ДатаРождения Тогда
			ОбновлятьПериодическиеОсмотрыФизическогоЛица = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбновлятьПериодическиеОсмотрыФизическогоЛица Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОбновленияПериодическихОсмотровПоФизическимЛицам(
		ТаблицаОбновлениеПериодическихОсмотров, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицоОбъект.Ссылка));

КонецПроцедуры

#КонецОбласти

Процедура СформироватьНаправления(ДанныеНаправлений)
	
	Для Каждого ОписаниеНаправления Из ДанныеНаправлений.ОписанияНаправлений Цикл
		Описание = Документы.НаправлениеНаМедицинскийОсмотр.ОписаниеДляЗаполнения();
		ЗаполнитьЗначенияСвойств(Описание, ДанныеНаправлений);
		ЗаполнитьЗначенияСвойств(Описание, ОписаниеНаправления);
		Если ЗначениеЗаполнено(ОписаниеНаправления.Направление) Тогда
			НаправлениеОбъект = ОписаниеНаправления.Направление.ПолучитьОбъект();
		Иначе
			НаправлениеОбъект = Документы.НаправлениеНаМедицинскийОсмотр.СоздатьДокумент();
		КонецЕсли;
		НаправлениеОбъект.Заполнить(Описание);
		НачатьТранзакцию();
		Попытка
			НаправлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПредставлениеОбработки = НСтр("ru = 'Направление на медицинский осмотр (проведение)'");
			ЗарегистрироватьОшибкуОбработкиМедицинскихОсмотров(ИнформацияОбОшибке(), ПредставлениеОбработки);
			ВызватьИсключение;
		КонецПопытки;
		ОписаниеНаправления.Направление = НаправлениеОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьНаправленияДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	СформироватьНаправления(Параметры.ДанныеНаправлений);
	
	Направления = ОбщегоНазначения.ВыгрузитьКолонку(Параметры.ДанныеНаправлений.ОписанияНаправлений, "Направление");
	ПоместитьВоВременноеХранилище(Направления, АдресРезультата);
	
КонецПроцедуры

Процедура СформироватьЗаключения(ДанныеЗаключений)
	
	Для Каждого ОписаниеЗаключения Из ДанныеЗаключений.ОписанияЗаключений Цикл
		Описание = Документы.ЗаключениеМедицинскогоОсмотра.ОписаниеДляЗаполнения();
		ЗаполнитьЗначенияСвойств(Описание, ДанныеЗаключений);
		ЗаполнитьЗначенияСвойств(Описание, ОписаниеЗаключения);
		Если ЗначениеЗаполнено(ОписаниеЗаключения.Заключение) Тогда
			ЗаключениеОбъект = ОписаниеЗаключения.Заключение.ПолучитьОбъект();
		Иначе
			ЗаключениеОбъект = Документы.ЗаключениеМедицинскогоОсмотра.СоздатьДокумент();
		КонецЕсли;
		ЗаключениеОбъект.Заполнить(Описание);
		НачатьТранзакцию();
		Попытка
			ЗаключениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПредставлениеОбработки = НСтр("ru = 'Заключение медицинского осмотра (проведение)'");
			ЗарегистрироватьОшибкуОбработкиМедицинскихОсмотров(ИнформацияОбОшибке(), ПредставлениеОбработки);
			ВызватьИсключение;
		КонецПопытки;
		ОписаниеЗаключения.Заключение = ЗаключениеОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗаключенияДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	СформироватьЗаключения(Параметры.ДанныеЗаключений);
	
	Организация = Параметры.ДанныеЗаключений.Организация;
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(Параметры.ДанныеЗаключений.ОписанияЗаключений, "ФизическоеЛицо");
	
	ОбновитьПериодическиеОсмотры(Организация, ФизическиеЛица);
	
	Заключения = ОбщегоНазначения.ВыгрузитьКолонку(Параметры.ДанныеЗаключений.ОписанияЗаключений, "Заключение");
	ПоместитьВоВременноеХранилище(Заключения, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьВыданныеРанееНаправления(ОписанияНаправлений, ТолькоНаправленияБезЗаключений = Истина) Экспорт
	
	Если ОписанияНаправлений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтбор = Новый ТаблицаЗначений;
	ТаблицаОтбор.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОтбор.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ТаблицаОтбор.Колонки.Добавить("Описание");
	
	Для Каждого Описание Из ОписанияНаправлений Цикл
		НоваяСтрока = ТаблицаОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Описание);
		НоваяСтрока.Описание = Описание;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаОтбор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Таблица.Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТТаблицаОтбор
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыданныеНаправления.Период КАК Период,
		|	ВыданныеНаправления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВыданныеНаправления.Позиция КАК Позиция,
		|	ВыданныеНаправления.Направление КАК Направление,
		|	ВыданныеНаправления.Заключение КАК Заключение,
		|	ВыданныеНаправления.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ВыданныеНаправленияНаМедицинскийОсмотр.СрезПоследних(
		|			,
		|			(ФизическоеЛицо, Позиция) В
		|				(ВЫБРАТЬ
		|					Таблица.ФизическоеЛицо,
		|					Таблица.Позиция
		|				ИЗ
		|					ВТТаблицаОтбор КАК Таблица)) КАК ВыданныеНаправления
		|ГДЕ
		|	ВыданныеНаправления.Заключение = ЗНАЧЕНИЕ(Документ.ЗаключениеМедицинскогоОсмотра.ПустаяСсылка)";
	Если Не ТолькоНаправленияБезЗаключений Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыданныеНаправления.Заключение = ЗНАЧЕНИЕ(Документ.ЗаключениеМедицинскогоОсмотра.ПустаяСсылка)", "ИСТИНА");
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, Позиция");
	
	ВыданныеНаправления = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаТаблицы Из ВыданныеНаправления Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
		НайденныеСтроки = ТаблицаОтбор.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Описание.Направление = СтрокаТаблицы.Направление;
			НайденнаяСтрока.Описание.Заключение = СтрокаТаблицы.Заключение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьЗаключениеПоНаправлению(Направление) Экспорт
	
	Возврат ЗаключениеПоНаправлению(Направление) <> Неопределено;
	
КонецФункции

Функция ЗаключениеПоНаправлению(Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.Текст = 	
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК Заключение
		|ИЗ
		|	Документ.ЗаключениеМедицинскогоОсмотра КАК ЗаключениеМедицинскогоОсмотра
		|ГДЕ
		|	ЗаключениеМедицинскогоОсмотра.Направление = &Направление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Заключение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДокументОтстраненияПоЗаключениюМедицинскогоОсмотра(ДокументОбъект, Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ЗаключениеМедицинскогоОсмотра") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеЗаключения = Документы.ЗаключениеМедицинскогоОсмотра.ДанныеЗаключения(Основание);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеЗаключения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаключения.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Документ заключения медицинского осмотра не проведен'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаключения.ДокументОтстранения) И ДанныеЗаключения.ДокументОтстранения <> ДокументОбъект.Ссылка Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На основании заключения уже введен документ отстранения от работы %1'"),
			ДанныеЗаключения.ДокументОтстранения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Сотрудник = СотрудникПоФизическомуЛицу(
		ДанныеЗаключения.ФизическоеЛицо, 
		ДанныеЗаключения.Позиция, 
		ДанныеЗаключения.Организация, 
		ДокументОбъект.Ссылка);
		
	ДокументОбъект.Заполнить(Сотрудник);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ДокументОснование", Основание);
	
КонецПроцедуры

Функция СотрудникПоФизическомуЛицу(ФизическоеЛицо, Позиция, Организация, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.Организация = Организация;
	ПараметрыЗапроса.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыЗапроса.ИсключаемыйРегистратор = ИсключаемыйРегистратор;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыЗапроса.Отборы, "ДолжностьПоШтатномуРасписанию", "=", Позиция);
	
	УстановитьПривилегированныйРежим(Истина);
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СотрудникиОрганизации.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти сотрудника организации %1 на позиции %2 для физического лица %3'"),
			Организация,
			Позиция,
			ФизическоеЛицо);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат СотрудникиОрганизации[0].Сотрудник;
	
КонецФункции

Функция ИстекшиеПериодическиеМедицинскиеОсмотры()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИстекшиеОсмотры.Организация КАК Организация,
		|	ИстекшиеОсмотры.Количество КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПериодическиеОсмотры.Позиция.Владелец КАК Организация,
		|		КОЛИЧЕСТВО(ПериодическиеОсмотры.РезультатОсмотра) КАК Количество
		|	ИЗ
		|		РегистрСведений.ПериодическиеМедицинскиеОсмотры КАК ПериодическиеОсмотры
		|	ГДЕ
		|		ПериодическиеОсмотры.ДатаСледующегоОсмотра <= &ДатаАктуальности
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПериодическиеОсмотры.Позиция.Владелец
		|	
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(ПериодическиеОсмотры.РезультатОсмотра) > 0) КАК ИстекшиеОсмотры";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

#Область РаспределениеПоДням

Процедура РаспределитьОсмотрыПоДнямДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		РаспределитьОсмотрыПоДням(Параметры.ВыбранныйПериод, Параметры.ОписанияНаправлений);
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		ПредставлениеОбработки = НСтр("ru = 'Заполнение даты направления на медосмотр'");
		ЗарегистрироватьОшибкуОбработкиМедицинскихОсмотров(ИнформацияОбОшибке(), ПредставлениеОбработки);
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Параметры.ОписанияНаправлений, АдресРезультата);
	
КонецПроцедуры

Процедура РаспределитьОсмотрыПоДням(ВыбранныйПериод, ОписанияНаправлений)
	
	ДатаНачала = ВыбранныйПериод.ДатаНачала;
	ДатаОкончания = ВыбранныйПериод.ДатаОкончания;
	
	ТаблицаОтбор = Новый ТаблицаЗначений;
	ТаблицаОтбор.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОтбор.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ТаблицаОтбор.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаОтбор.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаОтбор.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОсмотрыПоДням = Новый Соответствие;
	ДниПоФизическимЛицам = Новый Соответствие;
	
	Для Каждого Описание Из ОписанияНаправлений Цикл
		Описание.ДатаОсмотра = Неопределено;
		Месяц = НачалоМесяца(ДатаНачала);
		Пока Месяц < ДатаОкончания Цикл
			НоваяСтрока = ТаблицаОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Описание);
			НоваяСтрока.Месяц = Месяц;
			НоваяСтрока.ДатаНачала = Макс(ДатаНачала, НачалоМесяца(Месяц));
			НоваяСтрока.ДатаОкончания = Мин(ДатаОкончания, КонецМесяца(Месяц));
			Месяц = ДобавитьМесяц(Месяц, 1);
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаОтбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаОтбор", ТаблицаОтбор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОтбор.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаОтбор.Позиция КАК Позиция,
		|	ТаблицаОтбор.Месяц КАК Месяц,
		|	ТаблицаОтбор.ДатаНачала КАК ДатаНачала,
		|	ТаблицаОтбор.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтборФизическихЛиц
		|ИЗ
		|	&ТаблицаОтбор КАК ТаблицаОтбор";
	Запрос.Выполнить();
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыЗапроса.ИмяВТФизическиеЛица = "ВТОтборФизическихЛиц";
	ПараметрыЗапроса.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	ПараметрыЗапроса.КадровыеДанные = "ДолжностьПоШтатномуРасписанию";
	ПараметрыЗапроса.НачалоПериода = ДатаНачала;
	ПараметрыЗапроса.ОкончаниеПериода = ДатаОкончания;
	ПараметрыЗапроса.РаботникиПоДоговорамГПХ = Ложь;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Ложь, ПараметрыЗапроса);
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	ОтборФизическихЛиц.Месяц КАК Месяц,
		|	&ДатаАктуальности КАК ДатаАктуальности,
		|	ОтборФизическихЛиц.ДатаНачала КАК ДатаНачала,
		|	ОтборФизическихЛиц.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборФизическихЛиц КАК ОтборФизическихЛиц
		|		ПО (ОтборФизическихЛиц.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ОтборФизическихЛиц.Позиция = Сотрудники.ДолжностьПоШтатномуРасписанию)";
	Запрос.Выполнить();
	
	ПараметрыЗапроса = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(МенеджерВТ, Ложь, ПараметрыЗапроса);

	ОписаниеФильтра = СостоянияСотрудников.ОписаниеФильтраСоздатьВТСостоянияСотрудниковНаДаты("ВТПлановоеВремя");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", "Дата");
	СостоянияСотрудников.СоздатьВТСостоянияСотрудниковНаДаты(МенеджерВТ, Ложь, ОписаниеФильтра, "ВТСостоянияСотрудниковНаДаты");
	
	Запрос.УстановитьПараметр("РабочееВремя", УчетРабочегоВремениРасширенный.ВидыВремениВключаемыеВНорму());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановоеВремя.Дата КАК Дата
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО (Сотрудники.Сотрудник = ПлановоеВремя.Сотрудник)
		|			И (Сотрудники.Месяц = ПлановоеВремя.Месяц)
		|			И (ПлановоеВремя.ВидУчетаВремени В (&РабочееВремя))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСостоянияСотрудниковНаДаты КАК СостоянияСотрудников
		|		ПО (СостоянияСотрудников.Сотрудник = ПлановоеВремя.Сотрудник)
		|			И (СостоянияСотрудников.Период = ПлановоеВремя.Дата)
		|			И (СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Дата";
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	СотрудникиДаты.Индексы.Добавить("ФизическоеЛицо");
	
	Для Каждого Описание Из ОписанияНаправлений Цикл
		Если ЗначениеЗаполнено(Описание.ДатаОсмотра) Тогда
			Продолжить;
		КонецЕсли;
		Если ДниПоФизическимЛицам[Описание.ФизическоеЛицо] <> Неопределено Тогда
			Описание.ДатаОсмотра = ДниПоФизическимЛицам[Описание.ФизическоеЛицо];
			Продолжить;
		КонецЕсли;
		ОтборСтрок = Новый Структура("ФизическоеЛицо");
		ОтборСтрок.ФизическоеЛицо = Описание.ФизическоеЛицо;
		НайденныеСтроки = СотрудникиДаты.НайтиСтроки(ОтборСтрок);
		Вчера = Неопределено;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если Вчера = Неопределено Тогда
				Вчера = НайденнаяСтрока.Дата;
				Продолжить;
			КонецЕсли;
			ОсмотровВчера = ОсмотрыНаДату(ОсмотрыПоДням, Вчера);
			Если ОсмотровВчера = 0 Тогда
				ДобавитьОсмотрНаДату(ОсмотрыПоДням, Вчера, Описание);
				ДниПоФизическимЛицам.Вставить(Описание.ФизическоеЛицо, Описание.ДатаОсмотра);
				Прервать;
			КонецЕсли;
			ОсмотровСегодня = ОсмотрыНаДату(ОсмотрыПоДням, НайденнаяСтрока.Дата);
			Если ОсмотровСегодня < ОсмотровВчера Тогда
				ДобавитьОсмотрНаДату(ОсмотрыПоДням, НайденнаяСтрока.Дата, Описание);
				ДниПоФизическимЛицам.Вставить(Описание.ФизическоеЛицо, НайденнаяСтрока.Дата);
				Прервать;
			КонецЕсли;
			Вчера = НайденнаяСтрока.Дата;
		КонецЦикла;
		Если ЗначениеЗаполнено(Описание.ДатаОсмотра) Тогда
			Продолжить;
		КонецЕсли;
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			ДобавитьОсмотрНаДату(ОсмотрыПоДням, НайденнаяСтрока.Дата, Описание);
			ДниПоФизическимЛицам.Вставить(Описание.ФизическоеЛицо, НайденнаяСтрока.Дата);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ОсмотрыНаДату(ОсмотрыПоДням, Дата)
	
	Осмотры = ОсмотрыПоДням[Дата];
	Если Осмотры = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Осмотры.Количество();
	
КонецФункции

Процедура ДобавитьОсмотрНаДату(ОсмотрыПоДням, Дата, Описание)
	
	Осмотры = ОсмотрыПоДням[Дата];
	Если Осмотры = Неопределено Тогда
		Осмотры = Новый Массив;
	КонецЕсли;
	
	Осмотры.Добавить(Описание);
	ОсмотрыПоДням.Вставить(Дата, Осмотры);
	
	Описание.ДатаОсмотра = Дата;
	
КонецПроцедуры

#КонецОбласти

Функция ДатаСледующегоОсмотра(ДатаОсмотра, ОписаниеПериодичностиОсмотров)
	
	Если ОписаниеПериодичностиОсмотров.Кратность = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МесяцевВЕдиницуИзмерения = МесяцевВЕдиницуИзмерения(ОписаниеПериодичностиОсмотров.ЕдиницаПериодичности);
	
	ИнтервалМесяцев = (ОписаниеПериодичностиОсмотров.Периодичность * МесяцевВЕдиницуИзмерения) / ОписаниеПериодичностиОсмотров.Кратность;
	
	Возврат ДобавитьМесяц(ДатаОсмотра, ИнтервалМесяцев);
	
КонецФункции

Функция ЧастейВГоду(ЕдиницаПериодичности)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.Периодичность.Год, 1);
	Соответствие.Вставить(Перечисления.Периодичность.Полугодие, 2);
	Соответствие.Вставить(Перечисления.Периодичность.Квартал, 4);
	Соответствие.Вставить(Перечисления.Периодичность.Месяц, 12);
	
	Возврат Соответствие[ЕдиницаПериодичности];
	
КонецФункции

Функция МесяцевВЕдиницуИзмерения(ЕдиницаПериодичности)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.Периодичность.Год, 12);
	Соответствие.Вставить(Перечисления.Периодичность.Полугодие, 6);
	Соответствие.Вставить(Перечисления.Периодичность.Квартал, 3);
	Соответствие.Вставить(Перечисления.Периодичность.Месяц, 1);
	
	Возврат Соответствие[ЕдиницаПериодичности];
	
КонецФункции

Функция ВредныеФакторыПозиции(Позиция) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВТВредныеФакторыПозиции(МенеджерВТ, Позиция);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВредныеФакторы.ВредныйФактор КАК ВредныйФактор
		|ИЗ
		|	ВТВредныеФакторыПозиции КАК ВредныеФакторы";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВредныйФактор");
	
КонецФункции

Функция ВидыРаботПозиции(Позиция) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВТВидыРаботПозиции(МенеджерВТ, Позиция);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРабот.ВидРабот
		|ИЗ
		|	ВТВидыРаботПозиции КАК ВидыРабот";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРабот");
	
КонецФункции

Процедура СоздатьВТПериодичностьВредныхФакторов(МенеджерВременныхТаблиц, ИмяВТВредныеФакторы = "ВТВредныеФакторы")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВредныеФакторы.Ссылка КАК ВредныйФактор,
		|	ВредныеФакторы.КратностьОсмотра КАК Кратность,
		|	ВредныеФакторы.ПериодичностьОсмотра КАК Периодичность,
		|	ВредныеФакторы.ЕдиницаПериодичностиОсмотра КАК ЕдиницаПериодичности,
		|	ВредныеФакторы.ПредставлениеПериодичностиОсмотра КАК Представление
		|ПОМЕСТИТЬ ВТПериодичностьВредныхФакторов
		|ИЗ
		|	Справочник.ВредныеОпасныеПроизводственныеФакторы КАК ВредныеФакторы
		|ГДЕ
		|	ВредныеФакторы.Ссылка В
		|			(ВЫБРАТЬ
		|				ВредныеФакторы.ВредныйФактор
		|			ИЗ
		|				ВТВредныеФакторы КАК ВредныеФакторы)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВредныеФакторы", ИмяВТВредныеФакторы);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПериодичностьВидовРабот(МенеджерВременныхТаблиц, ИмяВТВидыРабот = "ВТВидыРабот")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРаботМедицинскихОсмотров.Ссылка КАК ВидРабот,
		|	ВидыРаботМедицинскихОсмотров.КратностьОсмотра КАК Кратность,
		|	ВидыРаботМедицинскихОсмотров.ПериодичностьОсмотра КАК Периодичность,
		|	ВидыРаботМедицинскихОсмотров.ЕдиницаПериодичностиОсмотра КАК ЕдиницаПериодичности,
		|	ВидыРаботМедицинскихОсмотров.ПредставлениеПериодичностиОсмотра КАК Представление
		|ПОМЕСТИТЬ ВТПериодичностьВидовРабот
		|ИЗ
		|	Справочник.ВидыРаботМедицинскихОсмотров КАК ВидыРаботМедицинскихОсмотров
		|ГДЕ
		|	ВидыРаботМедицинскихОсмотров.Ссылка В
		|			(ВЫБРАТЬ
		|				ВидыРабот.ВидРабот
		|			ИЗ
		|				ВТВидыРабот КАК ВидыРабот)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВидыРабот", ИмяВТВидыРабот);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТВредныеФакторыПозиции(МенеджерВременныхТаблиц, Позиция)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВредныеФакторыПозиции.Позиция КАК Позиция,
		|	ВредныеФакторыПозиции.ВредныйФактор КАК ВредныйФактор
		|ПОМЕСТИТЬ ВТВредныеФакторыПозиции
		|ИЗ
		|	РегистрСведений.ВредныеФакторыПозицииШтатногоРасписания КАК ВредныеФакторыПозиции
		|ГДЕ
		|	ВредныеФакторыПозиции.Позиция = &Позиция";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТВидыРаботПозиции(МенеджерВременныхТаблиц, Позиция)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРаботПозиции.Позиция КАК Позиция,
		|	ВидыРаботПозиции.ВидРабот КАК ВидРабот
		|ПОМЕСТИТЬ ВТВидыРаботПозиции
		|ИЗ
		|	РегистрСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания КАК ВидыРаботПозиции
		|ГДЕ
		|	ВидыРаботПозиции.Позиция = &Позиция";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТОсмотрыПоВреднымФакторамФизическогоЛица(МенеджерВременныхТаблиц, ФизическоеЛицо, ДатаАктуальности = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсмотрыПоВреднымФакторам.Период КАК ДатаОсмотра,
		|	ОсмотрыПоВреднымФакторам.Регистратор КАК Регистратор,
		|	ОсмотрыПоВреднымФакторам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОсмотрыПоВреднымФакторам.ВредныйФактор КАК ВредныйФактор,
		|	ОсмотрыПоВреднымФакторам.РезультатОсмотра КАК РезультатОсмотра
		|ПОМЕСТИТЬ ВТОсмотрыПоВреднымФакторам
		|ИЗ
		|	РегистрСведений.МедицинскиеОсмотрыПоВреднымФакторам.СрезПоследних(&ДатаАктуальности, ФизическоеЛицо = &ФизическоеЛицо) КАК ОсмотрыПоВреднымФакторам";
	Если ДатаАктуальности = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", "");
	КонецЕсли;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТОсмотрыПоВреднымФакторам(МенеджерВременныхТаблиц, ИмяВТФизическиеЛица = "ВТФизическиеЛица")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсмотрыПоВреднымФакторам.Период КАК ДатаОсмотра,
		|	ОсмотрыПоВреднымФакторам.Регистратор КАК Заключение,
		|	ОсмотрыПоВреднымФакторам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОсмотрыПоВреднымФакторам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ОсмотрыПоВреднымФакторам.ВредныйФактор КАК ВредныйФактор,
		|	ОсмотрыПоВреднымФакторам.РезультатОсмотра КАК РезультатОсмотра,
		|	ОсмотрыПоВреднымФакторам.Направление КАК Направление
		|ПОМЕСТИТЬ ВТОсмотрыПоВреднымФакторам
		|ИЗ
		|	РегистрСведений.МедицинскиеОсмотрыПоВреднымФакторам.СрезПоследних(
		|			,
		|			(ФизическоеЛицо, ГоловнаяОрганизация, ВредныйФактор) В
		|				(ВЫБРАТЬ
		|					ФизическиеЛица.ФизическоеЛицо,
		|					ФизическиеЛица.ГоловнаяОрганизация,
		|					ФизическиеЛица.ВредныйФактор
		|				ИЗ
		|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК ОсмотрыПоВреднымФакторам";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ИмяВТФизическиеЛица);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТОсмотрыПоВидамРаботФизическогоЛица(МенеджерВременныхТаблиц, ФизическоеЛицо, ДатаАктуальности)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсмотрыПоВидамРабот.Период КАК ДатаОсмотра,
		|	ОсмотрыПоВидамРабот.Регистратор КАК Регистратор,
		|	ОсмотрыПоВидамРабот.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОсмотрыПоВидамРабот.ВидРабот КАК ВидРабот,
		|	ОсмотрыПоВидамРабот.РезультатОсмотра КАК РезультатОсмотра
		|ПОМЕСТИТЬ ВТОсмотрыПоВидамРабот
		|ИЗ
		|	РегистрСведений.МедицинскиеОсмотрыПоВидамРабот.СрезПоследних(&ДатаАктуальности, ФизическоеЛицо = &ФизическоеЛицо) КАК ОсмотрыПоВидамРабот";
	Если ДатаАктуальности = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", "");
	КонецЕсли;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТОсмотрыПоВидамРабот(МенеджерВременныхТаблиц, ИмяВТФизическиеЛица = "ВТФизическиеЛица")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсмотрыПоВидамРабот.Период КАК ДатаОсмотра,
		|	ОсмотрыПоВидамРабот.Регистратор КАК Заключение,
		|	ОсмотрыПоВидамРабот.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОсмотрыПоВидамРабот.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ОсмотрыПоВидамРабот.ВидРабот КАК ВидРабот,
		|	ОсмотрыПоВидамРабот.РезультатОсмотра КАК РезультатОсмотра,
		|	ОсмотрыПоВидамРабот.Направление КАК Направление
		|ПОМЕСТИТЬ ВТОсмотрыПоВидамРабот
		|ИЗ
		|	РегистрСведений.МедицинскиеОсмотрыПоВидамРабот.СрезПоследних(
		|			,
		|			(ФизическоеЛицо, ГоловнаяОрганизация, ВидРабот) В
		|				(ВЫБРАТЬ
		|					ФизическиеЛица.ФизическоеЛицо,
		|					ФизическиеЛица.ГоловнаяОрганизация,
		|					ФизическиеЛица.ВидРабот
		|				ИЗ
		|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК ОсмотрыПоВидамРабот";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ИмяВТФизическиеЛица);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПройденныеОсмотры(МенеджерВТ, ИмяВТФизическиеЛица = "ВТФизическиеЛица")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсмотрыПоПозициям.Период КАК ДатаОсмотра,
		|	ОсмотрыПоПозициям.Регистратор КАК Заключение,
		|	ОсмотрыПоПозициям.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОсмотрыПоПозициям.РезультатОсмотра КАК РезультатОсмотра,
		|	ОсмотрыПоПозициям.Позиция КАК Позиция,
		|	ОсмотрыПоПозициям.Направление КАК Направление
		|ПОМЕСТИТЬ ВТПройденныеОсмотры
		|ИЗ
		|	РегистрСведений.МедицинскиеОсмотры.СрезПоследних(
		|			,
		|			(ФизическоеЛицо, Позиция) В
		|				(ВЫБРАТЬ
		|					ФизическиеЛица.ФизическоеЛицо,
		|					ФизическиеЛица.Позиция
		|				ИЗ
		|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК ОсмотрыПоПозициям";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ИмяВТФизическиеЛица);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция АктуальностьОсмотраВПроцентах(ПоследнийОсмотр, СледующийОсмотр)
	
	Если Не ЗначениеЗаполнено(ПоследнийОсмотр) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СледующийОсмотр) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Сегодня = НачалоДня(ТекущаяДатаСеанса());

	Если Сегодня > СледующийОсмотр Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Сегодня < ПоследнийОсмотр Тогда
		Возврат 100;
	КонецЕсли;
	
	Возврат ((СледующийОсмотр - Сегодня) / (СледующийОсмотр - ПоследнийОсмотр)) * 100;
	
КонецФункции

Процедура ДобавитьСтрокуТаблицыОсмотровПоФакторам(ОсмотрыПоФакторам, ВыборкаЗапроса)
	
	НоваяСтрока = ОсмотрыПоФакторам.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
	
	НоваяСтрока.Периодичность = ОписаниеПериодичностиОсмотров();
	ЗаполнитьЗначенияСвойств(НоваяСтрока.Периодичность, ВыборкаЗапроса);
	ЗаполнитьПредставлениеПериодичности(НоваяСтрока.Периодичность);
	
	Если Не ЗначениеЗаполнено(ВыборкаЗапроса.ПоследнийОсмотр) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.СледующийОсмотр = ДатаСледующегоОсмотра(ВыборкаЗапроса.ПоследнийОсмотр, НоваяСтрока.Периодичность);
	Если ЗначениеЗаполнено(НоваяСтрока.СледующийОсмотр) Тогда
		НоваяСтрока.СостояниеПроцент = АктуальностьОсмотраВПроцентах(НоваяСтрока.ПоследнийОсмотр, НоваяСтрока.СледующийОсмотр);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеПериодичностиОсмотров()
	
	Возврат МедицинскиеОсмотрыКлиентСервер.ОписаниеПериодичностиОсмотров();
	
КонецФункции

Процедура ЗаполнитьПредставлениеПериодичности(ОписаниеПериодичности)
	ОписаниеПериодичности.Представление = ПредставлениеПериодичности(ОписаниеПериодичности.Кратность, ОписаниеПериодичности.Периодичность, ОписаниеПериодичности.ЕдиницаПериодичности);
КонецПроцедуры

Процедура ОбновитьПериодичностьОсмотровПозицийПоВредномуФактору(ВредныйФактор)
	
	НаборЗаписей = РегистрыСведений.ВредныеФакторыПозицииШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВредныйФактор.Установить(ВредныйФактор);
	НаборЗаписей.Прочитать();
	
	Позиции = НаборЗаписей.ВыгрузитьКолонку("Позиция");
	
	ОбновитьПериодичностьОсмотровПозицийШтатногоРасписания(Позиции);
	
КонецПроцедуры

Процедура ОбновитьПериодичностьОсмотровПозицийПоВидуРабот(ВидРабот)
	
	НаборЗаписей = РегистрыСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидРабот.Установить(ВидРабот);
	НаборЗаписей.Прочитать();
	
	Позиции = НаборЗаписей.ВыгрузитьКолонку("Позиция");
	
	ОбновитьПериодичностьОсмотровПозицийШтатногоРасписания(Позиции);
	
КонецПроцедуры

Процедура ОбновитьПериодичностьОсмотровПозицийПоНаборуВредныхФакторовВидовРабот(НаборЗаписей) Экспорт
	
	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ПрежнийНабор") Тогда
		Возврат;
	КонецЕсли;
	
	ПрежнийНабор = НаборЗаписей.ДополнительныеСвойства["ПрежнийНабор"];
	
	Если ОбщегоНазначения.КоллекцииИдентичны(ПрежнийНабор, НаборЗаписей) Тогда
		Возврат;
	КонецЕсли;
	
	ПозицииМассив = НаборЗаписей.ВыгрузитьКолонку("Позиция");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПозицииМассив, ПрежнийНабор.ВыгрузитьКолонку("Позиция"), Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьПериодичностьОсмотровПозицийШтатногоРасписания(ПозицииМассив);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняется при изменении состава вредных факторов или видов работ для позиции или при изменении периодичности одного
// из них.
//
Процедура ОбновитьПериодичностьОсмотровПозицийШтатногоРасписания(Позиции)
	
	Если Позиции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникПозиции.Ссылка КАК Позиция,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ВредныеФакторыПозицииШтатногоРасписания КАК ВредныеФакторыПозиции
		|				ГДЕ
		|					ВредныеФакторыПозиции.Позиция = СправочникПозиции.Ссылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВредныеФакторы,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания КАК ВидыРаботПозиции
		|				ГДЕ
		|					ВидыРаботПозиции.Позиция = СправочникПозиции.Ссылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВидыРабот
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК СправочникПозиции
		|ГДЕ
		|	СправочникПозиции.Ссылка В(&Позиции)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВредныеФакторыПозиции.Позиция КАК Позиция,
		|	ВредныеФакторы.КратностьОсмотра КАК Кратность,
		|	ВредныеФакторы.ПериодичностьОсмотра КАК Периодичность,
		|	ВредныеФакторы.ЕдиницаПериодичностиОсмотра КАК ЕдиницаПериодичности,
		|	ВредныеФакторы.Код КАК ВредныйФакторКод,
		|	ВредныеФакторы.Наименование КАК ВредныйФакторНаименование,
		|	NULL КАК ВидРаботКод,
		|	NULL КАК ВидРаботНаименование
		|ИЗ
		|	РегистрСведений.ВредныеФакторыПозицииШтатногоРасписания КАК ВредныеФакторыПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВредныеОпасныеПроизводственныеФакторы КАК ВредныеФакторы
		|		ПО ВредныеФакторыПозиции.ВредныйФактор = ВредныеФакторы.Ссылка
		|			И (ВредныеФакторыПозиции.Позиция В (&Позиции))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРаботПозиции.Позиция,
		|	ВидыРабот.КратностьОсмотра,
		|	ВидыРабот.ПериодичностьОсмотра,
		|	ВидыРабот.ЕдиницаПериодичностиОсмотра,
		|	NULL,
		|	NULL,
		|	ВидыРабот.Код,
		|	ВидыРабот.Наименование
		|ИЗ
		|	РегистрСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания КАК ВидыРаботПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРаботМедицинскихОсмотров КАК ВидыРабот
		|		ПО ВидыРаботПозиции.ВидРабот = ВидыРабот.Ссылка
		|			И (ВидыРаботПозиции.Позиция В (&Позиции))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПозиций = РезультатыЗапроса[0].Выбрать();
	ВыборкаФакторов = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаПозиций.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(ВыборкаПозиций.Позиция);
		Если Не ВыборкаПозиций.ЕстьВредныеФакторы И Не ВыборкаПозиций.ЕстьВидыРабот Тогда
			НаборЗаписей.Записать();
			Продолжить;
		КонецЕсли;
		ПредставленияФакторов = ПредставленияФакторов();
		ОписанияПериодичности = Новый Массив;
		ВыборкаФакторов.СледующийПоЗначениюПоля("Позиция");
		Пока ВыборкаФакторов.Следующий() Цикл
			Описание = ОписаниеПериодичностиОсмотров();
			ЗаполнитьЗначенияСвойств(Описание, ВыборкаФакторов);
			ОписанияПериодичности.Добавить(Описание);
			ДополнитьПредставленияФакторов(ПредставленияФакторов, ВыборкаФакторов);
		КонецЦикла;
		МинимальнаяПериодичность = МинимальнаяПериодичность(ОписанияПериодичности);
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ПредставленияФакторов);
		СтрокаНабора.Позиция = ВыборкаПозиций.Позиция;
		СтрокаНабора.КратностьОсмотра = МинимальнаяПериодичность.Кратность;
		СтрокаНабора.ПериодичностьОсмотра = МинимальнаяПериодичность.Периодичность;
		СтрокаНабора.ЕдиницаПериодичностиОсмотра = МинимальнаяПериодичность.ЕдиницаПериодичности;
		СтрокаНабора.ПредставлениеПериодичностиОсмотра = МинимальнаяПериодичность.Представление;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставленияФакторов()
	
	Представления = Новый Структура(
		"ВредныеФакторыПолноеПредставление,
		|ВидыРаботПолноеПредставление,
		|ВредныеФакторыКодыПредставление,
		|ВидыРаботКодыПредставление");
	
	Представления.ВредныеФакторыПолноеПредставление = "";
	Представления.ВидыРаботПолноеПредставление = "";
	Представления.ВредныеФакторыКодыПредставление = "";
	Представления.ВидыРаботКодыПредставление = "";
		
	Возврат Представления;
	
КонецФункции

Процедура ДополнитьПредставленияФакторов(Представления, ВыборкаФакторов)
	
	Если Не ЗначениеЗаполнено(ВыборкаФакторов.ВредныйФакторКод) И Не ЗначениеЗаполнено(ВыборкаФакторов.ВидРаботКод) Тогда
		Возврат;
	КонецЕсли;
	
	Разделитель = "," + Символы.НПП;
	ВредныйФакторКод = "";
	Если ЗначениеЗаполнено(ВыборкаФакторов.ВредныйФакторКод) Тогда
		ВредныйФакторКод = ВыборкаФакторов.ВредныйФакторКод + ".";
		Если ЗначениеЗаполнено(Представления["ВредныеФакторыКодыПредставление"]) Тогда
			Представления["ВредныеФакторыКодыПредставление"] = Представления["ВредныеФакторыКодыПредставление"] + Разделитель;
		КонецЕсли;
		Представления["ВредныеФакторыКодыПредставление"] = Представления["ВредныеФакторыКодыПредставление"] + ВредныйФакторКод;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаФакторов.ВредныйФакторНаименование) Тогда
		Если ЗначениеЗаполнено(Представления["ВредныеФакторыПолноеПредставление"]) Тогда
			Представления["ВредныеФакторыПолноеПредставление"] = Представления["ВредныеФакторыПолноеПредставление"] + Разделитель;
		КонецЕсли;
		Представления["ВредныеФакторыПолноеПредставление"] = Представления["ВредныеФакторыПолноеПредставление"] + ВредныйФакторКод + Символы.НПП + ВыборкаФакторов.ВредныйФакторНаименование;
	КонецЕсли;
	
	ВидРаботКод = "";
	Если ЗначениеЗаполнено(ВыборкаФакторов.ВидРаботКод) Тогда
		ВидРаботКод = ВыборкаФакторов.ВидРаботКод + ".";
		Если ЗначениеЗаполнено(Представления["ВидыРаботКодыПредставление"]) Тогда
			Представления["ВидыРаботКодыПредставление"] = Представления["ВидыРаботКодыПредставление"] + Разделитель;
		КонецЕсли;
		Представления["ВидыРаботКодыПредставление"] = Представления["ВидыРаботКодыПредставление"] + ВидРаботКод;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаФакторов.ВидРаботНаименование) Тогда
		Если ЗначениеЗаполнено(Представления["ВидыРаботПолноеПредставление"]) Тогда
			Представления["ВидыРаботПолноеПредставление"] = Представления["ВидыРаботПолноеПредставление"] + Разделитель;
		КонецЕсли;
		Представления["ВидыРаботПолноеПредставление"] = Представления["ВидыРаботПолноеПредставление"] + ВидРаботКод + Символы.НПП + ВыборкаФакторов.ВидРаботНаименование;
	КонецЕсли;
	
КонецПроцедуры

Функция МинимальнаяПериодичностьОсмотров(ВредныеФакторыВидыРабот) Экспорт
	
	ОписаниеПериодичности = ОписаниеПериодичностиОсмотров();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ВредныеФакторыВидыРабот);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВредныеФакторы.КратностьОсмотра КАК Кратность,
		|	ВредныеФакторы.ПериодичностьОсмотра КАК Периодичность,
		|	ВредныеФакторы.ЕдиницаПериодичностиОсмотра КАК ЕдиницаПериодичности
		|ИЗ
		|	Справочник.ВредныеОпасныеПроизводственныеФакторы КАК ВредныеФакторы
		|ГДЕ
		|	ВредныеФакторы.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВидыРабот.КратностьОсмотра,
		|	ВидыРабот.ПериодичностьОсмотра,
		|	ВидыРабот.ЕдиницаПериодичностиОсмотра
		|ИЗ
		|	Справочник.ВидыРаботМедицинскихОсмотров КАК ВидыРабот
		|ГДЕ
		|	ВидыРабот.Ссылка В(&Ссылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ОписаниеПериодичности;
	КонецЕсли;
	
	МаксимальныйКоэффициент = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Коэффициент = Выборка.Кратность * ЧастейВГоду(Выборка.ЕдиницаПериодичности) / Выборка.Периодичность;
		Если Коэффициент > МаксимальныйКоэффициент Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеПериодичности, Выборка);
			МаксимальныйКоэффициент = Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПредставлениеПериодичности(ОписаниеПериодичности);
	
	Возврат ОписаниеПериодичности;
	
КонецФункции

Функция МинимальнаяПериодичность(ОписанияПериодичности)
	
	ОписаниеПериодичности = ОписаниеПериодичностиОсмотров();
	
	МаксимальныйКоэффициент = 0;
	Для Каждого Описание Из ОписанияПериодичности Цикл
		Коэффициент = Описание.Кратность * ЧастейВГоду(Описание.ЕдиницаПериодичности) / Описание.Периодичность;
		Если Коэффициент > МаксимальныйКоэффициент Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеПериодичности, Описание);
			МаксимальныйКоэффициент = Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПредставлениеПериодичности(ОписаниеПериодичности);
	
	Возврат ОписаниеПериодичности;
	
КонецФункции

Процедура ЗарегистрироватьОшибкуОбработкиМедицинскихОсмотров(ИнформацияОбОшибке, ПредставлениеОбработки)
	
	ИмяСобытия = НСтр("ru = 'Медицинские осмотры'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при обработке медицинских осмотров. Обратитесь к администратору.
              |Техническая информация:
              |При выполнении операции «%1» возникает
              |%2'"), 
		ПредставлениеОбработки,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#Область ВредныеФакторыВидыРабот

Процедура СохранитьПрежнююПериодичностьВредногоФактораВидаРабот(ФакторОбъект) Экспорт
	
	Если ФакторОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если ФакторОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПериодичности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФакторОбъект.Ссылка, СравниваемыеПоляПериодичности());
	
	ПрежняяПериодичность = МедицинскиеОсмотрыКлиентСервер.ОписаниеПериодичностиОсмотров();
	МедицинскиеОсмотрыКлиентСервер.ЗаполнитьОписаниеПериодичностиПоВредномуФакторуВидуРабот(ПрежняяПериодичность, РеквизитыПериодичности);
	
	ФакторОбъект.ДополнительныеСвойства.Вставить("ПрежняяПериодичность", ПрежняяПериодичность);

КонецПроцедуры

Процедура ПроверитьИзменениеПериодичностиВредногоФактора(ВредныйФакторОбъект) Экспорт
	
	Если Не ОбновлятьПериодичностьОсмотровПоВредномуФакторуВидуРабот(ВредныйФакторОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьПериодичностьОсмотровПозицийПоВредномуФактору(ВредныйФакторОбъект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьИзменениеПериодичностиВидаРабот(ВидРаботОбъект) Экспорт
	
	Если Не ОбновлятьПериодичностьОсмотровПоВредномуФакторуВидуРабот(ВидРаботОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьПериодичностьОсмотровПозицийПоВидуРабот(ВидРаботОбъект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОбновлятьПериодичностьОсмотровПоВредномуФакторуВидуРабот(ФакторОбъект)
	
	Если Не ФакторОбъект.ДополнительныеСвойства.Свойство("ПрежняяПериодичность") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрежняяПериодичность = ФакторОбъект.ДополнительныеСвойства["ПрежняяПериодичность"];
	
	НоваяПериодичность = МедицинскиеОсмотрыКлиентСервер.ОписаниеПериодичностиОсмотров();
	МедицинскиеОсмотрыКлиентСервер.ЗаполнитьОписаниеПериодичностиПоВредномуФакторуВидуРабот(НоваяПериодичность, ФакторОбъект);

	Если ОбщегоНазначения.КоллекцииИдентичны(НоваяПериодичность, ПрежняяПериодичность) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СравниваемыеПоляПериодичности()
	
	Возврат 
		"КратностьОсмотра, 
		|ПериодичностьОсмотра, 
		|ЕдиницаПериодичностиОсмотра, 
		|ПредставлениеПериодичностиОсмотра";
	
КонецФункции

Функция ПредставлениеПериодичности(Кратность, Периодичность, ЕдиницаПериодичности) Экспорт
	
	Если Не ЗначениеЗаполнено(Кратность) Или Не ЗначениеЗаполнено(Периодичность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КратностьПредставление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';%1 раз;;%1 раза;%1 раз;'"), 
		Кратность);
		
	ШаблонЕдиницыПериодичности = "";
	Если ЕдиницаПериодичности = Перечисления.Периодичность.Год Тогда
		ШаблонЕдиницыПериодичности = НСтр("ru=';%1 год;;%1 года;%1 лет;'");
	ИначеЕсли ЕдиницаПериодичности = Перечисления.Периодичность.Полугодие Тогда
		ШаблонЕдиницыПериодичности = НСтр("ru=';%1 полугодие;;%1 полугодия;%1 полугодий;'");
	ИначеЕсли ЕдиницаПериодичности = Перечисления.Периодичность.Квартал Тогда
		ШаблонЕдиницыПериодичности = НСтр("ru=';%1 квартал;;%1 квартала;%1 кварталов;'");
	ИначеЕсли ЕдиницаПериодичности = Перечисления.Периодичность.Месяц Тогда
		ШаблонЕдиницыПериодичности = НСтр("ru=';%1 месяц;;%1 месяца;%1 месяцев;'");
	КонецЕсли;
	
	Если Периодичность = 1 Тогда
		ШаблонЕдиницыПериодичности = СтрЗаменить(ШаблонЕдиницыПериодичности, "%1", "");
	КонецЕсли;
	
	ПериодичностьПредставление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		ШаблонЕдиницыПериодичности, 
		Периодичность);
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 в %2'"), 
		КратностьПредставление, 
		ПериодичностьПредставление);
		
	Возврат Представление;
		
КонецФункции

Функция ПериодичностьОсмотровПоВреднымФакторам(ВредныеФакторы) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВредныеФакторы, "ПредставлениеПериодичностиОсмотра");
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОбновитьПериодическиеОсмотрыУволенныхСотрудников(ПараметрыОбновления) Экспорт
	
	// Составляем перечень позиций для медосмотров.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Позиции.Позиция КАК Позиция
		|ИЗ
		|	РегистрСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания КАК Позиции";
	ПозицииМедосмотров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Позиция");
	
	Если ПозицииМедосмотров.Количество() = 0 Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	// Получаем уволенных сотрудников.
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.КадровыеДанные = "ФизическоеЛицо, ГоловнаяОрганизация";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыЗапроса.Отборы, "ДолжностьПоШтатномуРасписанию", "В", ПозицииМедосмотров);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыЗапроса.Отборы, "ДатаУвольнения", "<>", Дата(1, 1, 1));
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Ложь, ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаОбновления = НоваяТаблицаОбновлениеПериодическихОсмотров();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОбновления.Добавить(), Выборка);
	КонецЦикла;
	
	Если ТаблицаОбновления.Количество() = 0 Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьОбновлениеПериодическихОсмотров(ТаблицаОбновления);
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
	ФизическиеЛица = ТаблицаОбновления.ВыгрузитьКолонку("ФизическоеЛицо");
	ЗапуститьОбновлениеПериодическихОсмотров(, ФизическиеЛица);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
