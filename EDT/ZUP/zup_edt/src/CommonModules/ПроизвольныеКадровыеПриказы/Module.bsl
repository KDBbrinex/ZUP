
////////////////////////////////////////////////////////////////////////////////
// Подсистема «Произвольные кадровые приказы».
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьИспользованиеПроизвольныхКадровыхПриказов() Экспорт
	
	// Включаем использование Произвольных кадровых приказов в том случае, 
	// если есть хотя бы один шаблон.
	
	ИспользоватьПроизвольныеКадровыеПриказы = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ШаблоныПроизвольныхКадровыхПриказов КАК ШаблоныПроизвольныхКадровыхПриказов
	|ГДЕ
	|	НЕ ШаблоныПроизвольныхКадровыхПриказов.ПометкаУдаления
	|	И НЕ ШаблоныПроизвольныхКадровыхПриказов.ВАрхиве
	|	И НЕ ШаблоныПроизвольныхКадровыхПриказов.ЭтоГруппа";
	
	ИспользоватьПроизвольныеКадровыеПриказы = Не Запрос.Выполнить().Пустой();
	
	ТекущееИспользование = Константы.ИспользоватьПроизвольныеКадровыеПриказы.Получить();
	Если ТекущееИспользование <> ИспользоватьПроизвольныеКадровыеПриказы Тогда
		Константы.ИспользоватьПроизвольныеКадровыеПриказы.Установить(ИспользоватьПроизвольныеКадровыеПриказы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПодменюПроизвольныеКадровыеПриказы(ОписаниеМеню) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизвольныеКадровыеПриказы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ШаблоныПроизвольныхКадровыхПриказов) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппыКоманд = Новый Соответствие;
	
	ПунктыМеню = Новый Массив;
	
	ПунктМенюПроизвольныеКадровыеПриказы = СотрудникиФормы.РазделМеню(НСтр("ru='Произвольные кадровые приказы'"), ПунктыМеню);
	ОписаниеМеню.Пункты.Добавить(ПунктМенюПроизвольныеКадровыеПриказы);
		
	ТаблицаВидовДокументов = Справочники.ШаблоныПроизвольныхКадровыхПриказов.ТаблицаВидовДокументов();
   	Для Каждого СтрокаТаблицы Из ТаблицаВидовДокументов Цикл
		НоваяКомандаСозданияДокумента(СтрокаТаблицы.ВидДокумента, СтрокаТаблицы.Представление, СтрокаТаблицы.Родитель, ПунктМенюПроизвольныеКадровыеПриказы, ГруппыКоманд, ОписаниеМеню);
	КонецЦикла;	
			
КонецПроцедуры	

Процедура НоваяКомандаСозданияДокумента(ВидДокумента, Заголовок, Подменю, ПунктМенюПроизвольныеКадровыеПриказы, ГруппыКоманд, ОписаниеМеню)
	
	ИдентификаторВидаДокумента = ВидДокумента.УникальныйИдентификатор();
	
	ГруппаКнопок = ПодменюСозданияДокументов(Подменю, ПунктМенюПроизвольныеКадровыеПриказы, ГруппыКоманд, ОписаниеМеню);
			
	ГруппаКнопок.Пункты.Добавить(ЗарплатаКадры.ПунктМеню(
			Заголовок, "КомандаВводаНаОсновании_Документы_ПроизвольныйКадровыйПриказ__" + СтрЗаменить(Строка(ИдентификаторВидаДокумента), "-", "_"), "Подключаемый_ОформитьНаОсновании"));
	
КонецПроцедуры

Функция ПодменюСозданияДокументов(ПодменюСсылка, ПунктМенюПроизвольныеКадровыеПриказы, ГруппыКоманд, ОписаниеМеню)
	
	Если Не ЗначениеЗаполнено(ПодменюСсылка) Тогда
		Возврат ПунктМенюПроизвольныеКадровыеПриказы;
	КонецЕсли;
	
	Если ГруппыКоманд <> Неопределено Тогда
		ПодменюИмя = ГруппыКоманд.Получить(ПодменюСсылка);
		Если ПодменюИмя <> Неопределено Тогда
			Возврат НайтиПодменю(ПодменюИмя, ПунктМенюПроизвольныеКадровыеПриказы);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторЭлемента = ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита();
	
	ПодменюРодитель = ПодменюСозданияДокументов(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодменюСсылка, "Родитель"), ПунктМенюПроизвольныеКадровыеПриказы, ГруппыКоманд, ОписаниеМеню);
	
	ПунктыМеню = Новый Массив;

	ПунктМенюРодитель = СотрудникиФормы.РазделМеню(Строка(ПодменюСсылка), ПунктыМеню);
	ПодменюРодитель.Пункты.Добавить(ПунктМенюРодитель);

	ГруппыКоманд.Вставить(ПодменюСсылка, ПунктМенюРодитель);
	
	Возврат ПунктМенюРодитель;
	
КонецФункции

Функция НайтиПодменю(ПодменюИмя, Подменю)
	
	Индекс = Подменю.Пункты.Найти(ПодменюИмя);
	Если Индекс <> Неопределено Тогда
		Возврат Подменю.Пункты.Получить(Индекс);
	КонецЕсли;
	
	Для Каждого Пункт Из Подменю.Пункты Цикл
		
		Если Пункт.Вид = ВидГруппыФормы.Подменю Тогда
			Возврат НайтиПодменю(ПодменюИмя, Пункт);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПроизвольныйКадровыйПриказ);
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПроизвольныйКадровыйПриказ", "Дата",	"КадровыйУчет", "Организация");	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПроизвольныйКадровыйПриказ") Тогда
		ЗаполнитьДокументПремия(ДокументОбъект, ДанныеЗаполнения);
		ЗаполнитьДокументМатериальнаяПомощь(ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриДобавленииКомандПечати
Процедура ПриДобавленииКомандПечати(ИмяФормы, КомандыПечати) Экспорт

	Если СтрНайти(ИмяФормы, Метаданные.Документы.ПроизвольныйКадровыйПриказ.ПолноеИмя()) = 0 Тогда
		Возврат;
	КонецЕсли;

	ПечатныеФормы = Справочники.ШаблоныПроизвольныхКадровыхПриказов.ПечатныеФормы();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПечатныеФормы, "ПечатнаяФорма");
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		НайденныеШаблоны = ПечатныеФормы.НайтиСтроки(
			Новый Структура("ПечатнаяФорма", КомандаПечати.ДополнительныеПараметры.Ссылка));
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати, "Шаблон", ОбщегоНазначения.ВыгрузитьКолонку(НайденныеШаблоны, "ШаблонДокумента"), ВидСравнения.ВСписке);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4eb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПроизвольныйКадровыйПриказ);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ПроизвольныйКадровыйПриказПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПроизвольныйКадровыйПриказ, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДокументПремия(ДокументОбъект, ДанныеЗаполнения)
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.Премия") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументСотрудникиВТабличнойЧасти(
		ДокументОбъект, ДанныеЗаполнения, Метаданные.Документы.Премия.ТабличныеЧасти.Начисления.Имя);

КонецПроцедуры

Процедура ЗаполнитьДокументМатериальнаяПомощь(ДокументОбъект, ДанныеЗаполнения)
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.МатериальнаяПомощь") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументСотрудникиВТабличнойЧасти(
		ДокументОбъект, ДанныеЗаполнения, Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.Начисления.Имя);

КонецПроцедуры

Процедура ЗаполнитьДокументСотрудникиВТабличнойЧасти(ДокументОбъект, ДанныеЗаполнения, ИмяТабличнойЧасти)

	ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения;
	
	Если ДанныеЗаполнения.Шаблон.НесколькоСотрудников Тогда
		ДокументОбъект[ИмяТабличнойЧасти].Загрузить(ДанныеЗаполнения.Сотрудники.Выгрузить());
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеЗаполнения.Сотрудник) Тогда
		ДокументОбъект[ИмяТабличнойЧасти].Добавить().Сотрудник = ДанныеЗаполнения.Сотрудник;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
