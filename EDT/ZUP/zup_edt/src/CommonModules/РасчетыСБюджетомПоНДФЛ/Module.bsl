#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "РасчетыСБюджетомПоНДФЛ.ВключитьУчетРасчетовСБюджетомПоНДФЛ";
	
КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf8f-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НачальныеРасчетыСБюджетомПоНДФЛ);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.НачальныеРасчетыСБюджетомПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.НачальныеРасчетыСБюджетомПоНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.РасчетыСБюджетомПоНДФЛ, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|Документ.НачальныеРасчетыСБюджетомПоНДФЛ.Чтение.Организации
		|Документ.НачальныеРасчетыСБюджетомПоНДФЛ.Изменение.Организации
		|Справочник.НачальныеРасчетыСБюджетомПоНДФЛПрисоединенныеФайлы.Чтение.Организации
		|Справочник.НачальныеРасчетыСБюджетомПоНДФЛПрисоединенныеФайлы.Изменение.Организации
		|РегистрНакопления.РасчетыСБюджетомПоНДФЛ.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти


// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.НачальныеРасчетыСБюджетомПоНДФЛ);
	
КонецПроцедуры

Процедура РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛКПеречислению(Движения, Отказ) Экспорт

	// Проверка использования функционала РасчетыСБюджетомПоНДФЛ
	Если Не ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНовыеЗаписи = Ложь;
		
	Если Движения.Найти("НДФЛКПеречислению") <> Неопределено И Движения.НДФЛКПеречислению.Количество() > 0  Тогда
		
		Организация  = Движения.НДФЛКПеречислению[0].Организация;
		ДатаОперации = Движения.НДФЛКПеречислению[0].Период;
		
		Если ДатаОперацииМеньшеДатыВводаОстатков(Организация, ДатаОперации) Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого СтрокаДвижений Из Движения.НДФЛКПеречислению Цикл
			НоваяСтрока = Движения.РасчетыСБюджетомПоНДФЛ.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
			НоваяСтрока.ДатаОперации = НоваяСтрока.Период;
			Если ЗначениеЗаполнено(СтрокаДвижений.КрайнийСрокУплаты) Тогда
				НоваяСтрока.Период = СтрокаДвижений.КрайнийСрокУплаты;
			КонецЕсли;
			ЕстьНовыеЗаписи = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНовыеЗаписи Тогда
		Движения.РасчетыСБюджетомПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛПеречисленный(Движения, Отказ) Экспорт

	// Проверка использования функционала РасчетыСБюджетомПоНДФЛ
	Если Не ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНовыеЗаписи = Ложь;
		
	Если Движения.Найти("НДФЛПеречисленный") <> Неопределено И Движения.НДФЛПеречисленный.Количество() > 0 Тогда
		
		Организация  = Движения.НДФЛПеречисленный[0].Организация;
		ДатаОперации = Движения.НДФЛПеречисленный[0].Период;
		
		Если ДатаОперацииМеньшеДатыВводаОстатков(Организация, ДатаОперации) Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого СтрокаДвижений Из Движения.НДФЛПеречисленный Цикл
			НоваяСтрока = Движения.РасчетыСБюджетомПоНДФЛ.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
			НоваяСтрока.ДатаОперации = НоваяСтрока.Период;
			ЕстьНовыеЗаписи = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНовыеЗаписи Тогда
		Движения.РасчетыСБюджетомПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура регистрирует факт неудачи при попытке выплаты зарплаты документом.
// При этом ранее удержанные при выплате налоги "сторнируются".
//
// Параметры:
//		Движения 		- КоллекцияДвижений, коллекция наборов записей движений ведомости.
//		Отказ			- признак отказа выполнения операции.
//		Документ		- ссылка на документ, которым ранее была зарегистрирована выплата зарплаты.
//		ФизическиеЛица	- массив ссылок на физические лица.
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак "Отказ" выставляется в Истина.
//
Процедура ЗарегистрироватьНевыплатуДокументом(Движения, Отказ, Документ, ФизическиеЛица) Экспорт
	
	// Проверка использования функционала РасчетыСБюджетомПоНДФЛ
	Если Не ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ") Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыНакопления.РасчетыСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	НаборЗаписей.Прочитать();
	
	НаборЗаписейСторно = НаборЗаписей.ВыгрузитьКолонки();
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ФизическиеЛица.Найти(ЗаписьНабора.ФизическоеЛицо) <> Неопределено Тогда
			СтрокаСторно = НаборЗаписейСторно.Добавить() ;
			ЗаполнитьЗначенияСвойств(СтрокаСторно, ЗаписьНабора);
			СтрокаСторно.Сумма = - ЗаписьНабора.Сумма;
		КонецЕсли
	КонецЦикла;
	
	Движения.РасчетыСБюджетомПоНДФЛ.Загрузить(НаборЗаписейСторно);
	Движения.РасчетыСБюджетомПоНДФЛ.Записывать= Истина;
	
КонецПроцедуры

Процедура ПеренестиВыплаченныйДоходНаДату(Движения, Ведомость, ДатаОперации, Отказ) Экспорт
	
	// Проверка использования функционала РасчетыСБюджетомПоНДФЛ
	Если Не ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ведомость);
	Запрос.УстановитьПараметр("НепереносимыеКатегорииДохода", Перечисления.КатегорииДоходовНДФЛ.СФиксированнойДатойПолученияДохода());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСБюджетомПоНДФЛ.*
	|ИЗ
	|	РегистрНакопления.РасчетыСБюджетомПоНДФЛ КАК РасчетыСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыСБюджетомПоНДФЛ.Регистратор = &Регистратор
	|	И РасчетыСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Организация = Неопределено;
		Пока Выборка.Следующий() Цикл
			
			НовоеДвижение = Движения.РасчетыСБюджетомПоНДФЛ.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Выборка, , "Регистратор");
			НовоеДвижение.Сумма = - НовоеДвижение.Сумма;
			Если Организация = Неопределено Тогда
				Организация = НовоеДвижение.Организация
			КонецЕсли;
			
			НовоеДвижение = Движения.РасчетыСБюджетомПоНДФЛ.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Выборка, , "Регистратор");
			НовоеДвижение.Период = Неопределено;
			НовоеДвижение.ДатаОперации = ДатаОперации;
			
		КонецЦикла;
		
		ТаблицаДвижений = Движения.РасчетыСБюджетомПоНДФЛ.Выгрузить();
		ТаблицаДвижений.Колонки.Период.Имя 		 = "КрайнийСрокУплаты";
		ТаблицаДвижений.Колонки.ДатаОперации.Имя = "Период";
		УчетНДФЛ.ПроставитьКрайнийСрокУплаты(ТаблицаДвижений, Организация);
		ТаблицаДвижений.Колонки.Период.Имя 				= "ДатаОперации";
		ТаблицаДвижений.Колонки.КрайнийСрокУплаты.Имя 	= "Период";
		
		Движения.РасчетыСБюджетомПоНДФЛ.Загрузить(ТаблицаДвижений);
		Движения.РасчетыСБюджетомПоНДФЛ.Записывать= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Перенос сроков уплаты налога из-за нерабочих дней карантина по коронавирусу 2020 года.
//
// Параметры:
//		Организация		- 
//		ДатаНачала		- дата -
//		ДатаОкончания	- дата -
//		ДниУплатыНалога	- соответствие.
//
Процедура ПересмотретьСрокиУплаты(Организация, ДатаНачала, ДатаОкончания, ДниУплатыНалога) Экспорт
	
	УчетНДФЛ.ВыполнитьПересмотрСроковУплатыВРегистре(Организация, ДатаНачала, ДатаОкончания, ДниУплатыНалога, "РасчетыСБюджетомПоНДФЛ", "ДатаОперации", "Период");
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыСБюджетомПоНДФЛ", "ДатаОперации", "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачальныеРасчетыСБюджетомПоНДФЛ", "ДатаОстатков", "НДФЛ", "Организация");
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РасчетыСБюджетомПоНДФЛ);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РасчетыСБюджетомПоНДФЛ, "РасчетыСБюджетомПоНДФЛ");
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("РаботаВБюджетномУчреждении");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РасчетыСБюджетомПоНДФЛ, "РасчетыСБюджетомПоНДФЛПоИсточникам");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	РаботаВХозрасчетнойОрганизации = ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации();
	Если РаботаВХозрасчетнойОрганизации = Неопределено Тогда
		РаботаВХозрасчетнойОрганизации = ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации");
	КонецЕсли;

	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");

	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РасчетыСБюджетомПоНДФЛ, "РасчетыСБюджетомПоНДФЛПоСтатьям");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = РаботаВХозрасчетнойОрганизации;
	
	// Размещение в подразделе НДФЛ.
	ПодразделРазмещение = Метаданные.Подсистемы.НалогиИВзносы.Подсистемы.НДФЛ;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РасчетыСБюджетомПоНДФЛ, "РасчетыСБюджетомПоНДФЛ"); 
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(ПодразделРазмещение);
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РасчетыСБюджетомПоНДФЛ, "РасчетыСБюджетомПоНДФЛПоСтатьям"); 
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(ПодразделРазмещение);
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РасчетыСБюджетомПоНДФЛ, "РасчетыСБюджетомПоНДФЛПоИсточникам"); 
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(ПодразделРазмещение);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обслуживание обработки ПлатежиПоРезультатамРасчетаЗарплаты.

// Возвращает сведения об обязательствах по уплате налога после определенной даты.
//
// Параметры:
//		Организации 		- Массив, содержит ссылки на организации, по которым получаются данные.
//		ДатаАктуальности 	- Дата.
//
// Возвращаемое значение: Структура, содержит две таблицы
//		* Остатки  - Таблица значений с колонками
//			** Организация 					- СправочникСсылка.Организации
//			** РегистрацияВНалоговомОргане  - СправочникСсылка.РегистрацииВНалоговомОргане
//			** Сумма 						- Число.
//		* Обороты - таблица значений с колонками
//			** Дата 						- Дата
//			** Организация 					- СправочникСсылка.Организации
//			** РегистрацияВНалоговомОргане  - СправочникСсылка.РегистрацииВНалоговомОргане
//			** Приход - Число
//			** Расход - Число
//			** Сумма  - Число.
//
Функция ОбязательстваПоНДФЛДляПлатежейПоРезультатамРасчета(Организации, ДатаАктуальности) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаАктуальности + 86400);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСБюджетомПоНДФЛОстатки.Организация КАК Организация,
	|	РасчетыСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыСБюджетомПоНДФЛОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСБюджетомПоНДФЛ.Остатки(&ДатаОстатков, Организация В (&Организации)) КАК РасчетыСБюджетомПоНДФЛОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСБюджетомПоНДФЛ.Период КАК Дата,
	|	РасчетыСБюджетомПоНДФЛ.Организация КАК Организация,
	|	РасчетыСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Приход,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыСБюджетомПоНДФЛ.Сумма
	|		КОНЕЦ) КАК Расход,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ -РасчетыСБюджетомПоНДФЛ.Сумма
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСБюджетомПоНДФЛ КАК РасчетыСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыСБюджетомПоНДФЛ.Период > &ДатаАктуальности
	|	И РасчетыСБюджетомПоНДФЛ.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСБюджетомПоНДФЛ.Организация,
	|	РасчетыСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыСБюджетомПоНДФЛ.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	РегистрацияВНалоговомОргане";
	Результат = Запрос.ВыполнитьПакет();
	
	ОстаткиОбороты = Новый Структура("Остатки,Обороты");
	ОстаткиОбороты.Остатки = Результат[0].Выгрузить();
	ОстаткиОбороты.Обороты = Результат[1].Выгрузить();
	
	Возврат ОстаткиОбороты;
	
КонецФункции


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ДатаОперацииМеньшеДатыВводаОстатков(Организация, ДатаОперации)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСБюджетомПоНДФЛ.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСБюджетомПоНДФЛ КАК РасчетыСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыСБюджетомПоНДФЛ.Организация = &Организация
	|	И РасчетыСБюджетомПоНДФЛ.ВводОстатков";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Остатки еще не введены.
		Возврат Ложь;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Период > ДатаОперации;
		
	КонецЕсли;

КонецФункции

Процедура ВключитьУчетРасчетовСБюджетомПоНДФЛ() Экспорт

	Если ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации() <> Неопределено Тогда
		Константы.ВестиРасчетыСБюджетомПоНДФЛ.Установить(Истина);
	КонецЕсли;

КонецПроцедуры

Функция ИмяФормыОтчетаРасчетыСБюджетомПоНДФЛ() Экспорт

	Возврат "Отчет.РасчетыСБюджетомПоНДФЛ.Форма";

КонецФункции 


#КонецОбласти
