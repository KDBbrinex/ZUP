////////////////////////////////////////////////////////////////////////////////
// Подсистема "КонфигурацииЗарплатаКадрыРасширенный".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	КонфигурацииЗарплатаКадры.ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры);
	ОбщиеПараметры.ИмяФормыПерсональныхНастроек = "ОбщаяФорма.ПерсональныеНастройки";	

КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов.
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		Модуль.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	КонецЕсли;
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие.ЭлектронноеОбучениеВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучениеЗарплатаКадрыРасширенный");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучение");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Чатботы");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// См. ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОбработками.
Процедура ОпределитьРазделыСДополнительнымиОбработками(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.Кадры);
	Разделы.Добавить(Метаданные.Подсистемы.Зарплата);
	Разделы.Добавить(Метаданные.Подсистемы.ВыплатыПеречисления);
	Разделы.Добавить(Метаданные.Подсистемы.НалогиИВзносы);
	Разделы.Добавить(Метаданные.Подсистемы.Отчетность);
	
КонецПроцедуры

// См. ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОтчетами.
Процедура ОпределитьРазделыСДополнительнымиОтчетами(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.Кадры);
	Разделы.Добавить(Метаданные.Подсистемы.Зарплата);
	Разделы.Добавить(Метаданные.Подсистемы.ВыплатыПеречисления);
	Разделы.Добавить(Метаданные.Подсистемы.НалогиИВзносы);
	Разделы.Добавить(Метаданные.Подсистемы.Отчетность);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом

// См. ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииСокращенногоНаименованияКонфигурации.
Процедура ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование) Экспорт
	
	СокращенноеНаименование = КраткоеНазваниеПрограммы() + " " + Лев(Метаданные.Версия, 3);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ИнтернетПоддержкаПользователей.Новости

// См. ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории.
Процедура ЗначениеПредопределеннойКатегории(Категория, Значение) Экспорт
	Если ТипЗнч(Категория) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		КодВРег = ВРег(СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Категория, "Код")));
	ИначеЕсли ТипЗнч(Категория) = Тип("Строка") Тогда
		КодВРег = ВРег(СокрЛП(Категория));
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.Новости

// РегламентированнаяОтчетность

// См. РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации.
Функция ИДКонфигурации() Экспорт
	
	Конфигурация = СведенияОКонфигурации();
	
	Если Конфигурация.Хозрасчетная Тогда
		Возврат "ЗУП";
	ИначеЕсли Конфигурация.Бюджетная Тогда
		Возврат "ЗГУ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы.
Функция КраткоеНазваниеПрограммы() Экспорт
	ИДКонфигурации = ИДКонфигурации();
	Если Не ЗначениеЗаполнено(ИДКонфигурации) Тогда
		Возврат "";
	КонецЕсли;
	
	Постфикс = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Постфикс = " КОРП";
	КонецЕсли;
	
	Возврат "1С:" + ИДКонфигурации + Постфикс;
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьУИДКонфигурации.
Процедура ПолучитьУИДКонфигурации(УИДКонфигурации) Экспорт
	
	Конфигурация = СведенияОКонфигурации();
	
	Если Конфигурация.Хозрасчетная Тогда
		УИДКонфигурации = "4759bb58-0ce1-11df-85fa-001b24e002fe";
	ИначеЕсли Конфигурация.Бюджетная Тогда
		УИДКонфигурации = "bd688976-15b9-11e1-82b8-001b24e002fe";
	КонецЕсли;
	
КонецПроцедуры

// Конец РегламентированнаяОтчетность

// См. ОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата
Процедура ПриПолученииДоступныхВерсийФормата(ВерсииФормата) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиУниверсальныйФормат");
		Модуль.ПриПолученииДоступныхВерсийФормата(ВерсииФормата);
	КонецЕсли;
	
КонецПроцедуры

// Конец ОбменДаннымиПереопределяемый

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ОрганизацииПрисоединенныеФайлы, Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ЗаполнитьСпискиСОграничениемДоступаВзаимодействий(Списки);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ЗаполнитьОграниченияДоступаВзаимодействий(Список, Ограничение);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ОписаниеПрофиля = ОписаниеПрофиляУправлениеДатамиЗапретаИзменения();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

// Обслуживание подсистемы УправлениеДоступом
// см. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
//
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ПриЗаполненииВидовДоступа(ВидыДоступа);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОписаниеПрофиля(ОписаниеПрофиля) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИдентификацияПриложения

// Подробнее см. ЗарплатаКадрыРасширенный.ИдентификацияПриложенияДляGoogle()
Процедура ПриОпределенииИдентификацииПриложенияДляGoogle(ИдентификаторПриложения) Экспорт
	
	Конфигурация = СведенияОКонфигурации();
	
	Если Конфигурация.Корпоративная Тогда
		Если Конфигурация.Хозрасчетная Тогда
			ИдентификаторПриложения.client_id		= "343079858966-v45dvp0falnq4ko8vfta1cu68d7f35nc.apps.googleusercontent.com";
			ИдентификаторПриложения.client_secret	= "6Ezbx1cJUyYg3UT1uhKgY1RB";
		ИначеЕсли Конфигурация.Бюджетная Тогда
			ИдентификаторПриложения.client_id		= "1095591915921-jf55iolc9n1oibefrcmuum7lomqhnr2o.apps.googleusercontent.com";
			ИдентификаторПриложения.client_secret	= "W8iSq26cm5lic3XrAlSCyNW6";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Подробнее см. ЗарплатаКадрыРасширенный.ИдентификацияПриложенияДляHeadHunter()
Процедура ПриОпределенииИдентификацииПриложенияДляHeadHunter(ИдентификаторПриложения) Экспорт
	
	Конфигурация = СведенияОКонфигурации();
	
	Если Конфигурация.Корпоративная Тогда
		Если Конфигурация.Хозрасчетная Тогда
			ИдентификаторПриложения.client_id		= "LP0NMCI0VMIFIP6FTE9J4GB6O2JPD55DKH8S3MFF5QRI2MPIQCBUM1N1F5HG127C";
			ИдентификаторПриложения.client_secret	= "KQMUC6DFB77IH09PHMML8PJD7BVH1QA29SB2TADO50M41N667OTFR7NH38EGPPVQ";
			ИдентификаторПриложения.redirect_uri	= "https://oauth-integration.1c.ru/hrmcorp-hhru/";
		ИначеЕсли Конфигурация.Бюджетная Тогда
			ИдентификаторПриложения.client_id		= "S05RUDFV7CSO1CKSL4DF7SSUCS2OLBQ7VELGG9D4IABJ02TIJV1DIVS2ATMAUM86";
			ИдентификаторПриложения.client_secret	= "RUSJ04JAHQ7J3O732QRFRV9L26OLH1QDQ2RBC82EHTPSUN5BLK2FOGG1ARC4JVE6";
			ИдентификаторПриложения.redirect_uri	= "https://oauth-integration.1c.ru/statehrmcorp-hhru/";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Подробнее см. ЗарплатаКадрыРасширенный.ИдентификацияПриложенияДляZarplata()
Процедура ПриОпределенииИдентификацииПриложенияДляZarplata(ИдентификаторПриложения) Экспорт
	
	Конфигурация = СведенияОКонфигурации();
	
	Если Конфигурация.Корпоративная Тогда
		Если Конфигурация.Хозрасчетная Тогда
			ИдентификаторПриложения.client_id		= "30";
			ИдентификаторПриложения.client_secret	= "5Eo1lHDFcFAouWRr3inxvgQB2Uyrgl/DG3vy9apyJxOU2hmfbAMhcCSm";
			ИдентификаторПриложения.redirect_uri	= "https://oauth-integration.1c.ru/hrmcorp-zarplataru/";
		ИначеЕсли Конфигурация.Бюджетная Тогда
			ИдентификаторПриложения.client_id		= "31";
			ИдентификаторПриложения.client_secret	= "bd1qN9iC5HaUtWxVOnvanS646FSR1xd211Y7KRx1QOfolykTWvFaXX7s";
			ИдентификаторПриложения.redirect_uri	= "https://oauth-integration.1c.ru/statehrmcorp-zarplataru/";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БазовыйКонтракт

// Возвращает идентификатор интернет-поддержки подсистемы ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры.
//
// Возвращаемое значение:
//   Строка - Идентификатор подсистемы ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры.
//
Функция ИдентификаторИнтернетПоддержки() Экспорт
	Конфигурация = СведенияОКонфигурации();
	
	Если Конфигурация.Хозрасчетная Тогда
		Если Конфигурация.Базовая Тогда
			Возврат "HRMBase";
		ИначеЕсли Конфигурация.Корпоративная Тогда
			Возврат "HRMCorp";
		Иначе
			Возврат "HRM";
		КонецЕсли;
	ИначеЕсли Конфигурация.Бюджетная Тогда
		Если Конфигурация.Базовая Тогда
			Возврат "StateHRMBase";
		ИначеЕсли Конфигурация.Корпоративная Тогда
			Возврат "StateHRMCorp";
		Иначе
			Возврат "StateHRM";
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонфигурацииЗарплатаКадры.ИдентификаторИнтернетПоддержки();
КонецФункции

#КонецОбласти

// Предназначена для определения необходимости использования структуры предприятия для отражения в учете.
//
// Параметры: 
//	Использование - тип булево
//
Процедура ОпределитьИспользованиеСтруктурыПредприятияДляОтраженияВРегламентированномУчете(Использование) Экспорт
	
	ИспользуетсяОбменУправлениеПредприятием2 = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ИспользуетсяОбменУправлениеПредприятием2 = Модуль.ИспользуетсяОбменУправлениеПредприятием2();
	КонецЕсли;
	
	Если ИспользуетсяОбменУправлениеПредприятием2 Тогда
		Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазрешитьОтправкуВБанкОтдельнойВедомости(Использование) Экспорт
	
	ИспользуетсяОбменУправлениеПредприятием2 = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиУниверсальныйФормат");
		
		УстановитьПривилегированныйРежим(Истина);
		ИспользуетсяОбменУправлениеПредприятием2 = Модуль.ИспользуетсяОбменУправлениеПредприятием2Версии13();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ИспользуетсяОбменУправлениеПредприятием2 Тогда
		Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	// При переходе на КОРП вариант поставки..
	ПриПереходеНаКОРПВариантПоставки(Обработчики);
	
КонецПроцедуры

// Возникает при обработке данных выбора организации для определения действия с управленческой организацией по умолчанию.
//
// Параметры:
//  ПоказыватьУправленческуюОрганизацию	 - Булево, Неопределено	 - определяет отображение управленческой организации
//  	в полях выбора и списках по умолчанию, если не задано явно.
//
Процедура ПриОпределенииПоказыватьУправленческуюОрганизациюПоУмолчанию(ПоказыватьУправленческуюОрганизацию) Экспорт
	ПоказыватьУправленческуюОрганизацию = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиПользователей

// Переопределяет настройки интерфейса, устанавливаемые для новых пользователей.
// Подробнее см. ПользователиПереопределяемый.ПриУстановкеНачальныхНастроек.
//
Процедура ПриУстановкеНачальныхНастроек(НачальныеНастройки) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		// При большем количестве подсистем, не меняем вертикального расположения разделов.
		Возврат;
	КонецЕсли;
	
	// Устанавливаем горизонтальное расположение разделов.
	Если НачальныеНастройки.НастройкиТакси <> Неопределено Тогда
		НачальныеНастройки.НастройкиТакси = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// Возвращает описание профиля "Управление датами запрета изменения".
//
Функция ОписаниеПрофиляУправлениеДатамиЗапретаИзменения()
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляУправлениеДатамиЗапретаИзменения();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Управление датами запрета изменения'");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДатЗапретаИзменения");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ИдентификаторПрофиляУправлениеДатамиЗапретаИзменения()
	Возврат "a40f367d-e603-4cfb-a5d6-63acc4cde883";
КонецФункции

#КонецОбласти

Функция СведенияОКонфигурации()
	УстановитьПривилегированныйРежим(Истина);
	
	Сведения = Новый Структура("Хозрасчетная, Бюджетная, Базовая, Корпоративная");
	
	ЕстьУчетБюджетныхУчреждений     = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ЕстьУчетХозрасчетныхОрганизаций = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций");
	ЕстьКорпоративнаяПодсистема     = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы");
	ЕстьБазоваяПодсистема           = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия");
	
	Если ЕстьУчетБюджетныхУчреждений И ЕстьУчетХозрасчетныхОрганизаций И ЕстьКорпоративнаяПодсистема И ЕстьБазоваяПодсистема Тогда
		
		МодульЗарплатаКадрыБазоваяВерсия = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыБазоваяВерсия");
		
		Сведения.Хозрасчетная  = ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации");
		Сведения.Бюджетная     = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
		Сведения.Корпоративная = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
		Сведения.Базовая       = МодульЗарплатаКадрыБазоваяВерсия.ЭтоБазоваяВерсияКонфигурации();
		
	Иначе
		
		Сведения.Хозрасчетная  = ЕстьУчетХозрасчетныхОрганизаций;
		Сведения.Бюджетная     = ЕстьУчетБюджетныхУчреждений;
		Сведения.Корпоративная = ЕстьКорпоративнаяПодсистема;
		Сведения.Базовая       = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
		
	КонецЕсли;
	
	Возврат Сведения;
КонецФункции

Процедура ПриПереходеНаКОРПВариантПоставки(Обработчики)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	// Перечисляются имена обработчиков, которые необходимо выполнить при переходе на КОРП вариант поставки с других программ.
	ИменаОбработчиков = Новый Массив;
	ИменаОбработчиков.Добавить("ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы");
	
	// Регистрируем обработчики для всех предыдущих программ, с которых поддерживается обновление на КОРП вариант поставки.
	ИменаПредыдущихКонфигураций = Новый Массив;
	ИменаПредыдущихКонфигураций.Добавить("ЗарплатаИУправлениеПерсоналом");
	ИменаПредыдущихКонфигураций.Добавить("ЗарплатаИКадрыГосударственногоУчреждения");
	ИменаПредыдущихКонфигураций.Добавить("БЗКР");
	
	Для Каждого ПредыдущееИмяКонфигурации Из ИменаПредыдущихКонфигураций Цикл
		Для Каждого ИмяОбработчика Из ИменаОбработчиков Цикл
			Обработчик = Обработчики.Добавить();
			Обработчик.ПредыдущееИмяКонфигурации = ПредыдущееИмяКонфигурации;
			Обработчик.Процедура = ИмяОбработчика;
		КонецЦикла;
	КонецЦикла;
	
	// Выбираем обработчики начального заполнения вновь добавленных подсистем.
	ВсеОбработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	СобратьОбработчикиКОРППодсистем(ВсеОбработчики);
	ВсеОбработчики.Сортировать("ОбщиеДанные Убыв");
	ОбработчикиНачальногоЗаполнения = ВсеОбработчики.НайтиСтроки(Новый Структура("НачальноеЗаполнение", Истина));
	Для Каждого ПредыдущееИмяКонфигурации Из ИменаПредыдущихКонфигураций Цикл
		Для Каждого ОбработчикНачальногоЗаполнения Из ОбработчикиНачальногоЗаполнения Цикл
			Обработчик = Обработчики.Добавить();
			Обработчик.ПредыдущееИмяКонфигурации = ПредыдущееИмяКонфигурации;
			Обработчик.Процедура = ОбработчикНачальногоЗаполнения.Процедура;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СобратьОбработчикиКОРППодсистем(Обработчики)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		МодульКлючевыеПоказателиЭффективности.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
		МодульОперацииРасчетаЗарплаты = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		МодульОперацииРасчетаЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
		МодульЦепочкиДокументов = ОбщегоНазначения.ОбщийМодуль("ЦепочкиДокументов");
		МодульЦепочкиДокументов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение") Тогда
		МодульОбновлениеИнформационнойБазыБЭО = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыБЭО");
		МодульОбновлениеИнформационнойБазыБЭО.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		МодульАнализТекучестиПерсонала.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
		МодульРеестрГосслужащих = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащих");
		МодульРеестрГосслужащих.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления") Тогда
		МодульАнкетированиеУведомления = ОбщегоНазначения.ОбщийМодуль("АнкетированиеУведомления");
		МодульАнкетированиеУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления") Тогда
		МодульКонтрольСамочувствияУведомления = ОбщегоНазначения.ОбщийМодуль("КонтрольСамочувствияУведомления");
		МодульКонтрольСамочувствияУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.ДистанционнаяРабота") Тогда
		МодульДистанционнаяРабота = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРабота");
		МодульДистанционнаяРабота.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульКадровыйУчетОтпуска = ОбщегоНазначения.ОбщийМодуль("ОтпускаУведомления");
		МодульКадровыйУчетОтпуска.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников") Тогда
		МодульРегулярнаяОтправкаСотрудников = ОбщегоНазначения.ОбщийМодуль("РегулярнаяОтправкаСотрудников");
		МодульРегулярнаяОтправкаСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти