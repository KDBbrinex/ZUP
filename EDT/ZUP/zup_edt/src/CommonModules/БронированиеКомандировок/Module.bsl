#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаЗаявокБронированияКомандировок;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьБронированиеКомандировок;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПолучениеСостоянияБронированияКомандировок;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьБронированиеКомандировок;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОтправкаЗаявокБронированияКомандировок.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПолучениеСостоянияБронированияКомандировок.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправкаЗаявокБронированияКомандировок.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеСостоянияБронированияКомандировок.ИмяМетода);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// СтандартныеПодсистемы.ПрофилиБезопасности

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	ИнтеграцияSmartway.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПрофилиБезопасности

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.КомандировкиВСистемеБронирования, Истина);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НастройкиСистемыБронирования(СистемаБронирования) Экспорт
	
	Настройки = НовыеНастройкиСистемыБронирования();
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Строка(СистемаБронирования), "Логин");
	Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Строка(СистемаБронирования), "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Настройки);
	
КонецФункции

Функция ИспользуемаяСистемаБронирования() Экспорт
	Возврат Перечисления.СистемыБронированияКомандировок.Smartway;
КонецФункции

Функция ТаблицаФизическихЛиц(ВключатьВложенные = Истина) Экспорт
	
	ДанныеФизическихЛиц = Новый ТаблицаЗначений;
	ДанныеФизическихЛиц.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ДанныеФизическихЛиц.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеФизическихЛиц.Колонки.Добавить("СотрудникСсылка", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	ДанныеФизическихЛиц.Колонки.Добавить("Фамилия", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("Отчество", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("ФамилияЛатиницей", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("ИмяЛатиницей", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("ОтчествоЛатиницей", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	ДанныеФизическихЛиц.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
	ДанныеФизическихЛиц.Колонки.Добавить("Гражданство", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
	
	ДанныеФизическихЛиц.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("EMail", Новый ОписаниеТипов("Строка"));
	
	Если ВключатьВложенные Тогда
		ДанныеФизическихЛиц.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	КонецЕсли;
	
	Возврат ДанныеФизическихЛиц;
	
КонецФункции

Функция ТаблицаДокументовФизическихЛиц() Экспорт
	
	ДокументыФизическихЛиц = Новый ТаблицаЗначений;
	
	ДокументыФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДокументыФизическихЛиц.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
	ДокументыФизическихЛиц.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(28));
	ДокументыФизическихЛиц.Колонки.Добавить("СрокДействияДокумента", Новый ОписаниеТипов("Дата"));
	
	Возврат ДокументыФизическихЛиц;
	
КонецФункции

#Область ЗаявкаНаБронирование

Процедура ПроверитьЗаявкуНаБронированиеКомандировкиОбработкаПроверкиЗаполнения(ЗаявкаОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// Перечисляем все реквизиты, относящиеся к бронированию.
	// Будем удалять из удаляемых только те, которые нужно проверить.
	
	РеквизитыБронирования = Новый Массив;
	ЗаполнитьРеквизитыБронированияКомандировокДляПроверкиЗаполнения(РеквизитыБронирования);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеКомандировок") Тогда 
		// Удаляем все реквизиты.
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, РеквизитыБронирования);
		Возврат;
	КонецЕсли;
	
	ПроверитьЛичныеДанныеЗаявкиНаБронирование(ЗаявкаОбъект, Отказ, РеквизитыБронирования);
	ПроверитьДанныеБилетовЗаявкиНаБронирование(ЗаявкаОбъект, Отказ, РеквизитыБронирования);
	ПроверитьДанныеПроживанияЗаявкиНаБронирование(ЗаявкаОбъект, Отказ, РеквизитыБронирования);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, РеквизитыБронирования);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеЗаявкиНаБронированиеКомандировкиПриЗаписи(ЗаявкаОбъект, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЗаявкаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеКомандировок") Тогда 
		Возврат;
	КонецЕсли;
	
	// Задача метода - установить состояние бронирования Подготовлена в случае, 
	// если данные заявки требуется передать в систему бронирования
	// - заявка согласована и требуется бронирование,
	// - заявка согласована и произошли изменения бронирования (вплоть до отмены),
	// - заявка не согласована, но была согласована (нужно отменить бронирование).
	
	НоваяЗаявка = Ложь;
	СогласованиеОтменено = Ложь;
	СогласованиеУстановлено = Ложь;
	
	ПрежнийОбъект = Неопределено;
	ЗаявкаОбъект.ДополнительныеСвойства.Свойство("ПрежнийОбъект", ПрежнийОбъект);
	Если ПрежнийОбъект = Неопределено Тогда
		НоваяЗаявка = Истина;
	Иначе
		Если ЗаявкаОбъект.Статус <> ПрежнийОбъект.Статус Тогда
			Если ПрежнийОбъект.Статус = Перечисления.СтатусыЗаявокСотрудников.Согласовано Тогда
				СогласованиеОтменено = Истина;
			КонецЕсли;
			Если ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокСотрудников.Согласовано Тогда
				СогласованиеУстановлено = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СогласованиеОтменено Тогда
		Если ЗаявкаОбъект.БронироватьБилеты Или ЗаявкаОбъект.БронироватьПроживание 
			Или ПрежнийОбъект.БронироватьБилеты Или ПрежнийОбъект.БронироватьПроживание Тогда
			УстановитьСостояниеЗаявкиПодготовлена(ЗаявкаОбъект);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗаявкаОбъект.Статус <> Перечисления.СтатусыЗаявокСотрудников.Согласовано Тогда
		Возврат;
	КонецЕсли;
	
	Если СогласованиеУстановлено Или НоваяЗаявка Тогда
		Если ЗаявкаОбъект.БронироватьБилеты Или ЗаявкаОбъект.БронироватьПроживание Тогда
			УстановитьСостояниеЗаявкиПодготовлена(ЗаявкаОбъект);
		КонецЕсли;
	Иначе
		Если Не ДанныеБронированияЗаявкиИдентичны(ПрежнийОбъект, ЗаявкаОбъект) Тогда
			УстановитьСостояниеЗаявкиПодготовлена(ЗаявкаОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьОтправкуЗаявокБронированияКомандировок(ЗаявкаНаКомандировку = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеКомандировок") Тогда 
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(ЗаявкаНаКомандировку);
	
	ФоновыеЗадания.Выполнить("БронированиеКомандировок.ОтправитьЗаявкиБронированияКомандировок", Параметры);
	
КонецПроцедуры

Процедура ЗапуститьОтложеннуюОбработкуЗаявкиНаКомандировку(ЗаявкаНаКомандировку) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеКомандировок") Тогда 
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(ЗаявкаНаКомандировку);
	
	ФоновыеЗадания.Выполнить("БронированиеКомандировок.ВыполнитьОтложеннуюОбработкуЗаявкиНаБронирование", Параметры);
	
КонецПроцедуры

Процедура ВыполнитьОтложеннуюОбработкуЗаявкиНаБронирование(ЗаявкаНаКомандировку) Экспорт
	
	ОтправитьЗаявкиБронированияКомандировок(ЗаявкаНаКомандировку);
	ПолучитьСостоянияБронированияКомандировок(ЗаявкаНаКомандировку);
	
КонецПроцедуры

Функция ИдентификаторЗаявкиПоСсылке(ЗаявкаСсылка) Экспорт
	Возврат "rq" + СтрЗаменить(Строка(ЗаявкаСсылка.УникальныйИдентификатор()), "-", "_");
КонецФункции

Функция ЗаявкаНаКомандировкуПоИдентификатору(Идентификатор) Экспорт
	
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрНайти(Идентификатор, "rq") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Прав(Идентификатор, СтрДлина(Идентификатор) - 2);
	Идентификатор = СтрЗаменить(Строка(Идентификатор), "_", "-");
	
	Если СтрНайти(Идентификатор, "-") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	
	Ссылка = Документы.ЗаявкаНаКомандировку.ПолучитьСсылку(УникальныйИдентификатор);
	Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Процедура ПолучитьСостояниеБронированияПоЗаявке(ЗаявкаОбъект) Экспорт
	УстановитьСостояниеОтправлена(ЗаявкаОбъект);
	ПолучитьСостоянияБронированияКомандировок(ЗаявкаОбъект.Ссылка);
КонецПроцедуры

Процедура УстановитьСостояниеЗаявкиПодготовлена(ЗаявкаОбъект) Экспорт
	
	СостояниеЗаявки = Перечисления.СостоянияБронированияКомандировки.Подготовлено;
	УстановитьСостояниеБронированияЗаявкиНаКомандировку(ЗаявкаОбъект.Ссылка, СостояниеЗаявки, ЗаявкаОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоездки

Функция ДобавитьНовуюПоездку(ДанныеБронирования) Экспорт
	
	НоваяПоездка = ДанныеБронирования.Добавить();
	НоваяПоездка.Услуги = ТаблицаУслугБронирования();
	НоваяПоездка.ФизическиеЛица = ТаблицаФизическихЛиц();
	
	Возврат НоваяПоездка;
	
КонецФункции

Функция ДобавитьАвиаБилет(Заявка) Экспорт
	
	НоваяУслуга = Заявка.Услуги.Добавить();
	НоваяУслуга.ВидУслуги = Перечисления.ВидыУслугБронированияКомандировок.Билеты;
	НоваяУслуга.Содержимое = Новый Структура(
		"ВидТранспорта, 
		|Маршрут,
		|КлассПерелета");
	НоваяУслуга.Содержимое.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Самолет;
	НоваяУслуга.Содержимое.Маршрут = ТаблицаАвиаМаршрута();
	НоваяУслуга.ФизическиеЛица = ТаблицаФизическихЛиц();
	
	Возврат НоваяУслуга;
	
КонецФункции

Функция ДобавитьБилетНаПоезд(Заявка) Экспорт
	
	НоваяУслуга = Заявка.Услуги.Добавить();
	НоваяУслуга.ВидУслуги = Перечисления.ВидыУслугБронированияКомандировок.Билеты;
	НоваяУслуга.Содержимое = Новый Структура(
		"ВидТранспорта,
		|ПунктОтправления,
		|ПунктПрибытия,
		|ДатаОтправления");
	НоваяУслуга.Содержимое.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Поезд;
	НоваяУслуга.ФизическиеЛица = ТаблицаФизическихЛиц();
	
	Возврат НоваяУслуга;
	
КонецФункции

Функция ДобавитьУслугуПроживание(Заявка) Экспорт
	
	НоваяУслуга = Заявка.Услуги.Добавить();
	НоваяУслуга.ВидУслуги = Перечисления.ВидыУслугБронированияКомандировок.Проживание;
	НоваяУслуга.Содержимое = Новый Структура(
		"МестоПроживания,
		|ВидЗапроса,
		|ДатаЗаезда,
		|ДатаВыезда");
	НоваяУслуга.Содержимое.ВидЗапроса = Перечисления.ВидыЗапросаБронированияМестаПроживания.Гостиница;
	НоваяУслуга.ФизическиеЛица = ТаблицаФизическихЛиц();
	
	Возврат НоваяУслуга;
	
КонецФункции

Функция ДобавитьФизическоеЛицо(Услуга) Экспорт
	
	НовоеФизическоеЛицо = Услуга.ФизическиеЛица.Добавить();
	НовоеФизическоеЛицо.Документы = ТаблицаДокументовФизическихЛиц();
	
	Возврат НовоеФизическоеЛицо;
	
КонецФункции

#КонецОбласти

#Область МетодыАвтоподстановки

Процедура АвтоПодборАэропорта(Текст, ДанныеВыбора) Экспорт
	
	Аэропорты = ТаблицаАэропортов();
	ИнтеграцияSmartway.ЗаполнитьАэропортыПоПодстроке(Аэропорты, Текст);
	
	Если Аэропорты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицы Из Аэропорты Цикл
		ПредставлениеАэропорта = ПредставлениеАэропорта(СтрокаТаблицы.Город, СтрокаТаблицы.Страна, СтрокаТаблицы.Название, СтрокаТаблицы.Код);
		ЭлементАвтоПодбора = ЭлементАвтоПодбора();
		ЭлементАвтоПодбора.Код = СтрокаТаблицы.Код;
		ЭлементАвтоПодбора.Представление = ПредставлениеАэропорта;
		ДанныеВыбора.Добавить(ЭлементАвтоПодбора, ПредставлениеАэропорта);
	КонецЦикла;
	
КонецПроцедуры

Процедура АвтоПодборЖДСтанции(Текст, ДанныеВыбора) Экспорт
	
	Станции = ТаблицаЖДСтанций();
	ИнтеграцияSmartway.ЗаполнитьСтанцииПоПодстроке(Станции, Текст);
	
	Если Станции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицы Из Станции Цикл
		ЭлементАвтоПодбора = ЭлементАвтоПодбора();
		ЭлементАвтоПодбора.Код = СтрокаТаблицы.Код;
		ЭлементАвтоПодбора.Представление = СтрокаТаблицы.Название;
		ДанныеВыбора.Добавить(ЭлементАвтоПодбора, СтрокаТаблицы.Название);
	КонецЦикла;
	
КонецПроцедуры

Процедура АвтоПодборГостиницы(Текст, ДанныеВыбора) Экспорт
	
	Гостиницы = ТаблицаГостиниц();
	ИнтеграцияSmartway.ЗаполнитьГостиницыПоПодстроке(Гостиницы, Текст);
	
	Если Гостиницы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицы Из Гостиницы Цикл
		ПредставлениеГостиницы = ПредставлениеГостиницы(СтрокаТаблицы.Город, СтрокаТаблицы.Страна, СтрокаТаблицы.Название);
		ЭлементАвтоПодбора = ЭлементАвтоПодбора();
		ЭлементАвтоПодбора.Код = СтрокаТаблицы.Код;
		ЭлементАвтоПодбора.Представление = ПредставлениеГостиницы;
		ЭлементАвтоПодбора.ВидЗапроса = СтрокаТаблицы.ВидЗапроса;
		ДанныеВыбора.Добавить(ЭлементАвтоПодбора, ПредставлениеГостиницы);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеАэропорта(Город, Страна, Название, Код = Неопределено) Экспорт
	
	// АПК:1297-выкл Шаблон сообщения, не локализуется
	ШаблонПредставления = "[Город], [Страна] ([Название] - [Код])";
	Если Код = Неопределено Тогда
		ШаблонПредставления = "[Город], [Страна] ([Название])";
	КонецЕсли;
	
	Если Название = Город Тогда
		ШаблонПредставления = "[Город], [Страна] ([Код])";
		Если Код = Неопределено Тогда
			ШаблонПредставления = "[Город], [Страна]";
		КонецЕсли;
	КонецЕсли;
	// АПК:1297-вкл
	
	ПараметрыШаблона = Новый Структура(
		"Город,
		|Страна,
		|Название, 
		|Код");
	
	ПараметрыШаблона.Город = Город;
	ПараметрыШаблона.Страна = Страна;
	ПараметрыШаблона.Название = Название;
	ПараметрыШаблона.Код = Код;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПредставления, ПараметрыШаблона);
	
КонецФункции

Функция ПредставлениеГостиницы(Город, Страна, Название) Экспорт
	
	ШаблонПредставления = "[Название] ([Город])";
	Если Не ЗначениеЗаполнено(Название) Тогда
		ШаблонПредставления = "[Город], [Страна]";
	КонецЕсли;
	
	ПараметрыШаблона = Новый Структура(
		"Город,
		|Страна,
		|Название");
	
	ПараметрыШаблона.Город = Город;
	ПараметрыШаблона.Страна = Страна;
	ПараметрыШаблона.Название = Название;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПредставления, ПараметрыШаблона);
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ПолучитьОрганизацииСистемыБронированияДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	Организации = ОрганизацииСистемыБронирования(Параметры.СистемаБронирования);
	
	ПоместитьВоВременноеХранилище(Организации, АдресРезультата);
	
КонецПроцедуры

Процедура ПолучитьРезультатыБронированияПоЗаявкеДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ЗаявкаСсылка = Параметры.ЗаявкаСсылка;
	СистемаБронирования = Параметры.СистемаБронирования;
	
	РезультатБронирования = РезультатыБронированияЗаявки(ЗаявкаСсылка, СистемаБронирования);
	
	ПоместитьВоВременноеХранилище(РезультатБронирования, АдресРезультата);
	
КонецПроцедуры

Процедура ПолучитьПодтверждениеБронированияДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ИдентификаторБрони = Параметры.ИдентификаторБрони;
	СистемаБронирования = Параметры.СистемаБронирования;
	
	ДанныеФайла = БроньПоИдентификатору(ИдентификаторБрони, СистемаБронирования);
	
	ПоместитьВоВременноеХранилище(ДанныеФайла, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

Процедура ЗагрузитьНовыеПоездкиДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Структура(
		"Поездки,
		|Версия");
	
	Версия = ВерсияПоследнегоЗаказа(Параметры.СистемаБронирования, Параметры.Организация);
	Если ЗначениеЗаполнено(Версия) Тогда
		Версия = Версия + 1;
	КонецЕсли;
	
	Результат.Поездки = НовыеПоездки(Версия, Параметры.Организация);
	Результат.Версия = Версия;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьПоездкиЗаПериодДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Структура("Поездки");
	Результат.Поездки = ПоездкиЗаПериод(Параметры.Период, Параметры.Организация);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура СформироватьПриказыДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ДанныеПоездок = Параметры.ДанныеПоездок;
	
	Для Каждого СтрокаДанных Из ДанныеПоездок Цикл
		НачатьТранзакцию();
		Попытка
			СформироватьКомандировку(СтрокаДанных);
			СохранитьИдентификаторПоездки(СтрокаДанных);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗарегистрироватьОшибкуБронированияКомандировок(ИнформацияОбОшибке(), НСтр("ru = 'Формирование кадровых приказов'"));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Командировки = ДанныеПоездок.ВыгрузитьКолонку("Командировка");
	ДанныеКомандировок = Документы.Командировка.ДанныеКомандировок(Командировки);
	ДанныеКомандировокГруппой = Документы.КомандировкиСотрудников.ДанныеКомандировок(Командировки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеКомандировок, ДанныеКомандировокГруппой);
	
	Для Каждого СтрокаДанных Из ДанныеПоездок Цикл
		СравнитьДанныеПоездки(СтрокаДанных, ДанныеКомандировок[СтрокаДанных.Командировка]);
	КонецЦикла;
	
	Результат = Новый Структура("ДанныеПоездок");
	Результат.ДанныеПоездок = ДанныеПоездок;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОтправкаЗаявокБронированияКомандировок() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаЗаявокБронированияКомандировок);
	
	УстановитьПривилегированныйРежим(Истина);
	ОтправитьЗаявкиБронированияКомандировок();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПолучениеСостоянияБронированияКомандировок() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСостоянияБронированияКомандировок);
	
	УстановитьПривилегированныйРежим(Истина);
	ПолучитьСостоянияБронированияКомандировок();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

Функция НовыеНастройкиСистемыБронирования() Экспорт
	
	Возврат Новый Структура("Логин,Пароль");
	
КонецФункции

Процедура СохранитьНастройкиСистемыБронирования(Настройки, СистемаБронирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Строка(СистемаБронирования), Настройки.Логин, "Логин");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Строка(СистемаБронирования), Настройки.Пароль, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыТаблиц

Функция ТаблицаУслугБронирования()
	
	Услуги = Новый ТаблицаЗначений;
	Услуги.Колонки.Добавить("ИдентификаторЗаявки", ОбщегоНазначения.ОписаниеТипаСтрока(38));
	Услуги.Колонки.Добавить("ЗаявкаСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаКомандировку"));
	Услуги.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаЧисло(16));
	Услуги.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	Услуги.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Услуги.Колонки.Добавить("ИННОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Услуги.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Услуги.Колонки.Добавить("ВидУслуги", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУслугБронированияКомандировок"));
	Услуги.Колонки.Добавить("ФизическиеЛица", Новый ОписаниеТипов("ТаблицаЗначений"));
	Услуги.Колонки.Добавить("Содержимое", Новый ОписаниеТипов("Структура"));
	Услуги.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Услуги.Колонки.Добавить("ФизическиеЛицаПредставление", Новый ОписаниеТипов("Строка"));
	
	Возврат Услуги;
	
КонецФункции

Функция ТаблицаАвиаМаршрута()
	
	Маршруты = Новый ТаблицаЗначений;
	Маршруты.Колонки.Добавить("ПунктОтправления", Новый ОписаниеТипов("Строка"));
	Маршруты.Колонки.Добавить("ПунктПрибытия", Новый ОписаниеТипов("Строка"));
	Маршруты.Колонки.Добавить("ДатаОтправления", Новый ОписаниеТипов("Дата"));
	
	Возврат Маршруты;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаПоездок

#Область Поездки

Функция ТаблицаПоездок() Экспорт
	
	Поездки = Новый ТаблицаЗначений;
	Поездки.Колонки.Добавить("ИдентификаторПоездки", ОбщегоНазначения.ОписаниеТипаЧисло(16));
	Поездки.Колонки.Добавить("Заявка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаКомандировку"));
	Поездки.Колонки.Добавить("Командировка", Новый ОписаниеТипов("ДокументСсылка.Командировка, ДокументСсылка.КомандировкиСотрудников"));
	Поездки.Колонки.Добавить("СистемаБронирования", Новый ОписаниеТипов("ПеречислениеСсылка.СистемыБронированияКомандировок"));
	Поездки.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Поездки.Колонки.Добавить("МестоНазначения", Новый ОписаниеТипов("Строка"));
	Поездки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Поездки.Колонки.Добавить("ИННОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Поездки.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Поездки.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Поездки.Колонки.Добавить("ДатаИзменения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Поездки.Колонки.Добавить("Услуги", Новый ОписаниеТипов("ТаблицаЗначений"));
	Поездки.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Поездки.Колонки.Добавить("Изменена", Новый ОписаниеТипов("Булево"));
	Поездки.Колонки.Добавить("Отменена", Новый ОписаниеТипов("Булево"));
	Поездки.Колонки.Добавить("ФизическиеЛица", Новый ОписаниеТипов("ТаблицаЗначений"));
	Поездки.Колонки.Добавить("ФизическиеЛицаПредставление", Новый ОписаниеТипов("Строка"));
	Поездки.Колонки.Добавить("Пожелания", Новый ОписаниеТипов("Строка"));
	Поездки.Колонки.Добавить("ОписаниеИзменений", Новый ОписаниеТипов("Строка"));
	
	Возврат Поездки;
	
КонецФункции

Функция НовыеПоездки(Версия, Организация)
	
	Поездки = ТаблицаПоездок();
	
	ИнтеграцияSmartway.ЗагрузитьНовыеПоездки(Поездки, Версия, Организация);
	
	ОбработатьЗагруженныеПоездки(Поездки);
	
	Возврат Поездки;
	
КонецФункции

Функция ПоездкиЗаПериод(Период, Организация)
	
	Поездки = ТаблицаПоездок();
	
	ИнтеграцияSmartway.ЗагрузитьПоездкиЗаПериод(Поездки, Период, Организация);
	
	ОбработатьЗагруженныеПоездки(Поездки);
	
	Возврат Поездки;
	
КонецФункции

Процедура ОбработатьЗагруженныеПоездки(Поездки)
	
	Если Поездки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодобратьОрганизации(Поездки);
	РазбитьПоездкиПоОрганизациям(Поездки);
	ПодобратьФизическихЛиц(Поездки);
	ПодобратьСотрудников(Поездки);
	СобратьФизическихЛицПоездки(Поездки);
	ЗаполнитьПредставлениеПоездок(Поездки);
	ПодобратьСуществующиеКомандировки(Поездки);
	
КонецПроцедуры

#КонецОбласти

Функция ОрганизацииСистемыБронирования(СистемаБронирования)
	
	Организации = ТаблицаОрганизаций();
	
	ИнтеграцияSmartway.ЗаполнитьОрганизацииСистемыБронирования(Организации, СистемаБронирования);
	
	ПодобратьСсылкиОрганизаций(Организации);
	
	Возврат Организации;
	
КонецФункции

Функция ТаблицаОрганизаций()
	
	Организации = Новый ТаблицаЗначений;
	Организации.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Организации.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	Организации.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Организации.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Возврат Организации;
	
КонецФункции

Процедура ПодобратьСсылкиОрганизаций(Организации)
	
	Для Каждого СтрокаТаблицы Из Организации Цикл
		СтрокаТаблицы.Ссылка = ОрганизацияПоИНН(СтрокаТаблицы.ИНН);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеПериодаПоездки(Поездка)
	
	ПериодПоездки = "";
	
	Если НачалоДня(Поездка.ДатаНачала) = НачалоДня(Поездка.ДатаОкончания) Тогда
		ПериодПоездки = ДатаВСтроку(Поездка.ДатаНачала);
	Иначе
		ПериодПоездки = СтрШаблон("%1 - %2", ДатаВСтроку(Поездка.ДатаНачала), ДатаВСтроку(Поездка.ДатаОкончания));
	КонецЕсли;
	
	Возврат ПериодПоездки;
	
КонецФункции

Функция ОрганизацияПоИНН(ИНН)
	Возврат Справочники.Организации.НайтиПоРеквизиту("ИНН", ИНН);
КонецФункции

Процедура ПодобратьОрганизации(Поездки)
	
	РазличныеИНН = Новый Соответствие;
	Для Каждого Поездка Из Поездки Цикл
		Для Каждого Услуга Из Поездка.Услуги Цикл
			УслугиПоИНН = РазличныеИНН[Услуга.ИННОрганизации];
			Если УслугиПоИНН = Неопределено Тогда
				УслугиПоИНН = Новый Массив;
			КонецЕсли;
			УслугиПоИНН.Добавить(Услуга);
			РазличныеИНН.Вставить(Услуга.ИННОрганизации, УслугиПоИНН);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РазличныеИНН Цикл
		ИННОрганизации = КлючИЗначение.Ключ;
		УслугиПоИНН = КлючИЗначение.Значение;
		Организация = ОрганизацияПоИНН(ИННОрганизации);
		Если Организация.Пустая() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружена организация (ИНН %1).
		              |Организация встречается в загружаемых заказах, но такие заказы не будут загружены.'"),
				ИННОрганизации);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		Для Каждого Услуга Из УслугиПоИНН Цикл
			Услуга.Организация = Организация;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
Процедура РазбитьПоездкиПоОрганизациям(Поездки)
	
	Индекс = 0;
	Пока Индекс < Поездки.Количество() Цикл
		Поездка = Поездки[Индекс];
		Если Поездка.Услуги.Количество() = 0 Тогда
			// Оказалось, что у поездки нет услуг.
			Поездки.Удалить(Поездка);
			Продолжить;
		КонецЕсли;
		Организации = ОбщегоНазначения.ВыгрузитьКолонку(Поездка.Услуги, "Организация", Истина);
		Если Организации.Количество() = 1 Тогда
			Поездка.Организация = Организации[0];
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		Для Каждого Организация Из Организации Цикл
			Если Не ЗначениеЗаполнено(Поездка.Организация) Тогда
				// Оригинальную поездку оставляем с первой же организацией.
				Поездка.Организация = Организация;
				Продолжить;
			КонецЕсли;
			// Для всех последующих организаций создаем копии поездки и переносим относящиеся к организации услуги.
			НоваяПоездка = Поездки.Вставить(Индекс + 1);
			ЗаполнитьЗначенияСвойств(НоваяПоездка, Поездка);
			НоваяПоездка.Организация = Организация;
			ОтборСтрок = Новый Структура("Организация");
			ОтборСтрок.Организация = Организация;
			НоваяПоездка.Услуги = Поездка.Услуги.Скопировать(ОтборСтрок);
			НайденныеСтроки = Поездка.Услуги.НайтиСтроки(ОтборСтрок);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Поездка.Услуги.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьСуществующиеКомандировки(Поездки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поездки", Поездки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездки.ИдентификаторПоездки КАК ИдентификаторПоездки,
		|	Поездки.Организация КАК Организация,
		|	Поездки.СистемаБронирования КАК СистемаБронирования
		|ПОМЕСТИТЬ ВТПоездки
		|ИЗ
		|	&Поездки КАК Поездки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Командировки.ИдентификаторПоездки КАК ИдентификаторПоездки,
		|	Командировки.Командировка КАК Командировка,
		|	Командировки.Организация КАК Организация,
		|	Командировки.СистемаБронирования КАК СистемаБронирования
		|ИЗ
		|	РегистрСведений.КомандировкиВСистемеБронирования КАК Командировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоездки КАК Поездки
		|		ПО (Поездки.ИдентификаторПоездки = Командировки.ИдентификаторПоездки)
		|			И (Поездки.Организация = Командировки.Организация)
		|			И (Поездки.СистемаБронирования = Командировки.СистемаБронирования)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Командировки = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Командировка");
	
	ДанныеКомандировок = Документы.Командировка.ДанныеКомандировок(Командировки);
	ДанныеКомандировокГруппой = Документы.КомандировкиСотрудников.ДанныеКомандировок(Командировки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеКомандировок, ДанныеКомандировокГруппой);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтборСтрок = Новый Структура(
			"ИдентификаторПоездки, 
			|Организация,
			|СистемаБронирования");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		НайденныеПоездки = Поездки.НайтиСтроки(ОтборСтрок);
		Для Каждого Поездка Из НайденныеПоездки Цикл
			Поездка.Командировка = Выборка.Командировка;
			СравнитьДанныеПоездки(Поездка, ДанныеКомандировок[Выборка.Командировка]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СравнитьДанныеПоездки(Поездка, ДанныеКомандировки)
	
	Поездка.Изменена = Ложь;
	Поездка.ОписаниеИзменений = Неопределено;
	
	ПроверитьОтменуПоездки(Поездка, ДанныеКомандировки);
	
	Если Поездка.Отменена Тогда
		Возврат;
	КонецЕсли;
	
	СравнитьДлительностьПоездки(Поездка, ДанныеКомандировки);
	СравнитьМестоНазначенияПоездки(Поездка, ДанныеКомандировки);
	СравнитьСоставСотрудниковПоездки(Поездка, ДанныеКомандировки);
	
	Если Не Поездка.Изменена Тогда
		Возврат;
	КонецЕсли;
	
	Поездка.ОписаниеИзменений = НСтр("ru = 'Отличия поездки от приказа:'") + Символы.ПС + Поездка.ОписаниеИзменений;
	
КонецПроцедуры

Процедура ПроверитьОтменуПоездки(Поездка, ДанныеКомандировки)
	
	Если Не Поездка.Отменена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеКомандировки.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Поездка отменена (но приказ проведен)'");
	ДобавитьОписаниеИзменений(Поездка, ТекстСообщения);
	
КонецПроцедуры

Процедура СравнитьДлительностьПоездки(Поездка, ДанныеКомандировки)
	
	ДлительностьПоездки = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(Поездка.ДатаНачала, Поездка.ДатаОкончания);
	ДлительностьКомандировки = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(ДанныеКомандировки.ДатаНачала, ДанныеКомандировки.ДатаОкончания);
	
	Если ДлительностьПоездки = ДлительностьКомандировки Тогда
		Если НачалоДня(Поездка.ДатаНачала) <> НачалоДня(ДанныеКомандировки.ДатаНачала) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '- даты поездки: %1 (в приказе %2)'"),
				ПредставлениеПериодаПоездки(Поездка),
				ПредставлениеПериодаПоездки(ДанныеКомандировки));
			ДобавитьОписаниеИзменений(Поездка, ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Шаблон = ШаблонПредставленияДней();
	
	ПредставлениеДнейПоездки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, ДлительностьПоездки);
	ПредставлениеДнейКомандировки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, ДлительностьКомандировки);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '- длительность поездки: %1 (в приказе %2)'"),
		ПредставлениеДнейПоездки,
		ПредставлениеДнейКомандировки);
		
	ДобавитьОписаниеИзменений(Поездка, ТекстСообщения);
	
КонецПроцедуры

Процедура СравнитьМестоНазначенияПоездки(Поездка, ДанныеКомандировки)
	
	Если СокрЛП(Поездка.МестоНазначения) = СокрЛП(ДанныеКомандировки.МестоНазначения) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '- место назначения: %1 (в приказе %2)'"),
		Поездка.МестоНазначения,
		ДанныеКомандировки.МестоНазначения);
	ДобавитьОписаниеИзменений(Поездка, ТекстСообщения);
	
КонецПроцедуры

Процедура СравнитьСоставСотрудниковПоездки(Поездка, ДанныеКомандировки)
	
	ФизическиеЛицаПоездки = Поездка.ФизическиеЛица.ВыгрузитьКолонку("Ссылка");
	ФизическиеЛицаКомандировки = ФизическиеЛицаКомандировки(ДанныеКомандировки);
	
	Если ОбщегоНазначения.КоллекцииИдентичны(ФизическиеЛицаПоездки, ФизическиеЛицаКомандировки) Тогда
		Возврат;
	КонецЕсли;
	
	Добавленные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛицаПоездки, ФизическиеЛицаКомандировки);
	Удаленные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛицаКомандировки, ФизическиеЛицаПоездки);
	
	Если Добавленные.Количество() = 0 И Удаленные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОписаниеИзменений(Поездка, НСтр("ru = '- сотрудники'"));
	
	Если Добавленные.Количество() > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'добавлены: %1'"),
			СтрСоединить(Добавленные, ", "));
		ДобавитьОписаниеИзменений(Поездка, ТекстСообщения);
	КонецЕсли;
	
	Если Удаленные.Количество() > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'исключены: %1'"),
			СтрСоединить(Удаленные, ", "));
		ДобавитьОписаниеИзменений(Поездка, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеИзменений(Поездка, ТекстСообщения)
	
	Если ЗначениеЗаполнено(Поездка.ОписаниеИзменений) Тогда
		Поездка.ОписаниеИзменений = Поездка.ОписаниеИзменений + Символы.ПС;
	КонецЕсли;
	
	Поездка.ОписаниеИзменений = Поездка.ОписаниеИзменений + ТекстСообщения;
	Поездка.Изменена = Истина;
	
КонецПроцедуры

Функция ФизическиеЛицаКомандировки(ДанныеКомандировки)
	
	Массив = Новый Массив;
	
	Если Не ДанныеКомандировки.Свойство("Командировки") Тогда
		Массив.Добавить(ДанныеКомандировки.ФизическоеЛицо);
	Иначе
		Для Каждого КлючИЗначение Из ДанныеКомандировки.Командировки Цикл
			Массив.Добавить(КлючИЗначение.Значение.ФизическоеЛицо);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Процедура ПодобратьФизическихЛиц(Поездки)
	
	ОбработанныеЛица = ТаблицаФизическихЛиц();
	
	ОтборСтрок = Новый Структура(
		"Фамилия,
		|Имя,
		|Отчество");
	
	Для Каждого Поездка Из Поездки Цикл
		Для Каждого Услуга Из Поездка.Услуги Цикл
			Для Каждого ОписаниеЛица Из Услуга.ФизическиеЛица Цикл
				Если ЗначениеЗаполнено(ОписаниеЛица.Ссылка) Тогда
					// Физическое лицо уже было найдено.
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОписаниеЛица.Идентификатор) Тогда
					ФизическоеЛицоСсылка = ФизическоеЛицоПоИдентификатору(ОписаниеЛица.Идентификатор);
					Если ЗначениеЗаполнено(ФизическоеЛицоСсылка) Тогда
						ОписаниеЛица.Ссылка = ФизическоеЛицоСсылка;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ОтборСтрок, ОписаниеЛица);
				НайденныеСтроки = ОбработанныеЛица.НайтиСтроки(ОтборСтрок);
				Если НайденныеСтроки.Количество() > 0 Тогда
					// Проверяем тот же это человек или нет по совпадению документов.
					Если ОбщегоНазначения.КоллекцииИдентичны(НайденныеСтроки[0].Документы, ОписаниеЛица.Документы, "ВидДокумента,НомерДокумента") Тогда
						ОписаниеЛица.Ссылка = НайденныеСтроки[0].Ссылка;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ОбработанноеЛицо = ОбработанныеЛица.Добавить();
				ЗаполнитьЗначенияСвойств(ОбработанноеЛицо, ОписаниеЛица);
				РезультатПоиска = СотрудникиФормы.ПодобратьСписокФизЛиц(Неопределено, ОписаниеЛица.Фамилия, ОписаниеЛица.Имя, ОписаниеЛица.Отчество);
				Если РезультатПоиска.ФизическоеЛицоУникально = Истина Тогда
					// Не нашли.
					Продолжить;
				КонецЕсли;
				Если Не РезультатПоиска.Свойство("ДанныеФизическихЛицДоступны") Тогда
					Продолжить;
				КонецЕсли;
				Если Не РезультатПоиска.ДанныеФизическихЛицДоступны Тогда
					// Данные недоступны.
					Продолжить;
				КонецЕсли;
				ФизическоеЛицоБезДокументов = Неопределено;
				ФизическоеЛицоДокументСовпадает = Неопределено;
				Для Каждого ДанныеЛица Из РезультатПоиска.ДанныеФизическихЛиц Цикл
					Если Не ЗначениеЗаполнено(ДанныеЛица.ДокументВид) Тогда
						ФизическоеЛицоБезДокументов = ДанныеЛица.ФизическоеЛицо;
						Продолжить;
					КонецЕсли;
					ОтборДокументов = Новый Структура("НомерДокумента");
					ОтборДокументов.НомерДокумента = СтрЗаменить(СокрЛП(ДанныеЛица.ДокументНомер) + СокрЛП(ДанныеЛица.ДокументСерия), " ", "");
					НайденныеДокументы = ОписаниеЛица.Документы.НайтиСтроки(ОтборДокументов);
					Если НайденныеДокументы.Количество() > 0 Тогда
						ФизическоеЛицоДокументСовпадает = ДанныеЛица.ФизическоеЛицо;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ФизическоеЛицоДокументСовпадает <> Неопределено Тогда
					ОписаниеЛица.Ссылка = ФизическоеЛицоДокументСовпадает;
					ОбработанноеЛицо.Ссылка = ФизическоеЛицоДокументСовпадает;
					Продолжить;
				КонецЕсли;
				Если ФизическоеЛицоБезДокументов <> Неопределено Тогда
					Если РезультатПоиска.ДанныеФизическихЛиц.Количество() = 1 Тогда
						ОписаниеЛица.Ссылка = ФизическоеЛицоБезДокументов;
						ОбработанноеЛицо.Ссылка = ФизическоеЛицоБезДокументов;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьСотрудников(Поездки)
	
	ФизическиеЛица = Новый ТаблицаЗначений;
	ФизическиеЛица.Колонки.Добавить("ФизическоеЛицо");
	ФизическиеЛица.Колонки.Добавить("Организация");
	ФизическиеЛица.Колонки.Добавить("СтрокаТаблицы");
	
	НачалоПериода = Неопределено;
	ОкончаниеПериода = Неопределено;
	
	Для Каждого Поездка Из Поездки Цикл
		Для Каждого Услуга Из Поездка.Услуги Цикл
			Для Каждого ОписаниеЛица Из Услуга.ФизическиеЛица Цикл
				Если Не ЗначениеЗаполнено(ОписаниеЛица.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ФизическиеЛица.Добавить();
				НоваяСтрока.ФизическоеЛицо = ОписаниеЛица.Ссылка;
				НоваяСтрока.Организация = Услуга.Организация;
				НоваяСтрока.СтрокаТаблицы = ОписаниеЛица;
				УточнитьНачалоПериода(НачалоПериода, Поездка);
				УточнитьОкончаниеПериода(ОкончаниеПериода, Поездка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСотрудников.НачалоПериода = НачалоПериода;
	ПараметрыСотрудников.ОкончаниеПериода = ОкончаниеПериода;
	ПараметрыСотрудников.СписокФизическихЛиц = ФизическиеЛица.ВыгрузитьКолонку("ФизическоеЛицо");
	ПараметрыСотрудников.КадровыеДанные = "Организация";
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыСотрудников);
	
	ОтборСтрок = Новый Структура(
		"ФизическоеЛицо,
		|Организация");
	
	Для Каждого СтрокаСотрудников Из ТаблицаСотрудников Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаСотрудников);
		СтрокиФизическогоЛица = ФизическиеЛица.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл
			СтрокаФизическогоЛица.СтрокаТаблицы.СотрудникСсылка = СтрокаСотрудников.Сотрудник;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СобратьФизическихЛицПоездки(Поездки)
	
	Для Каждого Поездка Из Поездки Цикл
		Поездка.ФизическиеЛица = ТаблицаФизическихЛиц(Ложь);
		Для Каждого Услуга Из Поездка.Услуги Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Услуга.ФизическиеЛица, Поездка.ФизическиеЛица);
		КонецЦикла;
		СвернутьТаблицуФизическихЛиц(Поездка.ФизическиеЛица);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуФизическихЛиц(ФизическиеЛица)
	
	ИменаКолонок = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛица.Колонки, "Имя");
	ИменаСтрокой = СтрСоединить(ИменаКолонок, ",");
	ФизическиеЛица.Свернуть(ИменаСтрокой);
	
КонецПроцедуры

Процедура УточнитьНачалоПериода(НачалоПериода, Поездка)
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = Поездка.ДатаНачала;
		Возврат;
	КонецЕсли;
	
	НачалоПериода = Мин(Поездка.ДатаНачала, НачалоПериода);
	
КонецПроцедуры

Процедура УточнитьОкончаниеПериода(ОкончаниеПериода, Поездка)
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = Поездка.ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	ОкончаниеПериода = Макс(Поездка.ДатаОкончания, ОкончаниеПериода);
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеПоездок(Поездки)
	
	ЛицаДляПредставления = ТаблицаФизическихЛиц();
	
	Для Каждого Поездка Из Поездки Цикл
		ДобавитьПериодПоездкиКПредставлению(Поездка);
		ЗаполнитьПредставлениеФизическихЛиц(Поездка);
		ЗаполнитьПредставлениеУслуг(Поездка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПериодПоездкиКПредставлению(Поездка)
	
	ПредставлениеПериода = ПредставлениеПериодаБронирования(Поездка.ДатаНачала, Поездка.ДатаОкончания);
	Поездка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1, %2",
		Поездка.Представление,
		ПредставлениеПериода);
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеФизическихЛиц(Поездка)
	
	ЛицаПоездки = "";
	ЛицаВУслугахРазличаются = Ложь;
	
	Для Каждого Услуга Из Поездка.Услуги Цикл
		ЛицаУслуги = "";
		Для Каждого ОписаниеЛица Из Услуга.ФизическиеЛица Цикл
			СтруктураЛица = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеЛица);
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтруктураЛица);
			ЛицаУслуги = ЛицаУслуги + ФамилияИнициалы + ", ";
			Если СтрНайти(ЛицаПоездки, ФамилияИнициалы) = 0 Тогда
				Если Не ПустаяСтрока(ЛицаПоездки) Тогда
					ЛицаВУслугахРазличаются = Истина;
				КонецЕсли;
				ЛицаПоездки = ЛицаПоездки + ФамилияИнициалы + ", ";
			КонецЕсли;
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЛицаУслуги, 2);
		Услуга.ФизическиеЛицаПредставление = ЛицаУслуги;
	КонецЦикла;
	
	Если Не ЛицаВУслугахРазличаются Тогда
		Поездка.Услуги.ЗаполнитьЗначения("", "ФизическиеЛицаПредставление");
	КонецЕсли;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЛицаПоездки, 2);
	Поездка.ФизическиеЛицаПредставление = ЛицаПоездки;

КонецПроцедуры

Процедура ЗаполнитьПредставлениеУслуг(Поездка)
	
	Для Каждого Услуга Из Поездка.Услуги Цикл
		ЗаполнитьПредставлениеБилета(Услуга);
		ЗаполнитьПредставлениеУслугиПроживания(Услуга);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПредставлениеБилета(Услуга)
	
	Если Услуга.ВидУслуги <> Перечисления.ВидыУслугБронированияКомандировок.Билеты Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПредставлениеАвиаБилета(Услуга);
	ЗаполнитьПредставлениеБилетаНаПоезд(Услуга);
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеАвиаБилета(Услуга)
	
	Содержимое = Услуга.Содержимое;
	Если Содержимое.ВидТранспорта <> Перечисления.ВидыТранспортаБронированияБилетов.Самолет Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеМаршрута = "";
	Для Каждого Сегмент Из Содержимое.Маршрут Цикл
		ПредставлениеСегмента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 - %2, %3 в %4'"),
			Сегмент.ПунктОтправления,
			Сегмент.ПунктПрибытия,
			Формат(Сегмент.ДатаОтправления, "ДФ='dd.MM.yyyy, ddd'"),
			Формат(Сегмент.ДатаОтправления, "ДФ=ЧЧ:мм"));
		Если Не ПустаяСтрока(ПредставлениеМаршрута) Тогда
			ПредставлениеМаршрута = ПредставлениеМаршрута + Символы.ПС;
		КонецЕсли;
		ПредставлениеМаршрута = ПредставлениеМаршрута + ПредставлениеСегмента;
	КонецЦикла;
	
	Услуга.Представление = ПредставлениеМаршрута;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеБилетаНаПоезд(Услуга)
	
	Содержимое = Услуга.Содержимое;
	Если Содержимое.ВидТранспорта <> Перечисления.ВидыТранспортаБронированияБилетов.Поезд Тогда
		Возврат;
	КонецЕсли;
	
	Услуга.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 - %2, %3 в %4'"),
		Содержимое.ПунктОтправления,
		Содержимое.ПунктПрибытия,
		Формат(Содержимое.ДатаОтправления, "ДФ='dd.MM.yyyy, ddd'"),
		Формат(Содержимое.ДатаОтправления, "ДФ=ЧЧ:мм"));
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеУслугиПроживания(Услуга)
	
	Если Услуга.ВидУслуги <> Перечисления.ВидыУслугБронированияКомандировок.Проживание Тогда
		Возврат;
	КонецЕсли;
	
	Содержимое = Услуга.Содержимое;
	
	ПериодПроживания = ПредставлениеПериодаБронирования(Содержимое.ДатаЗаезда, Содержимое.ДатаВыезда);
	
	Услуга.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проживание в %1, %2'"),
		Содержимое.МестоПроживания,
		ПериодПроживания);
	
КонецПроцедуры

Функция ПредставлениеПериодаБронирования(ДатаНачала, ДатаОкончания)
	
	ПредставлениеИнтервала = Формат(ДатаНачала, "ДЛФ=D");
	Если НачалоДня(ДатаНачала) <> НачалоДня(ДатаОкончания) Тогда
		ПредставлениеИнтервала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 - %2", 
			Формат(ДатаНачала, "ДЛФ=D"),
			Формат(ДатаОкончания, "ДЛФ=D"));
	КонецЕсли;
	
	Дней = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(ДатаНачала, ДатаОкончания);
	ПредставлениеДней = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонПредставленияДней(), Дней);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", ПредставлениеДней, ПредставлениеИнтервала);
	
КонецФункции

Функция ФизическоеЛицоПоИдентификатору(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	
	Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(УникальныйИдентификатор);
	Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#Область ЗаявкаНаБронирование

#Область МетодыАвтоподстановки

Функция ТаблицаАэропортов()
	
	Аэропорты = Новый ТаблицаЗначений;
	Аэропорты.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	Аэропорты.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"));
	Аэропорты.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка"));
	Аэропорты.Колонки.Добавить("Страна", Новый ОписаниеТипов("Строка"));
	
	Возврат Аэропорты;
	
КонецФункции

Функция ТаблицаЖДСтанций()
	
	Станции = Новый ТаблицаЗначений;
	Станции.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	Станции.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"));
	
	Возврат Станции;
	
КонецФункции

Функция ТаблицаГостиниц()
	
	Гостиницы = Новый ТаблицаЗначений;
	Гостиницы.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	Гостиницы.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"));
	Гостиницы.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка"));
	Гостиницы.Колонки.Добавить("Страна", Новый ОписаниеТипов("Строка"));
	Гостиницы.Колонки.Добавить("ВидЗапроса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗапросаБронированияМестаПроживания"));
	
	Возврат Гостиницы;
	
КонецФункции

Функция ЭлементАвтоПодбора()
	
	Возврат Новый Структура("Код, Представление, ВидЗапроса");
	
КонецФункции

#КонецОбласти

#Область ОтправкаЗаявки

Процедура ОтправитьЗаявкиБронированияКомандировок(ЗаявкаНаКомандировку = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	БронированиеКомандировок.ЗаявкаНаКомандировку КАК ЗаявкаНаКомандировку
		|ИЗ
		|	РегистрСведений.БронированиеКомандировок КАК БронированиеКомандировок
		|ГДЕ
		|	БронированиеКомандировок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБронированияКомандировки.Подготовлено)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Если ЗаявкаНаКомандировку <> Неопределено Тогда
		ОтборЗапроса.Добавить("БронированиеКомандировок.ЗаявкаНаКомандировку = &ЗаявкаНаКомандировку");
		Запрос.УстановитьПараметр("ЗаявкаНаКомандировку", ЗаявкаНаКомандировку);
	КонецЕсли;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Пока Истина Цикл
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БронированиеКомандировок"); 
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаявкаНаКомандировку", "ЗаявкаНаКомандировку");
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ЗаявкиНаКомандировку = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЗаявкаНаКомандировку");
			ОтправитьЗаявкиВСистемуБронирования(ЗаявкиНаКомандировку);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Если ЗаявкаНаКомандировку <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьЗаявкиВСистемуБронирования(ЗаявкиНаКомандировку)
	
	ДанныеПоездок = ТаблицаПоездок();
	Документы.ЗаявкаНаКомандировку.ЗаполнитьДанныеДляБронирования(ДанныеПоездок, ЗаявкиНаКомандировку);
	
	Для Каждого ДанныеПоездки Из ДанныеПоездок Цикл
		СостояниеЗаявки = Неопределено;
		Попытка
			ИнтеграцияSmartway.ОтправитьЗаявкуНаБронирование(ДанныеПоездки, СостояниеЗаявки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗарегистрироватьОшибкуБронированияКомандировок(ИнформацияОбОшибке, НСтр("ru = 'Отправка заявки в систему бронирования'"));
		КонецПопытки;
		Если СостояниеЗаявки <> Неопределено Тогда
			УстановитьСостояниеБронированияЗаявкиНаКомандировку(ДанныеПоездки.Заявка, СостояниеЗаявки, ДанныеПоездки, ИнформацияОбОшибке);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСостоянияБронирования

Процедура ПолучитьСостоянияБронированияКомандировок(ЗаявкаНаКомандировку = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БронированиеКомандировок.ЗаявкаНаКомандировку КАК ЗаявкаНаКомандировку
		|ИЗ
		|	РегистрСведений.БронированиеКомандировок КАК БронированиеКомандировок
		|ГДЕ
		|	БронированиеКомандировок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБронированияКомандировки.Отправлено)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Если ЗаявкаНаКомандировку <> Неопределено Тогда
		ОтборЗапроса.Добавить("БронированиеКомандировок.ЗаявкаНаКомандировку = &ЗаявкаНаКомандировку");
		Запрос.УстановитьПараметр("ЗаявкаНаКомандировку", ЗаявкаНаКомандировку);
	КонецЕсли;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БронированиеКомандировок"); 
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаявкаНаКомандировку", "ЗаявкаНаКомандировку");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ЗаявкиНаКомандировку = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЗаявкаНаКомандировку");
		ПолучитьСостоянияВСистемеБронирования(ЗаявкиНаКомандировку);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьСостоянияВСистемеБронирования(ЗаявкиНаКомандировку)
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЗаявкиНаКомандировку, "Организация, СистемаБронирования");
	
	СостоянияЗаявок = ТаблицаСостоянияЗаявокБронирования();
	Для Каждого Заявка Из ЗаявкиНаКомандировку Цикл
		НоваяСтрока = СостоянияЗаявок.Добавить();
		НоваяСтрока.Заявка = Заявка;
		НоваяСтрока.ИдентификаторЗаявки = ИдентификаторЗаявкиПоСсылке(Заявка);
		РеквизитыОбъекта = РеквизитыОбъектов[Заявка];
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыОбъекта);
	КонецЦикла;
	
	Попытка
		ИнтеграцияSmartway.ЗаполнитьСостоянияЗаявокНаБронирование(СостоянияЗаявок);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗарегистрироватьОшибкуБронированияКомандировок(ИнформацияОбОшибке, НСтр("ru = 'Получение состояний заявок на бронирование'"));
	КонецПопытки;
	
	ОтборСтрок = Новый Структура("СостояниеПолучено");
	ОтборСтрок.СостояниеПолучено = Истина;
	НайденныеСтроки = СостоянияЗаявок.НайтиСтроки(ОтборСтрок);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		УстановитьСостояниеБронированияЗаявкиНаКомандировку(НайденнаяСтрока.Заявка, НайденнаяСтрока.СостояниеБронирования, НайденнаяСтрока, ИнформацияОбОшибке);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ТаблицаСостоянияЗаявокБронирования()
	
	СостоянияБронирования = Новый ТаблицаЗначений;
	СостоянияБронирования.Колонки.Добавить("ИдентификаторЗаявки", ОбщегоНазначения.ОписаниеТипаСтрока(38));
	СостоянияБронирования.Колонки.Добавить("Заявка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаКомандировку"));
	СостоянияБронирования.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СостоянияБронирования.Колонки.Добавить("СистемаБронирования", Новый ОписаниеТипов("ПеречислениеСсылка.СистемыБронированияКомандировок"));
	СостоянияБронирования.Колонки.Добавить("СостояниеБронирования", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБронированияКомандировки"));
	СостоянияБронирования.Колонки.Добавить("СостояниеПолучено", Новый ОписаниеТипов("Булево"));
	
	Возврат СостоянияБронирования;
	
КонецФункции

Функция РезультатыБронированияЗаявки(ЗаявкаСсылка, СистемаБронирования)
	
	Поездки = ТаблицаПоездок();
	
	ИнтеграцияSmartway.ЗагрузитьПоездкиПоЗаявке(Поездки, ЗаявкаСсылка, СистемаБронирования);
	
	ПодобратьФизическихЛиц(Поездки);
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаСсылка, "ФизическоеЛицо");
	
	Бронирование = Новый Структура(
		"Билеты,
		|Проживание");
	Бронирование.Билеты = ТаблицаУслугБронирования();
	Бронирование.Проживание = ТаблицаУслугБронирования();
	
	ОтборСтрок = Новый Структура("Ссылка");
	ОтборСтрок.Ссылка = ФизическоеЛицо;
	
	Для Каждого Поездка Из Поездки Цикл
		Для Каждого Услуга Из Поездка.Услуги Цикл
			Если Услуга.ФизическиеЛица.НайтиСтроки(ОтборСтрок).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Услуга.ВидУслуги = Перечисления.ВидыУслугБронированияКомандировок.Билеты Тогда
				ЗаполнитьЗначенияСвойств(Бронирование.Билеты.Добавить(), Услуга);
			КонецЕсли;
			Если Услуга.ВидУслуги = Перечисления.ВидыУслугБронированияКомандировок.Проживание Тогда
				ЗаполнитьЗначенияСвойств(Бронирование.Проживание.Добавить(), Услуга);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Бронирование;
	
КонецФункции

Функция БроньПоИдентификатору(ИдентификаторБрони, СистемаБронирования)
	
	ДанныеФайла = Неопределено;
	
	ИнтеграцияSmartway.ПолучитьБроньПоИдентификатору(ИдентификаторБрони, ДанныеФайла, СистемаБронирования);
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

Процедура УстановитьСостояниеБронированияЗаявкиНаКомандировку(ЗаявкаНаКомандировку, СостояниеЗаявки, ДанныеПоездки, ИнформацияОбОшибке = Неопределено)
	
	НаборЗаписей = РегистрыСведений.БронированиеКомандировок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаявкаНаКомандировку.Установить(ЗаявкаНаКомандировку);
	
	СтрокаНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНабора, ДанныеПоездки);
	СтрокаНабора.ЗаявкаНаКомандировку = ЗаявкаНаКомандировку;
	СтрокаНабора.Состояние = СостояниеЗаявки;
	СтрокаНабора.ДатаСостояния = ТекущаяДатаСеанса();
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		СтрокаНабора.Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьСостояниеОтправлена(ЗаявкаОбъект)
	
	СостояниеЗаявки = Перечисления.СостоянияБронированияКомандировки.Отправлено;
	УстановитьСостояниеБронированияЗаявкиНаКомандировку(ЗаявкаОбъект.Ссылка, СостояниеЗаявки, ЗаявкаОбъект);
	
КонецПроцедуры

#Область ПроверкаЗаполненияЗаявки

Процедура ЗаполнитьРеквизитыБронированияКомандировокДляПроверкиЗаполнения(РеквизитыБронирования)
	
	РеквизитыБронирования.Добавить("Организация");

	РеквизитыБронирования.Добавить("ФамилияВПаспорте");
	РеквизитыБронирования.Добавить("ИмяВПаспорте");
	РеквизитыБронирования.Добавить("Гражданство");
	РеквизитыБронирования.Добавить("ВидПаспорта");
	РеквизитыБронирования.Добавить("НомерПаспорта");
	РеквизитыБронирования.Добавить("ФамилияЛатиницей");
	РеквизитыБронирования.Добавить("ИмяЛатиницей");
	РеквизитыБронирования.Добавить("ДатаРождения");
	РеквизитыБронирования.Добавить("Телефон");
	РеквизитыБронирования.Добавить("EMail");
	
	РеквизитыБронирования.Добавить("ДатаОтправленияТуда");
	РеквизитыБронирования.Добавить("ДатаОтправленияОбратно");

	РеквизитыБронирования.Добавить("ГородВылета");
	РеквизитыБронирования.Добавить("ГородВылетаПредставление");
	РеквизитыБронирования.Добавить("ГородПрилета");
	РеквизитыБронирования.Добавить("ГородПрилетаПредставление");

	РеквизитыБронирования.Добавить("СтанцияОтправления");
	РеквизитыБронирования.Добавить("СтанцияОтправленияПредставление");
	РеквизитыБронирования.Добавить("СтанцияПрибытия");
	РеквизитыБронирования.Добавить("СтанцияПрибытияПредставление");
	
	РеквизитыБронирования.Добавить("МестоПроживания");
	РеквизитыБронирования.Добавить("МестоПроживанияПредставление");
	РеквизитыБронирования.Добавить("ДатаЗаездаПроживания");
	РеквизитыБронирования.Добавить("ДатаВыездаПроживания");
	
КонецПроцедуры

Процедура ПроверитьЛичныеДанныеЗаявкиНаБронирование(ЗаявкаОбъект, Отказ, РеквизитыБронирования)
	
	Если Не ЗаявкаОбъект.БронироватьБилеты И Не ЗаявкаОбъект.БронироватьПроживание Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ФамилияВПаспорте");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ИмяВПаспорте");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "Гражданство");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ВидПаспорта");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "НомерПаспорта");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ФамилияЛатиницей");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ИмяЛатиницей");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ДатаРождения");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "Телефон");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "EMail");
	
	Если ЗначениеЗаполнено(ЗаявкаОбъект.ДатаРождения) Тогда
		Если ЗаявкаОбъект.ДатаРождения < Дата(1900, 1, 1) Тогда
			ТекстСообщения = НСтр("ru = 'Дата рождения задана неверно.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаРождения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеБилетовЗаявкиНаБронирование(ЗаявкаОбъект, Отказ, РеквизитыБронирования)
	
	Если Не ЗаявкаОбъект.БронироватьБилеты Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ДатаОтправленияТуда");
	
	Если ЗначениеЗаполнено(ЗаявкаОбъект.ДатаОтправленияТуда) Тогда
		Если ЗаявкаОбъект.ДатаОтправленияТуда < ЗаявкаОбъект.ДатаНачала - ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах() Тогда
			ТекстСообщения = НСтр("ru = 'Дата отправления раньше начала командировки.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаОтправленияТуда", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗаявкаОбъект.БилетВОдинКонец Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ДатаОтправленияОбратно");
		Если ЗначениеЗаполнено(ЗаявкаОбъект.ДатаОтправленияОбратно) Тогда
			Если ЗаявкаОбъект.ДатаОтправленияОбратно > ЗаявкаОбъект.ДатаОкончания Тогда
				ТекстСообщения = НСтр("ru = 'Дата отправления обратно позже окончания командировки.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаОтправленияОбратно", , Отказ);
			КонецЕсли;
			Если ЗаявкаОбъект.ДатаОтправленияОбратно < ЗаявкаОбъект.ДатаОтправленияТуда Тогда
				ТекстСообщения = НСтр("ru = 'Дата отправления обратно раньше отправления туда.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаОтправленияОбратно", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаявкаОбъект.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Самолет Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ГородВылета");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ГородВылетаПредставление");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ГородПрилета");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ГородПрилетаПредставление");
		Если Не ЗначениеЗаполнено(ЗаявкаОбъект.ГородВылета) Тогда
			ТекстСообщения = НСтр("ru = 'Неверно задан город вылета.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ГородВылетаПредставление", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗаявкаОбъект.ГородПрилета) Тогда
			ТекстСообщения = НСтр("ru = 'Неверно задан город прилета.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ГородПрилетаПредставление", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаявкаОбъект.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Поезд Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "СтанцияОтправления");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "СтанцияОтправленияПредставление");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "СтанцияПрибытия");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "СтанцияПрибытияПредставление");
		Если Не ЗначениеЗаполнено(ЗаявкаОбъект.СтанцияОтправления) Тогда
			ТекстСообщения = НСтр("ru = 'Неверно задана станция отправления.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.СтанцияОтправленияПредставление", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗаявкаОбъект.СтанцияПрибытия) Тогда
			ТекстСообщения = НСтр("ru = 'Неверно задана станция прибытия.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.СтанцияПрибытияПредставление", , Отказ);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьДанныеПроживанияЗаявкиНаБронирование(ЗаявкаОбъект, Отказ, РеквизитыБронирования)
	
	Если Не ЗаявкаОбъект.БронироватьПроживание Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "МестоПроживания");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "МестоПроживанияПредставление");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ДатаЗаездаПроживания");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(РеквизитыБронирования, "ДатаВыездаПроживания");
	
	Если ЗначениеЗаполнено(ЗаявкаОбъект.ДатаЗаездаПроживания) Тогда
		Если ЗаявкаОбъект.ДатаЗаездаПроживания < ЗаявкаОбъект.ДатаНачала Тогда
			ТекстСообщения = НСтр("ru = 'Дата заезда раньше начала командировки.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаЗаездаПроживания", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаОбъект.ДатаВыездаПроживания) Тогда
		Если ЗаявкаОбъект.ДатаВыездаПроживания > ЗаявкаОбъект.ДатаОкончания Тогда
			ТекстСообщения = НСтр("ru = 'Дата выезда позже окончания командировки.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаВыездаПроживания", , Отказ);
		КонецЕсли;
		Если ЗаявкаОбъект.ДатаВыездаПроживания < ЗаявкаОбъект.ДатаЗаездаПроживания Тогда
			ТекстСообщения = НСтр("ru = 'Дата выезда раньше заезда.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаВыездаПроживания", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаявкаОбъект.МестоПроживания) Тогда
		ТекстСообщения = НСтр("ru = 'Неверно задано место проживания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.МестоПроживанияПредставление", , Отказ);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

Функция ДанныеБронированияЗаявкиИдентичны(ЗаявкаОбъект1, ЗаявкаОбъект2)
	
	ДанныеБронирования1 = ТаблицаПоездок();
	Документы.ЗаявкаНаКомандировку.ДобавитьПоездкуКДаннымБронирования(ДанныеБронирования1, ЗаявкаОбъект1);
	
	ДанныеБронирования2 = ТаблицаПоездок();
	Документы.ЗаявкаНаКомандировку.ДобавитьПоездкуКДаннымБронирования(ДанныеБронирования2, ЗаявкаОбъект2);
	
	Возврат ЗначениеВСтрокуВнутр(ДанныеБронирования1) = ЗначениеВСтрокуВнутр(ДанныеБронирования2);
	
КонецФункции

#КонецОбласти

#Область ФормированиеКомандировок

Процедура СформироватьКомандировку(ДанныеПоездки)
	
	Если ЗначениеЗаполнено(ДанныеПоездки.Командировка) Тогда
		ИзменитьКомандировку(ДанныеПоездки);
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоездки.ФизическиеЛица.Количество() = 1 Тогда
		СформироватьКомандировкуОдногоСотрудника(ДанныеПоездки);
		Возврат;
	КонецЕсли;
	
	СформироватьКомандировкуГруппыСотрудников(ДанныеПоездки);
	
КонецПроцедуры

Процедура ИзменитьКомандировку(ДанныеПоездки)
	
	Если ТипЗнч(ДанныеПоездки.Командировка) = Тип("ДокументСсылка.Командировка") Тогда
		ИзменитьКомандировкуОдногоСотрудника(ДанныеПоездки);
		Возврат;
	КонецЕсли;
	
	ИзменитьКомандировкуГруппыСотрудников(ДанныеПоездки);
	
КонецПроцедуры

Процедура СформироватьКомандировкуОдногоСотрудника(ДанныеПоездки)
	
	ДокументОбъект = Документы.Командировка.СоздатьДокумент();
	ЗаполнитьКомандировкуОдногоСотрудника(ДокументОбъект, ДанныеПоездки);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ДанныеПоездки.Командировка = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЗаполнитьКомандировкуОдногоСотрудника(ДокументОбъект, ДанныеПоездки)
	
	ЗаполнениеДокумента = Документы.Командировка.ПараметрыЗаполнения();
	ЗаполнениеДокумента.Сотрудник = ДанныеПоездки.ФизическиеЛица[0].СотрудникСсылка;
	ЗаполнениеДокумента.Организация = ДанныеПоездки.Организация;
	ЗаполнениеДокумента.ДатаНачала = ДанныеПоездки.ДатаНачала;
	ЗаполнениеДокумента.ДатаОкончания = ДанныеПоездки.ДатаОкончания;
	ЗаполнениеДокумента.МестоНазначения = ДанныеПоездки.МестоНазначения;
	
	ДокументОбъект.Заполнить(ЗаполнениеДокумента);
	
КонецПроцедуры

Процедура СформироватьКомандировкуГруппыСотрудников(ДанныеПоездки)
	
	ДокументОбъект = Документы.КомандировкиСотрудников.СоздатьДокумент();
	ЗаполнитьКомандировкуГруппыСотрудника(ДокументОбъект, ДанныеПоездки);
	
	ДокументОбъект.Записать();
	
	ДанныеПоездки.Командировка = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЗаполнитьКомандировкуГруппыСотрудника(ДокументОбъект, ДанныеПоездки)
	
	ЗаполнениеДокумента = Документы.КомандировкиСотрудников.ПараметрыЗаполнения();
	ЗаполнениеДокумента.Организация = ДанныеПоездки.Организация;
	ЗаполнениеДокумента.ДатаНачала = ДанныеПоездки.ДатаНачала;
	ЗаполнениеДокумента.ДатаОкончания = ДанныеПоездки.ДатаОкончания;
	ЗаполнениеДокумента.МестоНазначения = ДанныеПоездки.МестоНазначения;
	
	СотрудникиПоездки = ДанныеПоездки.ФизическиеЛица.ВыгрузитьКолонку("СотрудникСсылка");
	Для Каждого Сотрудник Из СотрудникиПоездки Цикл
		ЗаполнениеСтроки = Документы.КомандировкиСотрудников.ПараметрыЗаполненияКомандировкиСотрудника();
		ЗаполнениеСтроки.Сотрудник = Сотрудник;
		Если ТипЗнч(ДанныеПоездки.Командировка) = Тип("ДокументСсылка.Командировка") Тогда
			ЗаполнениеСтроки.Командировка = ДанныеПоездки.Командировка;
		КонецЕсли;
		ЗаполнениеДокумента.Сотрудники.Добавить(ЗаполнениеСтроки);
	КонецЦикла;
	
	ДокументОбъект.Заполнить(ЗаполнениеДокумента);
	
КонецПроцедуры

Процедура ИзменитьКомандировкуОдногоСотрудника(ДанныеПоездки)
	
	Если ДанныеПоездки.ФизическиеЛица.Количество() > 1 Тогда
		// Если сотрудников группа, а выбран документ на одного сотрудника.
		СформироватьКомандировкуГруппыСотрудников(ДанныеПоездки);
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ДанныеПоездки.Командировка.ПолучитьОбъект();

	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Требуется обновить документ %1. 
                  |В данный момент изменение невозможно, так как документ редактируется другим пользователем или в другой форме программы.'"),
			ДанныеПоездки.Командировка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если ДанныеПоездки.Отменена Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКомандировкуОдногоСотрудника(ДокументОбъект, ДанныеПоездки);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ИзменитьКомандировкуГруппыСотрудников(ДанныеПоездки)

	ДокументОбъект = ДанныеПоездки.Командировка.ПолучитьОбъект();

	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Требуется обновить документ %1. 
                  |В данный момент изменение невозможно, так как документ редактируется другим пользователем или в другой форме программы.'"),
			ДанныеПоездки.Командировка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если ДанныеПоездки.Отменена Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКомандировкуГруппыСотрудника(ДокументОбъект, ДанныеПоездки);
	
	ДокументОбъект.Записать();
	
КонецПроцедуры

Процедура СохранитьИдентификаторПоездки(ДанныеПоездки)
	
	НаборЗаписей = РегистрыСведений.КомандировкиВСистемеБронирования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПоездки.Установить(ДанныеПоездки.ИдентификаторПоездки);
	НаборЗаписей.Отбор.СистемаБронирования.Установить(ДанныеПоездки.СистемаБронирования);
	НаборЗаписей.Отбор.Организация.Установить(ДанныеПоездки.Организация);
	НаборЗаписей.Отбор.Командировка.Установить(ДанныеПоездки.Командировка);
	
	СтрокаНабора = НаборЗаписей.Добавить();
	СтрокаНабора.ИдентификаторПоездки = ДанныеПоездки.ИдентификаторПоездки;
	СтрокаНабора.СистемаБронирования = ДанныеПоездки.СистемаБронирования;
	СтрокаНабора.Командировка = ДанныеПоездки.Командировка;
	СтрокаНабора.Организация = ДанныеПоездки.Организация;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область ВерсииЗаказа

Функция ВерсияПоследнегоЗаказа(СистемаБронирования, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СистемаБронирования", СистемаБронирования);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ВерсияЗаказа.Версия) КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсияЗаказаБронированияКомандировки КАК ВерсияЗаказа
		|ГДЕ
		|	ВерсияЗаказа.СистемаБронирования = &СистемаБронирования
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВерсияЗаказа.Версия) ЕСТЬ НЕ NULL ";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		// Добавляем отбор по организации.
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		ОтборЗапроса.Добавить("ВерсияЗаказа.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Версия;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьВерсиюПоследнегоЗаказа(Версия, СистемаБронирования, Организация) Экспорт
		
	НаборЗаписей = РегистрыСведений.ВерсияЗаказаБронированияКомандировки.СоздатьНаборЗаписей();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.СистемаБронирования = СистемаБронирования;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Версия = Версия;
	
	НаборЗаписей.Отбор.СистемаБронирования.Установить(СистемаБронирования);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ДатаВСтроку(Дата)
	
	Возврат Формат(Дата, "ДЛФ=D");
	
КонецФункции

Функция ШаблонПредставленияДней()
	Возврат НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
КонецФункции
	
Процедура ЗарегистрироватьОшибкуБронированияКомандировок(ИнформацияОбОшибке, ПредставлениеОбработки)
	
	ИмяСобытия = НСтр("ru = 'Бронирование командировок'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при бронировании командировок. Обратитесь к администратору.
              |Техническая информация:
              |При выполнении операции «%1» возникает
              |%2'"), 
		ПредставлениеОбработки,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция ФиксированнаяСтруктураСТаблицейЗначений(СтруктураСТаблицейЗначений)
	
	Для Каждого КлючИЗначение Из СтруктураСТаблицейЗначений Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			СтруктураСТаблицейЗначений.Вставить(КлючИЗначение.Ключ, ФиксированнаяТаблицаЗначений(КлючИЗначение.Значение));
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			СтруктураСТаблицейЗначений.Вставить(КлючИЗначение.Ключ, ФиксированнаяСтруктураСТаблицейЗначений(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(СтруктураСТаблицейЗначений);
	
КонецФункции

Функция ФиксированнаяТаблицаЗначений(ТаблицаЗначений)
	
	Данные = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Структура = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
		Структура = ФиксированнаяСтруктураСТаблицейЗначений(Структура);
		Данные.Добавить(Структура);
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Данные);
	
КонецФункции

#КонецОбласти