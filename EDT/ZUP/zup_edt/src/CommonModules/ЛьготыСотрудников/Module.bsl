#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4de-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеЛьготСотрудников);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ИзменениеЛьготСотрудников, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеЛьготСотрудниковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПерерасчетЛьгот, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеДоступом

Процедура ДополнитьОписаниеПрофиля(ОписаниеПрофиля) Экспорт
	
	МассивДобавляемыхРолей = Новый Массив;
	
	МассивДобавляемыхРолей.Добавить("ДобавлениеИзменениеЛьготСотрудников");
	МассивДобавляемыхРолей.Добавить("ЧтениеЛьготСотрудников");
	МассивДобавляемыхРолей.Добавить("ПодсистемаМотивация");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПрофиля.Роли, МассивДобавляемыхРолей, Истина);
	
КонецПроцедуры

Процедура ДополнитьОписаниеПрофиляПравиламиПредоставленияЛьгот(ОписаниеПрофиля) Экспорт
	
	МассивДобавляемыхРолей = Новый Массив;
	
	МассивДобавляемыхРолей.Добавить("ИспользованиеПравилаПредоставленияЛьгот");
	МассивДобавляемыхРолей.Добавить("ПодсистемаМотивация");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПрофиля.Роли, МассивДобавляемыхРолей, Истина);
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьФормуПозиции(Форма, ОписаниеТаблицыЛьгот, ИмяГруппыЛьготы = "ЛьготыСтраница") Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьГруппыЛьготы(Форма.Элементы, ИмяГруппыЛьготы);
	
	ИспользоватьИндивидуальныеЛьготыСотрудников = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеЛьготыСотрудников");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаСамообслуживание", "Видимость", ИспользоватьИндивидуальныеЛьготыСотрудников);
	
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(Форма, ОписаниеТаблицыЛьгот, "Начисления", 3);
	
КонецПроцедуры

Процедура ДополнитьФормуКадровогоДокумента(Форма, ОписаниеТаблицыЛьгот, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		ЛьготыФиксРасчет = Новый РеквизитФормы(ОписаниеТаблицыЛьгот.ИмяРеквизитаФиксРасчет, Новый ОписаниеТипов());
		ДобавляемыеРеквизиты.Добавить(ЛьготыФиксРасчет);
	
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЛьготыПозиции(Форма, Позиция, ОписаниеТаблицыЛьгот, ЗаполнениеИзПеремещения = Ложь, ИмяТаблицыИндивидуальныеЛьготы = Неопределено, ДатаСобытия = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию, ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляЛьгота = ОписаниеТаблицыЛьгот.ИмяРеквизитаВидРасчета;
	ИмяПоляИдентификаторСтроки = ОписаниеТаблицыЛьгот.ИмяРеквизитаИдентификаторСтроки;
	
	ДанныеЛьгот = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыЛьгот.ПутьКДанным);
	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыЛьгот.ПутьКДаннымПоказателей);
	
	ТекущиеДанныеЛьгот = ДанныеЛьгот.Выгрузить();
	
	Если Не ЗаполнениеИзПеремещения Тогда 
		ДанныеЛьгот.Очистить();
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоказателя Из ДанныеПоказателей Цикл
		Если Цел(СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета / 1000000) = ОписаниеТаблицыЛьгот.НомерТаблицы Тогда
			УдаляемыеСтроки.Добавить(СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ДанныеПоказателей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ДанныеПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Позиция, "Владелец, Подразделение, Должность");
	
	ТаблицаОписанийПозиций = ТаблицаОписанийПозиций();
	
	НоваяСтрока = ТаблицаОписанийПозиций.Добавить();
	НоваяСтрока.Позиция = Позиция;
	НоваяСтрока.Организация = ДанныеПозиции.Владелец;
	НоваяСтрока.Подразделение = ДанныеПозиции.Подразделение;
	НоваяСтрока.Должность = ДанныеПозиции.Должность;
	
	Запрос = ЗапросДанныеЛьгот(ТаблицаОписанийПозиций);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	ДанныеПоказателейЛьгот = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Льгота") Цикл 
		ЗначенияПоказателей = Новый Соответствие;
		Пока Выборка.Следующий() Цикл 
			ЗначенияПоказателей.Вставить(Выборка.Показатель, Выборка.Значение);
		КонецЦикла;
		ДанныеПоказателейЛьгот.Вставить(Выборка.Льгота, ЗначенияПоказателей);
	КонецЦикла;
	
	ЛьготыПозиции = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[4].Выбрать();
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыЛьгот.НомерТаблицы * 1000000 + 1;
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = ДанныеЛьгот.НайтиСтроки(Новый Структура(ИмяПоляЛьгота, Выборка.Льгота));
		Если НайденныеСтроки.Количество() > 0 Тогда 
			СтрокаЛьготы = НайденныеСтроки[0];
		Иначе 
			СтрокаЛьготы = ДанныеЛьгот.Добавить();
		КонецЕсли;
		
		СтрокаЛьготы[ИмяПоляЛьгота] = Выборка.Льгота;
		СтрокаЛьготы.Размер = Выборка.Размер;
		СтрокаЛьготы[ИмяПоляИдентификаторСтроки] = ИдентификаторСтрокиВидаРасчета;
		
		Если ЗаполнениеИзПеремещения Тогда
			СтрокаЛьготы.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
		КонецЕсли;
		
		ЗначенияПоказателей = ДанныеПоказателейЛьгот.Получить(Выборка.Льгота);
		Если ЗначенияПоказателей <> Неопределено Тогда 
			Для Каждого КлючИЗначение Из ЗначенияПоказателей Цикл 
				НоваяСтрока = ДанныеПоказателей.Добавить();
				НоваяСтрока.Показатель = КлючИЗначение.Ключ;
				НоваяСтрока.Значение = КлючИЗначение.Значение;
				НоваяСтрока[ИмяПоляИдентификаторСтроки] = ИдентификаторСтрокиВидаРасчета;
			КонецЦикла;
		КонецЕсли;
		
		ЛьготыПозиции.Вставить(Выборка.Льгота, Истина);
		
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		
	КонецЦикла;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыЛьгот, 1);	
	
	// Дополнительная обработка строк льгот.
	// Необходимо упорядочить строки льгот по значению РеквизитДопУпорядочивания.
	ТаблицаЛьгот = ДанныеЛьгот.Выгрузить();
	ТаблицаЛьгот.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	// Подготовка значений РеквизитДопУпорядочивания начислений.
	РеквизитыДопУпорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЛьгот, ИмяПоляЛьгота, Истина), "РеквизитДопУпорядочивания");

	// При заполнении из перемещения, необходимо обнулить показатели прекращенных льгот и сформировать комментарии.
	Для Каждого СтрокаЛьготы Из ТаблицаЛьгот Цикл
		
		Льгота = СтрокаЛьготы[ИмяПоляЛьгота];
		СтрокаЛьготы.РеквизитДопУпорядочивания = РеквизитыДопУпорядочивания.Получить(Льгота);
		
		Если ЗаполнениеИзПеремещения Тогда
			
			МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыЛьгот);
			
			Если ЛьготыПозиции[Льгота] = Неопределено Тогда
				
				Для СчетчикПоказателей = 1 По МаксимальноеКоличествоПоказателей Цикл
					СтрокаЛьготы["Значение" + СчетчикПоказателей] = 0;
				КонецЦикла;
				
				СтрокаЛьготы.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
				
			КонецЕсли;
			
			СтруктураСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаЛьготы);
			
			ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтруктураСтроки, МаксимальноеКоличествоПоказателей, 1, ОписаниеТаблицыЛьгот, ДатаСобытия);
			
			СтрокаЛьготы.Комментарий = СтруктураСтроки.Комментарий;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ТаблицаЛьгот.Сортировать("РеквизитДопУпорядочивания");
	ДанныеЛьгот.Загрузить(ТаблицаЛьгот);
	
	Если ИмяТаблицыИндивидуальныеЛьготы <> Неопределено Тогда
		ИндивидуальныеЛьготы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицыИндивидуальныеЛьготы);
		Выборка = РезультатыЗапроса[6].Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ИндивидуальныеЛьготы.Добавить();
			НоваяСтрока.Льгота = Выборка.Льгота;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаОписанийПозиций() Экспорт 
	 
	ТаблицаОписанийПозиций = Новый ТаблицаЗначений;
	ТаблицаОписанийПозиций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОписанийПозиций.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаОписанийПозиций.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаОписанийПозиций.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	
	Возврат ТаблицаОписанийПозиций;
	
КонецФункции

Процедура РеквизитыПозицииВДанные(Форма, ОписаниеТаблицыЛьгот) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию) Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, Форма, ОписаниеТаблицыЛьгот, 1);	
	
КонецПроцедуры

Процедура СохранитьДанныеПозиции(Форма) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию) Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = Форма.Объект.Ссылка;
	Организация = Форма.Объект.Владелец;
	Подразделение = Форма.Объект.Подразделение;
	Должность = Форма.Объект.Должность;
	
	// Льготы
	НаборЗаписей = РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Отбор.Должность.Установить(Должность);
	НаборЗаписей.Отбор.Позиция.Установить(Позиция);
	
	Для Каждого ДанныеЛьготы Из Форма.Льготы Цикл 
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.Подразделение = Подразделение;
		НоваяЗапись.Должность = Должность;
		НоваяЗапись.Позиция = Позиция;
		НоваяЗапись.Льгота = ДанныеЛьготы.Льгота;
		НоваяЗапись.Размер = ДанныеЛьготы.Размер;
		Если ДанныеЛьготы.ФиксированнаяСумма Тогда 
			НоваяЗапись.Размер = ДанныеЛьготы.Значение1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДанныеЛьготы Из Форма.ИндивидуальныеЛьготы Цикл 
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.Подразделение = Подразделение;
		НоваяЗапись.Должность = Должность;
		НоваяЗапись.Позиция = Позиция;
		НоваяЗапись.Льгота = ДанныеЛьготы.Льгота;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// Показатели
	НаборЗаписей = РегистрыСведений.ЗначенияПоказателейЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Отбор.Должность.Установить(Должность);
	НаборЗаписей.Отбор.Позиция.Установить(Позиция);
	
	УникальныеПоказатели = Новый Соответствие;
	Для Каждого ДанныеПоказателя Из Форма.Показатели Цикл 
		Если УникальныеПоказатели[ДанныеПоказателя.Показатель] <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.Подразделение = Подразделение;
		НоваяЗапись.Должность = Должность;
		НоваяЗапись.Позиция = Позиция;
		НоваяЗапись.Показатель = ДанныеПоказателя.Показатель;
		НоваяЗапись.Значение = ДанныеПоказателя.Значение;
		УникальныеПоказатели.Вставить(ДанныеПоказателя.Показатель, Истина);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// Лимиты
	НаборЗаписей = РегистрыСведений.ЛимитыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Отбор.Должность.Установить(Должность);
	НаборЗаписей.Отбор.Позиция.Установить(Позиция);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.Подразделение = Подразделение;
	НоваяЗапись.Должность = Должность;
	НоваяЗапись.Позиция = Позиция;
	НоваяЗапись.ИспользоватьЛимит = Форма.ИспользоватьЛимит;
	НоваяЗапись.КоличествоБаллов = ?(Форма.ИспользоватьЛимит, Форма.КоличествоБаллов, 0);
	НоваяЗапись.ДоступныВсеЛьготы = Форма.ДоступныВсеЛьготы = 0;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ЗапросДанныеЛьгот(ТаблицаОписанийПозиций) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОписанияПозиций", ТаблицаОписанийПозиций);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписанияПозиций.Организация КАК Организация,
	               |	ОписанияПозиций.Подразделение КАК Подразделение,
	               |	ОписанияПозиций.Должность КАК Должность,
	               |	ОписанияПозиций.Позиция КАК Позиция
	               |ПОМЕСТИТЬ ВТИсходныеДанные
	               |ИЗ
	               |	&ОписанияПозиций КАК ОписанияПозиций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПакетыЛьготСотрудникам.Организация КАК Организация,
	               |	ПакетыЛьготСотрудникам.Подразделение КАК Подразделение,
	               |	ПакетыЛьготСотрудникам.Должность КАК Должность,
	               |	ПакетыЛьготСотрудникам.Позиция КАК Позиция,
	               |	ПакетыЛьготСотрудникам.Льгота КАК Льгота,
	               |	ПакетыЛьготСотрудникам.Размер КАК Размер,
	               |	ПакетыЛьготСотрудникам.Льгота.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени
	               |ПОМЕСТИТЬ ВТЛьготыПозиций
	               |ИЗ
	               |	РегистрСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию КАК ПакетыЛьготСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
	               |		ПО ПакетыЛьготСотрудникам.Организация = ИсходныеДанные.Организация
	               |			И ПакетыЛьготСотрудникам.Подразделение = ИсходныеДанные.Подразделение
	               |			И ПакетыЛьготСотрудникам.Должность = ИсходныеДанные.Должность
	               |			И ПакетыЛьготСотрудникам.Позиция = ИсходныеДанные.Позиция
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияПоказателейЛьготСотрудникам.Организация КАК Организация,
	               |	ЗначенияПоказателейЛьготСотрудникам.Подразделение КАК Подразделение,
	               |	ЗначенияПоказателейЛьготСотрудникам.Должность КАК Должность,
	               |	ЗначенияПоказателейЛьготСотрудникам.Позиция КАК Позиция,
	               |	ЗначенияПоказателейЛьготСотрудникам.Показатель КАК Показатель,
	               |	ЗначенияПоказателейЛьготСотрудникам.Значение КАК Значение
	               |ПОМЕСТИТЬ ВТЗначенияПоказателей
	               |ИЗ
	               |	РегистрСведений.ЗначенияПоказателейЛьготСотрудникамПоШтатномуРасписанию КАК ЗначенияПоказателейЛьготСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
	               |		ПО ЗначенияПоказателейЛьготСотрудникам.Организация = ИсходныеДанные.Организация
	               |			И ЗначенияПоказателейЛьготСотрудникам.Подразделение = ИсходныеДанные.Подразделение
	               |			И ЗначенияПоказателейЛьготСотрудникам.Должность = ИсходныеДанные.Должность
	               |			И ЗначенияПоказателейЛьготСотрудникам.Позиция = ИсходныеДанные.Позиция
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛьготыПозиций.Организация КАК Организация,
	               |	ЛьготыПозиций.Подразделение КАК Подразделение,
	               |	ЛьготыПозиций.Должность КАК Должность,
	               |	ЛьготыПозиций.Позиция КАК Позиция,
	               |	ЛьготыПозиций.Льгота КАК Льгота,
	               |	НачисленияПоказатели.Показатель КАК Показатель
	               |ПОМЕСТИТЬ ВТПоказателиЛьгот
	               |ИЗ
	               |	ВТЛьготыПозиций КАК ЛьготыПозиций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |		ПО ЛьготыПозиций.Льгота = НачисленияПоказатели.Ссылка
	               |			И (ЛьготыПозиций.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛьготыПозиций.Организация КАК Организация,
	               |	ЛьготыПозиций.Подразделение КАК Подразделение,
	               |	ЛьготыПозиций.Должность КАК Должность,
	               |	ЛьготыПозиций.Позиция КАК Позиция,
	               |	ЛьготыПозиций.Льгота КАК Льгота,
	               |	ЛьготыПозиций.Размер КАК Размер
	               |ИЗ
	               |	ВТЛьготыПозиций КАК ЛьготыПозиций
	               |ГДЕ
	               |	ЛьготыПозиций.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Подразделение,
	               |	Должность,
	               |	Позиция,
	               |	Льгота
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиЛьгот.Организация КАК Организация,
	               |	ПоказателиЛьгот.Подразделение КАК Подразделение,
	               |	ПоказателиЛьгот.Должность КАК Должность,
	               |	ПоказателиЛьгот.Позиция КАК Позиция,
	               |	ПоказателиЛьгот.Льгота КАК Льгота,
	               |	ПоказателиЛьгот.Показатель КАК Показатель,
	               |	ЗначенияПоказателей.Значение КАК Значение
	               |ИЗ
	               |	ВТПоказателиЛьгот КАК ПоказателиЛьгот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей
	               |		ПО ПоказателиЛьгот.Организация = ЗначенияПоказателей.Организация
	               |			И ПоказателиЛьгот.Подразделение = ЗначенияПоказателей.Подразделение
	               |			И ПоказателиЛьгот.Должность = ЗначенияПоказателей.Должность
	               |			И ПоказателиЛьгот.Позиция = ЗначенияПоказателей.Позиция
	               |			И ПоказателиЛьгот.Показатель = ЗначенияПоказателей.Показатель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Подразделение,
	               |	Должность,
	               |	Позиция,
	               |	Льгота
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛьготыПозиций.Организация КАК Организация,
	               |	ЛьготыПозиций.Подразделение КАК Подразделение,
	               |	ЛьготыПозиций.Должность КАК Должность,
	               |	ЛьготыПозиций.Позиция КАК Позиция,
	               |	ЛьготыПозиций.Льгота КАК Льгота
	               |ИЗ
	               |	ВТЛьготыПозиций КАК ЛьготыПозиций
	               |ГДЕ
	               |	ЛьготыПозиций.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Подразделение,
	               |	Должность,
	               |	Позиция,
	               |	Льгота";
				   
	Возврат Запрос;
	
КонецФункции

Процедура ДополнитьМассивИспользуемыхКатегорийНачислений(МассивКатегорий) Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеЛьготыСотрудников") Тогда 
		МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота);
	КонецЕсли;
	
КонецПроцедуры

Функция КатегорииНачисленийЛьготы()
	
	МассивКатегорий = Новый Массив;
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота);
	
	Возврат МассивКатегорий;
	
КонецФункции

Процедура ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы) Экспорт 
	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеЛьготСотрудников")); 
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеЛьготСотрудников", "ДатаИзменения",	"КадровыйУчет", "Организация");
	
КонецПроцедуры

Процедура УстановитьВидимостьГруппыЛьготы(Элементы, ИмяГруппыЛьготы = "ЛьготыСтраница") Экспорт
	
	ИспользоватьЛьготы = ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЛьготы, "Видимость", ИспользоватьЛьготы);
	
КонецПроцедуры

Функция ДействующиеЛьготыСотрудников(СотрудникиДаты, ДокументСсылка, ФормироватьСПериодичностьДень = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроенияФОТ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействующиеПлановыеРасчеты.ПериодЗаписи,
		|	ДействующиеПлановыеРасчеты.Период,
		|	ДействующиеПлановыеРасчеты.Сотрудник КАК Сотрудник,
		|	ДействующиеПлановыеРасчеты.Начисление КАК Льгота,
		|	ДействующиеПлановыеРасчеты.Начисление.Рассчитывается КАК Рассчитывается,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ДействующиеПлановыеРасчеты.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ КАК Размер,
		|	ВЫБОР
		|		КОГДА РасчетыПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательЗависящийОтСтажа,
		|	ЕСТЬNULL(РасчетыПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ДействующиеПлановыеРасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ДействующиеПлановыеРасчеты.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ДействующиеПлановыеРасчеты.Начисление = ПлановыйФОТ.Начисление
		|			И ДействующиеПлановыеРасчеты.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК РасчетыПоказатели
		|		ПО ДействующиеПлановыеРасчеты.Начисление = РасчетыПоказатели.Ссылка
		|			И (ДействующиеПлановыеРасчеты.Используется)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|		ПО (ЗначенияПериодическихПоказателей.Показатель = РасчетыПоказатели.Показатель)
		|			И (ЗначенияПериодическихПоказателей.Сотрудник = ДействующиеПлановыеРасчеты.Сотрудник)
		|ГДЕ
		|	ДействующиеПлановыеРасчеты.Используется
		|	И ДействующиеПлановыеРасчеты.Начисление.ЯвляетсяЛьготой
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ДействующиеПлановыеРасчеты.Начисление,
		|	Показатель";
		
	ДанныеСотрудников = Новый Соответствие;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Льготы = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля("Льгота") Цикл
			
			СтруктураНачисления = Новый Структура("ПериодЗаписи,Период,Сотрудник,Льгота,Рассчитывается,Размер");
			ЗаполнитьЗначенияСвойств(СтруктураНачисления, Выборка);
			
			Показатели = Новый Массив;
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Показатель) Тогда
						
					ОписаниеПоказателя = Новый Структура("ПоказательЗависящийОтСтажа,Показатель,Значение");
					ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, Выборка);
					Показатели.Добавить(ОписаниеПоказателя);
					
				КонецЕсли; 
				
			КонецЦикла;
			
			СтруктураНачисления.Вставить("Показатели", Показатели);
			Льготы.Добавить(СтруктураНачисления);
			
		КонецЦикла;
		
		ДанныеСотрудников.Вставить(Выборка.Сотрудник, Новый Структура("Льготы", Льготы));
		
	КонецЦикла;
	
	Возврат ДанныеСотрудников;
	
КонецФункции

// Дополняет структуру данных кадровых переводов данными льгот сотрудников
//
Процедура ЗаполнитьДействующиеЛьготыСотрудников(ТаблицаСотрудников, ДанныеПеревода, ИсключаемыйРегистратор) Экспорт
	
	ДанныеЛьгот = ДействующиеЛьготыСотрудников(ТаблицаСотрудников, ИсключаемыйРегистратор);
	Для Каждого ДанныеЛьготСотрудника Из ДанныеЛьгот Цикл
		
		ИдентификаторСтрокиВидаРасчета = 1000001;
		
		СтруктураДанных = ДанныеПеревода.Получить(ДанныеЛьготСотрудника.Ключ);
		ИменаРеквизитовЛьгот = СтруктураДанных.ТабличныеЧасти.ОписаниеТабличныхЧастей["Льготы"];
		ИменаРеквизитовПоказателей = СтруктураДанных.ТабличныеЧасти.ОписаниеТабличныхЧастей["Показатели"];
		
		Для Каждого ОписаниеЛьготы Из ДанныеЛьготСотрудника.Значение.Льготы Цикл
			
			СтруктураСтроки = Новый Структура(ИменаРеквизитовЛьгот);
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ОписаниеЛьготы);
			СтруктураСтроки.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			СтруктураДанных.ТабличныеЧасти.Льготы.Добавить(СтруктураСтроки);
			
			Для Каждого ОписаниеПоказателя Из ОписаниеЛьготы.Показатели Цикл
				
				СтруктураСтрокиПоказателя = Новый Структура(ИменаРеквизитовПоказателей);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиПоказателя, ОписаниеПоказателя);
				СтруктураСтрокиПоказателя.ИдентификаторСтрокиВидаРасчета = СтруктураСтроки.ИдентификаторСтрокиВидаРасчета;
					
				СтруктураДанных.ТабличныеЧасти.Показатели.Добавить(СтруктураСтрокиПоказателя);
			
			КонецЦикла;
			
		КонецЦикла;
		
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействующиеЛьготыСотрудниковВРеквизитФормы(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыЛьгот, ФормироватьСПериодичностьДень = Истина)
	
	ПутьКДанным = ОписаниеТаблицыЛьгот.ПутьКДанным;
	ПутьКДаннымПоказатели = ОписаниеТаблицыЛьгот.ПутьКДаннымПоказателей;
	
	ДанныеПлановыхРасчетов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымПоказатели);
	
	ДействующиеЛьготыСотрудниковВРеквизит(ДокументСсылка, СотрудникиДаты, ДанныеПлановыхРасчетов, ДанныеПоказателей, ОписаниеТаблицыЛьгот, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыЛьгот, 1, Истина);
	
КонецПроцедуры

Процедура ДействующиеЛьготыСотрудниковВРеквизит(ДокументСсылка, СотрудникиДаты, ДанныеПлановыхРасчетов, ДанныеПоказателей, ОписаниеТаблицыЛьгот, ФормироватьСПериодичностьДень = Истина)
	
	ДанныеЛьгот = ДействующиеЛьготыСотрудников(СотрудникиДаты, ДокументСсылка);
	
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыЛьгот.НомерТаблицы * 1000000 + 1;
	
	Для Каждого ДанныеЛьготСотрудника Из ДанныеЛьгот Цикл
		
		Для Каждого ОписаниеЛьготы Из ДанныеЛьготСотрудника.Значение.Льготы Цикл
			
			СтрокаПлановыхРасчетов = ДанныеПлановыхРасчетов.Добавить();
			
			Если ОписаниеТаблицыЛьгот.СодержитПолеСотрудник Тогда
				СтрокаПлановыхРасчетов[ОписаниеТаблицыЛьгот.ИмяРеквизитаСотрудник] = ДанныеЛьготСотрудника.Ключ;
			КонецЕсли;
			
			СтрокаПлановыхРасчетов[ОписаниеТаблицыЛьгот.ИмяРеквизитаВидРасчета] = ОписаниеЛьготы.Льгота;
			СтрокаПлановыхРасчетов.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			ЕстьКолонкаРазмер = ЗарплатаКадрыРасширенный.ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "Размер");
			ЕстьКолонкаДействующийВидРасчета = ЗарплатаКадрыРасширенный.ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "ДействующийВидРасчета");
			
			Если ЕстьКолонкаДействующийВидРасчета Тогда 
				СтрокаПлановыхРасчетов["ДействующийВидРасчета"] = Истина;
			КонецЕсли;
			
			Если ЕстьКолонкаРазмер Тогда
				
				СтрокаПлановыхРасчетов.Размер = ОписаниеЛьготы.Размер;
				
				Если ЗарплатаКадрыРасширенный.ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "ТекущееЗначение1") И Не ОписаниеЛьготы.Рассчитывается Тогда
					СтрокаПлановыхРасчетов.ТекущееЗначение1 = ОписаниеЛьготы.Размер;
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ОписаниеПоказателя Из ОписаниеЛьготы.Показатели Цикл
				
				ДанныеПоказателя = ДанныеПоказателей.Добавить();
				ДанныеПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				ДанныеПоказателя.Показатель = ОписаниеПоказателя.Показатель;
				ДанныеПоказателя.Значение = ОписаниеПоказателя.Значение;
				Если ЗарплатаКадрыРасширенный.ЕстьКолонкаВСтрокеКоллекции(ДанныеПоказателя, "ТекущееЗначение") Тогда
					ДанныеПоказателя.ТекущееЗначение = ОписаниеПоказателя.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставДействующихЛьготСотрудникаВОбъекте(Объект, ВремяРегистрации, ДанныеПлановыхРасчетов, ДанныеПоказателей, ОписаниеТаблицыЛьгот) Экспорт
	
	Объект[ОписаниеТаблицыЛьгот.ИмяТаблицы].Очистить();
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = ВремяРегистрации;
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) И НЕ Объект.Проведен Тогда
		ИсключаемыйРегистратор = Объект.ИсправленныйДокумент;
	Иначе
		ИсключаемыйРегистратор = Объект.Ссылка;
	КонецЕсли;
	
	ДействующиеЛьготыСотрудниковВРеквизит(ИсключаемыйРегистратор, ТаблицаСотрудников, ДанныеПлановыхРасчетов, ДанныеПоказателей, ОписаниеТаблицыЛьгот);
	
КонецПроцедуры

Процедура ЗаполнитьСоставДействующихЛьготСотрудника(Форма, ОписаниеТаблицыЛьгот) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = Форма.Объект;
	
	Объект[ОписаниеТаблицыЛьгот.ИмяТаблицы].Очистить();
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = Форма.ВремяРегистрации;
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) И НЕ Объект.Проведен Тогда
		ИсключаемыйРегистратор = Объект.ИсправленныйДокумент;
	Иначе
		ИсключаемыйРегистратор = Объект.Ссылка;
	КонецЕсли;
	
	ДействующиеЛьготыСотрудниковВРеквизитФормы(ИсключаемыйРегистратор, ТаблицаСотрудников, Форма, ОписаниеТаблицыЛьгот, 1);
	
КонецПроцедуры

Процедура ПрочитатьЛьготыСотрудника(Форма, Сотрудник, ОписаниеТаблицыЛьгот) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПутьКДанным = ОписаниеТаблицыЛьгот.ПутьКДанным;
	ДанныеЛьгот = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	ДанныеЛьгот.Очистить();
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Сотрудник;
	СтрокаСотрудник.Период = ТекущаяДатаСеанса();
	
	ДействующиеЛьготыСотрудниковВРеквизитФормы(Неопределено, ТаблицаСотрудников, Форма, ОписаниеТаблицыЛьгот, 1);
	
КонецПроцедуры

Процедура РассчитатьРазмерЛьготВФормеСОднимСотрудником(Форма, ОписаниеТаблицыЛьгот, Объект = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда 
		Объект = Форма.Объект;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
		
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
		
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотруднику(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		Форма,
		Объект.Сотрудник,
		ГоловнаяОрганизация,
		Форма.ВремяРегистрации,
		ОписаниеТаблицыЛьгот);

	КадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицуКадровыхДанныхПоСотруднику(
						Объект.Сотрудник, 
						Форма.ВремяРегистрации,
						Объект.Организация,
						Объект.Подразделение,
						Объект.КоличествоСтавок,
						Объект.ГрафикРаботы);
					
	РассчитанныеВторичныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, КадровыеДанные); 					
	
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникуВДанныеФормы(
		Форма, 
		РассчитанныеВторичныеДанные, 
		ГоловнаяОрганизация,
		ОписаниеТаблицыЛьгот);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПередЗаписьюНачисления(НачислениеОбъект) Экспорт 
	
	НачислениеОбъект.ЯвляетсяЛьготой = НачислениеЯвляетсяЛьготой(НачислениеОбъект);
	
КонецПроцедуры

Функция НачислениеЯвляетсяЛьготой(НачислениеОбъект)
	Возврат КатегорииВидовНачисленийЛьготы().Найти(НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено;
КонецФункции

Процедура УстановитьВидимостьНастроекСамообслуживанияЛьготы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ИспользуютсяИндивидуальныеЛьготы = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеЛьготыСотрудников");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаНастройкиСамообслуживания", "Видимость", ИспользуютсяИндивидуальныеЛьготы);
	
КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ИзменениеЛьготСотрудников); 
	
КонецПроцедуры

Процедура ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если КлючВарианта = "РасчетныйЛисток"
		Или КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования" Тогда
		
		ЗарплатаКадрыОтчетыРасширенный.УстановитьИспользованиеПараметраОтчета("ВыводитьИнформациюОЛьготах", НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКомандуИндивидуальныеЛьготыВФормеСотрудника(Форма, ГруппаФормы) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеЛьготСотрудников,ЧтениеЛьготСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Форма.Команды.Найти("ИндивидуальныеЛьготы") = Неопределено Тогда
		КомандаКадровыйРезерв = Форма.Команды.Добавить("ИндивидуальныеЛьготы");
		КомандаКадровыйРезерв.Действие = "Подключаемый_ИндивидуальныеЛьготы";
		КомандаКадровыйРезерв.Заголовок = НСтр("ru = 'Индивидуальные льготы'");
	КонецЕсли;
	
	// Добавляем кнопку
	Если Форма.Элементы.Найти("ИндивидуальныеЛьготы") = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить("ИндивидуальныеЛьготы", Тип("КнопкаФормы"), ГруппаФормы);
		Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Элемент.ИмяКоманды = "ИндивидуальныеЛьготы"; 
	КонецЕсли;
	
КонецПроцедуры

Функция КатегорииВидовНачисленийЛьготы()
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота);
	
	Возврат Категории;
	
КонецФункции
	                                                                                                                 
Процедура ПриПроверкеЗаполненияФормулыРасчетаНачисления(НачислениеОбъект, ПроверятьФормулуРасчета) Экспорт
	
	Если Не НачислениеЯвляетсяЛьготой(НачислениеОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьФормулуРасчета = НачислениеОбъект.ЛьготаУчитываетсяПриРасчетеЗарплаты;
	
КонецПроцедуры


#Область ПерерасчетЛьгот

Процедура УстановитьЗаголовокГруппыУправленияПерерасчетами(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЗарплатаГруппа",
		"Заголовок",
		НСтр("ru='Зарплата, льготы, удержания'"));
	
КонецПроцедуры

Процедура ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета, ТаблицаЛьготыПерерасчет = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЛьготыПерерасчет = Неопределено Тогда
		ДанныеПерерасчета.Вставить("ЛьготыПерерасчет", РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина));
	Иначе
		ДанныеПерерасчета.Вставить("ЛьготыПерерасчет", ТаблицаЛьготыПерерасчет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьПерерасчеты(МенеджерВременныхТаблиц, Регистратор, Организация) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	НачислениеЗарплатыЛьготыПерерасчет.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыЛьготыПерерасчет.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыЛьготыПерерасчет.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	НачислениеЗарплатыЛьготыПерерасчет.ДатаНачала КАК Период,
		|	НачислениеЗарплатыЛьготыПерерасчет.Начисление КАК ИзмененныеДанные,
		|	НЕОПРЕДЕЛЕНО КАК РегистраторПерерасчета,
		|	НЕОПРЕДЕЛЕНО КАК ТипИзменения,
		|	ЛОЖЬ КАК НачалоУчета
		|ПОМЕСТИТЬ ВТПредварительныеПерерасчетыЛьгот
		|ИЗ
		|	Документ.НачислениеЗарплаты.ЛьготыПерерасчет КАК НачислениеЗарплатыЛьготыПерерасчет
		|ГДЕ
		|	НачислениеЗарплатыЛьготыПерерасчет.Ссылка = &Регистратор";
	
	Запрос.Выполнить();
	
	ЗарегистрироватьПерерасчетыЛьгот(Запрос.МенеджерВременныхТаблиц, Регистратор);
	
КонецПроцедуры

Процедура ДополнитьЛьготамиЗапросВТПериодыРасчетаСотрудников(ТекстыЗапросов, МетаданныеРегистратора) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеРегистратора.ТабличныеЧасти.Найти("Льготы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекстыЗапросов.Добавить("ОБЪЕДИНИТЬ");
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыЛьготы.Ссылка.Организация КАК Организация,
		|	НачислениеЗарплатыЛьготы.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыЛьготы.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	НачислениеЗарплатыЛьготы.Начисление КАК Начисление,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	ЛОЖЬ КАК ПерерасчетНачислений,
		|	ИСТИНА КАК ПерерасчетЛьгот,
		|	ЛОЖЬ КАК ПерерасчетУдержаний
		|ИЗ
		|	Документ.НачислениеЗарплаты.Льготы КАК НачислениеЗарплатыЛьготы
		|ГДЕ
		|	НачислениеЗарплатыЛьготы.Ссылка = &Регистратор
		|	И &УдалитьПерерасчетыТекущегоПериода");
	
	Если МетаданныеРегистратора.Имя = "НачислениеЗарплаты" Тогда
		ТекстыЗапросов.Добавить(
			"	И НЕ НачислениеЗарплатыЛьготы.Ссылка.РежимДоначисления");
	КонецЕсли;
		
КонецПроцедуры

Процедура УдалитьПерерасчеты(Выборка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПерерасчетЛьгот Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПерерасчетЛьгот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
		НаборЗаписей.Отбор.Льгота.Установить(Выборка.ВидРасчета);
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьЗапросСотрудниковПересчетаПериода(Запрос) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|"
		+ "ВЫБРАТЬ
			|	ПерерасчетЗарплаты.Сотрудник
			|ИЗ
			|	РегистрСведений.ПерерасчетЛьгот КАК ПерерасчетЗарплаты
			|ГДЕ
			|	ПерерасчетЗарплаты.Организация = &Организация
			|	И ПерерасчетЗарплаты.ПериодДействия = &Месяц";
	
КонецПроцедуры

Процедура ЗарегистрироватьПерерасчетыЛьгот(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЧастиЗапроса = Новый Массив;
	Разделитель = "
		|ОБЪЕДИНИТЬ
		|";
	
	ТекстЗапросаПерерасчетовБезПроверки = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.Период КАК Период,
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.Сотрудник КАК Сотрудник,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК Начисление,
		|	ПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТПредварительныеПерерасчетыЛьгот КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения <> ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель)";
	
	ЧастиЗапроса.Добавить(ТекстЗапросаПерерасчетовБезПроверки);
	ДобавитьЧастьЗапросаПроверкиПерерасчетовЛьготПоПоказателям(МенеджерВременныхТаблиц, ЧастиЗапроса);
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Разделитель);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТПредварительныеПерерасчетыЛьгот");
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВТНеобходимыеПерерасчетыПриНачалеУчета(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПериодДействия,
		|	СотрудникиПериоды.РегистраторПерерасчета КАК Основание,
		|	ИсходныеДанныеПерерасчетов.Регистратор КАК ДокументНачисления,
		|	СотрудникиПериоды.Начисление КАК ВидРасчета
		|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО СотрудникиПериоды.Организация = ИсходныеДанныеПерерасчетов.Организация
		|			И СотрудникиПериоды.Сотрудник = ИсходныеДанныеПерерасчетов.Сотрудник
		|			И СотрудникиПериоды.ПериодДействия <= ИсходныеДанныеПерерасчетов.ПериодДействия
		|			И СотрудникиПериоды.Период <= ИсходныеДанныеПерерасчетов.ДатаОкончания
		|			И (НЕ ИсходныеДанныеПерерасчетов.Регистратор ССЫЛКА Документ.ПереносДанных)
		|			И (&ИсключаемыйРегистратор)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ОтобранныеНачисления
		|		ПО (ОтобранныеНачисления.Ссылка = ИсходныеДанныеПерерасчетов.Начисление)
		|ГДЕ
		|	НЕ СотрудникиПериоды.НачалоУчета";
	
	Если ЗначениеЗаполнено(ИсключаемыйРегистратор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистратор", "ИсходныеДанныеПерерасчетов.Регистратор <> &ИсключаемыйРегистратор");
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистратор", "ИСТИНА");
	КонецЕсли;
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТНеобходимыеПерерасчетыПриНачалеУчета") Тогда
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	НеобходимыеПерерасчетыПриНачалеУчета.Организация,
			|	НеобходимыеПерерасчетыПриНачалеУчета.Сотрудник,
			|	НеобходимыеПерерасчетыПриНачалеУчета.ФизическоеЛицо,
			|	НеобходимыеПерерасчетыПриНачалеУчета.ПериодДействия,
			|	НеобходимыеПерерасчетыПриНачалеУчета.Основание,
			|	НеобходимыеПерерасчетыПриНачалеУчета.ДокументНачисления,
			|	НеобходимыеПерерасчетыПриНачалеУчета.ВидРасчета
			|ИЗ
			|	ВТНеобходимыеПерерасчетыПриНачалеУчета КАК НеобходимыеПерерасчетыПриНачалеУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНеобходимыеПерерасчетыПриНачалеУчета";
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НеобходимыеПерерасчеты.Организация,
		|	НеобходимыеПерерасчеты.Сотрудник,
		|	НеобходимыеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НеобходимыеПерерасчеты.ПериодДействия,
		|	НеобходимыеПерерасчеты.Основание,
		|	НеобходимыеПерерасчеты.ДокументНачисления,
		|	ВЫБОР
		|		КОГДА ПерерасчетыЛьгот.Организация ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СуществующаяЗапись,
		|	НеобходимыеПерерасчеты.ВидРасчета КАК Льгота
		|ИЗ
		|	ВТНеобходимыеПерерасчеты КАК НеобходимыеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерерасчетЛьгот КАК ПерерасчетыЛьгот
		|		ПО НеобходимыеПерерасчеты.Организация = ПерерасчетыЛьгот.Организация
		|			И НеобходимыеПерерасчеты.Сотрудник = ПерерасчетыЛьгот.Сотрудник
		|			И НеобходимыеПерерасчеты.ПериодДействия = ПерерасчетыЛьгот.ПериодДействия
		|			И НеобходимыеПерерасчеты.Основание = ПерерасчетыЛьгот.Основание
		|			И НеобходимыеПерерасчеты.ДокументНачисления = ПерерасчетыЛьгот.ДокументНачисления
		|			И НеобходимыеПерерасчеты.ВидРасчета = ПерерасчетыЛьгот.Льгота
		|ГДЕ
		|	НеобходимыеПерерасчеты.Основание <> НеобходимыеПерерасчеты.ДокументНачисления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.СуществующаяЗапись Тогда
				НаборЗаписей = РегистрыСведений.ПерерасчетЛьгот.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				НаборЗаписей.Отбор.Основание.Установить(Выборка.Основание);
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТНеобходимыеПерерасчеты");
	
КонецПроцедуры

Процедура ДобавитьЧастьЗапросаПроверкиПерерасчетовЛьготПоПоказателям(МенеджерВременныхТаблиц, ЧастиЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТПредварительныеПерерасчетыЛьгот КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТНачисленияСотрудниковПоПоказателямПерерасчетов") Тогда
		РасчетЗарплатыРасширенный.СоздатьВТНачисленияСотрудниковПоПоказателямПерерасчетов(МенеджерВременныхТаблиц);	
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.Период,
		|	ПредварительныеПерерасчеты.ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация,
		|	ПредварительныеПерерасчеты.Сотрудник,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета,
		|	НачисленияСотрудниковПоПоказателям.Начисление,
		|	ПредварительныеПерерасчеты.НачалоУчета
		|ИЗ
		|	ВТПредварительныеПерерасчетыЛьгот КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудниковПоПоказателямПерерасчетов КАК НачисленияСотрудниковПоПоказателям
		|		ПО (НачисленияСотрудниковПоПоказателям.Сотрудник = ПредварительныеПерерасчеты.Сотрудник)
		|			И (НачисленияСотрудниковПоПоказателям.Организация = ПредварительныеПерерасчеты.Организация)
		|			И (НачисленияСотрудниковПоПоказателям.Период = ПредварительныеПерерасчеты.Период)
		|			И (НачисленияСотрудниковПоПоказателям.ИзмененныеДанные = ПредварительныеПерерасчеты.ИзмененныеДанные)
		|			И (НачисленияСотрудниковПоПоказателям.ЯвляетсяЛьготой)
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель)";
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура СоздатьВТПредварительныеПерерасчетыЛьгот(МенеджерВременныхТаблиц) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыИзмененийЛьгот", ТипыИзмененийЛьгот());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПредварительныеПерерасчеты.Период КАК Период,
		|	ВТПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ВТПредварительныеПерерасчеты.Организация КАК Организация,
		|	ВТПредварительныеПерерасчеты.Сотрудник КАК Сотрудник,
		|	ВТПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ВТПредварительныеПерерасчеты.ТипИзменения КАК ТипИзменения,
		|	ВТПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ВТПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование,
		|	ВТПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ПОМЕСТИТЬ ВТПредварительныеПерерасчетыЛьгот
		|ИЗ
		|	ВТПредварительныеПерерасчеты КАК ВТПредварительныеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ВТПредварительныеПерерасчеты.ИзмененныеДанные = Начисления.Ссылка
		|ГДЕ
		|	ВТПредварительныеПерерасчеты.ТипИзменения В (&ТипыИзмененийЛьгот)
		|	И ВЫБОР
		|			КОГДА ВТПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.ПлановыеНачисления)
		|				ТОГДА ЕСТЬNULL(Начисления.ЯвляетсяЛьготой, ЛОЖЬ) = ИСТИНА
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТипыИзмененийЛьгот()
	
	ТипыИзменений = Новый Массив;
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.ПлановыеНачисления);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.Показатель);
	Возврат ТипыИзменений;
	
КонецФункции

Процедура СоздатьВТНеобходимыеПерерасчетыПриНачалеУчета(МенеджерВременныхТаблиц)
	
	ТаблицаПоследнихПериодов = Новый ТаблицаЗначений;
	ТаблицаПоследнихПериодов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоследнихПериодов.Колонки.Добавить("ПоследнийПериодДействия", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Организация
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|ГДЕ
		|	СотрудникиПериоды.НачалоУчета";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсходныеДанныеПерерасчетов.Организация,
			|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПоследнийПериодДействия
			|ИЗ
			|	РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
			|ГДЕ
			|	ИсходныеДанныеПерерасчетов.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПоследнийПериодДействия УБЫВ";
		
		ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоОрганизации.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПоследнихПериодов.Добавить(), ВыборкаПоОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаПоследнихПериодов", ТаблицаПоследнихПериодов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПоследнихПериодов.Организация КАК Организация,
		|	ТаблицаПоследнихПериодов.ПоследнийПериодДействия КАК ПоследнийПериодДействия
		|ПОМЕСТИТЬ ВТПоследниеПериодыНачислений
		|ИЗ
		|	&ТаблицаПоследнихПериодов КАК ТаблицаПоследнихПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиПериоды.ПериодДействия КАК ПериодДействия,
		|	СотрудникиПериоды.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	СотрудникиПериоды.Начисление КАК ВидРасчета
		|ПОМЕСТИТЬ ВТСотрудникиСПоследнимиПериодами
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеПериодыНачислений КАК ПоследниеПериодыНачислений
		|		ПО СотрудникиПериоды.Организация = ПоследниеПериодыНачислений.Организация
		|ГДЕ
		|	СотрудникиПериоды.НачалоУчета
		|	И СотрудникиПериоды.ПериодДействия <= ПоследниеПериодыНачислений.ПоследнийПериодДействия
		|	И РАЗНОСТЬДАТ(СотрудникиПериоды.ПериодДействия, ПоследниеПериодыНачислений.ПоследнийПериодДействия, МЕСЯЦ) < 12
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПериодДействия,
		|	СотрудникиПериоды.РегистраторПерерасчета КАК Основание,
		|	МАКСИМУМ(ИсходныеДанныеПерерасчетов.Регистратор) КАК ДокументНачисления,
		|	СотрудникиПериоды.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТНеобходимыеПерерасчетыПриНачалеУчета
		|ИЗ
		|	ВТСотрудникиСПоследнимиПериодами КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО СотрудникиПериоды.Организация = ИсходныеДанныеПерерасчетов.Организация
		|			И СотрудникиПериоды.ПериодДействия <= ИсходныеДанныеПерерасчетов.ПериодДействия
		|			И (ИсходныеДанныеПерерасчетов.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо,
		|	СотрудникиПериоды.РегистраторПерерасчета,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия,
		|	СотрудникиПериоды.ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоследниеПериодыНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиСПоследнимиПериодами";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьЗапросВТПерерасчетЗарплатыСОбластямиПерерасчетов(ТекстЗапроса, РежимДоначисления, Сотрудники = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ПерерасчетЛьгот.ПериодДействия, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ПерерасчетЛьгот.ПериодДействия, МЕСЯЦ) КАК ОкончаниеПериода,
		|	ПерерасчетЛьгот.Сотрудник,
		|	ПерерасчетЛьгот.ФизическоеЛицо,
		|	ПерерасчетЛьгот.Льгота КАК ВидРасчета,
		|	ЛОЖЬ КАК ПерерасчетНачислений,
		|	ИСТИНА КАК ПерерасчетЛьгот
		|ИЗ
		|	РегистрСведений.ПерерасчетЛьгот КАК ПерерасчетЛьгот
		|ГДЕ
		|	ПерерасчетЛьгот.Организация = &Организация
		|	И ПерерасчетЛьгот.ПериодДействия <= &ПериодДействия";
		
		
	Если Не РежимДоначисления Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ПерерасчетЛьгот.ПериодДействия <= &ПериодДействия", "И ПерерасчетЛьгот.ПериодДействия < &ПериодДействия");
	КонецЕсли;
	
	Если Сотрудники <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ПерерасчетЛьгот.Сотрудник В (&Сотрудники)";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбъединениеСПерерасчетамиЛьгот(ТекстЗапроса, ДополнительныеУсловия = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|"
		+ "ВЫБРАТЬ
		  |	ТаблицаПерерасчетов.Организация,
		  |	ТаблицаПерерасчетов.Сотрудник,
		  |	ТаблицаПерерасчетов.ФизическоеЛицо,
		  |	ТаблицаПерерасчетов.ПериодДействия,
		  |	ТаблицаПерерасчетов.Основание,
		  |	ТаблицаПерерасчетов.ДокументНачисления,
		  |	ЛОЖЬ КАК Поле1,
		  |	ИСТИНА КАК Поле2,
		  |	ЛОЖЬ КАК Поле3
		  |ИЗ
		  |	РегистрСведений.ПерерасчетЛьгот КАК ТаблицаПерерасчетов
		  |ГДЕ
		  |	ТаблицаПерерасчетов.Организация = &Организация
		  |	И &ДополнительныеУсловия";
		  
	Если ДополнительныеУсловия <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", ДополнительныеУсловия);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДополнительныеУсловия", "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОтборПерерасчетовНачисленийЛьготами(ТаблицаОтборов, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	СторнируемыеРегистраторы.ПериодДействия КАК ПериодДействия,
		|	СторнируемыеРегистраторы.ВидРасчета
		|ИЗ
		|	ВТСторнируемыеРегистраторыНачисленийИЛьгот КАК СторнируемыеРегистраторы
		|ГДЕ
		|	СторнируемыеРегистраторы.ПерерасчетЛьгот
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Сотрудник", Выборка.Сотрудник);
			СтруктураПоиска.Вставить("ПериодДействия", Выборка.ПериодДействия);
			
			НайденныеСтроки = ТаблицаОтборов.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаОтборов.Добавить();
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ПериодДействия = Выборка.ПериодДействия;
				НоваяСтрока.Начисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ВидРасчета);
			Иначе
				НайденныеСтроки[0].Начисления.Добавить(Выборка.ВидРасчета);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИсключаемыеКатегорииКатегориямиЛьгот(ИсключаемыеКатегорииНачислений) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКатегорииНачислений, КатегорииНачисленийЛьготы());
	
КонецПроцедуры

Процедура УдалитьЗаписьПерерасчетов(Месяц, Сотрудник, Организация, ДокументНачисления) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПерерасчетЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.ПериодДействия.Установить(Месяц);
	НаборЗаписей.Отбор.ДокументНачисления.Установить(ДокументНачисления);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ДобавитьПерерасчетЛьготСотрудника(Месяц, Сотрудник, ФизическоеЛицо, Организация, ДокументНачисления, ЛьготыСотрудника) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПерерасчетЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.ПериодДействия.Установить(Месяц);
	НаборЗаписей.Отбор.ДокументНачисления.Установить(ДокументНачисления);
	НаборЗаписей.Отбор.Основание.Установить(Неопределено);
		
	Для каждого ЗначениеЛьгот Из ЛьготыСотрудника Цикл
		
		Если ЗначениеЛьгот.Пометка Тогда
			
			Запись = НаборЗаписей.Добавить();
			Запись.Организация = Организация;
			Запись.Сотрудник = Сотрудник;
			Запись.ФизическоеЛицо = ФизическоеЛицо;
			Запись.ПериодДействия = Месяц;
			Запись.ДокументНачисления = ДокументНачисления;
			Запись.Льгота = ЗначениеЛьгот.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ФормаПодробнееОПерерасчетахПрочитатьПерерасчеты(Форма) Экспорт
	
	ЕстьПерерасчетыЛьгот = Ложь;
	ФОИспользоватьЛьготыСотрудников = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьЛьготыСотрудников");
	
	Если ФОИспользоватьЛьготыСотрудников Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПериодДействия", Форма.ПериодДействия);
		Запрос.УстановитьПараметр("Сотрудник", Форма.Сотрудник);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПерерасчетЛьгот.Льгота КАК Льгота,
			|	ПерерасчетЛьгот.Основание КАК Основание
			|ИЗ
			|	РегистрСведений.ПерерасчетЛьгот КАК ПерерасчетЛьгот
			|ГДЕ
			|	ПерерасчетЛьгот.Сотрудник = &Сотрудник
			|	И ПерерасчетЛьгот.ПериодДействия = &ПериодДействия
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПерерасчетЛьгот.Льгота.РеквизитДопУпорядочивания,
			|	ПерерасчетЛьгот.Льгота,
			|	ПерерасчетЛьгот.Основание.Дата,
			|	ПерерасчетЛьгот.Основание.Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ЕстьПерерасчетыЛьгот = Истина;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("Льгота") Цикл
				
				НоваяСтрока = Форма.ПерерасчетыЛьгот.Добавить();
				НоваяСтрока.Льгота = Выборка.Льгота;
				
				Пока Выборка.Следующий() Цикл
					ПерерасчетЗарплаты.ДобавитьПричинуПерерасчета(НоваяСтрока.Причины, Выборка.Основание);
				КонецЦикла;
				
				Если НоваяСтрока.Причины.Количество() = 0 Тогда
					НоваяСтрока.ПричинаНеизвестна = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПерерасчетыЛьготГруппа",
		"Видимость",
		ФОИспользоватьЛьготыСотрудников И ЕстьПерерасчетыЛьгот);
	
КонецПроцедуры

#КонецОбласти

#Область ОтпускПоУходуЗаРебенком

Процедура ДополнитьСтруктуруОписанийТаблицФормыОтпускаПоУходу(СтруктураТаблицФормы, ОписаниеТаблицыЛьгот, ОписаниеТаблицыОплатаЛьгот = Неопределено) Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		СтруктураТаблицФормы.ОписаниеТаблицыЛьгот = ОписаниеТаблицыЛьгот;
		Если ОписаниеТаблицыОплатаЛьгот <> Неопределено Тогда 
			СтруктураТаблицФормы.ОписаниеТаблицыОплатаЛьгот = ОписаниеТаблицыОплатаЛьгот;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоставДействующихЛьготВОтпускеПоУходу(Форма, ТаблицаСотрудников, ОписаниеТаблицыЛьгот) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = Форма.Объект;
	
	Объект[ОписаниеТаблицыЛьгот.ИмяТаблицы].Очистить();
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) И НЕ Объект.Проведен Тогда
		ИсключаемыйРегистратор = Объект.ИсправленныйДокумент;
	Иначе
		ИсключаемыйРегистратор = Объект.Ссылка;
	КонецЕсли;
	
	ДействующиеЛьготыСотрудниковВРеквизитФормы(ИсключаемыйРегистратор, ТаблицаСотрудников, Форма, ОписаниеТаблицыЛьгот, 1);
	
КонецПроцедуры

Процедура РассчитатьРазмерЛьготВФормеДокументаСНесколькимиПозициями(ЭтаФорма, ВремяРегистрации, ОписаниеТаблицыЛьгот) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
		
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ЭтаФорма.Объект.Организация);
		
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотрудникам(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		ЭтаФорма,
		ЭтаФорма.СотрудникиДокумента,
		ГоловнаяОрганизация,
		ВремяРегистрации,
		ОписаниеТаблицыЛьгот);
					
	РассчитанныеВторичныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей); 					
	
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникамВДанныеФормы(
		ЭтаФорма, 
		РассчитанныеВторичныеДанные, 
		ГоловнаяОрганизация,
		ОписаниеТаблицыЛьгот);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЛимитыПакетовЛьгот

Функция ЛимитПакетаЛьготПозиции(Позиция)
	
	ДанныеПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Позиция, "Владелец, Подразделение, Должность");
	
	ТаблицаОписанийПозиций = ТаблицаОписанийПозиций();
	
	НоваяСтрока = ТаблицаОписанийПозиций.Добавить();
	НоваяСтрока.Позиция = Позиция;
	НоваяСтрока.Организация = ДанныеПозиции.Владелец;
	НоваяСтрока.Подразделение = ДанныеПозиции.Подразделение;
	НоваяСтрока.Должность = ДанныеПозиции.Должность;
	
	Запрос = ЗапросДанныеЛимитовЛьготПозиций(ТаблицаОписанийПозиций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЛимита = Неопределено;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЛимита = СтруктураДанныхЛимита();
		ЗаполнитьЗначенияСвойств(ДанныеЛимита, Выборка);
	КонецЕсли;
	
	Возврат ДанныеЛимита;
	
КонецФункции

Функция ЗапросДанныеЛимитовЛьготПозиций(ТаблицаОписанийПозиций) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОписанияПозиций", ТаблицаОписанийПозиций);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписанияПозиций.Организация КАК Организация,
	               |	ОписанияПозиций.Подразделение КАК Подразделение,
	               |	ОписанияПозиций.Должность КАК Должность,
	               |	ОписанияПозиций.Позиция КАК Позиция
	               |ПОМЕСТИТЬ ВТИсходныеДанные
	               |ИЗ
	               |	&ОписанияПозиций КАК ОписанияПозиций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛимитыЛьготСотрудникам.Организация КАК Организация,
	               |	ЛимитыЛьготСотрудникам.Подразделение КАК Подразделение,
	               |	ЛимитыЛьготСотрудникам.Должность КАК Должность,
	               |	ЛимитыЛьготСотрудникам.Позиция КАК Позиция,
	               |	ЛимитыЛьготСотрудникам.ИспользоватьЛимит КАК ИспользоватьЛимит,
	               |	ЛимитыЛьготСотрудникам.КоличествоБаллов КАК КоличествоБаллов,
	               |	ЛимитыЛьготСотрудникам.ДоступныВсеЛьготы КАК ДоступныВсеЛьготы
	               |ИЗ
	               |	РегистрСведений.ЛимитыЛьготСотрудникамПоШтатномуРасписанию КАК ЛимитыЛьготСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
	               |		ПО ЛимитыЛьготСотрудникам.Организация = ИсходныеДанные.Организация
	               |			И ЛимитыЛьготСотрудникам.Подразделение = ИсходныеДанные.Подразделение
	               |			И ЛимитыЛьготСотрудникам.Должность = ИсходныеДанные.Должность
	               |			И ЛимитыЛьготСотрудникам.Позиция = ИсходныеДанные.Позиция
	               |
	               |УПОРЯДОЧИТЬ ПО
				   |	Организация,
				   |	Подразделение,
	               |	Должность,
	               |	Позиция";
	
	Возврат Запрос;
	
КонецФункции

Функция СтруктураДанныхЛимита() Экспорт 
	
	Возврат Новый Структура("ИспользоватьЛимит, КоличествоБаллов, ДоступныВсеЛьготы");
	
КонецФункции

Процедура ПрочитатьЛимитыЛьготПозиции(Форма) Экспорт 
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЛимитыЛьготСотрудникамПоШтатномуРасписанию) Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = Форма.Объект.Ссылка;
	ДанныеЛимита = ЛимитПакетаЛьготПозиции(Позиция);
	
	Если ДанныеЛимита <> Неопределено Тогда 
		Форма.ИспользоватьЛимит = ДанныеЛимита.ИспользоватьЛимит;
		Форма.КоличествоБаллов = ДанныеЛимита.КоличествоБаллов;
		Форма.ДоступныВсеЛьготы = ?(ДанныеЛимита.ДоступныВсеЛьготы, 0, 1);
	КонецЕсли;
	
КонецПроцедуры

Функция ЛьготыФизическихЛиц(ДатаПолученияДанных, МассивФизическихЛиц = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИндивидуальныеЛьготыФизическихЛиц.Дата) КАК Дата,
		|	ИндивидуальныеЛьготыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТМаксимальныеДаты
		|ИЗ
		|	РегистрСведений.ИндивидуальныеЛьготыФизическихЛиц КАК ИндивидуальныеЛьготыФизическихЛиц
		|ГДЕ
		|	ИндивидуальныеЛьготыФизическихЛиц.Дата <= &ДатаПолученияДанных
		|	И ИндивидуальныеЛьготыФизическихЛиц.ФизическоеЛицо В(&МассивФизическихЛиц)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИндивидуальныеЛьготыФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндивидуальныеЛьготыФизическихЛиц.Дата КАК Дата,
		|	ИндивидуальныеЛьготыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИндивидуальныеЛьготыФизическихЛиц.Льгота КАК Льгота
		|ИЗ
		|	ВТМаксимальныеДаты КАК МаксимальныеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндивидуальныеЛьготыФизическихЛиц КАК ИндивидуальныеЛьготыФизическихЛиц
		|		ПО МаксимальныеДаты.Дата = ИндивидуальныеЛьготыФизическихЛиц.Дата
		|			И МаксимальныеДаты.ФизическоеЛицо = ИндивидуальныеЛьготыФизическихЛиц.ФизическоеЛицо
		|			И (ИндивидуальныеЛьготыФизическихЛиц.Льгота <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо";
				   
	Если МассивФизическихЛиц = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИндивидуальныеЛьготыФизическихЛиц.ФизическоеЛицо В(&МассивФизическихЛиц)", "ИСТИНА");
	КонецЕсли;				   
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЛьготыФизическихЛиц = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл 
		ЛьготыФизическогоЛица = Новый Массив;
		ЛьготыФизическихЛиц.Вставить(Выборка.ФизическоеЛицо, ЛьготыФизическогоЛица);
		Пока Выборка.Следующий() Цикл 
			ЛьготыФизическогоЛица.Добавить(Выборка.Льгота);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЛьготыФизическихЛиц;
	
КонецФункции

Функция ЛьготыФизическогоЛица(ДатаПолученияДанных, ФизическоеЛицо) Экспорт 
	
	МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ЛьготыФизическихЛиц = ЛьготыФизическихЛиц(ДатаПолученияДанных, МассивФизическихЛиц);
	
	Возврат ЛьготыФизическихЛиц[ФизическоеЛицо];
	
КонецФункции

#КонецОбласти

#Область НачислениеЗарплаты

Процедура ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля, ЛьготыИмя = "Льготы") Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	ЛьготыФиксРасчет = Новый Массив;
	ЛьготыФиксРасчет.Добавить("Результат");
	
	ЛьготыФиксРасчетВремени = Новый Массив;
	ЛьготыФиксРасчетВремени.Добавить("ОтработаноДней");
	ЛьготыФиксРасчетВремени.Добавить("ОтработаноЧасов");
	ЛьготыФиксРасчетВремени.Добавить("НормаДней");
	ЛьготыФиксРасчетВремени.Добавить("НормаЧасов");
	
	ЛьготыФиксСтрока = Новый Массив;
	ЛьготыФиксСтрока.Добавить("Сотрудник");
	ЛьготыФиксСтрока.Добавить("Подразделение");
	ЛьготыФиксСтрока.Добавить("Начисление");
	ЛьготыФиксСтрока.Добавить("ДатаНачала");
	ЛьготыФиксСтрока.Добавить("ДатаОкончания");
	
	ЛьготыФиксЗаполнение = Новый Массив;
	ЛьготыФиксЗаполнение.Добавить("МестоПолученияДохода");
	
	ЛьготыПоля = Новый Структура;
	ЛьготыПоля.Вставить("ФиксРасчет", ЛьготыФиксРасчет);
	ЛьготыПоля.Вставить("ФиксЗаполнение", ЛьготыФиксЗаполнение);
	ЛьготыПоля.Вставить("ФиксСтрока", ЛьготыФиксСтрока);
	ЛьготыПоля.Вставить("ФиксРасчетВремени", ЛьготыФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить(ЛьготыИмя, ЛьготыПоля);
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДополнитьФорму(Форма, ОписаниеТаблицыЛьгот, ИмяКоманднойПанели, КонтролируемыеПоля = Неопределено, ИмяГруппыЛьготы = "ГруппаЛьготы", РегистрацияНачисленийДоступна = Истина, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьВидимостьГруппыЛьготы(Форма.Элементы, ИмяГруппыЛьготы);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(Форма, ОписаниеТаблицыЛьгот, "Начисления", ИмяКоманднойПанели, РегистрацияНачисленийДоступна, КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, ДокументСсылка);
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(Форма, ОписанияТаблиц) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблиц) = Тип("Массив") Тогда
		СписокОписанийТаблиц = ОписанияТаблиц;
	Иначе
		СписокОписанийТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблиц);
	КонецЕсли;
	
	Для каждого ОписаниеТаблицы Из СписокОписанийТаблиц Цикл
		
		ИмяКоманды = ОписаниеТаблицы.ИмяТаблицы + "Подробно";
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(Форма, Форма.Элементы[ИмяКоманды].Пометка, ОписаниеТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРежимОтображенияПодробноИзНастройки(Форма, ОписанияТаблиц) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблиц) = Тип("Массив") Тогда
		СписокОписанийТаблиц = ОписанияТаблиц;
	Иначе
		СписокОписанийТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблиц);
	КонецЕсли;
	
	Для каждого ОписаниеТаблицы Из СписокОписанийТаблиц Цикл
		
		КлючОбъекта = Форма.Объект.Ссылка.Метаданные().Имя;
		КлючНастройки = ОписаниеТаблицы.ИмяТаблицы + "Подробно";
		ВидимостьПолейПодробно = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастройки);
		ВидимостьПолейПодробно = ?(ВидимостьПолейПодробно = Неопределено, Ложь, ВидимостьПолейПодробно);
		
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(Форма, ВидимостьПолейПодробно, ОписаниеТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ОтображатьТекущиеЗначения = Ложь, ФормаДополнена = Истина) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ОтображатьТекущиеЗначения, ФормаДополнена);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(Форма, ДокументОбъект, ОписанияТаблиц, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблиц) = Тип("Массив") Тогда
		СписокОписанийТаблиц = ОписанияТаблиц;
	Иначе
		СписокОписанийТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблиц);
	КонецЕсли;
	
	Для каждого ОписаниеТаблицы Из СписокОписанийТаблиц Цикл
		ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьИменаТаблицРаспределенияПоТерриториямУсловиямТруда(ИменаТаблиц) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		ИменаТаблиц = ?(ПустаяСтрока(ИменаТаблиц), "", ИменаТаблиц + ",") + "Льготы";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИменаТаблицРаспределяемыхПоСтатьямФинансирования(ИменаТаблицРаспределяемыхПоСтатьямФинансирования, ДанныеВидаОперации) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") И ДанныеВидаОперации.ИспользоватьЛьготы Тогда
		
		ИменаТаблицРаспределяемыхПоСтатьямФинансирования =
			?(ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования), "", ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",") + "Льготы";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСтрокаЛьготы(СтрокаИсточник, ВидыРасчетаИнфо) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КатегорииЛьготы = КатегорииНачисленийЛьготы();
	КатегорияСтроки = СтрокаИсточник.Категория;
	Если Не ЗначениеЗаполнено(КатегорияСтроки) Тогда
		КатегорияСтроки = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление).КатегорияНачисленияИлиНеоплаченногоВремени;
	КонецЕсли;
	
	Возврат КатегорииЛьготы.Найти(КатегорияСтроки) <> Неопределено;
	
КонецФункции

Процедура ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, СтруктураПараметров) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ОписанияТаблицФормы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата;
	
	Если СодержимоеДокумента.Льготы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеПоля = "Сотрудник";
	СтруктураПоиска = Новый Структура(КлючевыеПоля);
	СочетанияСтрок = РасчетЗарплатыРасширенный.СочетанияИсправленныхСтрок(СодержимоеДокумента.Льготы, СтруктураПараметров.КонтролируемыеПоля["Льготы"], КлючевыеПоля);
	Если СочетанияСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРезультатовРаспределения = РасчетЗарплатыРасширенный.ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ЛьготыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Льготы Цикл
		Если Не РасчетЗарплатыРасширенный.ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(
			МенеджерРасчета,
			Строка,
			Организация,
			ФизическоеЛицо,
			"Льготы",
			ДанныеРаспределенияПоТерриториямУсловиямТруда,
			ДанныеРезультатовРаспределения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных).
//
// Описание:
//   В Разделы необходимо добавить метаданные тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.Мотивация) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.Мотивация, НСтр("ru = 'Отчеты по мотивации'"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЛьготыСотрудников);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ЛьготыСотрудников, "ИспользованиеИндивидуальныхПакетовЛьгот");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьИндивидуальныеЛьготыСотрудников");
	
КонецПроцедуры

Функция ИспользуетсяФункционалЛьгот() Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников");
	
КонецФункции

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("НастройкиЛьготСотрудников", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиЛьготСотрудников, Метаданные.РегистрыСведений.НастройкиЛьготСотрудников));
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НастройкиЛьготСотрудников") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиЛьготСотрудников"], СохраненныеНастройки["НастройкиЛьготСотрудников"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиЛьготСотрудников.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиЛьготСотрудников);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиЛьготСотрудников, НастройкиСтруктура);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиЛьготСотрудников.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиЛьготСотрудников);
	НастройкиПрограммы.Вставить("НастройкиЛьготСотрудников", НастройкиСтруктура);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиЛьготСотрудников.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиЛьготСотрудников);
	Настройки.Записать();
	
КонецПроцедуры

Процедура ПриОписанииДанныхЗаполненияТаблицДокумента(ДанныеЗаполнения) Экспорт
	
	ДанныеЗаполнения.Вставить("Льготы", Новый ТаблицаЗначений);
	ДанныеЗаполнения.Вставить("ЛьготыПерерасчет", Новый ТаблицаЗначений);
	
КонецПроцедуры

Процедура ПослеПолученияНачисленийДляЗаполненияТаблицДокумента(ДанныеЗаполнения, СтрокиРасчета = Неопределено, ДокументОбъект = Неопределено, ИмяТаблицы = "Льготы", ТаблицыПерерасчетов = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицыПерерасчетов Тогда
		ИмяТаблицыНачислений = "НачисленияПерерасчет";
		ИмяТаблицыЛьготы = "ЛьготыПерерасчет";
	Иначе
		ИмяТаблицыНачислений = "Начисления";
		ИмяТаблицыЛьготы = "Льготы";
	КонецЕсли;
	
	// Выделяем льготы в отдельную коллекцию.
	ДанныеЗаполнения[ИмяТаблицыЛьготы] = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	Индекс = 0;
	Пока Индекс < ДанныеЗаполнения[ИмяТаблицыНачислений].Количество() Цикл
		Строка = ДанныеЗаполнения[ИмяТаблицыНачислений][Индекс];
		Если Строка.ЯвляетсяЛьготой = Истина Тогда
			НоваяСтрока = ДанныеЗаполнения[ИмяТаблицыЛьготы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Если СтрокиРасчета <> Неопределено Тогда
				СтрокиРасчета.Добавить(НоваяСтрока);
			КонецЕсли;
			Если ДокументОбъект <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДокументОбъект[ИмяТаблицы].Добавить(), Строка);
			КонецЕсли;
			ДанныеЗаполнения[ИмяТаблицыНачислений].Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникСведенийОНачисленияхШтатногоРасписания

Процедура ДобавитьОписаниеСведенийОЛьготахСотрудникамПозицийШтатногоРасписания(ПараметрыПостроения, ОписанияИсточниковНачислений) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЛьготыСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПостроения.Льготы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИсточников = УправлениеШтатнымРасписанием.ПустоеОписаниеИсточников();
	ОписанияИсточниковНачислений.Добавить(ОписаниеИсточников);
	
	ИдентификаторИсточникаНачислений = "РегистрСведенийПакетыЛьготСотрудникамПоШтатномуРасписанию";
	ИдентификаторИсточникаПоказателей = "РегистрСведенийЗначенияПоказателейЛьготСотрудникамПоШтатномуРасписанию";
	
	ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаНачислений);
	УправлениеШтатнымРасписанием.ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаПоказателей);
	
	ИмяДанныхШР = "Льготы";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"ИСТИНА");
	
	ИмяДанныхШР = "Начисление";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ИдентификаторИсточникаНачислений + ".Льгота");
	
	ИмяДанныхШР = "Показатель";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей);
	
	ИмяДанныхШР = "ИдентификаторСтрокиВидаРасчета";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"0");
	
	ИмяДанныхШР = "РазмерМин";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ИдентификаторИсточникаНачислений + ".Размер");
	
	ИмяДанныхШР = "РазмерМакс";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ИдентификаторИсточникаНачислений + ".Размер");
	
	ИмяДанныхШР = "ЗначениеМин";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		ИдентификаторИсточникаПоказателей + ".Значение");
	
	ИмяДанныхШР = "ЗначениеМакс";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		ИдентификаторИсточникаПоказателей + ".Значение");
	
	ИмяДанныхШР = "Размер";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "Значение";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей);
	
	Соединение = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
	Соединение.Источник = "РегистрСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию";
	Соединение.Псевдоним = ИдентификаторИсточникаНачислений;
	Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	
	Соединение.Условие =
		"РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = " + ИдентификаторИсточникаНачислений + ".Позиция";
	
	Соединение.ПсевдонимИсточникаСвязи = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
	
	СоединениеСПоказателямиНачислений = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
	СоединениеСПоказателямиНачислений.Источник = "ПланВидовРасчета.Начисления.Показатели";
	СоединениеСПоказателямиНачислений.Псевдоним = "ПланВидовРасчетаНачисленияПоказатели";
	СоединениеСПоказателямиНачислений.Условие =
		ИдентификаторИсточникаНачислений + ".Льгота = ПланВидовРасчетаНачисленияПоказатели.Ссылка";
	
	Соединение.Соединения.Добавить(СоединениеСПоказателямиНачислений);
	
	СоединениеСПоказателями = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
	СоединениеСПоказателями.Источник = "РегистрСведений.ЗначенияПоказателейЛьготСотрудникамПоШтатномуРасписанию";
	СоединениеСПоказателями.Псевдоним = ИдентификаторИсточникаПоказателей;
	СоединениеСПоказателями.Условие =
		ИдентификаторИсточникаНачислений + ".Позиция = " + ИдентификаторИсточникаПоказателей + ".Позиция
		|	И ПланВидовРасчетаНачисленияПоказатели.Показатель = " + ИдентификаторИсточникаПоказателей + ".Показатель";
	
	Соединение.Соединения.Добавить(СоединениеСПоказателями);
	ОписаниеИсточника.Соединения.Добавить(Соединение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
