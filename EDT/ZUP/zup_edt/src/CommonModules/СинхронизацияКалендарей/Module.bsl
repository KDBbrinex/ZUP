////////////////////////////////////////////////////////////////////////////////
//	Общие серверные процедуры для синхронизации календарей
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт

	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияКалендарей;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьСинхронизациюКалендарей;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	СинхронизацияDAV.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	СинхронизацияGoogle.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);

КонецПроцедуры

Процедура ПослеЗаписиСобытияКалендаря(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
		Возврат;
	КонецЕсли;
	Пользователь = Ссылка.Пользователь;
	Узлы = УзлыДляВыгрузки(Пользователь);
	Если Не ЗначениеЗаполнено(Узлы) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПроцедуры = НовыеПараметрыПроцедурыСинхронизации();
	ПараметрыПроцедуры.Вставить("Узлы", Узлы);
	ПараметрыПроцедуры.Вставить("ДатаНачала", НачалоДня(Ссылка.ДатаНачала));
	ПараметрыПроцедуры.Вставить("ДатаОкончания", КонецДня(Ссылка.ДатаОкончания));
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Синхронизация календаря пользователя %1'"),
		Пользователь));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"СинхронизацияКалендарей.СинхронизироватьВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне);
		
КонецПроцедуры

Функция ДлительнаяОперацияПередПланированиемЭтапа(УникальныйИдентификаторФормы) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		НСтр("ru = 'Синхронизация календарей перед планированием этапа'"));
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"СинхронизацияКалендарей.СинхронизироватьВФоне",
		Новый Структура(),
		ПараметрыВыполненияВФоне);
	Возврат ДлительнаяОперация;

КонецФункции

Процедура ПослеПланированияЭтапа(Участники, ДанныеЭтапа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
		Возврат;
	КонецЕсли;
	Узлы = УзлыДляВыгрузки(Участники);
	Если Не ЗначениеЗаполнено(Узлы) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПроцедуры = НовыеПараметрыПроцедурыСинхронизации();
	ПараметрыПроцедуры.Вставить("Узлы", Узлы);
	ПараметрыПроцедуры.Вставить("ДатаНачала", НачалоДня(ДанныеЭтапа.Период));
	ПараметрыПроцедуры.Вставить("ДатаОкончания", КонецДня(ДанныеЭтапа.ПериодОкончание));
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Синхронизация календарей при планировании этапа %1'"), ДанныеЭтапа.Этап));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"СинхронизацияКалендарей.СинхронизироватьВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне);

КонецПроцедуры

// Формирует описание календаря в виде строки
// для вставки в файл формата .ics или тело HTTP запроса.
//
// Параметры:
//  СобытияКалендаря - ТаблицаЗначений - См. НовоеОписаниеСобытийКалендаря()
//	Организатор - Строка - адрес электронной почты организатора
//
// Возвращаемое значение:
//   Строка - тело файла формата .ics или HTTP запроса.
//
Функция СобытияiCalendar(СобытияКалендаря, Организатор = Неопределено, ВремяНапоминания = 0) Экспорт

	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	"BEGIN:VCALENDAR
	|VERSION:2.0
	|PRODID:%1
	|METHOD:PUBLISH", ИдентификаторПриложенияiCalendar());
	Для Каждого Событие Из СобытияКалендаря Цикл
		Результат = Результат + Символы.ПС + СобытиеiCalendar(Событие, Организатор, ВремяНапоминания);
	КонецЦикла;
	Результат = Результат + Символы.ПС + "END:VCALENDAR";
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыЗапускаСинхронизации

// Процедура регламентного задания СинхронизацияКалендарей.
//
Процедура Синхронизировать() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СинхронизацияКалендарей);
	СинхронизироватьКалендари();

КонецПроцедуры

Процедура ПолучитьСписокКалендарейВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт

	ПараметрыПроцедуры.Вставить("НовоеОписаниеКалендаря", НовоеОписаниеКалендаря());
	Если ПараметрыПроцедуры.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.DAV Тогда
		СинхронизацияDAV.ПолучитьСписокКалендарейВФоне(ПараметрыПроцедуры, АдресХранилища);
	ИначеЕсли ПараметрыПроцедуры.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.Google Тогда
		СинхронизацияGoogle.ПолучитьСписокКалендарейВФоне(ПараметрыПроцедуры, АдресХранилища);
	КонецЕсли;

КонецПроцедуры

// Процедура для запуска синхронизации в фоновом задании.
//
// Параметры:
//	ПараметрыПроцедуры - Структура - См. НовыеПараметрыПроцедурыСинхронизации()
//	АдресХранилища - Строка - Не указывается, используется только для совместимости с подсистемой длительных операций
//
Процедура СинхронизироватьВФоне(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры);
	Если ПараметрыПроцедурыСинхронизации.Регистрировать И ЗначениеЗаполнено(ПараметрыПроцедурыСинхронизации.Узлы) Тогда
		ЗарегистрироватьИзменения(ПараметрыПроцедурыСинхронизации);
	КонецЕсли;
	СинхронизироватьКалендари(ПараметрыПроцедурыСинхронизации);

КонецПроцедуры

#КонецОбласти

#Область ФункцииОбработкиiCalendar

// Преобразовывает строку формата iCalendar в структуру, содержащую параметры события.
//
Функция СтруктураiCalendar(СтрокаiCalendar) Экспорт

	Результат = Новый Структура;
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаiCalendar, Символы.ПС);
	ЧтениеСобытия = Ложь;
	ЧтениеНапоминания = Ложь;
	
	ЧтениеОписания = Ложь;
	МассивОписания = Новый Массив;
	ПерваяСтрокаОписания = "";
	
	ЧтениеОстальногоОписания = Ложь;
	МассивОстальногоОписания = Новый Массив;
	ОстальноеОписание = "";
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если ЧтениеОписания И СтрНачинаетсяС(Строка, " ") Тогда
			МассивОписания.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеОписания И Не СтрНачинаетсяС(Строка, " ") Тогда
			ПерваяСтрокаОписания = СтрСоединить(МассивОписания, "");
			ПерваяСтрокаОписания = РаскодироватьСтрокуiCalendar(ПерваяСтрокаОписания);
			ЧтениеОписания = Ложь;
		КонецЕсли;
		
		Если ЧтениеОстальногоОписания И СтрНачинаетсяС(Строка, " ") Тогда
			МассивОстальногоОписания.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеОстальногоОписания И Не СтрНачинаетсяС(Строка, " ") Тогда
			ОстальноеОписание = СтрСоединить(МассивОстальногоОписания, "");
			ОстальноеОписание = РаскодироватьСтрокуiCalendar(ОстальноеОписание);
			ЧтениеОстальногоОписания = Ложь;
		КонецЕсли;
		
		Если СокрЛП(Строка) = "BEGIN:VEVENT" Тогда
			ЧтениеСобытия = Истина;
		ИначеЕсли СокрЛП(Строка) = "END:VEVENT" Тогда
			Прервать;
		ИначеЕсли СокрЛП(Строка) = "BEGIN:VALARM" Тогда
			ЧтениеНапоминания = Истина;
		ИначеЕсли СокрЛП(Строка) = "END:VALARM" Тогда
			ЧтениеНапоминания = Ложь;
		КонецЕсли;
		Если ЧтениеСобытия Тогда
			Если ЧтениеНапоминания Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(Строка, СтрДлина("UID")) = "UID" Тогда
				Результат.Вставить("Идентификатор", СтрЗаменить(СокрЛП(Строка), "UID:", ""));
			ИначеЕсли Лев(Строка, СтрДлина("DTSTART")) = "DTSTART" Тогда
				Результат.Вставить("ДатаНачала", ВыделитьВремя(Строка, "DTSTART"));
			ИначеЕсли Лев(Строка, СтрДлина("DTEND")) = "DTEND" Тогда
				Результат.Вставить("ДатаОкончания", ВыделитьВремя(Строка, "DTEND"));
			ИначеЕсли Лев(Строка, СтрДлина("SUMMARY")) = "SUMMARY" Тогда
				ЧтениеОписания = Истина;
				МассивОписания = Новый Массив;
				МассивОписания.Добавить(СтрЗаменить(Строка, "SUMMARY:", ""));
			ИначеЕсли Лев(Строка, СтрДлина("DESCRIPTION")) = "DESCRIPTION" Тогда
				ЧтениеОстальногоОписания = Истина;
				МассивОстальногоОписания = Новый Массив;
				МассивОстальногоОписания.Добавить(СтрЗаменить(Строка, "DESCRIPTION:", ""));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Описание = ПерваяСтрокаОписания;
	Если ЗначениеЗаполнено(ОстальноеОписание) Тогда
		Описание = Описание + Символы.ПС + ОстальноеОписание;
	КонецЕсли;
	Результат.Вставить("Описание", Описание);
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает местную дату в формат iCalendar, основанный на ISO 8601.
//
Функция ДатаФорматаiCalendar(Дата, ФорматДаты = "УниверсальноеВремя", ТипДаты = "") Экспорт
	
	Результат = "";
	Если ФорматДаты = "ТолькоДата" И ТипДаты = "ДатаНачала" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ТолькоДата" И ТипДаты = "ДатаОкончания" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата + 86400, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ТолькоДата" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ВремяСЧасовымПоясом" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMddTHHmmss"));
	ИначеЕсли ФорматДаты = "УниверсальноеВремя" Тогда
		Результат = Формат(УниверсальноеВремя(Дата), "ДФ=yyyyMMddTHHmmssZ");
	Иначе
		Результат = Формат(УниверсальноеВремя(Дата), "ДФ=yyyyMMddTHHmmssZ");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТекстОписанияФорматаiCalendar(Знач ТекстОписания)
	
	ТекстОписания = СтрПолучитьСтроку(ТекстОписания, 1);
	
	ТекстОписания = КодироватьСтрокуВiCalendar(ТекстОписания);
	
	ДлинаПервойСтроки = 65;
	Если СтрДлина(ТекстОписания) <= ДлинаПервойСтроки Тогда
		Возврат ТекстОписания;
	КонецЕсли;
	
	МассивТекстОписанияФорматаiCalendar = Новый Массив;
	МассивТекстОписанияФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаПервойСтроки));
	ТекстОписания = Сред(ТекстОписания, ДлинаПервойСтроки + 1);
	
	ДлинаОстальныхСтрок = 72;
	Пока ЗначениеЗаполнено(ТекстОписания) Цикл
		МассивТекстОписанияФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаОстальныхСтрок));
		ТекстОписания = ?(СтрДлина(ТекстОписания) > ДлинаОстальныхСтрок,
			Сред(ТекстОписания, ДлинаОстальныхСтрок + 1),
			"");
	КонецЦикла;
	ТекстОписанияФорматаiCalendar = СтрСоединить(МассивТекстОписанияФорматаiCalendar, Символы.ПС + " ");
	
	Возврат ТекстОписанияФорматаiCalendar;
	
КонецФункции

Функция ТекстЗаметкиФорматаiCalendar(Знач ТекстОписания)
	
	ПозицияРазделителяСтроки = СтрНайти(ТекстОписания, Символы.ПС);
	Если СтрНайти(ТекстОписания, Символы.ПС) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = Сред(ТекстОписания, ПозицияРазделителяСтроки + 1);
	Если Не ЗначениеЗаполнено(ТекстОписания) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = КодироватьСтрокуВiCalendar(ТекстОписания);
	
	ДлинаПервойСтроки = 61;
	Если СтрДлина(ТекстОписания) <= ДлинаПервойСтроки Тогда
		Возврат Символы.ПС + "DESCRIPTION:" + ТекстОписания;
	КонецЕсли;
	
	МассивТекстЗаметкиФорматаiCalendar = Новый Массив;
	МассивТекстЗаметкиФорматаiCalendar.Добавить(Символы.ПС + "DESCRIPTION:" + Лев(ТекстОписания, ДлинаПервойСтроки));
	ТекстОписания = Сред(ТекстОписания, ДлинаПервойСтроки + 1);
	
	ДлинаОстальныхСтрок = 72;
	Пока ЗначениеЗаполнено(ТекстОписания) Цикл
		МассивТекстЗаметкиФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаОстальныхСтрок));
		ТекстОписания = ?(СтрДлина(ТекстОписания) > ДлинаОстальныхСтрок,
			Сред(ТекстОписания, ДлинаОстальныхСтрок + 1),
			"");
	КонецЦикла;
	ТекстЗаметкиФорматаiCalendar = СтрСоединить(МассивТекстЗаметкиФорматаiCalendar, Символы.ПС + " ");
	
	Возврат ТекстЗаметкиФорматаiCalendar;
	
КонецФункции

Функция СобытиеiCalendar(ОписаниеСобытия, Организатор, ВремяНапоминания)
	
	ВесьДень = ОписаниеСобытия.ДатаНачала = НачалоДня(ОписаниеСобытия.ДатаНачала)
		И ОписаниеСобытия.ДатаОкончания = КонецДня(ОписаниеСобытия.ДатаОкончания);
	ФорматДаты = ?(ВесьДень, "ТолькоДата", "ВремяСЧасовымПоясом");
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"BEGIN:VEVENT%1
		|UID:%2
		|DTSTART;%3
		|DTEND;%4
		|DTSTAMP:%5
		|SUMMARY:%6%7%8
		|END:VEVENT",
		?(ЗначениеЗаполнено(Организатор), Символы.ПС + "ORGANIZER:mailto:" + Организатор, ""),
		ОписаниеСобытия.Идентификатор,
		ДатаФорматаiCalendar(ОписаниеСобытия.ДатаНачала, ФорматДаты, "ДатаНачала"),
		ДатаФорматаiCalendar(ОписаниеСобытия.ДатаОкончания, ФорматДаты, "ДатаОкончания"),
		ДатаФорматаiCalendar(ОписаниеСобытия.ДатаНачала),
		ТекстОписанияФорматаiCalendar(ОписаниеСобытия.Описание),
		ТекстЗаметкиФорматаiCalendar(ОписаниеСобытия.Описание),
		НапоминаниеiCalendar(ВремяНапоминания));
	
	Возврат Результат;
	
КонецФункции

Функция НапоминаниеiCalendar(Секунд)

	Результат = "";
	Если Не Секунд > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Минут = Цел(Секунд/60);	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
	|BEGIN:VALARM
	|ACTION:DISPLAY
	|DESCRIPTION:Event reminder
	|TRIGGER:-PT%1M
	|X-WR-ALARMUID:%2
	|END:VALARM",
	Минут,
	Новый УникальныйИдентификатор);
	Возврат Результат;

КонецФункции

Функция ИдентификаторПриложенияiCalendar()

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"-//%1//%2//%3//RU", Метаданные.Поставщик, Метаданные.Синоним, Метаданные.Версия);

КонецФункции

Функция ВыделитьВремя(СтрокаВремени, Параметр)

	ЧасовойПояс = Неопределено;
	СтрокаВремени = СтрЗаменить(СтрокаВремени, Параметр, "");
	Если СтрНачинаетсяС(СтрокаВремени, ";VALUE=DATE:") Тогда
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ";VALUE=DATE:", "");
		Если Параметр = "DTSTART" Тогда
			ВыделенноеВремя = НачалоДня(Дата(СтрокаВремени));
		ИначеЕсли Параметр = "DTEND" Тогда
			ВыделенноеВремя = НачалоДня(Дата(СтрокаВремени));
		КонецЕсли;
	ИначеЕсли Лев(СтрокаВремени, 1) = ";" Тогда
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ";TZID=", "");
		Позиция = СтрНайти(СтрокаВремени, ":");
		ЧасовойПояс = Лев(СтрокаВремени, Позиция - 1);
		СтрокаВремени = Прав(СтрокаВремени, СтрДлина(СтрокаВремени) - Позиция);
		СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
		УниверсальноеВремя = УниверсальноеВремя(СтрокаВремени, ЧасовойПояс);
		ВыделенноеВремя = МестноеВремя(УниверсальноеВремя);
	Иначе
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ":", "");
		СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
		СтрокаВремени = СтрЗаменить(СтрокаВремени, "Z", "");
		УниверсальноеВремя = СтрокаВремени;
		ВыделенноеВремя = МестноеВремя(УниверсальноеВремя);
	КонецЕсли;
	
	Возврат ВыделенноеВремя;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("Регистрировать",	Ложь); //Регистрировать изменения
	Результат.Вставить("Узлы",				Новый Массив); //Массив узлов "ПланОбменаСсылка.СинхронизацияКалендарей"
	Результат.Вставить("ДатаНачала",		ТекущаяДатаСеанса() - 31536000);
	Результат.Вставить("ДатаОкончания",		ТекущаяДатаСеанса() + 31536000);
	Если ЗначениеЗаполнено(ПараметрыПроцедуры) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПараметрыПроцедуры);
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция НовоеОписаниеКалендаря()

	ОписаниеКалендаря = Новый Структура;
	ОписаниеКалендаря.Вставить("Владелец",					Справочники.Пользователи.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("ТипСинхронизации",			Перечисления.ТипыСинхронизацииКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("Узел",						ПланыОбмена.СинхронизацияКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("ВремяУведомленийЭкспорт",	0);
	ОписаниеКалендаря.Вставить("ВремяУведомленийИмпорт",	0);
	ОписаниеКалендаря.Вставить("Наименование",				"");
	ОписаниеКалендаря.Вставить("Идентификатор",				"");
	ОписаниеКалендаря.Вставить("ТокенСинхронизации",		"");
	ОписаниеКалендаря.Вставить("БезОписания",				Ложь);
	ОписаниеКалендаря.Вставить("ДатаПервоначальнойСинхронизации", Дата(1,1,1));
	ОписаниеКалендаря.Вставить("События",					НовоеОписаниеСобытийКалендаря());
	Возврат ОписаниеКалендаря;

КонецФункции

Функция НовоеОписаниеСобытийКалендаря() Экспорт

	ОписаниеСобытий = Новый ТаблицаЗначений;
	ОписаниеСобытий.Колонки.Добавить("Наименование",		Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("Описание",			Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ДатаНачала",			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("ДатаОкончания",		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("Идентификатор",		Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ОтпечатокОбъекта",	Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ПометкаУдаления",		Новый ОписаниеТипов("Булево"));
	ОписаниеСобытий.Колонки.Добавить("Ссылка",				Новый ОписаниеТипов("СправочникСсылка.ЗаписиРабочегоКалендаря"));
	Возврат ОписаниеСобытий;

КонецФункции

Функция НовоеОписаниеРезультатовСинхронизации()
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки",		"");
	Результат.Вставить("ТокеныСинхронизации",	Новый Соответствие);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ЗарегистрироватьИзменения(ПараметрыПроцедуры)

	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СинхронизацияКалендарей.Ссылка КАК Узел,
	|	СинхронизацияКалендарей.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТПользователи
	|ИЗ
	|	ПланОбмена.СинхронизацияКалендарей КАК СинхронизацияКалендарей
	|ГДЕ
	|	СинхронизацияКалендарей.Ссылка В(&Узлы)
	|	И СинхронизацияКалендарей.Включен
	|	И НЕ СинхронизацияКалендарей.ПометкаУдаления
	|	И НЕ СинхронизацияКалендарей.Ссылка = &ЭтотУзел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиРабочегоКалендаря.Пользователь КАК Пользователь,
	|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаписиДляРегистрации
	|ИЗ
	|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
	|ГДЕ
	|	НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления
	|	И ЗаписиРабочегоКалендаря.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаписиРабочегоКалендаря.Пользователь В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТПользователи.Пользователь
	|			ИЗ
	|				ВТПользователи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПользователи.Узел КАК Узел,
	|	ВТЗаписиДляРегистрации.Ссылка КАК Ссылка
	|ИЗ
	|	ВТПользователи КАК ВТПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиДляРегистрации КАК ВТЗаписиДляРегистрации
	|		ПО ВТПользователи.Пользователь = ВТЗаписиДляРегистрации.Пользователь");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("Узлы", ПараметрыПроцедурыСинхронизации.Узлы);
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыПроцедурыСинхронизации.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыПроцедурыСинхронизации.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Узел, Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура СинхронизироватьКалендари(ПараметрыПроцедуры = Неопределено)
	
	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры);
	ИнициализироватьУзелПланаОбмена();
	РезультатыСинхронизации = Новый Соответствие;
	ЗагрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации);
	ВыгрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации);
	ПланыОбмена.СинхронизацияКалендарей.ЗаписатьРезультатыСинхронизации(РезультатыСинхронизации);

КонецПроцедуры

Процедура ЗагрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации)

	ДанныеКалендарейДляЗагрузки = ДанныеКалендарейДляЗагрузки(ПараметрыПроцедурыСинхронизации.Узлы);
	Для Каждого ОписаниеКалендаря Из ДанныеКалендарейДляЗагрузки Цикл
		
		Если РезультатыСинхронизации.Получить(ОписаниеКалендаря.Узел) = Неопределено Тогда
			РезультатыСинхронизации.Вставить(ОписаниеКалендаря.Узел, НовоеОписаниеРезультатовСинхронизации());
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ОписаниеКалендаря.Узел);
		Исключение
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки = ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
		
		Попытка
			ДатаНачала = ПараметрыПроцедурыСинхронизации.ДатаНачала;
			ДатаОкончания = ПараметрыПроцедурыСинхронизации.ДатаОкончания;
			Если ПараметрыПроцедурыСинхронизации.ДатаНачала < ОписаниеКалендаря.ДатаПервоначальнойСинхронизации Тогда
				ДатаНачала = ОписаниеКалендаря.ДатаПервоначальнойСинхронизации;
			КонецЕсли;
			Если ДатаНачала > ДатаОкончания Тогда
				ДатаНачала = НачалоДня(ДатаОкончания);
			КонецЕсли;
			Если ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.DAV Тогда
				СинхронизацияDAV.ЗагрузитьДанныеКалендаря(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
			ИначеЕсли ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.Google Тогда
				СинхронизацияGoogle.ЗагрузитьДанныеКалендаря(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
			Иначе
				Продолжить;
			КонецЕсли;
			ИзменитьЗаписиКалендаря(ОписаниеКалендаря);
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ТокеныСинхронизации.Вставить(
				ОписаниеКалендаря.Идентификатор, ОписаниеКалендаря.ТокенСинхронизации);
		Исключение
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(ОписаниеКалендаря.Узел);
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации)

	ДанныеКалендарейДляВыгрузки = ДанныеКалендарейДляВыгрузки(ПараметрыПроцедурыСинхронизации.Узлы);
	Для Каждого ОписаниеКалендаря Из ДанныеКалендарейДляВыгрузки Цикл
		Если РезультатыСинхронизации.Получить(ОписаниеКалендаря.Узел) = Неопределено Тогда
			РезультатыСинхронизации.Вставить(ОписаниеКалендаря.Узел, НовоеОписаниеРезультатовСинхронизации());
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Если ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.DAV Тогда
				СинхронизацияDAV.ВыгрузитьДанныеКалендаря(ОписаниеКалендаря);
			ИначеЕсли ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.Google Тогда
				СинхронизацияGoogle.ВыгрузитьДанныеКалендаря(ОписаниеКалендаря);
			Иначе
				Продолжить;
			КонецЕсли;
		Исключение
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ИнициализироватьУзелПланаОбмена()

	УстановитьПривилегированныйРежим(Истина);
	ЭтотУзел = ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел();
	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
		Возврат;
	КонецЕсли;
	УзелОбъект = ЭтотУзел.ПолучитьОбъект();
	УзелОбъект.ОбменДанными.Загрузка = Истина;
	УзелОбъект.УстановитьНовыйКод();
	УзелОбъект.Наименование = НСтр("ru = 'Этот узел'");
	УзелОбъект.Записать();

КонецПроцедуры

Функция ДанныеКалендарейДляВыгрузки(Узлы)

	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Массив;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей) КАК Узел,
	|	ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).Пользователь КАК Пользователь,
	|	ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).ТипСинхронизации КАК ТипСинхронизации,
	|	ЕСТЬNULL(СинхронизацияКалендарейКалендари.Наименование, """") КАК НаименованиеКалендаря,
	|	ЕСТЬNULL(СинхронизацияКалендарейКалендари.Идентификатор, """") КАК ИдентификаторКалендаря,
	|	ЗаписиРабочегоКалендаряИзменения.Ссылка КАК Ссылка,
	|	ЗаписиРабочегоКалендаряИзменения.Ссылка.Наименование КАК Наименование,
	|	ЗаписиРабочегоКалендаряИзменения.Ссылка.Описание КАК Описание,
	|	ЗаписиРабочегоКалендаряИзменения.Ссылка.ДатаНачала КАК ДатаНачала,
	|	ЗаписиРабочегоКалендаряИзменения.Ссылка.ДатаОкончания КАК ДатаОкончания,
	|	ЗаписиРабочегоКалендаряИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.Идентификатор, """") КАК Идентификатор,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.ОтпечатокОбъекта, """") КАК ОтпечатокОбъекта,
	|	ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).ВремяУведомленийИмпорт КАК ВремяУведомленийИмпорт,
	|	ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).ВремяУведомленийЭкспорт КАК ВремяУведомленийЭкспорт
	|ИЗ
	|	Справочник.ЗаписиРабочегоКалендаря.Изменения КАК ЗаписиРабочегоКалендаряИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСинхронизацииКалендарей КАК ЗаписиСинхронизацииКалендарей
	|		ПО ЗаписиРабочегоКалендаряИзменения.Ссылка = ЗаписиСинхронизацииКалендарей.ЗаписьРабочегоКалендаря
	|			И ((ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей)) = ЗаписиСинхронизацииКалендарей.Узел)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СинхронизацияКалендарей.Календари КАК СинхронизацияКалендарейКалендари
	|		ПО ЗаписиРабочегоКалендаряИзменения.Узел = СинхронизацияКалендарейКалендари.Ссылка
	|			И (СинхронизацияКалендарейКалендари.Изменение)
	|ГДЕ
	|	НЕ (ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей)) = &ЭтотУзел
	|	И НЕ ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).ПометкаУдаления
	|	И ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).Включен
	|	И (&ОтборПоУзлам = ЛОЖЬ
	|			ИЛИ ВЫРАЗИТЬ(ЗаписиРабочегоКалендаряИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей) В (&Узлы))
	|	И НЕ(СинхронизацияКалендарейКалендари.БезОписания
	|				И ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.БезОписания, ЛОЖЬ))
	|	И НЕ ЗаписиРабочегоКалендаряИзменения.Ссылка.Наименование ЕСТЬ NULL
	|ИТОГИ ПО
	|	Узел");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("ОтборПоУзлам", ЗначениеЗаполнено(Узлы));
	Запрос.УстановитьПараметр("Узлы", Узлы);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	ВыборкаКалендари = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКалендари.Следующий() Цикл
		ОписаниеКалендаря = НовоеОписаниеКалендаря();
		ВыборкаСсылки = ВыборкаКалендари.Выбрать();
		Пока ВыборкаСсылки.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ОписаниеКалендаря.События) Тогда
				ОписаниеКалендаря.Владелец = ВыборкаСсылки.Пользователь;
				ОписаниеКалендаря.Узел = ВыборкаСсылки.Узел;
				ОписаниеКалендаря.Наименование = ВыборкаСсылки.НаименованиеКалендаря;
				ОписаниеКалендаря.Идентификатор = ВыборкаСсылки.ИдентификаторКалендаря;
				ОписаниеКалендаря.ТипСинхронизации = ВыборкаСсылки.ТипСинхронизации;
				ОписаниеКалендаря.ВремяУведомленийИмпорт = ВыборкаСсылки.ВремяУведомленийИмпорт;
				ОписаниеКалендаря.ВремяУведомленийЭкспорт = ВыборкаСсылки.ВремяУведомленийЭкспорт;
			КонецЕсли;
			НоваяСтрока = ОписаниеКалендаря.События.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСсылки);
		КонецЦикла;
		Результат.Добавить(ОписаниеКалендаря);
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция ДанныеКалендарейДляЗагрузки(Узлы)

	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Массив;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинхронизацияКалендарейКалендари.Ссылка КАК Узел,
	|	СинхронизацияКалендарейКалендари.Ссылка.Пользователь КАК Владелец,
	|	СинхронизацияКалендарейКалендари.Наименование КАК Наименование,
	|	СинхронизацияКалендарейКалендари.Идентификатор КАК Идентификатор,
	|	СинхронизацияКалендарейКалендари.ТокенСинхронизации КАК ТокенСинхронизации,
	|	СинхронизацияКалендарейКалендари.БезОписания КАК БезОписания,
	|	СинхронизацияКалендарейКалендари.Ссылка.ТипСинхронизации КАК ТипСинхронизации,
	|	СинхронизацияКалендарейКалендари.Ссылка.ВремяУведомленийЭкспорт КАК ВремяУведомленийЭкспорт,
	|	СинхронизацияКалендарейКалендари.Ссылка.ВремяУведомленийИмпорт КАК ВремяУведомленийИмпорт,
	|	СинхронизацияКалендарейКалендари.Ссылка.ДатаПервоначальнойСинхронизации КАК ДатаПервоначальнойСинхронизации
	|ИЗ
	|	ПланОбмена.СинхронизацияКалендарей.Календари КАК СинхронизацияКалендарейКалендари
	|ГДЕ
	|	НЕ СинхронизацияКалендарейКалендари.Ссылка = &ЭтотУзел
	|	И (&ОтборПоУзлам = ЛОЖЬ
	|			ИЛИ СинхронизацияКалендарейКалендари.Ссылка В (&Узлы))
	|	И НЕ СинхронизацияКалендарейКалендари.Ссылка.ПометкаУдаления
	|	И СинхронизацияКалендарейКалендари.Ссылка.Включен
	|	И СинхронизацияКалендарейКалендари.Чтение");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("ОтборПоУзлам", ЗначениеЗаполнено(Узлы));
	Запрос.УстановитьПараметр("Узлы", Узлы);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеКалендаря = НовоеОписаниеКалендаря();
		ЗаполнитьЗначенияСвойств(ОписаниеКалендаря, Выборка);
		Результат.Добавить(ОписаниеКалендаря);
	КонецЦикла;
	Возврат Результат;

КонецФункции

Процедура ИзменитьЗаписиКалендаря(ОписаниеКалендаря)

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	События.Наименование КАК Наименование,
	|	События.Описание КАК Описание,
	|	События.ДатаНачала КАК ДатаНачала,
	|	События.ДатаОкончания КАК ДатаОкончания,
	|	События.Идентификатор КАК Идентификатор,
	|	События.ОтпечатокОбъекта КАК ОтпечатокОбъекта,
	|	События.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ События
	|ИЗ
	|	&События КАК События
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	События.Наименование КАК Наименование,
	|	События.Описание КАК Описание,
	|	События.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА События.ДатаОкончания = НАЧАЛОПЕРИОДА(События.ДатаОкончания, ДЕНЬ)
	|			ТОГДА ДОБАВИТЬКДАТЕ(События.ДатаОкончания, СЕКУНДА, -1)
	|		ИНАЧЕ События.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	События.Идентификатор КАК Идентификатор,
	|	События.ОтпечатокОбъекта КАК ОтпечатокОбъекта,
	|	События.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.ЗаписьРабочегоКалендаря, ЗНАЧЕНИЕ(Справочник.ЗаписиРабочегоКалендаря.ПустаяСсылка)) КАК ЗаписьСсылка,
	|	РАЗНОСТЬДАТ(События.ДатаНачала, События.ДатаОкончания, ДЕНЬ) > 0 КАК ВесьДень,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.БезОписания, ЛОЖЬ) КАК БезОписания
	|ИЗ
	|	События КАК События
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСинхронизацииКалендарей КАК ЗаписиСинхронизацииКалендарей
	|		ПО (ПОДСТРОКА(События.Идентификатор, 0, 1000) = ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.Идентификатор, 0, 1000))
	|			И (ЗаписиСинхронизацииКалендарей.Узел = &Узел)
	|ГДЕ
	|	НЕ(ЗаписиСинхронизацииКалендарей.ЗаписьРабочегоКалендаря ЕСТЬ NULL
	|				И События.ПометкаУдаления)");
	Запрос.УстановитьПараметр("События", ОписаниеКалендаря.События);
	Запрос.УстановитьПараметр("Узел", ОписаниеКалендаря.Узел);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ИзменитьЗаписьКалендаря(Выборка, ОписаниеКалендаря);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ИзменитьЗаписьКалендаря(Выборка, ОписаниеКалендаря)

	Если ЗначениеЗаполнено(Выборка.ЗаписьСсылка) Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗаписиРабочегоКалендаря");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ЗаписьСсылка);
		Блокировка.Заблокировать();
	КонецЕсли;
	Если Выборка.ПометкаУдаления И ЗначениеЗаполнено(Выборка.ЗаписьСсылка) Тогда
		Если Выборка.ЗаписьСсылка.Автор = ОписаниеКалендаря.Владелец Тогда
			ЗаписьОбъект = Выборка.ЗаписьСсылка.ПолучитьОбъект();
			Если ЗаписьОбъект.Связанная Тогда
				ЗаписьОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи", Истина);
			КонецЕсли;
			ЗаписьОбъект.УстановитьПометкуУдаления(Выборка.ПометкаУдаления);
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.ЗаписиСинхронизацииКалендарей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЗаписьРабочегоКалендаря = ЗаписьОбъект.Ссылка;
		МенеджерЗаписи.Узел = ОписаниеКалендаря.Узел;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	Иначе
		СозданНовыйДокумент = Ложь;
		Если ЗначениеЗаполнено(Выборка.ЗаписьСсылка) Тогда
			ОтборОтпечатка = Новый Структура("ЗаписьРабочегоКалендаря, Узел", Выборка.ЗаписьСсылка, ОписаниеКалендаря.Узел);
			ТекущийОтпечатокОбъекта = РегистрыСведений.ЗаписиСинхронизацииКалендарей.Получить(ОтборОтпечатка).ОтпечатокОбъекта;
			Если Выборка.ОтпечатокОбъекта = ТекущийОтпечатокОбъекта Тогда
				Возврат;
			КонецЕсли;
			ЗаписьОбъект = Выборка.ЗаписьСсылка.ПолучитьОбъект();
		Иначе
			ЗаписьОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
			ЗаписьОбъект.Автор = ОписаниеКалендаря.Владелец;
			ЗаписьОбъект.Пользователь = ОписаниеКалендаря.Владелец;
			СозданНовыйДокумент = Истина;
		КонецЕсли;
		ЗаписьБезОписания = (ОписаниеКалендаря.БезОписания И СозданНовыйДокумент) Или Выборка.БезОписания;
		Если ЗаписьБезОписания Тогда
			ЗаписьОбъект.Наименование	= НСтр("ru = 'Занят'");
			ЗаписьОбъект.Описание		= НСтр("ru = 'Занят'");
			ЗаписьОбъект.Связанная		= Истина;
		Иначе
			ЗаписьОбъект.Наименование = ?(ЗначениеЗаполнено(Выборка.Наименование), Выборка.Наименование, Выборка.Описание);
			ЗаписьОбъект.Описание = ?(ЗначениеЗаполнено(Выборка.Описание), Выборка.Описание, Выборка.Наименование);
		КонецЕсли;
		УстанавливатьНапоминание = ?(Не ЗаписьОбъект.ДатаНачала = Выборка.ДатаНачала
			Или Не ЗаписьОбъект.ДатаОкончания = Выборка.ДатаОкончания, Истина, Ложь);
		ЗаполнитьЗначенияСвойств(ЗаписьОбъект, Выборка, "ДатаНачала, ДатаОкончания, ВесьДень");
		ЗаписьОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
		ЗаписьОбъект.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;
		ЗаписьОбъект.ОбменДанными.Загрузка = Истина;
		Если ЗаписьОбъект.Автор = ОписаниеКалендаря.Владелец Тогда
			Если ЗаписьОбъект.Связанная Тогда
				ЗаписьОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи", Истина);
			КонецЕсли;
			ЗаписьОбъект.Записать();
			ЗаписьОбъект.УстановитьПометкуУдаления(Выборка.ПометкаУдаления);
		КонецЕсли;
		Если ЗаписьОбъект.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.ЗаписиСинхронизацииКалендарей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЗаписьРабочегоКалендаря	= ЗаписьОбъект.Ссылка;
		МенеджерЗаписи.Узел						= ОписаниеКалендаря.Узел;
		МенеджерЗаписи.ИдентификаторКалендаря	= ОписаниеКалендаря.Идентификатор;
		МенеджерЗаписи.Идентификатор			= Выборка.Идентификатор;
		МенеджерЗаписи.ОтпечатокОбъекта			= Выборка.ОтпечатокОбъекта;
		МенеджерЗаписи.БезОписания				= ЗаписьБезОписания;
		МенеджерЗаписи.Записать();
		Если УстанавливатьНапоминание И ЗначениеЗаполнено(ОписаниеКалендаря.ВремяУведомленийИмпорт) Тогда
			Если ЗаписьОбъект.ДатаНачала >= НачалоДня(ТекущаяДатаСеанса()) Тогда
				УстановитьНапоминание(ЗаписьОбъект.Ссылка, ОписаниеКалендаря.Владелец, ОписаниеКалендаря.ВремяУведомленийИмпорт);
			Иначе
				ОтключитьНапоминание(ЗаписьОбъект.Ссылка, ОписаниеКалендаря.Владелец);
			КонецЕсли;
		КонецЕсли;
		Если ЗаписьОбъект.Связанная И ЗначениеЗаполнено(ЗаписьОбъект.Предмет)
			И ЗаписьОбъект.Автор = ОписаниеКалендаря.Владелец Тогда
			ИзменитьСвязанныеЗаписи(ЗаписьОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ИзменитьСвязанныеЗаписи(Ссылка)

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РаботаСКандидатами");
	ЭлементБлокировки.УстановитьЗначение("Кандидат", Ссылка.Предмет);
	Блокировка.Заблокировать();
	НаборЗаписей = РегистрыСведений.РаботаСКандидатами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Кандидат.Установить(Ссылка.Предмет);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ЭтапРаботы = Ссылка.СвязанныйПредмет Тогда
			Запись.Период = Ссылка.ДатаНачала;
			Запись.ПериодОкончание = Ссылка.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СвязанныеЗаписи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиРабочегоКалендаря КАК СвязанныеЗаписи
	|		ПО ЗаписиРабочегоКалендаря.СвязанныйПредмет = СвязанныеЗаписи.СвязанныйПредмет
	|			И ЗаписиРабочегоКалендаря.Предмет = СвязанныеЗаписи.Предмет
	|			И ЗаписиРабочегоКалендаря.Автор = СвязанныеЗаписи.Автор
	|ГДЕ
	|	ЗаписиРабочегоКалендаря.Ссылка = &Ссылка
	|	И НЕ СвязанныеЗаписи.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗаписиРабочегоКалендаря");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ЗаписьОбъект, Ссылка,
				"ВесьДень, ДатаНачала, ДатаОкончания, Наименование, Описание");
			ЗаписьОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи", Истина);
			ЗаписьОбъект.Записать();
			Если Не ЗаписьОбъект.ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
				ЗаписьОбъект.УстановитьПометкуУдаления(Ссылка.ПометкаУдаления);
			КонецЕсли;
			Напоминание = ПолучитьПараметрыНапоминания(ЗаписьОбъект.Ссылка, ЗаписьОбъект.Пользователь);
			Если ЗначениеЗаполнено(Напоминание) Тогда
				НапоминанияПользователя.УдалитьНапоминание(Напоминание);
				НапоминанияПользователя.УстановитьНапоминание(
					Строка(ЗаписьОбъект.Ссылка),
					ЗаписьОбъект.ДатаНачала,
					Напоминание.ИнтервалВремениНапоминания,
					ЗаписьОбъект.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#Область Напоминания

Процедура УстановитьНапоминание(Ссылка, Пользователь, ИнтервалВремениНапоминания)

	Напоминание = ПолучитьПараметрыНапоминания(Ссылка, Пользователь);
	Если ЗначениеЗаполнено(Напоминание) Тогда
		НапоминанияПользователя.УдалитьНапоминание(Напоминание);
	КонецЕсли;
	ПодключитьПроизвольноеНапоминание(Пользователь, Строка(Ссылка), Ссылка.ДатаНачала, ИнтервалВремениНапоминания, Ссылка);

КонецПроцедуры

Процедура ОтключитьНапоминание(Ссылка, Пользователь)
	
	Напоминание = ПолучитьПараметрыНапоминания(Ссылка, Пользователь);
	Если ЗначениеЗаполнено(Напоминание) Тогда
		НапоминанияПользователя.УдалитьНапоминание(Напоминание);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыНапоминания(Источник, Пользователь)

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;

КонецФункции

Функция ПодключитьПроизвольноеНапоминание(Пользователь, Текст, ВремяСобытия, ИнтервалДоСобытия = 0, Предмет = Неопределено, Идентификатор = Неопределено) Экспорт
	ПараметрыНапоминания = Новый Структура;
	ПараметрыНапоминания.Вставить("Описание", Текст);
	Если ТипЗнч(ВремяСобытия) = Тип("РасписаниеРегламентногоЗадания") Тогда
		ПараметрыНапоминания.Вставить("Расписание", ВремяСобытия);
	Иначе
		ПараметрыНапоминания.Вставить("ВремяСобытия", ВремяСобытия);
	КонецЕсли;
	ПараметрыНапоминания.Вставить("ИнтервалВремениНапоминания", ИнтервалДоСобытия);
	ПараметрыНапоминания.Вставить("Источник", Предмет);
	ПараметрыНапоминания.Вставить("Идентификатор", Идентификатор);
	ПараметрыНапоминания.Вставить("Пользователь", Пользователь);
	
	Напоминание = СоздатьНапоминание(ПараметрыНапоминания);
	НапоминанияПользователяСлужебный.ПодключитьНапоминание(Напоминание);
	
	Возврат Напоминание;
КонецФункции

// Возвращает структуру нового напоминания для последующего подключения.
Функция СоздатьНапоминание(ПараметрыНапоминания)
	
	Напоминание = НапоминанияПользователяКлиентСервер.ОписаниеНапоминания(ПараметрыНапоминания, Истина);
	
	Если Не ЗначениеЗаполнено(Напоминание.Пользователь) Тогда
		Напоминание.Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Напоминание.СпособУстановкиВремениНапоминания) Тогда
		Если ЗначениеЗаполнено(Напоминание.Источник) И Не ПустаяСтрока(Напоминание.ИмяРеквизитаИсточника) Тогда
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
		ИначеЕсли Напоминание.Расписание <> Неопределено Тогда
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.Периодически;
		ИначеЕсли Не ЗначениеЗаполнено(Напоминание.ВремяСобытия) Тогда
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени;
		Иначе
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		КонецЕсли;
	КонецЕсли;
	
	Если Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
		Напоминание.ВремяСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Напоминание.Источник, Напоминание.ИмяРеквизитаИсточника);
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - ?(ЗначениеЗаполнено(Напоминание.ВремяСобытия), Напоминание.ИнтервалВремениНапоминания, 0);
	ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени Тогда
		Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		Напоминание.ВремяСобытия = ТекущаяДатаСеанса() + Напоминание.ИнтервалВремениНапоминания;
	ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - Напоминание.ИнтервалВремениНапоминания;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Напоминание.СрокНапоминания) Тогда
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия;
	КонецЕсли;
	
	Если Напоминание.ПовторятьЕжегодно Тогда
		Если ЗначениеЗаполнено(Напоминание.ВремяСобытия) Тогда
			Напоминание.Расписание = НапоминанияПользователяКлиентСервер.ЕжегодноеРасписание(Напоминание.ВремяСобытия);
		КонецЕсли;
	КонецЕсли;
	
	Если Напоминание.Расписание <> Неопределено Тогда
		Напоминание.ВремяСобытия = НапоминанияПользователяСлужебный.ПолучитьБлижайшуюДатуСобытияПоРасписанию(Напоминание.Расписание);
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - Напоминание.ИнтервалВремениНапоминания;
	КонецЕсли;
	
	Напоминание.Расписание = Новый ХранилищеЗначения(Напоминание.Расписание, Новый СжатиеДанных(9));
	
	Возврат Напоминание;
	
КонецФункции

#КонецОбласти

Функция УзлыДляВыгрузки(Знач Пользователь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
		Пользователь = МассивПользователей;
	КонецЕсли;
	Результат = Новый Массив;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинхронизацияКалендарей.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияКалендарей КАК СинхронизацияКалендарей
	|ГДЕ
	|	СинхронизацияКалендарей.Включен
	|	И НЕ СинхронизацияКалендарей.ПометкаУдаления
	|	И СинхронизацияКалендарей.Пользователь В (&Пользователь)
	|	И НЕ СинхронизацияКалендарей.Ссылка = &ЭтотУзел");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;

КонецФункции

// Кодирует текстовую строку в iCalendar, согласно RFC 5545.
Функция КодироватьСтрокуВiCalendar(Строка)
	
	СтрокаiCalendar = СтрЗаменить(Строка, "\", "\\");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, ";", "\;");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, ",", "\,");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, Символы.ПС, "\n");
	
	Возврат СтрокаiCalendar;
	
КонецФункции

// Раскодирует текстовую строку формата iCalendar, согласно RFC 5545.
Функция РаскодироватьСтрокуiCalendar(СтрокаiCalendar)
	
	Строка = СтрЗаменить(СтрокаiCalendar, "\n", Символы.ПС);
	Строка = СтрЗаменить(Строка, "\N", Символы.ПС);
	Строка = СтрЗаменить(Строка, "\,", ",");
	Строка = СтрЗаменить(Строка, "\;", ";");
	Строка = СтрЗаменить(Строка, "\\", "\");
	
	Возврат Строка;
	
КонецФункции

#КонецОбласти