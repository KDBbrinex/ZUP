
#Область СлужебныйПрограммныйИнтерфейс

// Получение сведений о согласовании вакансии.
//
// Параметры:
//  Вакансия - ОпределяемыйТип.ВакансияСогласования	 - вакансия (или заявка), для которой нужно получить сведения о согласовании.
// 
// Возвращаемое значение:
//  Структура, Неопределено - структура с полями:
//  Вакансия
//  СостояниеСогласования
//  Рассмотрел
//  ДатаРассмотрения
//
Функция ДанныеСогласования(Вакансия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СогласованиеВакансий.Вакансия КАК Вакансия,
		|	СогласованиеВакансий.СостояниеСогласования КАК СостояниеСогласования,
		|	СогласованиеВакансий.Рассмотрел КАК Рассмотрел,
		|	СогласованиеВакансий.ДатаРассмотрения КАК ДатаРассмотрения
		|ИЗ
		|	РегистрСведений.СогласованиеВакансий КАК СогласованиеВакансий
		|ГДЕ
		|	СогласованиеВакансий.Вакансия = &Вакансия";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
КонецФункции

// Предназначена для дополнительной настройки динамических списков объектов согласования.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения - форма, содержащая список,
//  ИмяРеквизита - Строка - необязательный, по умолчанию "Список", имя реквизита, содержащего динамический список,
//  ИмяЭлемента	 - Строка - необязательный, по умолчанию "Список", имя элемента формы, связанного с динамическим списком.
//
Процедура СписокСогласованияПриСозданииНаСервере(Форма, ИмяРеквизита = "Список", ИмяЭлемента = "Список") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеВакансий") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФормы = Форма.Элементы[ИмяЭлемента];
	
	ТаблицаФормы.ПутьКДаннымКартинкиСтроки = ИмяРеквизита + ".ИндексКартинки";
	ТаблицаФормы.КартинкаСтрок = БиблиотекаКартинок.СостоянияСогласования;
	
	УстановитьУсловноеОформлениеСпискаСогласования(Форма, ИмяРеквизита, ИмяЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУсловноеОформлениеСпискаСогласования(Форма, ИмяРеквизита = "Список", ИмяЭлемента = "Список")
	
	ДинамическийСписок = Форма[ИмяРеквизита];
	ТаблицаФормы = Форма.Элементы[ИмяЭлемента];
	
	УсловноеОформление = ДинамическийСписок.УсловноеОформление;
	
	ТекущийШрифт = ТаблицаФормы.Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "СостояниеСогласования", Перечисления.СостоянияСогласования.Рассматривается);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ПометкаУдаления", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "СостояниеСогласования", Перечисления.СостоянияСогласования.Отклонено);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СостояниеОтклоненоЦветТекста);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ПометкаУдаления", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СостояниеОтклоненоЦветТекста);
	
КонецПроцедуры

// Заполнение данных для согласования по данным объекта.
// Используется в качестве обратного вызова при установке состояния согласования.
//
// Параметры:
//  ОбъектСогласования		 - ОпределяемыйТип.ВакансияСогласованияОбъект - документ заявка на подбор,
//  ДанныеСогласования		 - РегистрСведенийЗапись.СогласованиеВакансий - строка набора записей регистра согласований,
//  ТребуетсяСогласование	 - Булево - по умолчанию Истина, если установить Ложь, согласование будет отменено.
//
Процедура ЗаполнитьДанныеСогласованияВакансии(ОбъектСогласования, ДанныеСогласования, ТребуетсяСогласование) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектСогласования.Метаданные().ПолноеИмя());
	МенеджерОбъекта.ЗаполнитьДанныеСогласованияВакансии(ОбъектСогласования, ДанныеСогласования, ТребуетсяСогласование);
	
КонецПроцедуры

// Расширение действий с согласуемым объектом при установке состояния согласования.
// Используется в качестве обратного вызова при установке состояния согласования.
// Позволяет выполнить дополнительные действия при установке состояния.
//
// Параметры:
//  ОбъектСогласования	 - ОпределяемыйТип.ВакансияСогласованияОбъект - документ заявка на подбор,
//  ДанныеСогласования	 - РегистрСведенийЗапись.СогласованиеВакансий - строка набора записей регистра согласований,
//
Процедура ПриУстановкеСостоянияСогласованияВакансии(ОбъектСогласования, ДанныеСогласования) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектСогласования.Метаданные().ПолноеИмя());
	МенеджерОбъекта.ПриУстановкеСостоянияСогласованияВакансии(ОбъектСогласования, ДанныеСогласования);
	
КонецПроцедуры

#КонецОбласти
