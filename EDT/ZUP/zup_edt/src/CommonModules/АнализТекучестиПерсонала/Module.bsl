
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "АнализТекучестиПерсонала.НачальноеЗаполнениеПодсистемыАнализТекучестиПерсонала";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

Процедура НачальноеЗаполнениеПодсистемыАнализТекучестиПерсонала(ПараметрыОбновления = Неопределено) Экспорт
	
	Если ПараметрыОбновления = Неопределено Тогда
		ПараметрыОбновления = Новый Структура("ОбработкаЗавершена");
	КонецЕсли;
	
	Справочники.ПричиныУвольнений.НачальноеЗаполнение();
	Константы.ИспользоватьАнализТекучестиПерсонала.Установить(Истина);
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельНастроекУправлениеПерсоналом

// Обновляет значение константы "АнализаТекучестиПерсонала".
//
// Параметры:
//  Значение - Булево - значение константы.
//
Процедура ОбновитьИспользованиеАнализаТекучестиПерсонала(Знач Значение) Экспорт
	
	Константы.ИспользоватьАнализТекучестиПерсонала.Установить(Значение);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализТекучестиПерсонала);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.ПричиныУвольненияСотрудников, Истина);
	
КонецПроцедуры

#КонецОбласти

// Формирует таблицу с причинами увольнения по сотрудникам.
// 
// Параметры:
// 	Сотрудники - Массив - массив сотрудников.
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица с колонками
//		Сотрудник,
//		ПричинаHR,
//		ПричинаРуководитель,
//		ДатаРегистрации,
//		Ответственный,
//		Комментарий
//
Функция ПричиныУвольненияСотрудников(Сотрудники) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАнализТекучестиПерсонала") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПричиныУвольненияСотрудников) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПричиныУвольнения.Сотрудник,
		|	ПричиныУвольнения.ПричинаHR,
		|	ПричиныУвольнения.ПричинаРуководитель,
		|	ПричиныУвольнения.ДатаРегистрации,
		|	ПричиныУвольнения.Ответственный,
		|	ПричиныУвольнения.Комментарий
		|ИЗ
		|	РегистрСведений.ПричиныУвольненияСотрудников КАК ПричиныУвольнения
		|ГДЕ
		|	ПричиныУвольнения.Сотрудник В (&Сотрудники)";
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Дополняет строку истории взаимоотношений физического лица о причинах увольнения сотрудника.
// 
// Параметры:
// 	СтрокаИстории - Строка - описание сотрудника в списке истории,
// 	Сотрудник - СправочникСсылка.Сотрудники,
// 	ПричиныУвольнения - ТаблицаЗначений - таблица по нескольким сотрудникам, сформированная методом ПричиныУвольненияСотрудников.
//
Процедура ДополнитьИсториюСотрудникаПричинойУвольнения(СтрокаИстории, Сотрудник, ПричиныУвольнения) Экспорт

	Если ПричиныУвольнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПричиныУвольнения, "Сотрудник");
	
	ПричиныСотрудника = ПричиныУвольнения.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Если ПричиныСотрудника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Не ПустаяСтрока(СтрокаИстории) Тогда
		СтрокаИстории = СтрокаИстории + ", ";
	КонецЕсли;

	СтрокаИстории = СтрокаИстории + СтрШаблон(НСтр("ru = 'уволен по причине «%1»'"), ПричиныСотрудника[0].ПричинаHR);
	
	Если ЗначениеЗаполнено(ПричиныСотрудника[0].Комментарий) Тогда
		СтрокаИстории = СтрокаИстории + ", " 
			+ СтрШаблон(НСтр("ru = 'с комментарием: «%1»'"), ПричиныСотрудника[0].Комментарий);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьВидимостьПричиныУвольнения(Форма, СотрудникСсылка = Неопределено, ИмяЭлемента = "ПричинаУвольнения") Экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказыватьПричинуУвольнения = ПолучитьФункциональнуюОпцию("ИспользоватьАнализТекучестиПерсонала")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПричиныУвольненияСотрудников);
		
	Если ПоказыватьПричинуУвольнения И НЕ СотрудникСсылка = Неопределено Тогда 
		ПоказыватьПричинуУвольнения = НЕ СотрудникСсылка.Пустая() 
			И РегистрыСведений.ПричиныУвольненияСотрудников.МожноРегистрироватьПричиныУвольнения(СотрудникСсылка);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяЭлемента,
		"Видимость",
		ПоказыватьПричинуУвольнения);
		
КонецПроцедуры

Процедура ОбновитьПричинуУвольнения(Форма, СотрудникСсылка, ИмяЭлемента = "ПричинаУвольнения") Экспорт
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма[ИмяЭлемента] = РегистрыСведений.ПричиныУвольненияСотрудников.ПредставлениеПричинСотрудника(СотрудникСсылка);

КонецПроцедуры

Функция ПредставлениеПричинУвольненияСотрудника(СотрудникСсылка) Экспорт
	
	Если Не РегистрыСведений.ПричиныУвольненияСотрудников.МожноРегистрироватьПричиныУвольнения(СотрудникСсылка) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.ПричиныУвольненияСотрудников.ПредставлениеПричинСотрудника(СотрудникСсылка, , Ложь);
	
КонецФункции

#КонецОбласти

