
#Область СлужебныйПрограммныйИнтерфейс

// Обработка подписки на события Перед записью документа.
//
Процедура ПередЗаписьюДокументаПредметаУведомленияОбИзмененияхОбработчик(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗаписьюПредметаУведомленияОбИзменениях(Источник);
	
КонецПроцедуры

// Обработка подписки на события Перед записью справочника.
//
Процедура ПередЗаписьюСправочникаПредметаУведомленияОбИзмененияхОбработчик(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗаписьюПредметаУведомленияОбИзменениях(Источник);
	
КонецПроцедуры

// Обработка подписки на события При записи документа.
//
Процедура ПриЗаписиДокументаПредметаУведомленияОбИзменениях(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗаписиПредметаУведомленияОбИзменениях(Источник);
	
КонецПроцедуры

// Обработка подписки на события При записи справочник.
//
Процедура ПриЗаписиСправочникаПредметаУведомленияОбИзменениях(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗаписиПредметаУведомленияОбИзменениях(Источник);
	
КонецПроцедуры

// Обработка подписки на события константы ИспользованиеШаблоновСообщений
//
Процедура УстановитьИспользованиеУведомлений(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.Значение Тогда
		// Следует отключить ИспользованиеУведомлений, потому что 
		// нет возможности использовать Уведомления без Шаблонов сообщений
		Константы.ИспользоватьУведомления.Установить(Ложь);
		ТекстСообщения = НСтр("ru = 'Использование Уведомлений невозможно без использования шаблонов сообщений. Уведомления были отключены.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Регламентное задание ОтправитьУведомления
//
Процедура ОтправитьУведомления() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправитьУведомления);
	УведомленияСервер.ОтправитьУведомления();
	
КонецПроцедуры

// Регламентное задание СоздатьУведомленияПоВыборкамДанных
//
Процедура СоздатьУведомленияПоВыборкамДанных() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СоздатьУведомленияПоВыборкамДанных);
	УведомленияСервер.СоздатьУведомленияПоВыборкамДанных();
	
КонецПроцедуры

// Регламентное задание СоздатьУведомленияПоИзменениямОбъектов
//
Процедура СоздатьУведомленияПоИзменениямОбъектов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СоздатьУведомленияПоИзменениямОбъектов);
	УведомленияСервер.СоздатьУведомленияПоИзменениямОбъектов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередЗаписьюПредметаУведомленияОбИзменениях(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	СтандартнаяОбработка = Истина;
	
	ЕстьРассылки = Ложь;
	ИспользованиеУведомлений = Константы.ИспользоватьУведомления.Получить();
	Если ИспользованиеУведомлений Тогда
		ЕстьРассылки = ЕстьАктивныеРассылкиПоОбъекту(Источник);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("Уведомления_УведомлятьОбИзменениях", ЕстьРассылки);
	
	Если ЕстьРассылки Тогда
		УведомленияПереопределяемый.ПередЗаписьюПредметаУведомленияОбИзменениях(Источник, СтандартнаяОбработка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПриЗаписиПредметаУведомленияОбИзменениях(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	СтандартнаяОбработка = Истина;
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	Предмет = Источник.Ссылка;
	
	Если ДополнительныеСвойства.Уведомления_УведомлятьОбИзменениях Тогда
		ВыполнятьПерезаписьПриНаличииВРегистре = Ложь;
		УведомленияПереопределяемый.ПриЗаписиПредметаУведомленияОбИзменениях(
			Источник, 
			ДополнительныеСвойства.Уведомления_УведомлятьОбИзменениях, 
			ДополнительныеСвойства, 
			СтандартнаяОбработка, 
			ВыполнятьПерезаписьПриНаличииВРегистре);
		Если СтандартнаяОбработка Тогда
			УведомленияСервер.ЗаписатьПредметУведомленияОбИзменениях(Предмет, ДополнительныеСвойства, ВыполнятьПерезаписьПриНаличииВРегистре);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЕстьАктивныеРассылкиПоОбъекту(Объект)
	
	НаличиеРассылок = Ложь;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Если МенеджерОбъекта <> Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	РассылкиУведомлений.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.РассылкиУведомлений КАК РассылкиУведомлений
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыУведомлений КАК ВидыУведомлений
		               |		ПО РассылкиУведомлений.ВидУведомления = ВидыУведомлений.Ссылка
		               |ГДЕ
		               |	РассылкиУведомлений.ЭкземплярТипаПредмета = &ЭкземплярТипаПредмета
		               |	И РассылкиУведомлений.Подготовлена
		               |	И ВидыУведомлений.КатегорияСобытия = ЗНАЧЕНИЕ(Перечисление.КатегорииВидовУведомлений.ИзменениеОбъекта)";
		
		Запрос.УстановитьПараметр("ЭкземплярТипаПредмета", МенеджерОбъекта.ПустаяСсылка());
		РезультатЗапроса = Запрос.Выполнить();
		НаличиеРассылок = Не РезультатЗапроса.Пустой();
	КонецЕсли;
	Возврат НаличиеРассылок;

КонецФункции

#КонецОбласти
