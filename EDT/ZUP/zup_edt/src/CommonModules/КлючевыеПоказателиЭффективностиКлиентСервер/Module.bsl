#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеШкалы(СтрокиКоллекции, Отказ) Экспорт

	МассивЗначений = Новый Массив;
	
	Для каждого СтрокаКоллекции Из СтрокиКоллекции Цикл
		Если МассивЗначений.Найти(СтрокаКоллекции.ЗначениеДо) <> Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		МассивЗначений.Добавить(СтрокаКоллекции.ЗначениеДо);
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьПозициюЭлементаВКоллекции(ОбщаяКоллекция, ОтборСтрок, Элемент, ОбратнаяШкала = Ложь) Экспорт 
	
	СтрокиКоллекции = ШкалаПоказателяПоОтбору(ОбщаяКоллекция, ОтборСтрок);
	ЗначениеЭлемента = Элемент.ЗначениеДо;
	
	КоличествоЭлементов = СтрокиКоллекции.Количество();
	
	Если КоличествоЭлементов <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЭлемента = ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала) Тогда
		НоваяПозиция = ОбщаяКоллекция.Индекс(СтрокиКоллекции[КоличествоЭлементов - 1]);
		Возврат;
	КонецЕсли;
	
	ТекущаяПозиция = ОбщаяКоллекция.Индекс(Элемент);
	МестоПозицииНайдено = Ложь;
	
	Для каждого ЭлементКоллекции Из СтрокиКоллекции Цикл
		ЭтоПоследнийЭлемент = (СтрокиКоллекции.Количество() = (ИндексСтрокиКоллекции(СтрокиКоллекции, ЭлементКоллекции) + 1));
		
		Если НЕ (ЭлементКоллекции.ЗначениеДо = ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала) И ЭтоПоследнийЭлемент) Тогда
			НоваяПозиция = ОбщаяКоллекция.Индекс(ЭлементКоллекции);
		КонецЕсли;
		
		НайденЭлементСБольшимЗначением = ?(ОбратнаяШкала, ЭлементКоллекции.ЗначениеДо < ЗначениеЭлемента, ЭлементКоллекции.ЗначениеДо > ЗначениеЭлемента);
		Если НайденЭлементСБольшимЗначением ИЛИ ЭлементКоллекции.ЗначениеДо = ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала) Тогда
			МестоПозицииНайдено = Истина;
		КонецЕсли;
		
		Если МестоПозицииНайдено Тогда
			Если НоваяПозиция > ТекущаяПозиция Тогда
				НоваяПозиция = НоваяПозиция - 1;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Сдвиг = НоваяПозиция - ТекущаяПозиция;
	
	ОбщаяКоллекция.Сдвинуть(ТекущаяПозиция, Сдвиг);
	
КонецПроцедуры

Процедура УстановитьПредставлениеИнтервалаПоНижнейГранице(ТаблицаИнтервалов, ОбратнаяШкала = Ложь) Экспорт 
	
	Для каждого ТекущаяСтрока Из ТаблицаИнтервалов Цикл
		ТекущийИндекс = ИндексСтрокиКоллекции(ТаблицаИнтервалов, ТекущаяСтрока);
		Если ТекущаяСтрока.ЗначениеДо = ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала) Тогда
			Если ТекущийИндекс = 0 Тогда // первая строка
				ЗначениеПредставление = НСтр("ru = 'любое значение'");
				ТекущаяСтрока.ЗначениеПредставление = ЗначениеПредставление;
			Иначе
				ПредыдущаяСтрока = ТаблицаИнтервалов[ТекущийИндекс - 1];
				Если ПредыдущаяСтрока.ЗначениеДо = ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала) Тогда
					ТекущаяСтрока.ЗначениеПредставление = ПредыдущаяСтрока.ЗначениеПредставление;
				Иначе
					ШаблонСтроки = НСтр("ru = 'более %1'");
					Если ОбратнаяШкала Тогда
						ШаблонСтроки = НСтр("ru = 'менее %1'");
					КонецЕсли;
					ТекущаяСтрока.ЗначениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСтроки, 
						Строка(ПредыдущаяСтрока.ЗначениеДо));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТекущийИндекс = 0 Тогда // первая строка
				ШаблонСтроки = НСтр("ru = '%1 и менее'");
				Если ОбратнаяШкала Тогда
					ШаблонСтроки = НСтр("ru = '%1 и более'");
				КонецЕсли;
				ТекущаяСтрока.ЗначениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Строка(ТекущаяСтрока.ЗначениеДо));
			Иначе
				ПредыдущаяСтрока = ТаблицаИнтервалов[ТекущийИндекс - 1];
				Если ПредыдущаяСтрока.ЗначениеДо = ТекущаяСтрока.ЗначениеДо Тогда
					ТекущаяСтрока.ЗначениеПредставление = ПредыдущаяСтрока.ЗначениеПредставление;
				Иначе
					ТекущаяСтрока.ЗначениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'от %1 до %2'"), 
						Строка(ПредыдущаяСтрока.ЗначениеДо), 
						Строка(ТекущаяСтрока.ЗначениеДо));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПредставлениеИнтервалаОценки(ТабличнаяЧасть) Экспорт

	Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
		УстановитьПредставлениеИнтервалаОценкиВСтроке(ТекущаяСтрока);
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьПредставлениеИнтервалаОценкиВСтроке(ТекущиеДанные) Экспорт

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ИнтервалОценкиПредставлениеОт = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'от %1'"), ТекущиеДанные.ИнтервалОценкиОт);

	ТекущиеДанные.ИнтервалОценкиПредставлениеДо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'до %1'"), ТекущиеДанные.ИнтервалОценкиДо);
		
КонецПроцедуры

Процедура ЗаполнитьВторичныеРеквизитыСтрокиПоказателя(Форма, ТекущиеДанные) Экспорт

	Если Не ЗначениеЗаполнено(ТекущиеДанные.Показатель) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Форма.СоответствиеПоказателей.Получить(ТекущиеДанные.Показатель);
	Если СтруктураРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураРеквизитов);

КонецПроцедуры

Функция ШкалаПоказателяПоОтбору(ШкалаЗначений, ОтборСтрок) Экспорт

	Если ОтборСтрок = Неопределено Тогда
		Возврат ШкалаЗначений;
	Иначе
		Возврат ШкалаЗначений.НайтиСтроки(Новый Структура(ОтборСтрок));
	КонецЕсли;

КонецФункции

Процедура ОтсортироватьШкалуЗначений(ШкалаЗначений, ОбратнаяШкала) Экспорт
	ШкалаЗначений.Сортировать("ЗначениеДо" + ?(ОбратнаяШкала, " УБЫВ", ""));
КонецПроцедуры

Функция ВерхнийПорогШкалы() Экспорт
	Возврат 9999999999999.99;
КонецФункции

Функция НижнийПорогШкалы() Экспорт
	Возврат -9999999999999.99;
КонецФункции

Функция ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала) Экспорт

	Если ОбратнаяШкала Тогда
		Возврат НижнийПорогШкалы();
	Иначе
		Возврат ВерхнийПорогШкалы();
	КонецЕсли;

КонецФункции

Функция ТекстШкалыПоОтрезку(ЗначениеОт, ЗначениеДо) Экспорт 

	Если БесконечныйОтрезок(ЗначениеОт, ЗначениеДо) Тогда
		Возврат НСтр("ru = 'любое значение'");
	ИначеЕсли ЗначениеОт = НижнийПорогШкалы() Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1.'"), ЗначениеДо);
	ИначеЕсли ЗначениеОт = ВерхнийПорогШкалы() Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1.'"), ЗначениеДо);
	ИначеЕсли ЗначениеДо = НижнийПорогШкалы() Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'менее %1.'"), ЗначениеОт);
	ИначеЕсли ЗначениеДо = ВерхнийПорогШкалы() Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'более %1.'"), ЗначениеОт);
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'от %1 до %2.'"), ЗначениеОт, ЗначениеДо);
	КонецЕсли;

КонецФункции

Процедура УстановитьПредставлениеПериодаПоДате(Форма, ИмяРеквизитаГоризонт = "Объект.Горизонт", ИмяРеквизитаПериод = "Объект.Период", ИмяРеквизитаПредставления = "ПериодСтрокой") Экспорт

	Горизонт = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаГоризонт);
	Период = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаПериод);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ИмяРеквизитаПредставления, ПредставлениеПериодаПоГоризонту(Период, Горизонт));

КонецПроцедуры

Функция ПредставлениеПериодаПоГоризонту(Период, Горизонт) Экспорт

	ПредставлениеПериода = "";
	
	Если Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		// нет возможности построить форматную строку для полугодия
		ПредставлениеПериода = ?(Месяц(Период) / 6 > 1, "2", "1") + Формат(Период, "ДФ='"" полугодие"" гггг'"); 
	Иначе
		ФорматнаяСтрока = ФорматнаяСтрокаГоризонтаОценки(Горизонт);
		Если ФорматнаяСтрока = Неопределено Тогда 
			Возврат ПредставлениеПериода;
		КонецЕсли;
		
		ПредставлениеПериода = Формат(Период, ФорматнаяСтрока);
	КонецЕсли;
	
	Возврат ПредставлениеПериода;

КонецФункции

Функция КоличествоМесяцевГоризонтаОценки(ГоризонтОценки) Экспорт

	ГоризонтыСоответствие = КоличествоМесяцевГоризонтовОценки();
	Возврат ГоризонтыСоответствие.Получить(ГоризонтОценки);

КонецФункции

Функция ИмяПериодаПоГоризонту(Горизонт) Экспорт

	Если Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Возврат "ГОД";
	ИначеЕсли Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Возврат "ПОЛУГОДИЕ";
	ИначеЕсли Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Возврат "КВАРТАЛ";
	ИначеЕсли Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Возврат "МЕСЯЦ";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ГоризонтПоИмениПериода(ИмяГоризонта) Экспорт

	Если ВРег(ИмяГоризонта) = "ГОД" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Год");
	ИначеЕсли ВРег(ИмяГоризонта) = "ПОЛУГОДИЕ" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие");
	ИначеЕсли ВРег(ИмяГоризонта) = "КВАРТАЛ" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");
	ИначеЕсли ВРег(ИмяГоризонта) = "МЕСЯЦ" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка");
	КонецЕсли;

КонецФункции

Функция ДатыПериодаГоризонта(ДатаНачала, Горизонт) Экспорт
	
	Если Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		ДатаНачала =  НачалоКвартала(ДатаНачала);
		ДатаОкончания = КонецКвартала(ДатаНачала);
	ИначеЕсли Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Если Месяц(ДатаНачала) > 6 Тогда
			ДатаНачала =  ДобавитьМесяц(НачалоГода(ДатаНачала), 6);
			ДатаОкончания = КонецГода(ДатаНачала);
		Иначе
			ДатаНачала =  НачалоГода(ДатаНачала);
			ДатаОкончания = ДобавитьМесяц(НачалоГода(ДатаНачала), 6) - 1;
		КонецЕсли;
	ИначеЕсли Горизонт = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		ДатаНачала =  НачалоГода(ДатаНачала);
		ДатаОкончания = КонецГода(ДатаНачала);
	Иначе	
		ДатаНачала =  НачалоМесяца(ДатаНачала);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	КонецЕсли;
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
КонецФункции

Процедура УстановитьПодсказкуПозицииСотрудника(Форма, Позиция) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПозицияРасширеннаяПодсказка",
		"Заголовок",
		ТекстПодсказкиПозицииСотрудника(Форма, Позиция));
	
КонецПроцедуры

Процедура ОбновитьПанельУправлениеПерсоналомДляКлючевыхПоказателейЭффективности(Форма) Экспорт

	УстановитьЗначенияПодчиненныхНастроек(Форма);
	УстановитьДоступностьПодчиненныхНастроек(Форма);

КонецПроцедуры

Функция ИндексСтрокиКоллекции(ТаблицаИнтервалов, ТекущаяСтрока)

	Если ТипЗнч(ТаблицаИнтервалов) = Тип("Массив") Тогда
		Возврат ТаблицаИнтервалов.Найти(ТекущаяСтрока);
	Иначе
		Возврат ТаблицаИнтервалов.Индекс(ТекущаяСтрока);
	КонецЕсли;

КонецФункции

Функция БесконечныйОтрезок(ЗначениеОт, ЗначениеДо)

	Если ЗначениеОт = НижнийПорогШкалы() И ЗначениеДо = ВерхнийПорогШкалы()
		ИЛИ ЗначениеОт = ВерхнийПорогШкалы() И ЗначениеДо = НижнийПорогШкалы() Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ФорматнаяСтрокаГоризонтаОценки(ГоризонтОценки)

	ГоризонтыСоответствие = ФорматныеСтрокиГоризонтовОценки();
	Возврат ГоризонтыСоответствие.Получить(ГоризонтОценки);

КонецФункции

Функция ФорматныеСтрокиГоризонтовОценки()

	СоответствиеФорматныхСтрок = Новый Соответствие;
	
	СоответствиеФорматныхСтрок.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Год"), "ДФ=гггг");
	СоответствиеФорматныхСтрок.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"), "");
	СоответствиеФорматныхСтрок.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"), "ДФ='к ""квартал"" гггг'");
	СоответствиеФорматныхСтрок.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"), "ДФ='ММММ гггг'");
	
	Возврат СоответствиеФорматныхСтрок;

КонецФункции

Функция ТекстПодсказкиПозицииСотрудника(Форма, Позиция)
	
	Если Не ЗначениеЗаполнено(Позиция) Тогда
		Возврат " ";
	КонецЕсли;
	
	НайденныеСтроки = Форма.ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Позиция", Позиция));
	Если Не ЗначениеЗаполнено(НайденныеСтроки[0].ДатаНачала) Тогда
		Возврат НСтр("ru = 'сотрудник на данной позиции не работал.'");
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Если НайденныеСтроки.Количество() > 1 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'периоды работы'"));
	Иначе
		МассивСтрок.Добавить(НСтр("ru = 'период работы'"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, МассивСтрокПериодовРаботы(НайденныеСтроки));
	
	Возврат СтрСоединить(МассивСтрок, "");
	
КонецФункции

Функция МассивСтрокПериодовРаботы(СтрокиПериодов)

	МассивСтрок = Новый Массив;
	
	Для каждого СтрокаПериода Из СтрокиПериодов Цикл
		Если СтрокиПериодов.Найти(СтрокаПериода) = 0 Тогда
			МассивСтрок.Добавить(" ");
		Иначе
			МассивСтрок.Добавить(", ");
		КонецЕсли;
		МассивСтрок.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1 по %2'"),
				Формат(СтрокаПериода.ДатаНачала,"ДЛФ=D"), Формат(СтрокаПериода.ДатаОкончания, "ДЛФ=D")));
	КонецЦикла; 

	Возврат МассивСтрок;
	
КонецФункции

Функция КоличествоМесяцевГоризонтовОценки()

	КоличествоМесяцев = Новый Соответствие;
	
	КоличествоМесяцев.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Год"), 12);
	КоличествоМесяцев.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"), 6);
	КоличествоМесяцев.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"), 3);
	КоличествоМесяцев.Вставить(
		ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"), 1);
	
	Возврат КоличествоМесяцев;

КонецФункции

#Область ПанельНастроекУправлениеПерсоналом

Процедура УстановитьЗначенияПодчиненныхНастроек(Форма)

	Если Не Форма.КонстантыНабор.ИспользоватьКлючевыеПоказателиЭффективности Тогда
		Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьДолгосрочныеГоризонтыОценки = Ложь;
	КонецЕсли;
	
	Если Не Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьДолгосрочныеГоризонтыОценки Тогда
		Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьГоризонтКвартал = Ложь;
		Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьГоризонтПолугодие = Ложь;
		Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьГоризонтГод = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьПодчиненныхНастроек(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиКлючевыхПоказателейЭффективностиИспользоватьРазныеГоризонтыОценки", "Доступность",
		Форма.КонстантыНабор.ИспользоватьКлючевыеПоказателиЭффективности);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиКлючевыхПоказателейЭффективностиИспользоватьГоризонтКвартал", "Доступность",
		Форма.КонстантыНабор.ИспользоватьКлючевыеПоказателиЭффективности И Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьДолгосрочныеГоризонтыОценки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиКлючевыхПоказателейЭффективностиИспользоватьГоризонтПолугодие", "Доступность",
		Форма.КонстантыНабор.ИспользоватьКлючевыеПоказателиЭффективности И Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьДолгосрочныеГоризонтыОценки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиКлючевыхПоказателейЭффективностиИспользоватьГоризонтГод", "Доступность",
		Форма.КонстантыНабор.ИспользоватьКлючевыеПоказателиЭффективности И Форма.НастройкиКлючевыхПоказателейЭффективности.ИспользоватьДолгосрочныеГоризонтыОценки);

КонецПроцедуры

#КонецОбласти

#КонецОбласти