
#Область СлужебныйПрограммныйИнтерфейс

// Дополняет таблицу поиска похожих физических лиц.
// 
// Параметры:
// 	ТаблицаПохожих - ТаблицаЗначений - таблица похожих, см. СотрудникиФормы.ПохожиеФизическиеЛица.
// 	ЧастиИмени - Структура - см. ФизическиеЛицаКлиентСервер.ЧастиИмени.
// 	ТочноеСовпадение - Булево - признак того, что поиск выполняется по полному совпадению всех частей имени.
// 	ИсключаяФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо, которое нужно исключить из результатов.
//
Процедура ДополнитьТаблицуПохожихФизическихЛиц(ТаблицаПохожих, ЧастиИмени, ТочноеСовпадение, ИсключаяФизическоеЛицо) Экспорт

	ФамилияАрхив = АрхивнаяСтрока(ЧастиИмени.Фамилия);
	ИмяАрхив = АрхивнаяСтрока(ЧастиИмени.Имя);
	ОтчествоАрхив = АрхивнаяСтрока(ЧастиИмени.Отчество);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключаяФизическоеЛицо", ИсключаяФизическоеЛицо);
	Запрос.УстановитьПараметр("ФамилияАрхив", ФамилияАрхив);
	Запрос.УстановитьПараметр("ИмяАрхив", ИмяАрхив);
	Запрос.УстановитьПараметр("ОтчествоАрхив", ОтчествоАрхив);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АрхивФизическихЛиц.ФизическоеЛицо КАК Ссылка,
		|	СправочникФизическиеЛица.Наименование КАК Наименование,
		|	СправочникФизическиеЛица.УточнениеНаименования КАК УточнениеНаименования,
		|	АрхивФизическихЛиц.Фамилия КАК ФамилияАрхив,
		|	АрхивФизическихЛиц.Имя КАК ИмяАрхив,
		|	АрхивФизическихЛиц.Отчество КАК ОтчествоАрхив,
		|	СправочникФизическиеЛица.Фамилия КАК ФамилияСправочник,
		|	СправочникФизическиеЛица.Имя КАК ИмяСправочник,
		|	СправочникФизическиеЛица.Отчество КАК ОтчествоСправочник
		|ИЗ
		|	РегистрСведений.АрхивФизическихЛиц КАК АрхивФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
		|		ПО СправочникФизическиеЛица.Ссылка = АрхивФизическихЛиц.ФизическоеЛицо
		|		И АрхивФизическихЛиц.ФизическоеЛицо <> &ИсключаяФизическоеЛицо";
	Если ТочноеСовпадение Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И АрхивФизическихЛиц.Фамилия = &ФамилияАрхив
			|	И АрхивФизическихЛиц.Имя = &ИмяАрхив
			|	И АрхивФизическихЛиц.Отчество = &ОтчествоАрхив";
	Иначе
		Если Не ПустаяСтрока(ЧастиИмени.Фамилия) Тогда 
			Запрос.Текст = Запрос.Текст + "
				|	И АрхивФизическихЛиц.Фамилия = &ФамилияАрхив";
		КонецЕсли;
		Если Не ПустаяСтрока(ЧастиИмени.Имя) Тогда 
			Запрос.Текст = Запрос.Текст + "
				|	И АрхивФизическихЛиц.Имя = &ИмяАрхив";
		КонецЕсли;
		Если Не ПустаяСтрока(ЧастиИмени.Отчество) Тогда 
			Запрос.Текст = Запрос.Текст + "
				|	И АрхивФизическихЛиц.Отчество = &ОтчествоАрхив";
		КонецЕсли;
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПохожих.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ПерезаполнитьФИО = Ложь;
		Фамилия = Выборка.ФамилияСправочник;
		Если Выборка.ФамилияАрхив = ФамилияАрхив Тогда
			Фамилия = ЧастиИмени.Фамилия;
			ПерезаполнитьФИО = Истина;
		КонецЕсли;
		Имя = Выборка.ИмяСправочник;
		Если Выборка.ИмяАрхив = ИмяАрхив Тогда
			Имя = ЧастиИмени.Имя;
			ПерезаполнитьФИО = Истина;
		КонецЕсли;
		Отчество = Выборка.ОтчествоСправочник;
		Если Выборка.ОтчествоАрхив = ОтчествоАрхив Тогда
			Отчество = ЧастиИмени.Отчество;
			ПерезаполнитьФИО = Истина;
		КонецЕсли;
		Если ПерезаполнитьФИО Тогда
			НоваяСтрока.Наименование = Фамилия + " " + Имя + " " + Отчество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеФизическихЛиц(ДанныеФизическихЛиц, МассивНайденных, ЧастиИмени) Экспорт
	
	ДанныеФизическихЛиц.Колонки.Добавить("ВАрхивеФизическихЛиц", Новый ОписаниеТипов("Булево"));
	ДанныеФизическихЛиц.Колонки.Добавить("ДанныеАрхива");
	
	Запрос = ПакетЗапросовПоАрхивуФизическихЛиц(ДанныеФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	Выборка = РезультатЗапроса[0].Выбрать();
	ВыборкаДокументов = РезультатЗапроса[1].Выбрать();
	ВыборкаКонтактов = РезультатЗапроса[2].Выбрать();
	
	ЧастиИмениАрхив = ОбщегоНазначения.СкопироватьРекурсивно(ЧастиИмени);
	ЧастиИмениАрхив.Фамилия = АрхивнаяСтрока(ЧастиИмени.Фамилия);
	ЧастиИмениАрхив.Имя = АрхивнаяСтрока(ЧастиИмени.Имя);
	ЧастиИмениАрхив.Отчество = АрхивнаяСтрока(ЧастиИмени.Отчество);
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеФизическихЛиц, "ФизическоеЛицо");
	Пока Выборка.Следующий() Цикл
		ОтборСтрок = Новый Структура("ФизическоеЛицо", Выборка.ФизическоеЛицо);
		НайденныеСтроки = ДанныеФизическихЛиц.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДанных = ДанныеФизическихЛиц.Добавить();
			СтрокаДанных.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		Иначе
			СтрокаДанных = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаДанных.ВАрхивеФизическихЛиц = Истина;
		УточнитьФИО(СтрокаДанных, Выборка, ЧастиИмени, ЧастиИмениАрхив);
		ЗаполнитьДанныеАрхива(СтрокаДанных, Выборка, ВыборкаДокументов, ВыборкаКонтактов);
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиВСтрокеДанных(Результат, СтрокаДанных, ИскомыйТекст, ИскомыйНомер, СтандартнаяОбработка) Экспорт
	
	Если Не СтрокаДанных.ВАрхивеФизическихЛиц Тогда
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;
	
	ДанныеАрхива = СтрокаДанных.ДанныеАрхива;
	
	ИскомыйТекстАрхив = АрхивнаяСтрока(ИскомыйТекст);

	Если ДанныеАрхива.Фамилия = ИскомыйТекстАрхив Тогда
		Результат.Найдено = Истина;
		Результат.ИмяПоля = "Фамилия";
		Возврат;
	КонецЕсли;

	Если ДанныеАрхива.Имя = ИскомыйТекстАрхив Тогда 
		Результат.Найдено = Истина;
		Результат.ИмяПоля = "Имя";
		Возврат;
	КонецЕсли;

	Если ДанныеАрхива.Отчество = ИскомыйТекстАрхив Тогда 
		Результат.Найдено = Истина;
		Результат.ИмяПоля = "Отчество";
		Возврат;
	КонецЕсли;

	Если ДанныеАрхива.АдресаПочты.Найти(ИскомыйТекстАрхив) <> Неопределено Тогда 
		Результат.Найдено = Истина;
		Результат.ИмяПоля = "АдресЭлектроннойПочты";
		Возврат;
	КонецЕсли;

	ИскомаяДатаАрхив = АрхивнаяДата(ИскомыйТекст);
	Если Не ПустаяСтрока(ИскомаяДатаАрхив) Тогда
		Если ДанныеАрхива.ДатаРождения = ИскомаяДатаАрхив Тогда 
			Результат.Найдено = Истина;
			Результат.ИмяПоля = "ДатаРождения";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИскомаяДатаСНулевымВременемАрхив = АрхивнаяДатаСНулевымВременем(ИскомыйТекст);
	Если Не ПустаяСтрока(ИскомаяДатаСНулевымВременемАрхив) Тогда
		Если ДанныеАрхива.ДатаРождения = ИскомаяДатаСНулевымВременемАрхив Тогда 
			Результат.Найдено = Истина;
			Результат.ИмяПоля = "ДатаРождения";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИскомыйНомер = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИскомыйНомерАрхив = АрхивнаяСтрока(ИскомыйНомер);

	Если ДанныеАрхива.Телефоны.Найти(ИскомыйНомерАрхив) <> Неопределено Тогда 
		Результат.Найдено = Истина;
		Результат.ИмяПоля = "МобильныйТелефон";
		Возврат;
	КонецЕсли;

	Если ДанныеАрхива.СНИЛС = ИскомыйНомерАрхив Тогда 
		Результат.Найдено = Истина;
		Результат.ИмяПоля = "СтраховойНомерПФР";
		Возврат;
	КонецЕсли;

	Если ДанныеАрхива.ИНН = ИскомыйНомерАрхив Тогда 
		Результат.Найдено = Истина;
		Результат.ИмяПоля = "ИНН";
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов.
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, Отказ) Экспорт
	
	СубъектыИсключения = ТаблицаИсключений.ВыгрузитьКолонку("Субъект");
	СубъектыДляАрхивации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Субъекты, СубъектыИсключения);
	
	Если Отказ Или Не ЗначениеЗаполнено(СубъектыДляАрхивации) Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияПричин = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеКандидатов = Справочники.Кандидаты.КандидатыФизическихЛиц(СубъектыДляАрхивации);
	УстановитьПривилегированныйРежим(Ложь);

	Для Каждого Субъект Из СубъектыДляАрхивации Цикл
		ДанныеКандидатовСубъекта = ДанныеКандидатов.НайтиСтроки(Новый Структура("ФизическоеЛицо", Субъект));
		Если ДанныеКандидатовСубъекта.Количество() > 0 Тогда
			Для Каждого ДанныеКандидата Из ДанныеКандидатовСубъекта Цикл
				НовоеОписание = ОписаниеСтруктурыПричины();
				НовоеОписание.Объект = ДанныеКандидата.Кандидат;
				НовоеОписание.ФизическоеЛицо = ДанныеКандидата.ФизическоеЛицо;
				НовоеОписание.ПричинаОтклонения = ДанныеКандидата.ПричинаОтклонения;
				НовоеОписание.ДатаРегистрации = ДанныеКандидата.ДатаРешения;
				НовоеОписание.Комментарий = ДанныеКандидата.КомментарийРешения;
				ОписанияПричин.Добавить(НовоеОписание);
			КонецЦикла;
		Иначе
			НовоеОписание = ОписаниеСтруктурыПричины();
			НовоеОписание.ФизическоеЛицо = Субъект;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписанияПричин) Тогда
		ПоместитьФизическиеЛицаВАрхив(ОписанияПричин);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.АрхивФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.АрхивФизическихЛицДокументыУдостоверяющиеЛичность, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.АрхивФизическихЛицКонтактнаяИнформация, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру причины отклонения/увольнения для помещения "Объекта" в архив
//
// Возвращаемое значение:
//		Структура
//			Объект - Справочник.Сотрудники, Справочник.Кандидаты
//			ФизическоеЛицо - Справочник.ФизическиеЛица
//			ПричинаОтклонения - СправочникСсылка.ПричиныОтклоненияКандидатов
//			ДатаРегистрации - Дата - Дата, когда были зарегистрированы сведения об отклонении/увольнении
//			Комментарий - Строка - Комментарий о причине отклонения/увольнения.
//
Функция ОписаниеСтруктурыПричины()
	
	СтруктураПричины = Новый Структура;
	СтруктураПричины.Вставить("Объект", Неопределено);
	СтруктураПричины.Вставить("ФизическоеЛицо", Неопределено);
	СтруктураПричины.Вставить("ПричинаОтклонения", Неопределено);
	СтруктураПричины.Вставить("ДатаРегистрации", Неопределено);
	СтруктураПричины.Вставить("Комментарий", "");
	
	Возврат СтруктураПричины;
	
КонецФункции

Функция ОписаниеДанныхАрхива()
	
	Описание = Новый Структура(
		"Фамилия,
		|Имя, 
		|Отчество, 
		|ДатаРождения, 
		|СНИЛС, 
		|ИНН, 
		|Документы, 
		|Телефоны,
		|АдресаПочты");
	Описание.Документы = Новый Массив;
	Описание.Телефоны = Новый Массив;
	Описание.АдресаПочты = Новый Массив;

	Возврат Описание;

КонецФункции

// Помещает персональные сведения физических лиц в архив
//
// Параметры:
//		МассивОписанийПричин - Массив - Структуры описаний причин. см. ОписаниеСтруктурыПричины()
//
Процедура ПоместитьФизическиеЛицаВАрхив(МассивОписанийПричин)
	
	МассивФизическихЛиц = Новый Массив;
	Для Каждого ОписаниеПричины Из МассивОписанийПричин Цикл
		МассивФизическихЛиц.Добавить(ОписаниеПричины.ФизическоеЛицо);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Истина, 
		МассивФизическихЛиц, 
		"ФизическоеЛицо,
		|Фамилия,
		|Имя,
		|Отчество,
		|ФИОПолные,
		|ДатаРождения,
		|ИНН,
		|СтраховойНомерПФР", 
		ТекущаяДатаСеанса());
	
	ДокументыФизическихЛиц = КадровыйУчет.ДокументыФизическихЛиц(МассивФизическихЛиц, Истина);
	
	МассивТиповКонтактнойИнформации = Новый Массив;
	МассивТиповКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	МассивТиповКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Факс);
	КонтактнаяИнформацияФизическихЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивФизическихЛиц, МассивТиповКонтактнойИнформации);
	
	Для Каждого ОписаниеПричины Из МассивОписанийПричин Цикл
		// АрхивФизическихЛиц
		НаборЗаписей = РегистрыСведений.АрхивФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ОписаниеПричины.Объект);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОписаниеПричины.ФизическоеЛицо);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = ОписаниеПричины.Объект;
		НоваяЗапись.ФизическоеЛицо = ОписаниеПричины.ФизическоеЛицо;
		НоваяЗапись.Комментарий = ОписаниеПричины.Комментарий;
		НоваяЗапись.ПричинаОтклонения = ОписаниеПричины.ПричинаОтклонения;
		НоваяЗапись.ДатаРегистрации = ОписаниеПричины.ДатаРегистрации;
		
		ОтборСтрок = Новый Структура("ФизическоеЛицо", ОписаниеПричины.ФизическоеЛицо);
		НайденныеСтроки = ДанныеФизическихЛиц.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.Фамилия) Тогда
				НоваяЗапись.Фамилия = АрхивнаяСтрока(НайденнаяСтрока.Фамилия);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденнаяСтрока.Имя) Тогда
				НоваяЗапись.Имя = АрхивнаяСтрока(НайденнаяСтрока.Имя);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденнаяСтрока.Отчество) Тогда
				НоваяЗапись.Отчество = АрхивнаяСтрока(НайденнаяСтрока.Отчество);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденнаяСтрока.СтраховойНомерПФР) Тогда
				НоваяЗапись.СНИЛС = АрхивнаяСтрока(НайденнаяСтрока.СтраховойНомерПФР);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденнаяСтрока.ИНН) Тогда
				НоваяЗапись.ИНН = АрхивнаяСтрока(НайденнаяСтрока.ИНН);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденнаяСтрока.ДатаРождения) Тогда
				НоваяЗапись.ДатаРождения = АрхивнаяДата(НайденнаяСтрока.ДатаРождения);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		// АрхивФизическихЛицДокументыУдостоверяющиеЛичность
		НаборЗаписей = РегистрыСведений.АрхивФизическихЛицДокументыУдостоверяющиеЛичность.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОписаниеПричины.ФизическоеЛицо);
		
		ОтборСтрок = Новый Структура("ФизическоеЛицо", ОписаниеПричины.ФизическоеЛицо);
		НайденныеСтроки = ДокументыФизическихЛиц.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = ОписаниеПричины.ФизическоеЛицо;
			НоваяЗапись.ДокументВид = НайденнаяСтрока.ВидДокумента;
			Если ЗначениеЗаполнено(НайденнаяСтрока.Серия) Тогда
				НоваяЗапись.ПредставлениеДокумента = АрхивныйДокументЛичности(
					НайденнаяСтрока.Серия, НайденнаяСтрока.Номер, НайденнаяСтрока.ДатаВыдачи);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		// АрхивФизическихЛицКонтактнаяИнформация
		НаборЗаписей = РегистрыСведений.АрхивФизическихЛицКонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОписаниеПричины.ФизическоеЛицо);
		
		ОтборСтрок = Новый Структура("Объект", ОписаниеПричины.ФизическоеЛицо);
		НайденныеСтроки = КонтактнаяИнформацияФизическихЛиц.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = ОписаниеПричины.ФизическоеЛицо;
			НоваяЗапись.ВидКонтактнойИнформации = НайденнаяСтрока.Вид;
			Если ЗначениеЗаполнено(НайденнаяСтрока.Представление) Тогда
				НоваяЗапись.ПредставлениеКонтактнойИнформации = АрхивнаяСтрока(НайденнаяСтрока.Представление);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПакетЗапросовПоАрхивуФизическихЛиц(ФизическиеЛица)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АрхивФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АрхивФизическихЛиц.Фамилия КАК Фамилия,
		|	АрхивФизическихЛиц.Имя КАК Имя,
		|	АрхивФизическихЛиц.Отчество КАК Отчество,
		|	АрхивФизическихЛиц.СНИЛС КАК СНИЛС,
		|	АрхивФизическихЛиц.ИНН КАК ИНН,
		|	АрхивФизическихЛиц.ДатаРождения КАК ДатаРождения,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.АрхивФизическихЛицДокументыУдостоверяющиеЛичность КАК АрхивДокументы
		|				ГДЕ
		|					АрхивДокументы.ФизическоеЛицо = АрхивФизическихЛиц.ФизическоеЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьДокументы,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.АрхивФизическихЛицКонтактнаяИнформация КАК АрхивКонтакты
		|				ГДЕ
		|					АрхивКонтакты.ФизическоеЛицо = АрхивФизическихЛиц.ФизическоеЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКонтакты
		|ИЗ
		|	РегистрСведений.АрхивФизическихЛиц КАК АрхивФизическихЛиц
		|ГДЕ
		|	АрхивФизическихЛиц.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	АрхивФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АрхивДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АрхивДокументы.ДокументВид КАК ДокументВид,
		|	АрхивДокументы.ПредставлениеДокумента КАК ПредставлениеДокумента
		|ИЗ
		|	РегистрСведений.АрхивФизическихЛицДокументыУдостоверяющиеЛичность КАК АрхивДокументы
		|ГДЕ
		|	АрхивДокументы.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	АрхивДокументы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АрхивКонтакты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АрхивКонтакты.ВидКонтактнойИнформации КАК ВидКИ,
		|	АрхивКонтакты.ПредставлениеКонтактнойИнформации КАК ПредставлениеКонтактнойИнформации
		|ИЗ
		|	РегистрСведений.АрхивФизическихЛицКонтактнаяИнформация КАК АрхивКонтакты
		|ГДЕ
		|	АрхивКонтакты.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	АрхивКонтакты.ФизическоеЛицо";
	
	Возврат Запрос;

КонецФункции

Процедура УточнитьФИО(СтрокаДанных, Выборка, ЧастиИмени, ЧастиИмениАрхив)

	ПерезаполнитьФИО = Ложь;

	Если Выборка.Фамилия = ЧастиИмениАрхив.Фамилия Тогда
		СтрокаДанных.Фамилия = ЧастиИмени.Фамилия;
		ПерезаполнитьФИО = Истина;
	КонецЕсли;

	Если Выборка.Имя = ЧастиИмениАрхив.Имя Тогда
		СтрокаДанных.Имя = ЧастиИмени.Имя;
		ПерезаполнитьФИО = Истина;
	КонецЕсли;

	Если Выборка.Отчество = ЧастиИмениАрхив.Отчество Тогда
		СтрокаДанных.Отчество = ЧастиИмени.Отчество;
		ПерезаполнитьФИО = Истина;
	КонецЕсли;

	Если ПерезаполнитьФИО Тогда
		СтрокаДанных.ФИОПолные = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФИОИзЧастей(СтрокаДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеАрхива(СтрокаДанных, Выборка, ВыборкаДокументов, ВыборкаКонтактов)

	ОтборСтрок = Новый Структура("ФизическоеЛицо", Выборка.ФизическоеЛицо);
	
	ДанныеАрхива = ОписаниеДанныхАрхива();
	ЗаполнитьЗначенияСвойств(ДанныеАрхива, Выборка);
	
	Если Выборка.ЕстьДокументы Тогда
		Пока ВыборкаДокументов.НайтиСледующий(ОтборСтрок) Цикл
			ДанныеАрхива.Документы.Добавить(ВыборкаДокументов.ПредставлениеДокумента);
		КонецЦикла;
	КонецЕсли;
	
	Если Выборка.ЕстьКонтакты Тогда
		Пока ВыборкаКонтактов.НайтиСледующий(ОтборСтрок) Цикл
			Если ВыборкаКонтактов.ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица") Тогда
				ДанныеАрхива.Телефоны.Добавить(ВыборкаКонтактов.ПредставлениеКонтактнойИнформации);
			КонецЕсли;
			Если ВыборкаКонтактов.ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица") Тогда
				ДанныеАрхива.АдресаПочты.Добавить(ВыборкаКонтактов.ПредставлениеКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДанных.ДанныеАрхива = ОбщегоНазначения.ФиксированныеДанные(ДанныеАрхива);
	
КонецПроцедуры

Функция АрхивныйДокументЛичности(Серия, Номер, ДатаВыдачи)
	Возврат АрхивнаяСтрока(Серия + Номер + АрхивнаяДата(ДатаВыдачи));
КонецФункции

Функция АрхивнаяСтрока(Значение)
	
	СтрокаЗначения = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		":;!@#$%^&-~`'.,?{}[]+=*/|\ ()_""", ВРег(Строка(Значение)), "");
	
	Если ПустаяСтрока(СтрокаЗначения) Тогда
		Возврат "";
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(СтрокаЗначения);
	ХешСумма = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
	Возврат ХешСумма;
	
КонецФункции

Функция АрхивнаяДатаСНулевымВременем(Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат "";
	КонецЕсли;
	
	ДатаСтрокой = Строка(Дата);
	
	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ДатаСтрокой);
	Если ЧастиСтроки.Количество() < 3 Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиСтроки[2]) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиСтроки[1]) Или Число(ЧастиСтроки[1]) > 12 Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиСтроки[0]) 
	 Или Число(ЧастиСтроки[0]) > ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Дата(1, ЧастиСтроки[1], 1)) Тогда
	 	Возврат "";
	КонецЕсли;
	
	Возврат АрхивнаяСтрока(Дата(Число(ЧастиСтроки[2]), Число(ЧастиСтроки[1]), Число(ЧастиСтроки[0])));
	
КонецФункции

Функция АрхивнаяДата(Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат АрхивнаяСтрока(АрхивнаяСтрока(Формат(Дата, "ДЛФ=D;")));
	
КонецФункции

#КонецОбласти
