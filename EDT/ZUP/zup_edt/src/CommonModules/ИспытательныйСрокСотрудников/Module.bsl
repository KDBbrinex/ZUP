////////////////////////////////////////////////////////////////////////////////
// Подсистема "Испытательный срок сотрудников"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Обновляем дату завершения испытательного срока сотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц - Менеджер, в котором содержится таблицы ВТКлючиИзменившихсяДанных и ВТПредыдущиеДанныеРегистра с колонкой Сотрудник.
//
Процедура ОбновитьСостояниеИспытательногоСрока(МенеджерВременныхТаблиц) Экспорт
	
	ТребуетсяОбновлениеИспытательногоСрока = ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТДанныеСотрудников");
	Если Не ТребуетсяОбновлениеИспытательногоСрока Тогда
		// Таблица сотрудников пустая и обновлять испытательный срок не нужно.
		Возврат;
	КонецЕсли;
	
	ТаблицаРегистра = ТаблицаСостоянийИспытательногоСрокаСотрудников(МенеджерВременныхТаблиц);
	
	Для каждого СтрокаТаблицы Из ТаблицаРегистра Цикл
		НаборЗаписей = РегистрыСведений.ИспытательныйСрокСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаЗавершения) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет наборы записей регистра ДанныеИспытательногоСрокаСотрудников.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		ДанныеДляПроведения - Структура данных для проведения документа, в которую добавляются данные по испытательному сроку.
//
Процедура СформироватьДвиженияИспытательногоСрока(Движения, ДанныеДляПроведения) Экспорт
	
	Если Не ДанныеДляПроведения.Свойство("ИспытательныйСрокСотрудников")
		Или Не ЗначениеЗаполнено(ДанныеДляПроведения.ИспытательныйСрокСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеДляПроведения.ИспытательныйСрокСотрудников Цикл
		Движения.ДанныеИспытательногоСрокаСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ДанныеИспытательногоСрокаСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает таблицу для проведения документов ПриемНаРаботу/ПриемНаРаботуСписком.
//
// Параметры:
//		ДанныеДляПроведения - Структура, в которую добавляются данные по испытательному сроку.
//		ДокументСсылка - Ссылка на документ, для которого требуется подготовить таблицу для проведения.
//
//
Процедура ПриемНаРаботуСведенияОбИспытательномСроке(ДанныеДляПроведения, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.ДатаПриема КАК Период,
	|	ПриемНаРаботу.Организация КАК Организация,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЗавершения,
	|	ПриемНаРаботу.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока,
	|	ПриемНаРаботу.ДатаПриема КАК ДатаПриема
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПриемНаРаботу.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	ПриемНаРаботу.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ПриемНаРаботу.ДлительностьИспытательногоСрока <> 0
	|	И ПриемНаРаботу.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗЛИЧНЫЕ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Организация", "ПриемНаРаботу.Ссылка.Организация");
	КонецЕсли;
	
	СведенияОбИспытательномСроке = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСведений Из СведенияОбИспытательномСроке Цикл
		ЦелоеЗначениеДлительности = Цел(СтрокаСведений.ДлительностьИспытательногоСрока);
		
		Если СтрокаСведений.ДлительностьИспытательногоСрока = ЦелоеЗначениеДлительности Тогда
			СтрокаСведений.ДатаЗавершения = ДобавитьМесяц(СтрокаСведений.ДатаПриема, СтрокаСведений.ДлительностьИспытательногоСрока)-1;
		Иначе
			ДатаОкончанияОт = ДобавитьМесяц(СтрокаСведений.ДатаПриема, ЦелоеЗначениеДлительности);
			ДатаОкончанияДо = ДобавитьМесяц(СтрокаСведений.ДатаПриема, ЦелоеЗначениеДлительности + 1);
			ДнейВПериоде = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(ДатаОкончанияОт, ДатаОкончанияДо);
			ДробнаяЧасть = СтрокаСведений.ДлительностьИспытательногоСрока - ЦелоеЗначениеДлительности;
			КоличествоДней = Окр(ДнейВПериоде * ДробнаяЧасть, 0);
			
			СтрокаСведений.ДатаЗавершения = ЗарплатаКадрыКлиентСервер.ДобавитьДней(ДатаОкончанияОт, КоличествоДней)-1;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляПроведения.Вставить("ИспытательныйСрокСотрудников", СведенияОбИспытательномСроке);
	
КонецПроцедуры

// Обновляет состояние сотрудника по испытательному сроку.
//
// Параметры:
//		Форма - форма объекта, на которой требуется обновить состояние сотрудника.
//		ПараметрыСостояния - Структура
//				Сотрудник - Ссылка на сотрудника.
//				СостояниеСотрудника - Перечисление.СостоянияСотрудника, Строка.
//				ЗаменитьЗаголовокНадписи - Булево - Истина, если требуется заменить заголовок надписи, иначе Ложь.
//				ЗаголовокНадписи - Строка - Представление состояния сотрудника.
//
Процедура ОбновитьСостояниеСотрудника(Форма, ПараметрыСостояния) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСостояния.Сотрудник) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник", ПараметрыСостояния.Сотрудник);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИспытательныйСрокСотрудников.Сотрудник КАК Сотрудник,
		|	ИспытательныйСрокСотрудников.ДатаЗавершения КАК ДатаЗавершения
		|ИЗ
		|	РегистрСведений.ИспытательныйСрокСотрудников КАК ИспытательныйСрокСотрудников
		|ГДЕ
		|	ИспытательныйСрокСотрудников.Сотрудник = &Сотрудник
		|	И ИспытательныйСрокСотрудников.ДатаЗавершения > &ТекущаяДата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПараметрыСостояния.СостояниеСотрудника = "ИспытательныйСрок";
			ПараметрыСостояния.ЗаменитьЗаголовокНадписи = Истина;
			ПараметрыСостояния.ЗаголовокНадписи = НСтр("ru = 'На испытательном сроке до %1'");
			ПараметрыСостояния.ЗаголовокНадписи = СтрШаблон(ПараметрыСостояния.ЗаголовокНадписи, Формат(Выборка.ДатаЗавершения, "ДЛФ=ДД"));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстыЗапросовФормыВыбораСотрудников(ТекстЗапроса) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПоследнийЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорПоследнегоЗапроса = ПоследнийЗапросПакета.Операторы[0];
	ПервыйИсточник = ОператорПоследнегоЗапроса.Источники[0];
	
	ТаблицаРегистра = ПоследнийЗапросПакета.ДоступныеТаблицы.Найти("РегистрСведений.ИспытательныйСрокСотрудников");
	ИсточникИспытательныйСрок = ОператорПоследнегоЗапроса.Источники.Добавить(ТаблицаРегистра, "ИспытательныйСрокСотрудников");
	ИсточникИспытательныйСрок.Соединения.Очистить();
	
	УсловиеСоединения = ПервыйИсточник.Источник.Псевдоним + ".Сотрудник = " + ИсточникИспытательныйСрок.Источник.Псевдоним + ".Сотрудник";
	ПервыйИсточник.Соединения.Добавить(ИсточникИспытательныйСрок.Источник.Псевдоним, УсловиеСоединения);
	
	ОператорПоследнегоЗапроса.ВыбираемыеПоля.Добавить("ИспытательныйСрокСотрудников.ДатаЗавершения > &ДатаОкончания");
	ПоследнийЗапросПакета.Колонки[ПоследнийЗапросПакета.Колонки.Количество()-1].Псевдоним = "НаходитсяНаИспытательномСроке";
	ОператорПоследнегоЗапроса.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА ИспытательныйСрокСотрудников.ДатаЗавершения > &ДатаОкончания ТОГДА ИспытательныйСрокСотрудников.ДатаЗавершения ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ");
	ПоследнийЗапросПакета.Колонки[ПоследнийЗапросПакета.Колонки.Количество()-1].Псевдоним = "ДатаЗавершенияИспытательногоСрока";
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспытательныйСрокСотрудников КАК ИспытательныйСрокСотрудников",
		"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспытательныйСрокСотрудников КАК ИспытательныйСрокСотрудников");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПО (" + УсловиеСоединения + ")", "ПО (" + УсловиеСоединения + ")}");
	
КонецПроцедуры

Процедура ЗаполнитьСостоянияИспытательногоСрокаСотрудников(СтрокиСписка, СотрудникиКОбновлению, ДатаАкутальности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаАкутальности);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИспытательныйСрокСотрудников.Сотрудник КАК Сотрудник,
	|	ИспытательныйСрокСотрудников.ДатаЗавершения > &ДатаОкончания КАК НаходитсяНаИспытательномСроке,
	|	ВЫБОР
	|		КОГДА ИспытательныйСрокСотрудников.ДатаЗавершения > &ДатаОкончания
	|			ТОГДА ИспытательныйСрокСотрудников.ДатаЗавершения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗавершенияИспытательногоСрока
	|ИЗ
	|	РегистрСведений.ИспытательныйСрокСотрудников КАК ИспытательныйСрокСотрудников
	|ГДЕ
	|	ИспытательныйСрокСотрудников.Сотрудник В(&СотрудникиКОбновлению)";
	
	Данные = Запрос.Выполнить().Выгрузить();
	Данные.Индексы.Добавить("Сотрудник");
	
	СтруктураПоиска = Новый Структура("Сотрудник");
	Для Каждого КлючЗначение Из СтрокиСписка Цикл
		
		СтруктураПоиска.Сотрудник = КлючЗначение.Ключ.Сотрудник;
		ДанныеПоСотруднику = Данные.НайтиСтроки(СтруктураПоиска);
		Если ДанныеПоСотруднику.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(КлючЗначение.Значение.Данные, ДанныеПоСотруднику[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСозданииФормСпискаИлиВыбораСотрудников(Форма, ИмяГруппы, Список) Экспорт
	
	ГруппаСостояния = Форма.Элементы.Найти(ИмяГруппы);
	Если ГруппаСостояния = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Список.ТекстЗапроса);
	ПоследнийЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорПоследнегоЗапроса = ПоследнийЗапросПакета.Операторы[0];
	
	Если ПоследнийЗапросПакета.Колонки.Найти("НаходитсяНаИспытательномСроке") = Неопределено Тогда
		ОператорПоследнегоЗапроса.ВыбираемыеПоля.Добавить("NULL");
		ПоследнийЗапросПакета.Колонки[ПоследнийЗапросПакета.Колонки.Количество()-1].Псевдоним = "НаходитсяНаИспытательномСроке";
	КонецЕсли;
	Если ПоследнийЗапросПакета.Колонки.Найти("ДатаЗавершенияИспытательногоСрока") = Неопределено Тогда
		ОператорПоследнегоЗапроса.ВыбираемыеПоля.Добавить("NULL");
		ПоследнийЗапросПакета.Колонки[ПоследнийЗапросПакета.Колонки.Количество()-1].Псевдоним = "ДатаЗавершенияИспытательногоСрока";
	КонецЕсли;
	
	Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Элемент = Форма.Элементы.Добавить("СписокНаходитсяНаИспытательномСроке", Тип("ПолеФормы"), ГруппаСостояния);
	Элемент.Вид = ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным = "Список.НаходитсяНаИспытательномСроке";
	Элемент.ОтображатьВШапке = Ложь;
	Элемент.Заголовок = НСтр("ru='Находится на испытательном сроке'");
	
	Элемент = Форма.Элементы.Добавить("СписокДатаЗавершенияИспытательногоСрока", Тип("ПолеФормы"), ГруппаСостояния);
	Элемент.Вид = ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным = "Список.ДатаЗавершенияИспытательногоСрока";
	Элемент.ОтображатьВШапке = Ложь;
	Элемент.Заголовок = НСтр("ru='Дата завершения испытательного срока'");
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("НаходитсяНаИспытательномСроке");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "БЛ=''; БИ='на исп. сроке'");
	
КонецПроцедуры

Процедура ДобавитьПодменюПоИспытательномуСроку(ОписаниеМеню) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ПродлениеИспытательногоСрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.ПродлениеИспытательногоСрока");
	ПунктыМеню.Добавить("Документы.ЗавершениеИспытательногоСрока");
	
	ОписаниеМеню.Пункты.Добавить(
	СотрудникиФормы.РазделМеню(НСтр("ru='Испытательный срок'"), ПунктыМеню));
	
КонецПроцедуры

Процедура ПриСозданииДокументаУвольнения(Форма, ГруппаСостояния) Экспорт
	
	Элемент = Форма.Элементы.Добавить("СостояниеСотрудникаКартинка", Тип("ДекорацияФормы"), ГруппаСостояния);
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Элемент.Картинка = БиблиотекаКартинок.Информация;
	
	Элемент = Форма.Элементы.Добавить("СостоянияСотрудника", Тип("ДекорацияФормы"), ГруппаСостояния);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = НСтр("ru='Сотрудник находится на испытательном сроке.'");
	
	СостояниеСотрудникаПриИзменении(Форма);
	
КонецПроцедуры

Процедура СостояниеСотрудникаПриИзменении(Форма) Экспорт
	
	ДатаУвольнения = Форма.Объект.ДатаУвольнения;
	Сотрудник = Форма.Объект.Сотрудник;
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ДатаПриема,ИспытательныйСрокДатаЗавершения", ДатаУвольнения);
	
	Если КадровыеДанныеСотрудника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОкончанияИС = КадровыеДанныеСотрудника[0].ИспытательныйСрокДатаЗавершения;
	НаходитсяНаИспытательномСроке = ДатаУвольнения < ?(ЗначениеЗаполнено(ДатаОкончанияИС), ДатаОкончанияИС, Дата(1,1,1))
		И ДатаУвольнения > КадровыеДанныеСотрудника[0].ДатаПриема;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаСостояниеСотрудника",
		"Видимость",
		НаходитсяНаИспытательномСроке);
	
КонецПроцедуры

#Область КадровыеДанныеСотрудников

Функция ДобавитьПолеСведенийОбИспытательномСроке(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных, ОписательВременнойТаблицыОтборов) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбИспытательномСроке(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбИспытательномСроке", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбИспытательномСроке(ИмяПоля, ОписательВременнойТаблицыОтборов);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбИспытательномСроке(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОбИспытательномСроке") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросВТ = ЗапросВТСведенияОбИспытательномСроке(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбИспытательныхСроках КАК СведенияОбИспытательныхСроках
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОбИспытательныхСроках.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОбИспытательныхСроках.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОбИспытательныхСроках");
	
КонецПроцедуры

Процедура ДополнитьТаблицуДополнительныхПолейПредставленийОтчетовПоСотрудникам(ДополнительныеПоляПредставлений) Экспорт
	ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, "РабочееМесто");
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// Процедура обеспечивает сбор сведений о хранении данных, относящихся к персональным.
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ЗавершениеИспытательногоСрока";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "ДатаЗавершения";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПродлениеИспытательногоСрока";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "ДатаПродления";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ДанныеИспытательногоСрокаСотрудников";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "ДатаЗавершения";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ИспытательныйСрокСотрудников";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "ДатаЗавершения";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзмененияДанных

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Раздел = Разделы.Добавить();
	Раздел.Имя  = "ИспытательныйСрокСотрудников";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("e4500dbd-c2b2-4fbf-8185-68fc3cc2c1d2");
	Раздел.Представление = НСтр("ru = 'Испытательный срок сотрудников'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗавершениеИспытательногоСрока",	"ДатаЗавершения", "ИспытательныйСрокСотрудников", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПродлениеИспытательногоСрока",	"ДатаПродления", "ИспытательныйСрокСотрудников", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ИспытательныйСрокСотрудников);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ЗавершениеИспытательногоСрока);
	СписокОбъектов.Добавить(Документы.ПродлениеИспытательногоСрока);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf3e-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗавершениеИспытательногоСрока);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfdc-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПродлениеИспытательногоСрока);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ЗавершениеИспытательногоСрока, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗавершениеИспытательногоСрокаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПродлениеИспытательногоСрока, Истина);
	Списки.Вставить(Метаданные.Справочники.ПродлениеИспытательногоСрокаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДанныеИспытательногоСрокаСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИспытательныйСрокСотрудников, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу с датами завершения испытательного срока сотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц - Менеджер, в котором содержится таблица ВТДанныеСотрудников с колонкой Сотрудник.
//
Функция ТаблицаСостоянийИспытательногоСрокаСотрудников(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ЗарплатаКадры.ВТСуществует(Запрос.МенеджерВременныхТаблиц, "ВТДанныеИспытательногоСрока") Тогда
		
		// ИспытательныйСрокЗавершен - Истина, если испытательный срок был завершен принудительно.
		//		Например, документом "Кадровый перевод" или "Завершение испытательного срока".
		//		В этом случае не читаем отклонения по сотруднику.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ВТДанныеСотрудников.Период КАК Период,
		|	ДанныеИспытательногоСрокаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеИспытательногоСрокаСотрудников.Организация КАК Организация,
		|	ЕСТЬNULL(ДанныеИспытательногоСрокаСотрудников.ДатаЗавершения, ДАТАВРЕМЯ(1, 1, 1)) КАК ПредполагаемаяДатаОкончания,
		|	ЕСТЬNULL(ДанныеИспытательногоСрокаСотрудников.ИспытательныйСрокЗавершен, ЛОЖЬ) КАК ИспытательныйСрокЗавершен,
		|	ЕСТЬNULL(ДанныеИспытательногоСрокаСотрудников.ПродлениеИспытательногоСрока, ЛОЖЬ) КАК ПродлениеИспытательногоСрока
		|ПОМЕСТИТЬ ВТДанныеИспытательногоСрока
		|ИЗ
		|	ВТДанныеСотрудников КАК ВТДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников.СрезПоследних(
		|				,
		|				Сотрудник В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ДанныеСотрудников.Сотрудник КАК Сотрудник
		|					ИЗ
		|						ВТДанныеСотрудников КАК ДанныеСотрудников)) КАК ДанныеИспытательногоСрокаСотрудников
		|		ПО (ДанныеИспытательногоСрокаСотрудников.Сотрудник = ВТДанныеСотрудников.Сотрудник)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	МассивВидовСобытий = Новый Массив;
	МассивВидовСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.Перемещение);
	МассивВидовСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.Увольнение);
	КадровыйУчет.СоздатьВТПервыеКадровыеСобытия(Запрос.МенеджерВременныхТаблиц, Истина, "ВТДанныеИспытательногоСрока", "Сотрудник", ,МассивВидовСобытий);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеИспытательногоСрокаСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеИспытательногоСрокаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеИспытательногоСрокаСотрудников.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПервыеКадровыеСобытия.Сотрудник ЕСТЬ НЕ NULL 
	|				И ПервыеКадровыеСобытия.ПериодЗаписи < ДанныеИспытательногоСрокаСотрудников.ПредполагаемаяДатаОкончания
	|			ТОГДА ПервыеКадровыеСобытия.ПериодЗаписи
	|		ИНАЧЕ ДанныеИспытательногоСрокаСотрудников.ПредполагаемаяДатаОкончания
	|	КОНЕЦ КАК ПредполагаемаяДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПервыеКадровыеСобытия.Сотрудник ЕСТЬ НЕ NULL 
	|				И ПервыеКадровыеСобытия.ПериодЗаписи < ДанныеИспытательногоСрокаСотрудников.ПредполагаемаяДатаОкончания
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ДанныеИспытательногоСрокаСотрудников.ИспытательныйСрокЗавершен
	|	КОНЕЦ КАК ИспытательныйСрокЗавершен,
	|	ДанныеИспытательногоСрокаСотрудников.ПродлениеИспытательногоСрока КАК ПродлениеИспытательногоСрока,
	|	ЕСТЬNULL(ПервыеКадровыеСобытия.ПериодЗаписи, НЕОПРЕДЕЛЕНО) КАК ДатаПервогоКадровогоСобытия
	|ПОМЕСТИТЬ ВТПредполагаемыеДаты
	|ИЗ
	|	ВТДанныеИспытательногоСрока КАК ДанныеИспытательногоСрокаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервыеКадровыеСобытия КАК ПервыеКадровыеСобытия
	|		ПО ДанныеИспытательногоСрокаСотрудников.Сотрудник = ПервыеКадровыеСобытия.Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредполагаемыеДаты.Сотрудник КАК Сотрудник,
	|	ПредполагаемыеДаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПредполагаемыеДаты.Организация КАК Организация,
	|	ПредполагаемыеДаты.ПредполагаемаяДатаОкончания КАК ПредполагаемаяДатаОкончания,
	|	ПредполагаемыеДаты.ИспытательныйСрокЗавершен КАК ИспытательныйСрокЗавершен,
	|	ПредполагаемыеДаты.ПродлениеИспытательногоСрока КАК ПродлениеИспытательногоСрока,
	|	ВЫБОР
	|		КОГДА ИспытательныйСрокСотрудников.ДатаЗавершения ЕСТЬ NULL
	|				ИЛИ ИспытательныйСрокСотрудников.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПредполагаемыеДаты.ПредполагаемаяДатаОкончания
	|		КОГДА ИспытательныйСрокСотрудников.ДатаЗавершения > ПредполагаемыеДаты.ПредполагаемаяДатаОкончания
	|			ТОГДА ИспытательныйСрокСотрудников.ДатаЗавершения
	|		ИНАЧЕ ПредполагаемыеДаты.ПредполагаемаяДатаОкончания
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ВТПериодыСотрудников
	|ИЗ
	|	ВТПредполагаемыеДаты КАК ПредполагаемыеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспытательныйСрокСотрудников КАК ИспытательныйСрокСотрудников
	|		ПО ПредполагаемыеДаты.Сотрудник = ИспытательныйСрокСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСотрудников.Организация КАК Организация,
	|	ПериодыСотрудников.Сотрудник КАК Сотрудник,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТДанныеСотрудниковДляПолученияСостоянийСотрудников
	|ИЗ
	|	ВТПериодыСотрудников КАК ПериодыСотрудников
	|ГДЕ
	|	НЕ ПериодыСотрудников.ИспытательныйСрокЗавершен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредполагаемыеДаты.Сотрудник КАК Сотрудник,
	|	ПредполагаемыеДаты.ДатаПервогоКадровогоСобытия КАК ДатаПервогоКадровогоСобытия
	|ИЗ
	|	ВТПредполагаемыеДаты КАК ПредполагаемыеДаты
	|ГДЕ
	|	ПредполагаемыеДаты.ДатаПервогоКадровогоСобытия <> НЕОПРЕДЕЛЕНО";
	
	ДатыПервыхКадровыхСобытий = Запрос.Выполнить().Выгрузить();
	
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТДанныеСотрудниковДляПолученияСостоянийСотрудников");
	
	МассивСостоянийОтклонений = СостоянияСотрудников.СостоянияОтклоненийСотрудников();
	Запрос.УстановитьПараметр("МассивСостоянийОтклонений", МассивСостоянийОтклонений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПериодыСотрудников.Организация КАК Организация,
	|	ПериодыСотрудников.Сотрудник КАК Сотрудник,
	|	ПериодыСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПериодыСотрудников.ПредполагаемаяДатаОкончания КАК ПредполагаемаяДатаОкончания,
	|	ПериодыСотрудников.ИспытательныйСрокЗавершен КАК ИспытательныйСрокЗавершен,
	|	ПериодыСотрудников.ПродлениеИспытательногоСрока КАК ПродлениеИспытательногоСрока,
	|	ЕСТЬNULL(ПериодыСостоянийСотрудников.Начало, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоОтклонения,
	|	ВЫБОР
	|		КОГДА ПериодыСостоянийСотрудников.Окончание <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПериодыСостоянийСотрудников.Окончание
	|		КОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно
	|		ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|	КОНЕЦ КАК ОкончаниеОтклонения,
	|	ВЫБОР
	|		КОГДА ПериодыСостоянийСотрудников.Начало ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыСостоянийСотрудников.Начало, ВЫБОР
	|					КОГДА ПериодыСостоянийСотрудников.Окончание <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ПериодыСостоянийСотрудников.Окончание
	|					КОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно
	|					ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|				КОНЕЦ, ДЕНЬ) + 1
	|	КОНЕЦ КАК КоличествоДней,
	|	ПериодыСостоянийСотрудников.Состояние КАК Состояние
	|ИЗ
	|	ВТПериодыСотрудников КАК ПериодыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ПО ПериодыСотрудников.Сотрудник = ПериодыСостоянийСотрудников.Сотрудник
	|			И (ПериодыСостоянийСотрудников.Состояние В (&МассивСостоянийОтклонений))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодыСотрудников.Сотрудник,
	|	ПериодыСостоянийСотрудников.Начало";
	
	ТаблицаРегистра = ТаблицаЗначенийПоИмениРегистраСведений("ИспытательныйСрокСотрудников");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ДатаПервогоКадровогоСобытия = Неопределено;
		НайденнаяСтрока = ДатыПервыхКадровыхСобытий.Найти(Выборка.Сотрудник, "Сотрудник");
		Если НайденнаяСтрока <> Неопределено Тогда
			ДатаПервогоКадровогоСобытия = НайденнаяСтрока.ДатаПервогоКадровогоСобытия;
		КонецЕсли;
		НоваяСтрока = ТаблицаРегистра.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		НоваяСтрока.Организация = Выборка.Организация;
		НоваяСтрока.ДатаЗавершения = Выборка.ПредполагаемаяДатаОкончания;
		
		Пока Выборка.Следующий() Цикл
			// Не увеличиваем дату при продлении испытательного срока. Фиксируем как есть.
			Если Выборка.ПродлениеИспытательногоСрока Тогда
				Продолжить;
			КонецЕсли;
			// Не увеличиваем дату завершения испытательного срока, если он был завершен принудительно
			Если Не Выборка.ИспытательныйСрокЗавершен И Выборка.НачалоОтклонения <= НоваяСтрока.ДатаЗавершения Тогда
				НоваяСтрока.ДатаЗавершения = НоваяСтрока.ДатаЗавершения + (Выборка.КоличествоДней*60*60*24);
				// Проверим дату завершения испытательного срока, с учетом отклонения
				Если ДатаПервогоКадровогоСобытия <> Неопределено Тогда
					Если НоваяСтрока.ДатаЗавершения > ДатаПервогоКадровогоСобытия Тогда
						НоваяСтрока.ДатаЗавершения = ДатаПервогоКадровогоСобытия;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивВТ = Новый Массив;
	МассивВТ.Добавить("ВТДанныеИспытательногоСрока");
	МассивВТ.Добавить("ВТПредполагаемыеДаты");
	МассивВТ.Добавить("ВТПериодыСотрудников");
	МассивВТ.Добавить("ВТПервыеКадровыеСобытия");
	МассивВТ.Добавить("ВТПериодыСостоянийСотрудников");
	МассивВТ.Добавить("ВТДанныеСотрудниковДляПолученияКадровыхДанных");
	МассивВТ.Добавить("ВТДанныеСотрудниковДляПолученияСостоянийСотрудников");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, МассивВТ,  Истина);
	
	Возврат ТаблицаРегистра;
	
КонецФункции

// Возвращает таблицу значений с колонками, соответствующими структуре регистра сведений
// Параметры
//		ИмяРегистра - Строка, имя регистра накопления.
//
// Возвращаемое значение:
//   Таблица значений
//
Функция ТаблицаЗначенийПоИмениРегистраСведений(ИмяРегистра) Экспорт
	
	ТаблицаЗначенийРегистраСведений = Новый ТаблицаЗначений;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Измерения
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ТаблицаЗначенийРегистраСведений.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	
	// Ресурсы
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ТаблицаЗначенийРегистраСведений.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	// Реквизиты
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ТаблицаЗначенийРегистраСведений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат ТаблицаЗначенийРегистраСведений;
	
КонецФункции

#Область ВторичныеДанные

Процедура ИнициализироватьНаборыИсточникиВторичныхДанных(ДокументОбъект, РежимЗаписи) Экспорт
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение
		И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Возврат;
	КонецЕсли;
	
	РегистрыИсточникиВторичныхДанных = РегистрыИсточникиВторичныхДанных();
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		Если РегистрыИсточникиВторичныхДанных[Набор.Метаданные().Имя] = Истина Тогда
			Набор.ДополнительныеСвойства.Вставить("НеФормироватьВторичныеДанныеИспытательногоСрокаПриЗаписи", Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РегистрыИсточникиВторичныхДанных() Экспорт
	
	РегистрыИсточникиВторичныхДанных = Новый Соответствие;
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.ДанныеИспытательногоСрокаСотрудников.Имя, Истина);
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.ДанныеСостоянийСотрудников.Имя, Истина);
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя, Истина);
	
	Возврат РегистрыИсточникиВторичныхДанных;
	
КонецФункции

Функция ИменаИзмеренияПериодРегистровИсточниковВторичныхДанных()
	
	РегистрыИсточникиВторичныхДанных = Новый Соответствие;
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.ДанныеИспытательногоСрокаСотрудников.Имя, "Период");
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.ДанныеСостоянийСотрудников.Имя, "Начало");
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя, "Период");
	
	Возврат РегистрыИсточникиВторичныхДанных;
	
КонецФункции

Процедура ЗарегистрироватьВторичныеДанныеПриПроведенииДокумента(ДокументОбъект) Экспорт
	
	РегистрыИсточникиВторичныхДанных = РегистрыИсточникиВторичныхДанных();
	
	НаборыИсточникиВторичныхДанных = Новый Массив;
	
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		Если РегистрыИсточникиВторичныхДанных[Набор.Метаданные().Имя] = Истина Тогда
			НаборыИсточникиВторичныхДанных.Добавить(Набор);
			
			Если Набор.Записывать Тогда
				Набор.Записать();
				Набор.Записывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИзмененияВНаборахИсточникахДанных = ИзмененияВНаборахИсточниковВторичныхДанных(НаборыИсточникиВторичныхДанных);
	
	// если интересующие нас регистры не изменялись, тогда ничего не делаем
	Если ИзмененияВНаборахИсточникахДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеСотрудников(МенеджерВременныхТаблиц, ИзмененияВНаборахИсточникахДанных);
	
	ОбновитьСостояниеИспытательногоСрока(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗарегистрироватьВторичныеДанныеПриЗаписиНабора(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("НеФормироватьВторичныеДанныеИспытательногоСрокаПриЗаписи")
		И НаборЗаписей.ДополнительныеСвойства.НеФормироватьВторичныеДанныеИспытательногоСрокаПриЗаписи = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборыИсточникиВторичныхДанных = Новый Массив;
	НаборыИсточникиВторичныхДанных.Добавить(НаборЗаписей);
	
	ИзмененияВНаборахИсточникахДанных = ИзмененияВНаборахИсточниковВторичныхДанных(НаборыИсточникиВторичныхДанных);
	
	// если интересующие нас регистры не менялись, тогда ничего не делаем
	Если ИзмененияВНаборахИсточникахДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеСотрудников(МенеджерВременныхТаблиц, ИзмененияВНаборахИсточникахДанных);
	
	ОбновитьСостояниеИспытательногоСрока(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ИзмененияВНаборахИсточниковВторичныхДанных(НаборыИсточникДанных)
	
	ИзмененияВНаборах = Новый Соответствие;
	
	Для Каждого Набор Из НаборыИсточникДанных Цикл
		ИмяРегистра = Набор.Метаданные().Имя; 
		
		ТаблицаИзмененийВНаборе = Набор.ТаблицаИзменившихсяДанныхНабора();
		
		Если ТаблицаИзмененийВНаборе <> Неопределено
			И ТаблицаИзмененийВНаборе.Количество() > 0 Тогда
			
			ИзмененияВНаборах.Вставить(ИмяРегистра, ТаблицаИзмененийВНаборе);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИзмененияВНаборах;
	
КонецФункции

Процедура СоздатьВТДанныеСотрудников(МенеджерВременныхТаблиц, ИзмененияВНаборах)
	
	ИменаИзмеренияПериодРегистровИсточниковВторичныхДанных = ИменаИзмеренияПериодРегистровИсточниковВторичныхДанных();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "";
	Для Каждого КлючЗначение Из ИзмененияВНаборах Цикл
		ИмяРегистра = КлючЗначение.Ключ; 
		ТаблицаИзмененийВНаборе = КлючЗначение.Значение;
		
		Если ТаблицаИзмененийВНаборе <> Неопределено
			И ТаблицаИзмененийВНаборе.Количество() > 0 Тогда
			
			ИмяВТИзменений = ИмяТаблицыИзмененийВНаборе(ИмяРегистра); 
			ИмяПериод = ИменаИзмеренияПериодРегистровИсточниковВторичныхДанных.Получить(ИмяРегистра);
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаИзмененийВНаборе, ИмяВТИзменений);
			
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	" + ИмяВТИзменений + ".Сотрудник КАК Сотрудник,
				|	ДАТАВРЕМЯ(1,1,1) КАК Период";
			Иначе
				ТекстЗапроса = ТекстЗапроса + 
				"ВЫБРАТЬ
				|	" + ИмяВТИзменений + ".Сотрудник КАК Сотрудник,
				|	ДАТАВРЕМЯ(1,1,1) КАК Период
				|ПОМЕСТИТЬ ВТДанныеСотрудников";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ИЗ " + ИмяВТИзменений + " КАК " + ИмяВТИзменений;
			
			Если ИмяРегистра = "ДанныеИспытательногоСрокаСотрудников" Тогда
				// Если были изменения в регистре ДанныеИспытательногоСрокаСотрудников, то обновляем вторичный регистр без условий.
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИспытательныйСрокСотрудников КАК ИспытательныйСрокСотрудников
			|		ПО " + ИмяВТИзменений + ".Сотрудник = ИспытательныйСрокСотрудников.Сотрудник
			|ГДЕ";
			
			Если ИмяПериод = Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	ДАТАВРЕМЯ(1,1,1) ";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	" + ИмяВТИзменений +"." + ИмяПериод ;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + " <= КОНЕЦПЕРИОДА(ИспытательныйСрокСотрудников.ДатаЗавершения, ДЕНЬ)";
			Если ИмяРегистра = "КадроваяИсторияСотрудников" Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|		И (" + ИмяВТИзменений + ".НовоеЗначениеВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
				|				ИЛИ " + ИмяВТИзменений + ".СтароеЗначениеВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)))";
			КонецЕсли;
			Если ИмяРегистра = "ДанныеСостоянийСотрудников" Тогда
				Запрос.УстановитьПараметр("СостоянияОтклонений", СостоянияСотрудников.СостоянияОтклоненийСотрудников());
				ТекстЗапроса = ТекстЗапроса + "
				|		И (" + ИмяВТИзменений + ".Состояние В(&СостоянияОтклонений)
				|				ИЛИ (ВТДанныеСостоянийСотрудниковИзменения.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
				|					И (";
				
				ТипыДокументов = ТаблицаИзмененийВНаборе.Колонки.ДокументОснование.ТипЗначения.Типы();
				Для каждого ТипДокумента Из ТипыДокументов Цикл
					МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
					Если МетаданныеДокумента <> Неопределено Тогда
						ТекстЗапроса = ТекстЗапроса + "ВТДанныеСостоянийСотрудниковИзменения.ДокументОснование ССЫЛКА " + МетаданныеДокумента.ПолноеИмя() + "
						| ИЛИ ";
					КонецЕсли;
				КонецЦикла;
				Если ТипыДокументов.Количество() > 0 Тогда
					СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстЗапроса, 5);
				Иначе
					ТекстЗапроса = ТекстЗапроса + "ИСТИНА";
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + ")))";
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ИмяТаблицыИзмененийВНаборе(ИмяРегистра)
	Возврат "ВТ" + ИмяРегистра + "Изменения";
КонецФункции

#КонецОбласти

#Область КадровыеДанныеСотрудников

Функция ЗапросВТСведенияОбИспытательномСроке(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТВТСведенияОбИспытательныхСроках = "ВТСведенияОбИспытательныхСроках")
	
	ЗапросВТ = Новый Запрос;
	
	ЗапросВТ.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Период КАК Период,
	|	ИспытательныйСрокСотрудников.Сотрудник КАК Сотрудник,
	|	ИспытательныйСрокСотрудников.ДатаЗавершения КАК ДатаЗавершения
	|ПОМЕСТИТЬ ВТСведенияОбИспытательныхСроках
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИспытательныйСрокСотрудников КАК ИспытательныйСрокСотрудников
	|		ПО Сотрудники.Сотрудник = ИспытательныйСрокСотрудников.Сотрудник";
	
	ЗапросВТ.Текст = СтрЗаменить(ЗапросВТ.Текст, "ВТСотрудники", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ЗапросВТ.Текст = СтрЗаменить(ЗапросВТ.Текст, "Сотрудники.Сотрудник", "Сотрудники." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	ЗапросВТ.Текст = СтрЗаменить(ЗапросВТ.Текст, "Сотрудники.Период", "Сотрудники." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ЗапросВТ.Текст = СтрЗаменить(ЗапросВТ.Текст, "ВТСведенияОбИспытательныхСроках", ИмяВТВТСведенияОбИспытательныхСроках);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ЗапросВТ.Текст, ТолькоРазрешенные);
	
	Возврат ЗапросВТ;
	
КонецФункции

Функция НеобходимыСведенияОбИспытательномСроке(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("НаходитсяНаИспытательномСроке")
		Или ИмяПоля = ВРег("ИспытательныйСрокДатаЗавершения");
		
КонецФункции

Функция ПутьКДаннымСведенийОбИспытательномСроке(Знач ИмяПоля, ОписательВременнойТаблицыОтборов)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("НаходитсяНаИспытательномСроке") Тогда
		ПутьКДанным = "ЕСТЬNULL(СведенияОбИспытательныхСроках.ДатаЗавершения, ДАТАВРЕМЯ(1,1,1)) > ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод;
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИспытательныйСрокДатаЗавершения") Тогда
		ПутьКДанным = "СведенияОбИспытательныхСроках.ДатаЗавершения";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника) Экспорт
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "НаходитсяНаИспытательномСроке";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЛОЖЬ";
	СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Находится на испытательном сроке'");
	СтрокаДополнительногоПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".НаходитсяНаИспытательномСроке";
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "ИспытательныйСрокДатаЗавершения";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЛОЖЬ";
	СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Дата завершения испытательного срока'");
	СтрокаДополнительногоПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ИспытательныйСрокДатаЗавершения";
	
КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.93";
	Обработчик.Процедура = "ИспытательныйСрокСотрудников.ОбновитьДанныеПриемНаРаботу";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("570670eb-7a31-42fd-a9de-012c5904c64e");
	Обработчик.Комментарий = НСтр("ru = 'Обновление состояний испытательного срока сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.93";
	Обработчик.Процедура = "ИспытательныйСрокСотрудников.ОбновитьДанныеПриемНаРаботуСписком";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f9e11c4d-5c84-4547-96b2-f424624222e1");
	Обработчик.Комментарий = НСтр("ru = 'Обновление состояний испытательного срока сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.7";
	Обработчик.Процедура = "ИспытательныйСрокСотрудников.ОбновитьДанныеИспытательногоСрокаСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f7e09a22-b801-4953-95d8-cbede19650d0");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных испытательного срока сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.73";
	Обработчик.Процедура = "ИспытательныйСрокСотрудников.ОбновитьДатуЗавершенияИспытательногоСрокаСотрудниковПриемНаРаботу";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1806f30a-1647-4898-90c9-045346bb27c6");
	Обработчик.Комментарий = НСтр("ru = 'Обновление даты завершения испытательного срока сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.73";
	Обработчик.Процедура = "ИспытательныйСрокСотрудников.ОбновитьДатуЗавершенияИспытательногоСрокаСотрудниковПриемНаРаботуСписком";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5346581e-1c43-45e6-be8c-9edaf5173b8e");
	Обработчик.Комментарий = НСтр("ru = 'Обновление даты завершения испытательного срока сотрудников.'");
	
КонецПроцедуры

// Заполняет реквизит движения документов по испытательному сроку сотрудников при обновлении ИБ.
//
// Параметры:
//  ПараметрыОбновления	 - Структура - Стандартная структура для обработчика обновления с режимом выполнения "Отложенно".
//
Процедура ОбновитьДанныеПриемНаРаботу(ПараметрыОбновления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка КАК Регистратор,
	|	ПриемНаРаботу.Организация КАК Организация,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервогоКадровогоСобытия,
	|	ДОБАВИТЬКДАТЕ(ПриемНаРаботу.ДатаПриема, МЕСЯЦ, ПриемНаРаботу.ДлительностьИспытательногоСрока) КАК ПредполагаемаяДатаОкончания,
	|	ПриемНаРаботу.ДатаПриема КАК Период,
	|	ЛОЖЬ КАК ИспытательныйСрокЗавершен,
	|	ЛОЖЬ КАК ПродлениеИспытательногоСрока
	|ПОМЕСТИТЬ ВТДанныеИспытательногоСрока
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ИсправляющиеДокументы
	|		ПО (ИсправляющиеДокументы.Проведен)
	|			И ПриемНаРаботу.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Сотрудник = ДанныеИспытательногоСрокаСотрудников.Сотрудник
	|			И ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ПриемНаРаботу.ДлительностьИспытательногоСрока <> 0
	|	И ДанныеИспытательногоСрокаСотрудников.Сотрудник ЕСТЬ NULL
	|	И ИсправляющиеДокументы.Ссылка ЕСТЬ NULL
	|	И ПриемНаРаботу.Проведен
	|	И НЕ ПриемНаРаботу.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриемНаРаботу.Ссылка УБЫВ";
	
	Запрос.Выполнить();
	
	ОбновитьДанныеКадровыхДокументов(Запрос.МенеджерВременныхТаблиц, ПараметрыОбновления);
	
КонецПроцедуры

// Заполняет реквизит движения документов по испытательному сроку сотрудников при обновлении ИБ.
//
// Параметры:
//  ПараметрыОбновления	 - Структура - Стандартная структура для обработчика обновления с режимом выполнения "Отложенно".
//
Процедура ОбновитьДанныеПриемНаРаботуСписком(ПараметрыОбновления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыПриемаНаРаботу
	|ИЗ
	|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ИсправляющиеДокументы
	|		ПО (ИсправляющиеДокументы.Проведен)
	|			И ПриемНаРаботу.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Сотрудник = ДанныеИспытательногоСрокаСотрудников.Сотрудник
	|			И ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ПриемНаРаботу.ДлительностьИспытательногоСрока <> 0
	|	И ДанныеИспытательногоСрокаСотрудников.Сотрудник ЕСТЬ NULL
	|	И ИсправляющиеДокументы.Ссылка ЕСТЬ NULL
	|	И ПриемНаРаботу.Ссылка.Проведен
	|	И НЕ ПриемНаРаботу.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Регистратор,
	|	ПриемНаРаботу.Ссылка.Организация КАК Организация,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервогоКадровогоСобытия,
	|	ДОБАВИТЬКДАТЕ(ПриемНаРаботу.ДатаПриема, МЕСЯЦ, ПриемНаРаботу.ДлительностьИспытательногоСрока) КАК ПредполагаемаяДатаОкончания,
	|	ПриемНаРаботу.ДатаПриема КАК Период,
	|	ЛОЖЬ КАК ИспытательныйСрокЗавершен,
	|	ЛОЖЬ КАК ПродлениеИспытательногоСрока
	|ПОМЕСТИТЬ ВТДанныеИспытательногоСрока
	|ИЗ
	|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыПриемаНаРаботу КАК ДокументыПриемаНаРаботу
	|		ПО ПриемНаРаботу.Ссылка = ДокументыПриемаНаРаботу.Ссылка
	|ГДЕ
	|	ПриемНаРаботу.ДлительностьИспытательногоСрока <> 0
	|	И ПриемНаРаботу.Ссылка.Проведен";
	
	Запрос.Выполнить();
	
	ОбновитьДанныеКадровыхДокументов(Запрос.МенеджерВременныхТаблиц, ПараметрыОбновления);
	
КонецПроцедуры

// Заполняет дату завершения по испытательному сроку сотрудников при обновлении ИБ.
//
// Параметры:
//  ПараметрыОбновления	 - Структура - Стандартная структура для обработчика обновления с режимом выполнения "Отложенно".
//
Процедура ОбновитьДатуЗавершенияИспытательногоСрокаСотрудниковПриемНаРаботу(ПараметрыОбновления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка КАК Регистратор,
	|	ПриемНаРаботу.Организация КАК Организация,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервогоКадровогоСобытия,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПриемНаРаботу.ДатаПриема, МЕСЯЦ, ПриемНаРаботу.ДлительностьИспытательногоСрока), ДЕНЬ, -1) КАК ПредполагаемаяДатаОкончания,
	|	ПриемНаРаботу.ДатаПриема КАК Период,
	|	ЛОЖЬ КАК ИспытательныйСрокЗавершен,
	|	ЛОЖЬ КАК ПродлениеИспытательногоСрока
	|ПОМЕСТИТЬ ВТДанныеИспытательногоСрока
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ИсправляющиеДокументы
	|		ПО (ИсправляющиеДокументы.Проведен)
	|			И ПриемНаРаботу.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Сотрудник = ДанныеИспытательногоСрокаСотрудников.Сотрудник
	|			И ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ПриемНаРаботу.ДлительностьИспытательногоСрока <> 0
	|	И ДанныеИспытательногоСрокаСотрудников.ДатаЗавершения <> ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПриемНаРаботу.ДатаПриема, МЕСЯЦ, ПриемНаРаботу.ДлительностьИспытательногоСрока), ДЕНЬ, -1)
	|	И ИсправляющиеДокументы.Ссылка ЕСТЬ NULL
	|	И ПриемНаРаботу.Проведен
	|	И НЕ ПриемНаРаботу.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриемНаРаботу.Ссылка УБЫВ";
	
	Запрос.Выполнить();
	
	ОбновитьДанныеКадровыхДокументов(Запрос.МенеджерВременныхТаблиц, ПараметрыОбновления);
	
КонецПроцедуры

// Заполняет дату завершения по испытательному сроку сотрудников при обновлении ИБ.
//
// Параметры:
//  ПараметрыОбновления	 - Структура - Стандартная структура для обработчика обновления с режимом выполнения "Отложенно".
//
Процедура ОбновитьДатуЗавершенияИспытательногоСрокаСотрудниковПриемНаРаботуСписком(ПараметрыОбновления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыПриемаНаРаботу
	|ИЗ
	|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком КАК ИсправляющиеДокументы
	|		ПО (ИсправляющиеДокументы.Проведен)
	|			И ПриемНаРаботу.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Сотрудник = ДанныеИспытательногоСрокаСотрудников.Сотрудник
	|			И ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ПриемНаРаботу.ДлительностьИспытательногоСрока <> 0
	|	И ДанныеИспытательногоСрокаСотрудников.ДатаЗавершения <> ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПриемНаРаботу.ДатаПриема, МЕСЯЦ, ПриемНаРаботу.ДлительностьИспытательногоСрока), ДЕНЬ, -1)
	|	И ИсправляющиеДокументы.Ссылка ЕСТЬ NULL
	|	И ПриемНаРаботу.Ссылка.Проведен
	|	И НЕ ПриемНаРаботу.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Регистратор,
	|	ПриемНаРаботу.Ссылка.Организация КАК Организация,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервогоКадровогоСобытия,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПриемНаРаботу.ДатаПриема, МЕСЯЦ, ПриемНаРаботу.ДлительностьИспытательногоСрока), ДЕНЬ, -1) КАК ПредполагаемаяДатаОкончания,
	|	ПриемНаРаботу.ДатаПриема КАК Период,
	|	ЛОЖЬ КАК ИспытательныйСрокЗавершен,
	|	ЛОЖЬ КАК ПродлениеИспытательногоСрока
	|ПОМЕСТИТЬ ВТДанныеИспытательногоСрока
	|ИЗ
	|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыПриемаНаРаботу КАК ДокументыПриемаНаРаботу
	|		ПО ПриемНаРаботу.Ссылка = ДокументыПриемаНаРаботу.Ссылка
	|ГДЕ
	|	ПриемНаРаботу.ДлительностьИспытательногоСрока <> 0
	|	И ПриемНаРаботу.Ссылка.Проведен";
	
	Запрос.Выполнить();
	
	ОбновитьДанныеКадровыхДокументов(Запрос.МенеджерВременныхТаблиц, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ОбновитьДанныеКадровыхДокументов(МенеджерВременныхТаблиц, ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСотрудников.Период КАК Период,
	|	ДанныеСотрудников.Регистратор КАК Регистратор,
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСотрудников.ПредполагаемаяДатаОкончания КАК ДатаЗавершения,
	|	ДанныеСотрудников.Организация КАК Организация,
	|	ДанныеСотрудников.ИспытательныйСрокЗавершен КАК ИспытательныйСрокЗавершен
	|ИЗ
	|	ВТДанныеИспытательногоСрока КАК ДанныеСотрудников";
	
	РезультатЗапросаПриемаНаРаботу = Запрос.Выполнить();
	Если РезультатЗапросаПриемаНаРаботу.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	ТаблицаРегистра = ТаблицаСостоянийИспытательногоСрокаСотрудников(Запрос.МенеджерВременныхТаблиц);
	
	НачатьТранзакцию();
	Попытка
		ПространствоБлокировки = "РегистрСведений.ИспытательныйСрокСотрудников";
		ПолеБлокировки = "Сотрудник";
		Для каждого СтрокаТаблицы Из ТаблицаРегистра Цикл
			ТекущийСотрудник = СтрокаТаблицы.Сотрудник;
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ПолеБлокировки, ТекущийСотрудник) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ИспытательныйСрокСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЦикла;
		
		ВыборкаПоРегистраторам = РезультатЗапросаПриемаНаРаботу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПространствоБлокировки = "РегистрСведений.ДанныеИспытательногоСрокаСотрудников.НаборЗаписей";
		ПолеБлокировки = "Регистратор";
		Пока ВыборкаПоРегистраторам.СледующийПоЗначениюПоля("Регистратор") Цикл 
			ТекущийРегистратор = ВыборкаПоРегистраторам.Регистратор;
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ПолеБлокировки, ТекущийРегистратор) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИспытательногоСрока = РегистрыСведений.ДанныеИспытательногоСрокаСотрудников.СоздатьНаборЗаписей();
			ДанныеИспытательногоСрока.Отбор.Регистратор.Установить(ТекущийРегистратор);
			Пока ВыборкаПоРегистраторам.Следующий() Цикл
				НоваяЗапись = ДанныеИспытательногоСрока.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаПоРегистраторам);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ДанныеИспытательногоСрока);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДанныеИспытательногоСрокаСотрудников(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ИсправляющиеДокументы
	|		ПО (ИсправляющиеДокументы.Проведен)
	|			И ПриемНаРаботу.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ДанныеИспытательногоСрокаСотрудников.Регистратор ЕСТЬ НЕ NULL 
	|	И ПриемНаРаботу.Ссылка ЕСТЬ НЕ NULL 
	|	И ИсправляющиеДокументы.Ссылка ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуСписком КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ИсправляющиеДокументы
	|		ПО (ИсправляющиеДокументы.Проведен)
	|			И ПриемНаРаботу.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ДанныеИспытательногоСрокаСотрудников.Регистратор ЕСТЬ НЕ NULL 
	|	И ПриемНаРаботу.Ссылка ЕСТЬ НЕ NULL 
	|	И ИсправляющиеДокументы.Ссылка ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ПриемНаРаботу.ПометкаУдаления
	|	И ДанныеИспытательногоСрокаСотрудников.Регистратор ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ПриемНаРаботу.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуСписком КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ПриемНаРаботу.Ссылка = ДанныеИспытательногоСрокаСотрудников.Регистратор
	|ГДЕ
	|	ПриемНаРаботу.ПометкаУдаления
	|	И ДанныеИспытательногоСрокаСотрудников.Регистратор ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ДанныеИспытательногоСрокаСотрудниковПомеченныеНаУдаление.Регистратор
	|ИЗ
	|	РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудниковПомеченныеНаУдаление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеИспытательногоСрокаСотрудников КАК ДанныеИспытательногоСрокаСотрудников
	|		ПО ДанныеИспытательногоСрокаСотрудниковПомеченныеНаУдаление.Сотрудник = ДанныеИспытательногоСрокаСотрудников.Сотрудник
	|			И ДанныеИспытательногоСрокаСотрудниковПомеченныеНаУдаление.ФизическоеЛицо = ДанныеИспытательногоСрокаСотрудников.ФизическоеЛицо
	|ГДЕ
	|	ДанныеИспытательногоСрокаСотрудниковПомеченныеНаУдаление.Регистратор <> ДанныеИспытательногоСрокаСотрудников.Регистратор
	|	И ДанныеИспытательногоСрокаСотрудниковПомеченныеНаУдаление.Регистратор.ПометкаУдаления
	|	И НЕ ДанныеИспытательногоСрокаСотрудников.Регистратор.ПометкаУдаления";
	
	РезультатЗапросаПриемаНаРаботу = Запрос.Выполнить();
	
	Если РезультатЗапросаПриемаНаРаботу.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	ВыборкаПоРегистраторам = РезультатЗапросаПриемаНаРаботу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПространствоБлокировки = "РегистрСведений.ДанныеИспытательногоСрокаСотрудников.НаборЗаписей";
	ПолеБлокировки = "Регистратор";
	Пока ВыборкаПоРегистраторам.СледующийПоЗначениюПоля("Регистратор") Цикл 
		ТекущийРегистратор = ВыборкаПоРегистраторам.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ПолеБлокировки, ТекущийРегистратор) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИспытательногоСрока = РегистрыСведений.ДанныеИспытательногоСрокаСотрудников.СоздатьНаборЗаписей();
		ДанныеИспытательногоСрока.Отбор.Регистратор.Установить(ТекущийРегистратор);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ДанныеИспытательногоСрока);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
