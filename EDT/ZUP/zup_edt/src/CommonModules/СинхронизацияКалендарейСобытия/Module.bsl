////////////////////////////////////////////////////////////////////////////////
// Методы, обслуживающие подписки на события.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура СинхронизацияКалендарейПередЗаписью(Источник, Отказ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	МассивУзлов = СинхронизацияКалендарей.УзлыДляВыгрузки(Источник.Пользователь);
	Если ЗначениеЗаполнено(МассивУзлов) Тогда
		Для Каждого Узел Из МассивУзлов Цикл
			Источник.ОбменДанными.Получатели.Добавить(Узел);
		КонецЦикла;
	КонецЕсли;
	УдалитьРегистрациюИзменений(Источник.Ссылка, МассивУзлов);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьРегистрациюИзменений(Ссылка, МассивУзлов)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаписиРабочегоКалендаряИзменения.Узел КАК Узел
	|ИЗ
	|	Справочник.ЗаписиРабочегоКалендаря.Изменения КАК ЗаписиРабочегоКалендаряИзменения
	|ГДЕ
	|	ЗаписиРабочегоКалендаряИзменения.Ссылка = &Ссылка
	|	И НЕ ЗаписиРабочегоКалендаряИзменения.Узел В (&Узлы)");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узлы", МассивУзлов);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ПланыОбмена.УдалитьРегистрациюИзменений(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0), Ссылка);

КонецПроцедуры

#КонецОбласти