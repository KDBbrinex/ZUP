
#Область ПрограммныйИнтерфейс

// Функция возвращается пустое описание вида уведомления по-умолчанию,
//  структуру необходимо заполнить для подключения уведомления.
// 
// Возвращаемое значение:
//  ОписаниеВидаУведомления - структура.
//  * ВидУведомления   - Строка - строковый идентификатор вида уведомления.
//  * Описание         - Строка - Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//  * Инициализация    - Строка - <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения запросов
//                                к базе данных.
//  * ПолучениеДанных  - Строка - <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Функция ПустоеОписаниеВидаУведомления() Экспорт
	
	ОписанияВидаУведомления = Новый Структура("ВидУведомления, GUID, Описание, Инициализация, ПолучениеДанных, КатегорияСобытия");
	ОписанияВидаУведомления.ВидУведомления 		= "";
	ОписанияВидаУведомления.GUID 				= "";
	ОписанияВидаУведомления.Описание 			= "";
	ОписанияВидаУведомления.Инициализация 		= "";
	ОписанияВидаУведомления.ПолучениеДанных 	= "";
	ОписанияВидаУведомления.КатегорияСобытия 	= Перечисления.КатегорииВидовУведомлений.ВыборкаДанных;
	
	Возврат ОписанияВидаУведомления;
	
КонецФункции

// Добавляет реквизит в доступные поля шаблона
//  Поля данных используются при настройке шаблонов сообщений.
//
// Параметры:
//  Реквизиты               - ТаблицаЗначений - реквизиты их свойства
//  Имя                     - Строка - Имя поля.ВНИМАНИЕ! Имя должно удовлетворять требованиям к именам переменных.
//  Представление           - Строка - пользовательское наименование элемента для отображения на форме Рассылки уведомлений.
//  Тип                     - ОписаниеТипов - указывает тип поля.
//  ФорматнаяСтрока         - Строка - Формат поля
//  Развернуть              - Булево - Признак необходимости добавления подчиненных полей
//
Процедура ДобавитьПоле(Реквизиты, Имя, Представление, Тип, ФорматнаяСтрока = "", Развернуть = Ложь) Экспорт
	
	НоваяСтрокаДаты = Реквизиты.Добавить();
	НоваяСтрокаДаты.Имя 			= Имя;
	НоваяСтрокаДаты.Представление 	= Представление;
	НоваяСтрокаДаты.Формат 			= ФорматнаяСтрока;
	НоваяСтрокаДаты.Тип 			= Тип;
	Если Развернуть Тогда
		ШаблоныСообщений.РазвернутьРеквизит(Имя, Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет доступное поле отбора в структуру описания вида уведомления
//
// Параметры:
//  ОписаниеДанныхУведомления     - Структура     - описания данных уведомления
//  Имя                           - Строка        - Имя элемента отбора, должно соответствовать данным уведомления и
//                                                  удовлетворять требованиям к именам переменных.
//  Представление                 - Строка        - пользовательское наименование элемента отбора для отображения на
//                                                  форме Рассылки уведомлений.
//  ОписаниеТипов                 - ОписаниеТипов - Тип добавляемого поля
//  ДоступныеВидыСравнения        - Массив        - список видов сравнений, доступных отбору
//
Процедура ДобавитьОтбор(ОписаниеДанныхУведомления, Имя, Представление = "", ОписаниеТипов = Неопределено, ДоступныеВидыСравнения = Неопределено) Экспорт
	
	ТаблицаИсточника = ОписаниеДанныхУведомления.Отборы;
	// Проверим, добавляем новый отбор или меняем существующий.
	МассивСтрок = ТаблицаИсточника.НайтиСтроки(Новый Структура("Имя", Имя));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаИсточника = МассивСтрок[0];
	Иначе	
		СтрокаИсточника = ТаблицаИсточника.Добавить();
	КонецЕсли;
	
	СтрокаИсточника.Имя 			= Имя;
	СтрокаИсточника.Представление 	= Представление;
	СтрокаИсточника.ОписаниеТипов 	= ОписаниеТипов;
	СтрокаИсточника.ДоступныеВидыСравнения = ДоступныеВидыСравнения;
	
КонецПроцедуры

// Добавляет рекомендуемого получателя уведомления в структуру описания вида уведомления
//
// Параметры:
//  ОписаниеДанныхУведомления         - Структура      - описание данных уведомления
//  ИмяПолучателя                     - Строка         - наименование получателя, который будет выбран при получении
//                                                       данных уведомлений. Таблица данных уведомления должна содержать
//                                                       колонку с наименованием, совпадающем с именем получателя.
//                                                       ВНИМАНИЕ! Имя должно удовлетворять требованиям к именам переменных.
//  ПредставлениеПолучателя           - Строка         - пользовательское наименование получателя для отображения на
//                                                       форме Рассылки уведомлений.
//  ОписаниеТипов                     - ОписаниеТипов  - Тип добавляемого получателя
//
Процедура ДобавитьПолучателя(ОписаниеДанныхУведомления, ИмяПолучателя, ПредставлениеПолучателя, ОписаниеТипов) Экспорт
	
	ТаблицаИсточника = ОписаниеДанныхУведомления.Получатели;
	// Проверим, добавляем новый отбор или меняем существующий.
	МассивСтрок = ТаблицаИсточника.НайтиСтроки(Новый Структура("Имя", ИмяПолучателя));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаИсточника = МассивСтрок[0];
	Иначе	
		СтрокаИсточника = ТаблицаИсточника.Добавить();
	КонецЕсли;
	
	СтрокаИсточника.Имя 			= ИмяПолучателя;
	СтрокаИсточника.Представление 	= ПредставлениеПолучателя;
	СтрокаИсточника.ОписаниеТипов 	= ОписаниеТипов;
	
КонецПроцедуры

// Функция формирует строку условия для вставки в запрос.
//
// Параметры:
//  ВидСравненияЗначение    - ВидСравнения  - используемый вид сравнения
//  ИмяПараметра            - Строка        - имя параметра в отборе
//  ИмяПоля                 - Строка        - имя поля для отбора
// 
// Возвращаемое значение:
//  Текст - строка - строка условия
//
Функция ПредставлениеУсловияДляЗапроса(ВидСравненияЗначение, ИмяПараметра, ИмяПоля = Неопределено) Экспорт
	
	Если ИмяПоля = Неопределено Тогда
		ИмяПоля = ИмяПараметра;
	КонецЕсли;
	
	Текст = "";
	ВидСравненияСтрокой = ВидСравненияДляЗапроса(ВидСравненияЗначение);
	Если ЗначениеЗаполнено(ВидСравненияСтрокой) Тогда
		ШаблонПредставления = "%1 %2 (&%3)";
		Текст = СтрШаблон(ШаблонПредставления, ИмяПоля, ВидСравненияСтрокой, ИмяПараметра);
	КонецЕсли;
	Возврат Текст;
	
КонецФункции

// Функция формирует строковое представление вида сравнения для текста запроса.
//
// Параметры:
//  ВидСравненияЗначение    - ВидСравнения  - используемый вид сравнения
// 
// Возвращаемое значение:
//  Текст - строка - строка вида сравнения
//
Функция ВидСравненияДляЗапроса(ВидСравненияЗначение) Экспорт
	
	ВидСравненияСтрокой = "";
	Если ВидСравненияЗначение = ВидСравнения.ВСписке Тогда
		ВидСравненияСтрокой = "В";
	ИначеЕсли ВидСравненияЗначение = ВидСравнения.НеВСписке Тогда
		ВидСравненияСтрокой = "НЕ В";
	ИначеЕсли ВидСравненияЗначение = ВидСравнения.Равно Тогда
		ВидСравненияСтрокой = "=";
	ИначеЕсли ВидСравненияЗначение = ВидСравнения.НеРавно Тогда
		ВидСравненияСтрокой = "<>";
	ИначеЕсли ВидСравненияЗначение = ВидСравнения.Больше Тогда
		ВидСравненияСтрокой = ">";
	ИначеЕсли ВидСравненияЗначение = ВидСравнения.Меньше Тогда
		ВидСравненияСтрокой = "<";
	ИначеЕсли ВидСравненияЗначение = ВидСравнения.БольшеИлиРавно Тогда
		ВидСравненияСтрокой = ">=";
	ИначеЕсли ВидСравненияЗначение = ВидСравнения.МеньшеИлиРавно Тогда
		ВидСравненияСтрокой = "<=";
	КонецЕсли;
	Возврат ВидСравненияСтрокой;
	
КонецФункции

// Функция - Вид уведомления по имени
//
// Параметры:
//  Имя      - Строка - Имя вида уведомления, как оно было задано при создании
// 
// Возвращаемое значение:
//  ВидУведомления - СправочникСсылка.ВидУведомления - Ссылка на найденный вид уведомления
//
Функция ВидУведомленияПоИмени(Имя) Экспорт
	Возврат Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", Имя);
КонецФункции

// Проверят наличие рассылок по переданному виду уведомления
//
// Параметры:
//  ВидУведомления   - СправочникСсылка.ВидУведомления - Вид уведомления, по которому необходимо проверить наличие рассылок.
// 
// Возвращаемое значение:
//  НаличиеРассылок  - Булево - Если Истина, рассылки по данному виду уведомления есть. Ложь, рассылок нет.
//
Функция ЕстьРассылкиПоВидуУведомления(ВидУведомления) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	РассылкиУведомлений.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.РассылкиУведомлений КАК РассылкиУведомлений
	                      |ГДЕ
	                      |	РассылкиУведомлений.ВидУведомления = &ВидУведомления");
	Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
	Результат = Запрос.Выполнить();
	НаличиеРассылок = Не Результат.Пустой();
	Возврат НаличиеРассылок;
	
КонецФункции

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	Типы.Добавить(Метаданные.Справочники.ВидыУведомлений);
	
КонецПроцедуры

#Область ИнтеграцияШаблоныСообщений

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 				= "*";
	Обработчик.Идентификатор 		= Новый УникальныйИдентификатор("b5d4fd02-262b-4f81-8847-4e12c66e46b7");
	Обработчик.Процедура 			= "УведомленияСервер.НачальноеЗаполнениеДанныхПодсистемыУведомлений";
	Обработчик.ОбщиеДанные			= Истина;
	Обработчик.НачальноеЗаполнение 	= Истина;
	Обработчик.РежимВыполнения 		= "Оперативно";
	Обработчик.Комментарий 			= НСтр("ru = 'Заполнение начальных данных системы уведомлений.'");
	Обработчик.ЧитаемыеОбъекты      = "Справочник.ВидыУведомлений";
	Обработчик.ИзменяемыеОбъекты    = "Справочник.ВидыУведомлений";
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона       - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры["ВладелецШаблона"]) <> Тип("СправочникСсылка.ВидыУведомлений") Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаРеквизитовСобытия = Реквизиты.Родитель.Владелец().Строки.Вставить(0);
	ГруппаРеквизитовСобытия.Имя 			= НСтр("ru='ДанныеУведомления'");
	ГруппаРеквизитовСобытия.Представление 	= НСтр("ru='Данные уведомления'");
	
	УведомленияПереопределяемый.ПриПодготовкеШаблонаСообщенияПоУведомлению(ДополнительныеПараметры.ВладелецШаблона, ГруппаРеквизитовСобытия.Строки, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  НазначениеШаблона       - Строка  - Имя назначения шаблон сообщения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры["ВладелецШаблона"]) <> Тип("СправочникСсылка.ВидыУведомлений") Тогда
		Возврат;
	КонецЕсли;

	Если Сообщение.ДополнительныеПараметры.ВидСообщения = "ЭлектроннаяПочта" Тогда
		// Вложение в формате iCalendar
		ДатаСобытия = ДополнительныеПараметры.ПараметрыСообщения.ДатаСобытия;
		Организатор = Сообщение.ДополнительныеПараметры.УчетнаяЗапись.АдресЭлектроннойПочты;
		ХранилищеВложения = ВложениеВФорматеiCalendar(ДатаСобытия, ДатаСобытия, ДополнительныеПараметры.Тема, Организатор);
		Сообщение.Вложения.Вставить("СобытиеКалендаря.ics", ХранилищеВложения);
	КонецЕсли;
	
	ПроизвольныеПараметрыШаблона = Сообщение.ДополнительныеПараметры.ПроизвольныеПараметры;
	Если ПроизвольныеПараметрыШаблона["ДанныеУведомления"] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСобытияУведомления = ПроизвольныеПараметрыШаблона["ДанныеУведомления"];
	
	Для каждого ПараметрСобытийУведомления Из ПараметрыСобытияУведомления Цикл
		ЗначениеПараметра = Неопределено;
		ПозицияФормата = СтрНайти(ПараметрСобытийУведомления.Ключ, "{");
		Если ПозицияФормата > 0 Тогда
			ИмяПараметра	= Лев(ПараметрСобытийУведомления.Ключ, ПозицияФормата - 1);
			СтрокаФормата	= Сред(ПараметрСобытийУведомления.Ключ, ПозицияФормата + 1, СтрДлина(ПараметрСобытийУведомления.Ключ) - СтрДлина(ИмяПараметра) -2);
		Иначе
			ИмяПараметра	= ПараметрСобытийУведомления.Ключ;
			СтрокаФормата	= "";
		КонецЕсли;
		
		Если Сообщение.ДополнительныеПараметры.Свойство(ИмяПараметра, ЗначениеПараметра) Тогда
			ПараметрыСобытияУведомления[ПараметрСобытийУведомления.Ключ] = Формат(ЗначениеПараметра, СтрокаФормата);
		ИначеЕсли Сообщение.ДополнительныеПараметры.Свойство("ДанныеУведомления")
			И Сообщение.ДополнительныеПараметры.ДанныеУведомления.Свойство(ИмяПараметра, ЗначениеПараметра) Тогда
			ПараметрыСобытияУведомления[ПараметрСобытийУведомления.Ключ] = Формат(ЗначениеПараметра, СтрокаФормата);
		ИначеЕсли Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
			И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство(ИмяПараметра, ЗначениеПараметра) Тогда
			ПараметрыСобытияУведомления[ПараметрСобытийУведомления.Ключ] = Формат(ЗначениеПараметра, СтрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	УведомленияПереопределяемый.ПриФормированииСообщенияПоУведомлению(Сообщение, НазначениеШаблона, ПредметСообщения, ДополнительныеПараметры);
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриЗаполненииТелефоновПолучателейВСообщении
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, НазначениеШаблона, ПредметСообщения) Экспорт
	
	ПараметрыСообщения = Неопределено;
	
	Если Не ПредметСообщения.Свойство("ПараметрыСообщения", ПараметрыСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСообщения.Свойство("РежимОтправкиУведомлений") Тогда
		Возврат;
	КонецЕсли;
	
	Получатель = Неопределено;
	ВидКонтактнойИнформации = Неопределено;
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПолучателиSMS.Очистить();
	
	Если ПараметрыСообщения.Свойство("Получатель", Получатель) И ПараметрыСообщения.Свойство("ВидКонтактнойИнформации", ВидКонтактнойИнформации) Тогда
		ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Получатель, ВидКонтактнойИнформации);
		Если Не ЗначениеЗаполнено(ЗначениеКонтактнойИнформации) Или ПустаяСтрока(ЗначениеКонтактнойИнформации) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				Справочники.РассылкиОтчетов, 
				НСтр("ru='Не удалось определить контактную информацию получателя'") + ": " + Получатель + НСтр("ru='. Вид контактной информации'") + ": " + ВидКонтактнойИнформации);
			Возврат;
		Иначе
			Если ПолучателиSMS.Найти(ЗначениеКонтактнойИнформации) = Неопределено Тогда
				Строка = ПолучателиSMS.Добавить();
				Строка.НомерТелефона 	= ЗначениеКонтактнойИнформации;
				Строка.Контакт 			= Получатель;
				Строка.Представление 	= Строка(Получатель);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Получатель) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				Справочники.РассылкиОтчетов, 
				НСтр("ru='Не удалось определить получателя. Предмет'") + ": " + ПараметрыСообщения.Предмет + НСтр("ru='. Рассылка'") + ": " + ПараметрыСообщения.Рассылка);
		ИначеЕсли Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				Справочники.РассылкиОтчетов, 
				НСтр("ru='Не удалось определить вид Контактной информации для получателя'") +" " + Получатель + НСтр("ru='. Предмет'") + ": " + ПараметрыСообщения.Предмет + НСтр("ru='. Рассылка'") + ": " + ПараметрыСообщения.Рассылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриЗаполненииПочтыПолучателейВСообщении
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения) Экспорт
	
	Если НЕ ПредметСообщения.Свойство("РежимОтправкиУведомлений") Тогда
		Возврат;
	КонецЕсли;
	
	Получатель = Неопределено;
	ВидКонтактнойИнформации = Неопределено;
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПолучателиПисьма.Очистить();
	
	Если ПредметСообщения.Свойство("Получатель", Получатель) И ПредметСообщения.Свойство("ВидКонтактнойИнформации", ВидКонтактнойИнформации) Тогда
		ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Получатель, ВидКонтактнойИнформации);
		Если Не ЗначениеЗаполнено(ЗначениеКонтактнойИнформации) Или ПустаяСтрока(ЗначениеКонтактнойИнформации) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				Справочники.РассылкиОтчетов, 
				НСтр("ru='Не удалось определить контактную информацию получателя'") + ": " + Получатель + НСтр("ru='. Вид контактной информации'") + ": " + ВидКонтактнойИнформации);
			Возврат;
		Иначе
			Если ПолучателиПисьма.Найти(ЗначениеКонтактнойИнформации) = Неопределено Тогда
				Строка = ПолучателиПисьма.Добавить();
				Строка.Адрес 			= ЗначениеКонтактнойИнформации;
				Строка.Контакт 			= Получатель;
				Строка.Представление 	= Строка(Получатель);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Получатель) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				Справочники.РассылкиОтчетов, 
				НСтр("ru='Не удалось определить получателя. Предмет'") + ": " + ПредметСообщения.Предмет + НСтр("ru='. Рассылка'") + ": " + ПредметСообщения.Рассылка);
		ИначеЕсли Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				Справочники.РассылкиОтчетов, 
				НСтр("ru='Не удалось определить вид Контактной информации для получателя'") +" " + Получатель + НСтр("ru='. Предмет'") + ": " + ПредметСообщения.Предмет + НСтр("ru='. Рассылка'") + ": " + ПредметСообщения.Рассылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправитьУведомления;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьУведомления;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СоздатьУведомленияПоВыборкамДанных;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьУведомления;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СоздатьУведомленияПоИзменениямОбъектов;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьУведомления;
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОтправитьУведомления.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.СоздатьУведомленияПоВыборкамДанных.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.СоздатьУведомленияПоИзменениямОбъектов.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправитьУведомления.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СоздатьУведомленияПоВыборкамДанных.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СоздатьУведомленияПоИзменениямОбъектов.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НачальноеЗаполнениеДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновитьВидыУведомлений();
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидыУведомлений() Экспорт
	
	СтруктураИсточников = СтруктураДоступныхВидовУведомлений();
	
	Для Каждого Источник Из СтруктураИсточников Цикл
		НайтиСоздатьВидУведомленияПоGUID(Источник);
	КонецЦикла;
	
	ОбработатьУдаленныеВидыУведомлений(СтруктураИсточников);
	
КонецПроцедуры

Функция ОписаниеДанныхУведомления(ВидУведомления) Экспорт
	
	ОписаниеДанныхУведомления = Новый Структура("ТипПредмета, Отборы, Получатели");
	
	ОписаниеДанныхУведомления.ТипПредмета 	= Неопределено;
	ОписаниеДанныхУведомления.Отборы 		= Новый ТаблицаЗначений;
	ОписаниеДанныхУведомления.Получатели 	= Новый ТаблицаЗначений;
	
	ОписаниеДанныхУведомления.Отборы.Колонки.Добавить("Имя");
	ОписаниеДанныхУведомления.Отборы.Колонки.Добавить("Представление");
	ОписаниеДанныхУведомления.Отборы.Колонки.Добавить("ОписаниеТипов");
	ОписаниеДанныхУведомления.Отборы.Колонки.Добавить("ДоступныеВидыСравнения");
	
	ОписаниеДанныхУведомления.Получатели.Колонки.Добавить("Имя");
	ОписаниеДанныхУведомления.Получатели.Колонки.Добавить("Представление");
	ОписаниеДанныхУведомления.Получатели.Колонки.Добавить("ОписаниеТипов");
	
	Если ЗначениеЗаполнено(ВидУведомления) Тогда
		СтруктураОписанияВидаУведомления = ОписаниеВидаУведомления(ВидУведомления);
		Если НЕ СтруктураОписанияВидаУведомления = Неопределено Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ОписаниеДанныхУведомления);
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(СтруктураОписанияВидаУведомления.Инициализация,  МассивПараметров); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеДанныхУведомления;
	
КонецФункции

Процедура СоздатьУведомленияДляРассылки(Параметры, АдресРезультата = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанныхРассылки = СтруктураДанныхРассылки(Параметры.Рассылка);
	ПараметрыРассылки = СтруктураПериодаРассылки(СтруктураДанныхРассылки);
	
	СдвигОтДатыСобытия = РасчетСдвигаОтДатыСобытий(СтруктураДанныхРассылки);
	ПараметрыПолучателейРассылок = ТаблицаПараметровПолучателейРассылок();
	
	Отборы = СтруктураДанныхРассылки.Отбор.Получить();
	ТаблицаРезультатов = ДанныеДляУведомления(СтруктураДанныхРассылки.ВидУведомления, ПараметрыРассылки, Отборы);
	Если ТаблицаРезультатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРезультатов Из ТаблицаРезультатов Цикл
		
		СтруктураУведомления = СтруктураПоРегиструУведомления();
		
		СрокОтправки = СтрокаРезультатов.ДатаСобытия + СдвигОтДатыСобытия;
		Если СтруктураДанныхРассылки.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.День Тогда
			СрокОтправки = НачалоДня(СрокОтправки) + Час(СтруктураДанныхРассылки.ВремяОтправки) * 3600 + Минута(СтруктураДанныхРассылки.ВремяОтправки) * 60;
		КонецЕсли;
		
		СтруктураУведомления.Рассылка 			= Параметры.Рассылка;
		СтруктураУведомления.Предмет			= СтрокаРезультатов.Предмет;
		СтруктураУведомления.ДатаСобытия		= СтрокаРезультатов.ДатаСобытия;
		СтруктураУведомления.СрокОтправки		= СрокОтправки;
		СтруктураУведомления.Состояние 			= Перечисления.СостоянияУведомлений.Подготовлено;
		СтруктураУведомления.ВидТранспорта 		= СтруктураДанныхРассылки.ВидТранспорта;
		СтруктураУведомления.ПараметрыСобытия	= СтрокаРезультатов.ПараметрыСобытия;
		
		ТаблицаПолучателей = ТаблицаПолучателей(Параметры.Рассылка, ПараметрыПолучателейРассылок, СтрокаРезультатов, СтруктураДанныхРассылки);
		
		ЗаписатьУведомленияВРегистр(СтруктураУведомления, ТаблицаПолучателей);
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаписатьПредметУведомленияОбИзменениях(Предмет, ДополнительныеСвойства, ВыполнятьПерезаписьПриНаличииВРегистре = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПредметыУведомленийОбИзменениях"); 
	ЭлементБлокировки.УстановитьЗначение("Предмет", Предмет);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если Не ВыполнятьПерезаписьПриНаличииВРегистре Тогда
		ВыборкаСуществующихЗаписей = РегистрыСведений.ПредметыУведомленийОбИзменениях.Выбрать(Новый Структура("Предмет", Предмет));
		Если ВыборкаСуществующихЗаписей.Следующий() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		// Записываем только в том случае, если такого предмета еще нет в регистре.
		// Так мы сможем сохранить данные объекта до первого изменения.
		МенеджерЗаписи = РегистрыСведений.ПредметыУведомленийОбИзменениях.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Предмет 					= Предмет;
		МенеджерЗаписи.ДатаИзменения 			= ТекущаяДатаСеанса();
		МенеджерЗаписи.ДополнительныеСвойства 	= Новый ХранилищеЗначения(ДополнительныеСвойства);
		
		МенеджерЗаписи.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
		ВызватьИсключение;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьУведомленияПоВыборкамДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРассылок = ТаблицаРассылокПоКатегории(Перечисления.КатегорииВидовУведомлений.ВыборкаДанных);
	Если ТаблицаРассылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРассылки Из ТаблицаРассылок Цикл
		СоздатьУведомленияДляРассылки(Новый Структура("Рассылка", СтрокаРассылки.РассылкаУведомлений));
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьУведомленияПоИзменениямОбъектов(РассылкаУведомлений = Неопределено, АдресРезультата = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОбъектов = ТаблицаИзменений(РассылкаУведомлений);
	Пока ТаблицаОбъектов.Количество() > 0 Цикл
		ТаблицаРезультата = НоваяТаблицаДанныхУведомления();
		ПараметрыПолучателейРассылок = ТаблицаПараметровПолучателейРассылок();
	
		Для Каждого СтрокаИзменений Из ТаблицаОбъектов Цикл
			
			БлокировкаРегистраПредметов = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаРегистраПредметов.Добавить("РегистрСведений.ПредметыУведомленийОбИзменениях"); 
			ЭлементБлокировки.УстановитьЗначение("Предмет", СтрокаИзменений.Предмет);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			НачатьТранзакцию();
			Попытка
				БлокировкаРегистраПредметов.Заблокировать();
				
				СтруктураДанныхРассылки = СтруктураДанныхРассылки(СтрокаИзменений.РассылкаУведомлений);
				ПараметрыРассылки = СтруктураПериодаРассылки(СтруктураДанныхРассылки);
				
				СдвигОтДатыСобытия = РасчетСдвигаОтДатыСобытий(СтруктураДанныхРассылки);
				
				ДополнительныеСвойства = СтрокаИзменений.ДополнительныеСвойства.Получить();
				Если ЗначениеЗаполнено(СтрокаИзменений.РассылкаУведомлений) Тогда
					УведомленияПереопределяемый.ПриСозданииУведомленийПоИзменениямОбъектов(
						СтрокаИзменений.РассылкаУведомлений,
						СтрокаИзменений.ВидУведомления,
						СтрокаИзменений.Предмет,
						СтрокаИзменений.ДатаИзменения,
						ДополнительныеСвойства,
						ТаблицаРезультата);
						
					СтруктураУведомления = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(РегистрыСведений.Уведомления.СоздатьМенеджерЗаписи(), Метаданные.РегистрыСведений.Уведомления);
					
					Для Каждого СтрокаРезультатов Из ТаблицаРезультата Цикл
						
						СрокОтправки = СтрокаРезультатов.ДатаСобытия + СдвигОтДатыСобытия;
						Если СтруктураДанныхРассылки.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.День Тогда
							СрокОтправки = НачалоДня(СрокОтправки) + Час(СтруктураДанныхРассылки.ВремяОтправки) * 3600 + Минута(СтруктураДанныхРассылки.ВремяОтправки) * 60;
						КонецЕсли;
						
						БлокировкаРегистраУведомлений = Новый БлокировкаДанных;
						ЭлементБлокировки = БлокировкаРегистраУведомлений.Добавить("РегистрСведений.Уведомления"); 
						ЭлементБлокировки.УстановитьЗначение("Предмет", СтрокаРезультатов.Предмет);
						ЭлементБлокировки.УстановитьЗначение("Рассылка", СтрокаИзменений.РассылкаУведомлений);
						ЭлементБлокировки.УстановитьЗначение("ДатаСобытия", СтрокаРезультатов.ДатаСобытия);
						ЭлементБлокировки.УстановитьЗначение("СрокОтправки", СрокОтправки);
						
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						БлокировкаРегистраУведомлений.Заблокировать();
						
						СтрокаРезультатов.ПараметрыСобытия  = ДополнительныеСвойства;
						
						СтруктураУведомления.Рассылка 					= СтрокаИзменений.РассылкаУведомлений;
						СтруктураУведомления.Предмет			 		= СтрокаРезультатов.Предмет;
						СтруктураУведомления.ДатаСобытия				= СтрокаРезультатов.ДатаСобытия;
						СтруктураУведомления.СрокОтправки				= СрокОтправки;
						СтруктураУведомления.Состояние 					= Перечисления.СостоянияУведомлений.Подготовлено;
						СтруктураУведомления.ВидТранспорта 				= СтруктураДанныхРассылки.ВидТранспорта;
						СтруктураУведомления.ПараметрыСобытия			= ДополнительныеСвойства;
						
						ТаблицаПолучателей = ТаблицаПолучателей(СтрокаИзменений.РассылкаУведомлений, ПараметрыПолучателейРассылок, СтрокаРезультатов, СтруктураДанныхРассылки);
						
						ЗаписатьУведомленияВРегистр(СтруктураУведомления, ТаблицаПолучателей);
					КонецЦикла;
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.ПредметыУведомленийОбИзменениях.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Предмет = СтрокаИзменений.Предмет;
				
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		ТаблицаОбъектов = ТаблицаИзменений(РассылкаУведомлений);
	КонецЦикла;
	
	ОтправитьУведомления();
	
КонецПроцедуры

// Процедура выполняет немедленную отправку всех уведомлений
// Выбираются уведомления со сроком меньше или равно текущему периоду
// с состоянием "Подготовлено".
// Отправка сообщения передается соответствующим обработчикам
Процедура ОтправитьУведомления(РассылкаУведомлений = Неопределено) Экспорт
	
	Если Не СейчасМожноОтправлять() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСообщений = ТаблицаСообщенийКОтправке(РассылкаУведомлений);
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого СтрокаСообщения Из ТаблицаСообщений Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Уведомления"); 
		ЭлементБлокировки.УстановитьЗначение("Предмет", СтрокаСообщения.Предмет);
		ЭлементБлокировки.УстановитьЗначение("Рассылка", СтрокаСообщения.Рассылка);
		ЭлементБлокировки.УстановитьЗначение("Получатель", СтрокаСообщения.Получатель);
		ЭлементБлокировки.УстановитьЗначение("ДатаСобытия", СтрокаСообщения.ДатаСобытия);
		ЭлементБлокировки.УстановитьЗначение("СрокОтправки", СтрокаСообщения.СрокОтправки);
		
		НачатьТранзакцию();
		Попытка
			СообщениеОбОшибке = "";
			Блокировка.Заблокировать();
			Если СтрокаСообщения.ВидТранспорта = Перечисления.ВидыТранспортаУведомлений.Email Тогда
				РезультатОтправки = ОтправитьУведомлениеEmail(СтрокаСообщения);
				Если РезультатОтправки.Отправлено Тогда
					СтрокаСообщения.Состояние = Перечисления.СостоянияУведомлений.Отправлено;
					СтрокаСообщения.ДатаОтправки = ТекущаяДатаСеанса();
				Иначе
					СтрокаСообщения.Состояние = Перечисления.СостоянияУведомлений.Ошибка;
					СообщениеОбОшибке = РезультатОтправки.ОписаниеОшибки;
					ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), УровеньЖурналаРегистрации.Ошибка,, Справочники.РассылкиОтчетов, РезультатОтправки.ОписаниеОшибки);
				КонецЕсли;
			ИначеЕсли СтрокаСообщения.ВидТранспорта = Перечисления.ВидыТранспортаУведомлений.SMS Тогда
				РезультатОтправки = ОтправитьУведомлениеSMS(СтрокаСообщения);
				Если РезультатОтправки.Отправлено Тогда
					СтрокаСообщения.Состояние = Перечисления.СостоянияУведомлений.Отправлено;
					СтрокаСообщения.ДатаОтправки = ТекущаяДатаСеанса();
				Иначе
					СтрокаСообщения.Состояние = Перечисления.СостоянияУведомлений.Ошибка;
					СообщениеОбОшибке = РезультатОтправки.ОписаниеОшибки;
					ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), УровеньЖурналаРегистрации.Ошибка,, СтрокаСообщения.Рассылка, РезультатОтправки.ОписаниеОшибки);
				КонецЕсли;
			Иначе
				СтрокаСообщения.Состояние = Перечисления.СостоянияУведомлений.Ошибка;
				СообщениеОбОшибке = НСтр("ru='Не обнаружен обработчик отправки уведомления для вида транспорта <'") + СтрокаСообщения.ВидТранспорта + ">";
				ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка при отправке уведомлений'", КодОсновногоЯзыка), УровеньЖурналаРегистрации.Ошибка,,СтрокаСообщения.Рассылка, НСтр("ru='Не обнаружен обработчик отправки уведомления для вида транспорта <'") + СтрокаСообщения.ВидТранспорта + ">");
			КонецЕсли;
			ЗаписатьРезультатОтправки(СтрокаСообщения, СообщениеОбОшибке);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЗапуститьФоновоеЗаданиеСозданияУведомлений(Знач ПараметрыМетода, Знач УникальныйИдентификатор) Экспорт
	
	ЭтоРассылкаПоВыборкеДанных = ПараметрыМетода.Рассылка.ВидУведомления.КатегорияСобытия = Перечисления.КатегорииВидовУведомлений.ВыборкаДанных;
	ИмяМетода = ?(ЭтоРассылкаПоВыборкеДанных, "УведомленияСервер.СоздатьУведомленияДляРассылки", "УведомленияСервер.СоздатьУведомленияПоИзменениямОбъектов");
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание уведомлений:'") + " " + ПараметрыМетода.Рассылка;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, НастройкиЗапуска);
	
КонецФункции

Функция ИмяТипаШаблонаСообщений(ВидУведомления) Экспорт
	
	ИмяТипаШаблонаСообщений = "";
	
	Если ЗначениеЗаполнено(ВидУведомления) Тогда 
		ЭкземплярТипаПредмета = Справочники.РассылкиУведомлений.ЭкземплярТипаПредмета(ВидУведомления);
		ИмяТипаШаблонаСообщений = ЭкземплярТипаПредмета.Метаданные().ПолноеИмя();
		УведомленияПереопределяемый.ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления);
	КонецЕсли;
	
	Возврат ИмяТипаШаблонаСообщений;
	
КонецФункции

Процедура ПослеЗаписиНаСервереФормыЭлементаПредметаУведомлений(ТекущийОбъект) Экспорт
	
	Если Не ТекущийОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "424bfc47-1e79-491f-a26b-7fdb7f7189a2");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ЗначениеЗаполнено(Задания) Тогда
		Возврат;
	КонецЕсли;
	
	ФоновыеЗадания.Выполнить(
		"УведомленияСервер.СоздатьУведомленияПоИзменениямОбъектов",,
		"424bfc47-1e79-491f-a26b-7fdb7f7189a2",
		НСтр("ru = 'Создание уведомлений по изменениям'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВложениеВФорматеiCalendar(ДатаНачала, ДатаОкончания, Описание, Организатор)
	
	ОписаниеСобытий = СинхронизацияКалендарей.НовоеОписаниеСобытийКалендаря();
	НоваяСтрока = ОписаниеСобытий.Добавить();
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Описание = Описание;
	НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор());
	
	ТекстiCal = СинхронизацияКалендарей.СобытияiCalendar(ОписаниеСобытий, Организатор);
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ТекстiCal);
	ИмяФайла = ПолучитьИмяВременногоФайла("ics");
	ТекстДок.Записать(ИмяФайла, "CESU-8");
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресХранилища;
	
КонецФункции

Функция СейчасМожноОтправлять()
	
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиСистемыУведомлений.ВремяНачалаДоставкиСообщений КАК ВремяНачалаДоставкиСообщений,
		|	НастройкиСистемыУведомлений.ВремяОкончанияДоставкиСообщений КАК ВремяОкончанияДоставкиСообщений
		|ИЗ
		|	РегистрСведений.НастройкиСистемыУведомлений КАК НастройкиСистемыУведомлений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сейчас = ТекущаяДатаСеанса();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ВремяНачалаДоставкиСообщений = Дата('00010101') И Выборка.ВремяОкончанияДоставкиСообщений = Дата('00010101') Тогда
			Результат = Истина;
		Иначе
			ДатаНачала		= НачалоДня(Сейчас) + Час(Выборка.ВремяНачалаДоставкиСообщений) * 3600 + Минута(Выборка.ВремяНачалаДоставкиСообщений) * 60;
			ДатаОкончания	= ?(Выборка.ВремяОкончанияДоставкиСообщений = Дата('00010101'), 
								КонецДня(Сейчас) + 1,
								НачалоДня(Сейчас) + Час(Выборка.ВремяОкончанияДоставкиСообщений) * 3600 + Минута(Выборка.ВремяОкончанияДоставкиСообщений) * 60);
			Если Сейчас >= ДатаНачала И ДатаОкончания >= Сейчас Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ОписаниеВидаУведомления(ВидУведомления)
	
	СтруктураДоступныхВидовУведомлений = СтруктураДоступныхВидовУведомлений();
	ОписаниеВидаУведомления = Неопределено;
	Если Не ПустаяСтрока(ВидУведомления.Имя) И СтруктураДоступныхВидовУведомлений.Свойство(ВидУведомления.Имя) Тогда
		ОписаниеВидаУведомления = СтруктураДоступныхВидовУведомлений[ВидУведомления.Имя];
	КонецЕсли;
	Возврат ОписаниеВидаУведомления;
	
КонецФункции

Функция СтруктураДоступныхВидовУведомлений()
	
	СтруктураДоступныхВидовУведомлений = Новый Структура();
	УведомленияПереопределяемый.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	Возврат СтруктураДоступныхВидовУведомлений;
	
КонецФункции

Функция ДанныеДляУведомления(ВидУведомления, Параметры, Отборы)
	
	ТаблицаРезультата = НоваяТаблицаДанныхУведомления();
	
	СтруктураОписанияВидаУведомления = ОписаниеВидаУведомления(ВидУведомления);
	Если СтруктураОписанияВидаУведомления = Неопределено Тогда
		// Исключительная ситуация - не удалось получить описание вида уведомления.
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Параметры);
	МассивПараметров.Добавить(Отборы);
	МассивПараметров.Добавить(ТаблицаРезультата);
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(СтруктураОписанияВидаУведомления.ПолучениеДанных, МассивПараметров); 
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция НоваяТаблицаДанныхУведомления()
	
	ТаблицаДанныхУведомления = Новый ТаблицаЗначений;
	
	ТаблицаДанныхУведомления.Колонки.Добавить("Предмет");
	ТаблицаДанныхУведомления.Колонки.Добавить("ДатаСобытия");
	ТаблицаДанныхУведомления.Колонки.Добавить("ПараметрыСобытия");
	
	Возврат ТаблицаДанныхУведомления;
	
КонецФункции

Процедура НайтиСоздатьВидУведомленияПоGUID(Источник)
	
	GUID = Новый УникальныйИдентификатор(Источник.Значение.GUID);
	ВидУведомленияСсылка = Справочники.ВидыУведомлений.ПолучитьСсылку(GUID);
	ВидУведомленияОбъект = ВидУведомленияСсылка.ПолучитьОбъект();
	
	Если ВидУведомленияОбъект = Неопределено Тогда
		ВидУведомленияОбъект = Справочники.ВидыУведомлений.СоздатьЭлемент();
		ВидУведомленияОбъект.УстановитьСсылкуНового(ВидУведомленияСсылка);
	КонецЕсли;
	
	ВидУведомленияОбъект.ПометкаУдаления 	= Ложь;
	ВидУведомленияОбъект.Наименование 		= Источник.Значение.ВидУведомления;
	ВидУведомленияОбъект.Имя 				= Источник.Ключ;
	ВидУведомленияОбъект.Описание	 		= Источник.Значение.Описание;
	ВидУведомленияОбъект.КатегорияСобытия	= Источник.Значение.КатегорияСобытия;
	
	ВидУведомленияОбъект.Записать();
	
КонецПроцедуры

Функция ТаблицаРассылокПоКатегории(КатегорияСобытия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РассылкиУведомлений.Ссылка КАК РассылкаУведомлений,
		|	РассылкиУведомлений.Наименование КАК НаименованиеРассылки
		|ИЗ
		|	Справочник.РассылкиУведомлений КАК РассылкиУведомлений
		|ГДЕ
		|	РассылкиУведомлений.ПометкаУдаления = ЛОЖЬ
		|	И РассылкиУведомлений.ЭтоГруппа = ЛОЖЬ
		|	И РассылкиУведомлений.Подготовлена
		|	И РассылкиУведомлений.ВидУведомления.КатегорияСобытия = &КатегорияСобытия";
	
	Запрос.УстановитьПараметр("КатегорияСобытия", КатегорияСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ТаблицаПараметровПолучателейРассылок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	РассылкиУведомленийПолучателиУведомленийДинамические.Получатель КАК Получатель,
		|	РассылкиУведомленийПолучателиУведомленийДинамические.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
		|	РассылкиУведомленийПолучателиУведомленийДинамические.ШаблонСообщения КАК ШаблонСообщения,
		|	РассылкиУведомленийПолучателиУведомленийДинамические.Ссылка КАК Рассылка
		|ИЗ
		|	Справочник.РассылкиУведомлений.ПолучателиУведомленийДинамические КАК РассылкиУведомленийПолучателиУведомленийДинамические
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РассылкиУведомленийПолучателиУведомленийФиксированные.Получатель,
		|	РассылкиУведомленийПолучателиУведомленийФиксированные.ВидКонтактнойИнформации,
		|	РассылкиУведомленийПолучателиУведомленийФиксированные.ШаблонСообщения,
		|	РассылкиУведомленийПолучателиУведомленийФиксированные.Ссылка
		|ИЗ
		|	Справочник.РассылкиУведомлений.ПолучателиУведомленийФиксированные КАК РассылкиУведомленийПолучателиУведомленийФиксированные";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ТаблицаПолучателей(Рассылка, ПараметрыПолучателейРассылок, СтрокаРезультатов, СтруктураДанныхРассылки)
	
	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Получатель");
	ТаблицаПолучателей.Колонки.Добавить("ВидКонтактнойИнформации");
	ТаблицаПолучателей.Колонки.Добавить("ШаблонСообщения");
	
	МассивСтрок = ПараметрыПолучателейРассылок.НайтиСтроки(Новый Структура("Рассылка", Рассылка));
	
	Для Каждого СтрокаПолучателя Из МассивСтрок Цикл
		Если ТипЗнч(СтрокаПолучателя.Получатель) = Тип("Строка") Тогда
			ЗначениеПолучателя = Неопределено;
			Если СтрокаПолучателя.Получатель = "Предмет" Тогда
				ЗначениеПолучателя = СтрокаРезультатов[СтрокаПолучателя.Получатель];
				НоваяСтрока 						= ТаблицаПолучателей.Добавить();
				НоваяСтрока.Получатель 				= ЗначениеПолучателя;
				НоваяСтрока.ВидКонтактнойИнформации = СтрокаПолучателя.ВидКонтактнойИнформации;
				НоваяСтрока.ШаблонСообщения 		= СтрокаПолучателя.ШаблонСообщения;
			Иначе
				Если ТипЗнч(СтрокаРезультатов.ПараметрыСобытия) = Тип("Структура") Тогда
					СтрокаРезультатов.ПараметрыСобытия.Свойство(СтрокаПолучателя.Получатель, ЗначениеПолучателя);
					Если ЗначениеЗаполнено(ЗначениеПолучателя) Тогда
						НоваяСтрока 						= ТаблицаПолучателей.Добавить();
						НоваяСтрока.Получатель 				= ЗначениеПолучателя;
						НоваяСтрока.ВидКонтактнойИнформации = СтрокаПолучателя.ВидКонтактнойИнформации;
						НоваяСтрока.ШаблонСообщения 		= СтрокаПолучателя.ШаблонСообщения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаПолучателей.Добавить(), СтрокаПолучателя);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПолучателей.Свернуть("Получатель, ВидКонтактнойИнформации, ШаблонСообщения");
	Возврат ТаблицаПолучателей;
	
КонецФункции

Процедура ЗаписатьУведомленияВРегистр(СтруктураПараметров, ТаблицаПолучателей)
	
	Для Каждого СтрокаПолучателя Из ТаблицаПолучателей Цикл
		НаборЗаписей = РегистрыСведений.Уведомления.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Рассылка.Установить(СтруктураПараметров.Рассылка);
		НаборЗаписей.Отбор.Предмет.Установить(СтруктураПараметров.Предмет);
		НаборЗаписей.Отбор.ДатаСобытия.Установить(СтруктураПараметров.ДатаСобытия);
		НаборЗаписей.Отбор.Получатель.Установить(СтрокаПолучателя.Получатель);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 И НаборЗаписей[0].Состояние = Перечисления.СостоянияУведомлений.Отправлено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Очистить();
		
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
		НоваяСтрока.Получатель				= СтрокаПолучателя.Получатель;
		НоваяСтрока.ВидКонтактнойИнформации = СтрокаПолучателя.ВидКонтактнойИнформации;
		НоваяСтрока.ШаблонСообщения 		= СтрокаПолучателя.ШаблонСообщения;
		НоваяСтрока.ПараметрыСобытия 		= Новый ХранилищеЗначения(СтруктураПараметров.ПараметрыСобытия);
		
		НаборЗаписей.Записать(Истина);	
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураДанныхРассылки(РассылкаУведомлений)
	
	СтрокаРеквизитов = "ВидУведомления,Отбор,ВидТранспорта,СпособОпределенияМоментаУведомления,ЕдиницаИзмеренияИнтервалаУведомления,ИнтервалУведомления,ВремяОтправки";
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РассылкаУведомлений, СтрокаРеквизитов);
	
КонецФункции

Функция СтруктураПериодаРассылки(СтруктураДанныхРассылки)
	
	ПараметрыРассылки = Новый Структура("НачалоПериода,ОкончаниеПериода");
	
	ПараметрыРассылки.НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	ПараметрыРассылки.ОкончаниеПериода = КонецДня(ТекущаяДатаСеанса());
	
	// Если период определения событий - дни.
	Если СтруктураДанныхРассылки.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.День Тогда
		КоэффициентПериода = 86400;
	ИначеЕсли СтруктураДанныхРассылки.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час Тогда
		КоэффициентПериода = 3600;
	КонецЕсли;
	
	Если СтруктураДанныхРассылки.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия Тогда
		// Уведомляем через N периодов после события
		// Значит нужно просмотреть все события задним числом.
		ПараметрыРассылки.НачалоПериода = ПараметрыРассылки.НачалоПериода - СтруктураДанныхРассылки.ИнтервалУведомления * КоэффициентПериода;
	ИначеЕсли СтруктураДанныхРассылки.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ДоСобытия Тогда
		// Уведомляем за N периода до события
		// Значит, нужно просмотреть все события в будущем.
		ПараметрыРассылки.ОкончаниеПериода = ПараметрыРассылки.ОкончаниеПериода + СтруктураДанныхРассылки.ИнтервалУведомления * КоэффициентПериода;
	КонецЕсли;
		
	Возврат ПараметрыРассылки;
	
КонецФункции

Функция РасчетСдвигаОтДатыСобытий(СтруктураДанныхРассылки)
	
	Сдвиг = 0;	
	
	Если СтруктураДанныхРассылки.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.День Тогда
		КоэффициентПериода = 86400;
	ИначеЕсли СтруктураДанныхРассылки.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час Тогда	
		КоэффициентПериода = 3600;
	КонецЕсли;
	Если СтруктураДанныхРассылки.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ДоСобытия Тогда
		Сдвиг = -СтруктураДанныхРассылки.ИнтервалУведомления * КоэффициентПериода;
	ИначеЕсли СтруктураДанныхРассылки.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия Тогда
		Сдвиг = СтруктураДанныхРассылки.ИнтервалУведомления * КоэффициентПериода;
	КонецЕсли;
	
	Возврат Сдвиг;
	
КонецФункции

Функция ТаблицаСообщенийКОтправке(РассылкаУведомлений = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Уведомления.СрокОтправки КАК СрокОтправки,
	|	Уведомления.ДатаСобытия КАК ДатаСобытия,
	|	Уведомления.Рассылка КАК Рассылка,
	|	Уведомления.Предмет КАК Предмет,
	|	Уведомления.Получатель КАК Получатель,
	|	Уведомления.Состояние КАК Состояние,
	|	Уведомления.ДатаОтправки КАК ДатаОтправки,
	|	Уведомления.ШаблонСообщения КАК ШаблонСообщения,
	|	Уведомления.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
	|	Уведомления.ПараметрыСобытия КАК ПараметрыСобытия,
	|	Уведомления.ВидТранспорта КАК ВидТранспорта,
	|	Уведомления.Рассылка.ВидУведомления КАК ВидУведомления
	|ИЗ
	|	РегистрСведений.Уведомления КАК Уведомления
	|ГДЕ
	|	Уведомления.Состояние = &Состояние
	|	И Уведомления.СрокОтправки <= &Период
	|	И (&РассылкаУведомлений = НЕОПРЕДЕЛЕНО
	|			ИЛИ Уведомления.Рассылка = &РассылкаУведомлений)";
	
	Запрос.УстановитьПараметр("РассылкаУведомлений", РассылкаУведомлений);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияУведомлений.Подготовлено);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	ТаблицаСообщений = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаСообщений;

КонецФункции

Функция ОтправитьУведомлениеEmail(СтрокаСообщения)
	
	Предмет = СтрокаСообщения.Предмет;
	УведомленияПереопределяемый.ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет);
	
	СтруктураПараметровСобытия = СтрокаСообщения.ПараметрыСобытия.Получить();
	СтруктураПараметровСобытия.Вставить("РежимОтправкиУведомлений", Истина);
	СтруктураПараметровСобытия.Вставить("Предмет", Предмет);
	СтруктураПараметровСобытия.Вставить("ДатаСобытия", СтрокаСообщения.ДатаСобытия);
	СтруктураПараметровСобытия.Вставить("ДатаСобытия", СтрокаСообщения.ДатаСобытия);
	СтруктураПараметровСобытия.Вставить("Получатель", СтрокаСообщения.Получатель);
	СтруктураПараметровСобытия.Вставить("ВидКонтактнойИнформации", СтрокаСообщения.ВидКонтактнойИнформации);
	СтруктураПараметровСобытия.Вставить("УчетнаяЗапись", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСообщения.Рассылка, "УчетнаяЗаписьЭлектроннойПочты"));
	
	Возврат ШаблоныСообщений.СформироватьСообщениеИОтправить(СтрокаСообщения.ШаблонСообщения, Предмет, Новый УникальныйИдентификатор, СтруктураПараметровСобытия);
	
КонецФункции

Функция ОтправитьУведомлениеSMS(СтрокаСообщения)
	
	Предмет = СтрокаСообщения.Предмет;
	УведомленияПереопределяемый.ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет);
	
	СтруктураПараметровСобытия = СтрокаСообщения.ПараметрыСобытия.Получить();
	СтруктураПараметровСобытия.Вставить("РежимОтправкиУведомлений", Истина);
	СтруктураПараметровСобытия.Вставить("Предмет", Предмет);
	СтруктураПараметровСобытия.Вставить("ДатаСобытия", СтрокаСообщения.ДатаСобытия);
	СтруктураПараметровСобытия.Вставить("ДатаСобытия", СтрокаСообщения.ДатаСобытия);
	СтруктураПараметровСобытия.Вставить("Получатель", СтрокаСообщения.Получатель);
	СтруктураПараметровСобытия.Вставить("ВидКонтактнойИнформации", СтрокаСообщения.ВидКонтактнойИнформации);
	
	Возврат ШаблоныСообщений.СформироватьСообщениеИОтправить(СтрокаСообщения.ШаблонСообщения, Предмет, Новый УникальныйИдентификатор, СтруктураПараметровСобытия);
	
КонецФункции

Процедура ЗаписатьРезультатОтправки(СтрокаСообщения, СообщениеОбОшибке)
	
	НаборЗаписей = РегистрыСведений.Уведомления.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Рассылка.Установить(СтрокаСообщения.Рассылка);
	НаборЗаписей.Отбор.Предмет.Установить(СтрокаСообщения.Предмет);
	НаборЗаписей.Отбор.ДатаСобытия.Установить(СтрокаСообщения.ДатаСобытия);
	НаборЗаписей.Отбор.СрокОтправки.Установить(СтрокаСообщения.СрокОтправки);
	НаборЗаписей.Отбор.Получатель.Установить(СтрокаСообщения.Получатель);
	
	НаборЗаписей.Очистить();
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаСообщения);
	ЗаписьНабора.СообщениеОбОшибке = СообщениеОбОшибке;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ТаблицаИзменений(РассылкаУведомлений = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	РассылкиУведомлений.Ссылка КАК Ссылка,
		|	РассылкиУведомлений.ЭкземплярТипаПредмета КАК ЭкземплярТипаПредмета,
		|	РассылкиУведомлений.ВидУведомления КАК ВидУведомления
		|ПОМЕСТИТЬ ТаблицаРассылок
		|ИЗ
		|	Справочник.РассылкиУведомлений КАК РассылкиУведомлений
		|ГДЕ
		|	РассылкиУведомлений.ВидУведомления.КатегорияСобытия = ЗНАЧЕНИЕ(Перечисление.КатегорииВидовУведомлений.ИзменениеОбъекта)
		|	И РассылкиУведомлений.Подготовлена
		|	И &РассылкаУведомлений = Неопределено ИЛИ РассылкиУведомлений.Ссылка = &РассылкаУведомлений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ПредметыУведомленийОбИзменениях.Предмет КАК Предмет,
		|	ПредметыУведомленийОбИзменениях.ДатаИзменения КАК ДатаИзменения,
		|	ПредметыУведомленийОбИзменениях.ДополнительныеСвойства КАК ДополнительныеСвойства,
		|	ЕСТЬNULL(ТаблицаРассылок.Ссылка, ЗНАЧЕНИЕ(Справочник.РассылкиУведомлений.ПустаяСсылка)) КАК РассылкаУведомлений,
		|	ТаблицаРассылок.ВидУведомления КАК ВидУведомления
		|ИЗ
		|	РегистрСведений.ПредметыУведомленийОбИзменениях КАК ПредметыУведомленийОбИзменениях
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРассылок КАК ТаблицаРассылок
		|		ПО (ТИПЗНАЧЕНИЯ(ПредметыУведомленийОбИзменениях.Предмет) = ТИПЗНАЧЕНИЯ(ТаблицаРассылок.ЭкземплярТипаПредмета))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Предмет,
		|	РассылкаУведомлений";
	
	Запрос.УстановитьПараметр("РассылкаУведомлений", ?(РассылкаУведомлений = Неопределено, Неопределено, РассылкаУведомлений.Рассылка));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтруктураПоРегиструУведомления()
	
	СтруктураПоРегиструУведомления = Новый Структура("СрокОтправки, ДатаСобытия, Рассылка, Предмет, Получатель, Состояние, 
		|ДатаОтправки, ШаблонСообщения, ВидКонтактнойИнформации, ПараметрыСобытия, ВидТранспорта");
	Возврат СтруктураПоРегиструУведомления;
	
КонецФункции

Процедура ОбработатьУдаленныеВидыУведомлений(СтруктураИсточников)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВидыУведомлений.Ссылка КАК Ссылка,
		|	ВидыУведомлений.Имя КАК Имя
		|ИЗ
		|	Справочник.ВидыУведомлений КАК ВидыУведомлений");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не СвойствоВСтруктуреИсточников(СтруктураИсточников, Выборка.Имя) Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РассылкиУведомлений"); 
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Попытка
				Блокировка.Заблокировать();
				ОбъектРассылки = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРассылки.ПометкаУдаления = Истина;
				ОбъектРассылки.Записать();
			Исключение
				КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка при записи рассылки уведомлений'", КодОсновногоЯзыка), 
					УровеньЖурналаРегистрации.Ошибка, 
					, 
					Выборка.Ссылка, 
					НСтр("ru = 'Связанный вид уведомления был удален. Не удалось пометить на удаление рассылку'"));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СвойствоВСтруктуреИсточников(СтруктураИсточников, НаименованиеСвойства)
	
	Если Не ЗначениеЗаполнено(НаименованиеСвойства) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураИсточников.Свойство(НаименованиеСвойства);
	
КонецФункции

#КонецОбласти
