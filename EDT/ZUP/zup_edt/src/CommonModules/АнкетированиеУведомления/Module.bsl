
#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//										общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.10";
	Обработчик.Процедура = "АнкетированиеУведомления.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b840f747-dc9c-4d97-84bb-bffc3ea223b2");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений: анкетирование.'");
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// Процедура выполняет начальное заполнение данных подсистемы уведомлений
//
Процедура ПриНачальномЗаполненииДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("Анкета");
	
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		ПараметрыШаблона = Новый Структура();
		
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("Наименование", НСтр("ru='Истекает срок опроса'"));
		ПараметрыШаблона.Вставить("Тема", НСтр("ru='Истекает срок опроса'"));
		ПараметрыШаблона.Вставить("ФорматПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru='Здравствуйте, [ДанныеУведомления.Респондент]!
			|
			|Опрос [ДанныеУведомления.Опрос] истекает [ДанныеУведомления.ДатаОкончанияОпроса].
			|Заполните анкету до этого срока.'"));
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru='Истекает срок опроса'"), ПараметрыШаблона);
		
		// 	Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		
		РассылкаОбъект.ВидУведомления 	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта 	= Перечисления.ВидыТранспортаУведомлений.Email;
		РассылкаОбъект.УчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		РассылкаОбъект.Наименование 	= НСтр("ru='Уведомление об истечении срока опроса'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Респондент";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ДоСобытия;
		РассылкаОбъект.ИнтервалУведомления = 7;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.День;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет дополнить структуру видов уведомлений своими видами уведомлений. 
//
// Параметры:
//  СтруктураДоступныхВидовУведомлений - структура - перечень уведомлений, подключенных в подсистеме
//     * Ключ - Строка - Имя вида уведомления
//     * Значение - Структура - Описание вида уведомления (Структура)
//        * ВидУведомления - Строка, строковый идентификатор вида уведомления.
//        * Описание - Строка, Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//        * Инициализация - Строка, <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения
//                          запросов к базе данных.
//        * ПолучениеДанных - Строка, <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	// Просроченные анкеты
	СтруктураАнкеты = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	СтруктураАнкеты.ВидУведомления 	= НСтр("ru='Истечение срока опроса'");
	СтруктураАнкеты.GUID 				= "0f06cb7a-1b27-4696-a156-b1b9657fa4fa";
	СтруктураАнкеты.Описание 			= НСтр("ru='Уведомление об истечении срока опроса.'");
	СтруктураАнкеты.Инициализация 		= "АнкетированиеУведомления.ИнициализацияАнкета";
	СтруктураАнкеты.ПолучениеДанных 	= "АнкетированиеУведомления.ПолучениеДанныхАнкета";
	
	СтруктураДоступныхВидовУведомлений.Вставить("Анкета", СтруктураАнкеты);
	
КонецПроцедуры

// Позволяет переопределить имя типа шаблона сообщений по виду уведомления
//
// Параметры:
//   ИмяТипаШаблонаСообщений - Строка - имя типа предмета шаблона, которое необходимо переопределить
//   ВидУведомления - СправочникСсылка.ВидУведомления - связанный вид уведомления
Процедура ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет заполнить поля, доступные для шаблона
//  соответствующего вида уведомлений.
//
// Параметры:
//  ВидУведомления           - СправочникСсылка.ВидУведомления - вид уведомления - владелец шаблона
//  Реквизиты                - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//                                      и др.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона        - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "Анкета") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Респондент",НСтр("ru='Респондент'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Опрос",НСтр("ru='Опрос'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаНачалаОпроса",НСтр("ru='Начало опроса'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаОкончанияОпроса",НСтр("ru='Окончание опроса'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при подготовке шаблона сообщения и позволяет установить предмет 
// сообщения, отличный от предмета уведомления.
//
// Параметры:
//  СтрокаСообщения	 - СтрокаТЗ - строка данных уведомления, источник данных для переопределения предмета.
//  Предмет			 - ДокументСсылка, СправочникСсылка - предмет сообщения, который можно переопределить.
//
Процедура ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет) Экспорт
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Назначено собеседование"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияАнкета(ОписаниеДанных) Экспорт
	//
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("ДокументСсылка.Анкета");
	//
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Респондент", НСтр("ru='Респондент'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	//
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "РежимАнкетирования", НСтр("ru='Режим анкетирования'"), Новый ОписаниеТипов("ПеречислениеСсылка.РежимыАнкетирования"));
	//
КонецПроцедуры

// Процедура заполняет таблицу уведомлений по переданным параметрам и отборам.
//
// Параметры:
//    СтруктураПериода - Структура - два элемента - НачалоПериода и ОкончаниеПериода
//    Отборы - ТаблицаЗначений - перечень отборов событий, заданный пользователем
//       * ЛевоеЗначение - Строка - имя поля отбора в источнике данных.
//       * ВидСравнения - ВидСравнения - Вид сравнения
//       * ЛевоеЗначение - Булево, Число, Строка, Дата, ЛюбаяСсылка - значение отбора.
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПолучениеДанныхАнкета(СтруктураПериода, Отборы, ТаблицаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", СтруктураПериода.ОкончаниеПериода);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	НазначениеОпросовРеспонденты.Респондент КАК Респондент,
	|	НазначениеОпросовРеспонденты.Ссылка.ДатаНачала КАК ДатаНачалаОпроса,
	|	НазначениеОпросовРеспонденты.Ссылка.ДатаОкончания КАК ДатаОкончанияОпроса,
	|	НазначениеОпросовРеспонденты.Ссылка.Наименование КАК Опрос,
	|	ЕСТЬNULL(Анкета.Проведен, ЛОЖЬ) КАК АнкетаЗаполнена
	|ПОМЕСТИТЬ ВТОпросы
	|ИЗ
	|	Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Анкета КАК Анкета
	|		ПО НазначениеОпросовРеспонденты.Ссылка = Анкета.Опрос
	|			И НазначениеОпросовРеспонденты.Респондент = Анкета.Респондент
	|ГДЕ
	|	НазначениеОпросовРеспонденты.Ссылка.Проведен
	|	И НазначениеОпросовРеспонденты.Ссылка.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОпросы.Респондент КАК Респондент,
	|	ВТОпросы.ДатаНачалаОпроса КАК ДатаНачалаОпроса,
	|	ВТОпросы.ДатаОкончанияОпроса КАК ДатаОкончанияОпроса,
	|	ВТОпросы.ДатаОкончанияОпроса КАК ДатаСобытия,
	|	ВТОпросы.Опрос КАК Опрос,
	|	ВТОпросы.Респондент КАК Предмет
	|ИЗ
	|	ВТОпросы КАК ВТОпросы
	|ГДЕ
	|	ВТОпросы.АнкетаЗаполнена = ЛОЖЬ");

	Если Отборы.Количество() > 0 Тогда
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Отбор;
		Для Каждого СтрокаОтбора Из Отборы Цикл
			Если СтрокаОтбора.Использование Тогда
				ТекстУсловия = УведомленияСервер.ПредставлениеУсловияДляЗапроса(
					СтрокаОтбора.ВидСравнения,
					СтрокаОтбора.ЛевоеЗначение,
					"ВТОпросы." + СтрокаОтбора.ЛевоеЗначение);
				ОтборЗапроса.Добавить(ТекстУсловия);
				Запрос.УстановитьПараметр(СтрокаОтбора.ЛевоеЗначение, СтрокаОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
		ПараметрыСобытия = Новый Структура();
		Для Каждого КолонкаРезультата Из СхемаЗапроса.ПакетЗапросов[1].Колонки Цикл
			ПараметрыСобытия.Вставить(КолонкаРезультата.Псевдоним);
		КонецЦикла;
		
		Для Каждого СтрокаРезультатаЗапроса Из ТаблицаДанных Цикл
			СтрокаТаблицы = ТаблицаРезультата.Добавить();
			СтрокаТаблицы.Предмет = СтрокаРезультатаЗапроса.Предмет;
			СтрокаТаблицы.ДатаСобытия = СтрокаРезультатаЗапроса.ДатаСобытия;
			ЗаполнитьЗначенияСвойств(ПараметрыСобытия, СтрокаРезультатаЗапроса);
			СтрокаТаблицы.ПараметрыСобытия = ПараметрыСобытия;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

