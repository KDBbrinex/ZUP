
#Область СлужебныйПрограммныйИнтерфейс

Процедура ДополнитьОписаниеПрофиля(ОписаниеПрофиля) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеИнтеграцииРекрутинговыхСайтов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов");	
	
КонецПроцедуры

// Заполняет колонку ДатаСобытия, подставляя в нее представление последнего действия с публикацией.
// Вызывается из события ПриПолученииДанныхНаСервере списка Публикации.
//
// Параметры:
//	Настройки	- НастройкиКомпоновкиДанных - содержит копию полных настроек динамического списка.
//	Строки		- СтрокиДинамическогоСписка - коллекция содержит данные и оформление всех строк,
//					получаемых в списке, кроме строк группировок.
//
Процедура ПубликацииПриПолученииДанныхНаСервере(Настройки, Строки) Экспорт
	
	Для Каждого Строка Из Строки Цикл
		ЗаполнитьДатуСобытияВСтроке(Строка.Значение.Данные);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПарсерJSON(ТекущаяСтрока, ПрочитатьВСоответствие = Ложь) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекущаяСтрока);
	Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписьJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ТипЗначенияJSONСтрока() Экспорт
	
	Возврат ТипЗначенияJSON.Строка;
	
КонецФункции

Функция ТипЗначенияJSONЧисло() Экспорт
	
	Возврат ТипЗначенияJSON.Число;
	
КонецФункции

Функция ТипЗначенияJSONНачалоМассива() Экспорт
	
	Возврат ТипЗначенияJSON.НачалоМассива;
	
КонецФункции

Функция ТипЗначенияJSONНачалоОбъекта() Экспорт
	
	Возврат ТипЗначенияJSON.НачалоОбъекта;
	
КонецФункции

Функция ТипЗначенияJSONБулево() Экспорт
	
	Возврат ТипЗначенияJSON.Булево;
	
КонецФункции

Процедура УстановитьУсловноеОформление(Список)
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "ДатаСнятияСПубликации", '00010101', ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

Процедура НастроитьКомандыПубликацииВакансии(Форма)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиИнтеграцииРекрутинговыхСайтов) Тогда
		Возврат;
	КонецЕсли;
	
	АктуальныеСайты = ИнтеграцияРекрутинговыхСайтов.ИспользуемыеСайты();
	Если АктуальныеСайты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СайтыСПубликациейВакансии = ИнтеграцияРекрутинговыхСайтов.СайтыСПубликациейВакансии(Форма.ВакансияСсылка, АктуальныеСайты);
	СайтыБезПубликации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(АктуальныеСайты, СайтыСПубликациейВакансии);
	
	Если ЗначениеЗаполнено(Форма.СоответствиеКомандИСайтов) Тогда
		СоответствиеКомандИСайтовПромежуточное = ИнтеграцияРекрутинговыхСайтовКлиентСервер.СоответствиеПоФиксированномуСоответствию(Форма.СоответствиеКомандИСайтов);
	Иначе
		СоответствиеКомандИСайтовПромежуточное = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Сайт Из СайтыБезПубликации Цикл
		
		ЕстьКомандаМенюДляСайта = Ложь;
		Если ЗначениеЗаполнено(Форма.СоответствиеКомандИСайтов) Тогда
			
			Для Каждого ЭлементСоответствия Из Форма.СоответствиеКомандИСайтов Цикл
				Если ЭлементСоответствия.Значение = Сайт Тогда
					ЕстьКомандаМенюДляСайта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ЕстьКомандаМенюДляСайта Тогда
			ИнтеграцияРекрутинговыхСайтов.СоздатьКомандуПубликацииНаСайте(Форма, Сайт, СоответствиеКомандИСайтовПромежуточное);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИспользуемыеСайты = Новый ФиксированныйМассив(АктуальныеСайты);
	Форма.СоответствиеКомандИСайтов = Новый ФиксированноеСоответствие(СоответствиеКомандИСайтовПромежуточное);
	
КонецПроцедуры

// Вызывается при получении формой данных объекта.
// Настраивает условное оформление и команды таблицы Публикации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма вакансии.
//
Процедура ВакансииПриПолученииДанныхНаСервере(Форма) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиИнтеграцииРекрутинговыхСайтов) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление(Форма.Публикации);
	НастроитьКомандыПубликацииВакансии(Форма);
	
КонецПроцедуры

// Обновляет команды для публикации/снятия с публикации вакансий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма вакансии.
//
Процедура ОбновитьКомандыПубликацииВакансии(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	КоличествоЭлементов = Элементы.Публикации.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаОпубликовать.ПодчиненныеЭлементы.Количество();
	ЭлементыДляУдаления = Новый Массив;
	
	Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
		ЭлементыДляУдаления.Добавить(Элементы.Публикации.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаОпубликовать.ПодчиненныеЭлементы.Получить(Индекс));
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
		Элементы.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
	Форма.СоответствиеКомандИСайтов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	НастроитьКомандыПубликацииВакансии(Форма);
	
КонецПроцедуры

Процедура УстановитьФОИспользуетсяВзаимодействиеСРекрутинговымиСайтами() Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкиВзаимодействияСРекрутинговымиСайтами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.ИспользуетсяВзаимодействиеСРекрутинговымиСайтами = 
		Константы.ИспользоватьИнтеграциюРекрутинговыхСайтов.Получить() И ИнтеграцияРекрутинговыхСайтов.ИспользуемыеСайты() <> Неопределено;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция СтруктураТрудоваяДеятельность() Экспорт
	
	Возврат Справочники.Кандидаты.СтруктураТрудоваяДеятельность();
	
КонецФункции

Функция СтруктураЗнаниеЯзыков() Экспорт
	
	Возврат Справочники.Кандидаты.СтруктураЗнаниеЯзыков();
	
КонецФункции

Процедура ЗаполнитьМассивКонтактнойИнформацииHeadHunter(СтруктураРезюме, МассивКИ) Экспорт 
	
	Для Каждого КонтактнаяИнформация Из СтруктураРезюме.Получить("contact") Цикл
		ОписаниеТипаКИ = КонтактнаяИнформация.Получить("type");
		Если ОписаниеТипаКИ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеЗначенияКИ = КонтактнаяИнформация.Получить("value");
		Если ОписаниеЗначенияКИ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураКИ = СтруктураКонтактнойИнформации();
		Если ОписаниеТипаКИ.Получить("id") = "cell" Тогда
			СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
			СтруктураКИ.Представление = ОписаниеЗначенияКИ.Получить("formatted");
		ИначеЕсли ОписаниеТипаКИ.Получить("id") = "home" Тогда
			СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
			СтруктураКИ.Представление = ОписаниеЗначенияКИ.Получить("formatted");
		ИначеЕсли ОписаниеТипаКИ.Получить("id") = "work" Тогда
			СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица");
			СтруктураКИ.Представление = ОписаниеЗначенияКИ.Получить("formatted");
		ИначеЕсли ОписаниеТипаКИ.Получить("id") = "email" Тогда
			СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
			СтруктураКИ.Представление = ОписаниеЗначенияКИ;
		КонецЕсли;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураРезюме.Получить("area")) Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица");
		СтруктураКИ.Представление = СтруктураРезюме.Получить("area").Получить("name");
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииRabota(СтруктураРезюме, МассивКИ) Экспорт 

	АдресПочты = СтруктураРезюме.Получить("contactEmail");
	Если ЗначениеЗаполнено(АдресПочты) Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтруктураКИ.Представление = АдресПочты;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
	КонтактныеТелефоны = СтруктураРезюме.Получить("phones");
	Если ЗначениеЗаполнено(КонтактныеТелефоны) Тогда
		Для Каждого КонтактнаяИнформация Из КонтактныеТелефоны Цикл
			СтруктураКИ = СтруктураКонтактнойИнформации();
			Если КонтактнаяИнформация.Получить("offerTelephoneType").Получить("id") = 2 Тогда
				СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
			ИначеЕсли КонтактнаяИнформация.Получить("offerTelephoneType").Получить("id") = 1 Тогда
				СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
			ИначеЕсли КонтактнаяИнформация.Получить("offerTelephoneType").Получить("id") = 3 Тогда
				СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураКИ.Вид) Тогда
				СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтруктураКИ.Представление = СтрШаблон("%1 (%2) %3", КонтактнаяИнформация.Получить("countryCode"), КонтактнаяИнформация.Получить("code"), Формат(КонтактнаяИнформация.Получить("number"), "ЧГ="));
				МассивКИ.Добавить(СтруктураКИ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РегионыРаботы = СтруктураРезюме.Получить("leavingRegion");
	Если ЗначениеЗаполнено(РегионыРаботы) Тогда
		Для Каждого Регион Из РегионыРаботы Цикл
			СтруктураКИ = СтруктураКонтактнойИнформации();
			СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица");
			СтруктураКИ.Представление = Регион.Получить("name");
			МассивКИ.Добавить(СтруктураКИ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииSuperJob(СтруктураРезюме, МассивКИ) Экспорт
	
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "phone1")) Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтруктураКИ.Представление = СтруктураРезюме.phone1;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "phone2")) Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		СтруктураКИ.Представление = СтруктураРезюме.phone2;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "email")) Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтруктураКИ.Представление = СтруктураРезюме.email;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "town")) Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица");
		СтруктураКИ.Представление = СтруктураРезюме.town.title;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииZarplata(СтруктураРезюме, МассивКИ) Экспорт
	
	Значение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "profile", "personal", "city", Неопределено);
	Если Не Значение = Неопределено Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица");
		СтруктураКИ.Представление = Значение["title"];
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
	КонтактнаяИнформация = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "profile", "contact",, Неопределено);
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(КонтактнаяИнформация, "phone", "format",, Неопределено);
	Если Не Значение = Неопределено Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтруктураКИ.Представление = Значение;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
	Значение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(КонтактнаяИнформация, "additional_phone", "format",, Неопределено);
	Если Не Значение = Неопределено Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		СтруктураКИ.Представление = Значение;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
	Значение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(КонтактнаяИнформация, "email",,, Неопределено);
	Если Не Значение = Неопределено Тогда
		СтруктураКИ = СтруктураКонтактнойИнформации();
		СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураКИ.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтруктураКИ.Представление = Значение;
		МассивКИ.Добавить(СтруктураКИ);
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураКонтактнойИнформации()
	Возврат Новый Структура("Тип, Вид, Представление");
КонецФункции

Процедура ЗаполнитьМассивОбразованиеHeadHunter(СтруктураРезюме, МассивОбразование) Экспорт
	
	УровеньОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ВидОбразованияПоИдентификаторуHeadHunter(СтруктураРезюме.Получить("education").Получить("level").Получить("id"));
	УровеньДопОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
	ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации;
	
	Если УровеньОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.СреднееПолноеОбщееОбразование() Тогда
		
		Для Каждого Образование Из СтруктураРезюме.Получить("education").Получить("elementary") Цикл
			
			Если Не ЗначениеЗаполнено(Образование) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
			СтруктураОбразование.УчебноеЗаведение = Образование.Получить("name");
			СтруктураОбразование.Окончание = Образование.Получить("year");
			СтруктураОбразование.ВидОбразования = УровеньОбразования;
			
			МассивОбразование.Добавить(СтруктураОбразование);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Образование Из СтруктураРезюме.Получить("education").Получить("primary") Цикл
			
			СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
			СтруктураОбразование.УчебноеЗаведение = Образование.Получить("name");
			СтруктураОбразование.Факультет = Образование.Получить("organization");
			СтруктураОбразование.Специальность = Образование.Получить("result");
			СтруктураОбразование.Окончание = Образование.Получить("year");
			СтруктураОбразование.ВидОбразования = УровеньОбразования;
			
			МассивОбразование.Добавить(СтруктураОбразование);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДопОбразование Из СтруктураРезюме.Получить("education").Получить("additional") Цикл
		
		Если Не ЗначениеЗаполнено(ДопОбразование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = ДопОбразование.Получить("organization");
		СтруктураОбразование.НаименованиеКурса = ДопОбразование.Получить("name");
		СтруктураОбразование.Окончание = ДопОбразование.Получить("year");
		СтруктураОбразование.Квалификация = ДопОбразование.Получить("result");
		СтруктураОбразование.ВидОбразования = УровеньДопОбразования;
		СтруктураОбразование.ВидДополнительногоОбучения = ВидДополнительногоОбучения;
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеRabota(СтруктураРезюме, МассивОбразование) Экспорт
	
	УровеньДопОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
	
	Для Каждого Образование Из СтруктураРезюме.Получить("education").Получить("details") Цикл
		
		ДанныеУровняОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ВидОбразованияПоИдентификаторуRabota(Образование.Получить("level").Получить("id"));
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = Образование.Получить("name");
		СтруктураОбразование.Факультет = Образование.Получить("faculty");
		
		Если ДанныеУровняОбразования.ВидОбразования = УровеньДопОбразования Тогда
			СтруктураОбразование.НаименованиеКурса = Образование.Получить("speciality");
		Иначе
			СтруктураОбразование.Специальность = Образование.Получить("speciality");
		КонецЕсли;
		
		СтруктураОбразование.Окончание = Образование.Получить("yearTo");
		ЗаполнитьЗначенияСвойств(СтруктураОбразование, ДанныеУровняОбразования);
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеSuperJob(СтруктураРезюме, МассивОбразование) Экспорт
	
	УровеньДопОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
	ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации;
	
	Для Каждого Образование Из СтруктураРезюме.base_education_history Цикл
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "institute")) Тогда
			СтруктураОбразование.УчебноеЗаведение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "institute", "title");
		КонецЕсли;
		СтруктураОбразование.Факультет = Образование.faculty;
		СтруктураОбразование.Специальность = Образование.profession;
		СтруктураОбразование.Окончание = Образование.yearend;
		Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "education_type")) Тогда
			СтруктураОбразование.ВидОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ВидОбразованияПоИдентификаторуSuperJob(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "education_type", "id"));
		КонецЕсли;
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла;
	
	Для Каждого ДопОбразование Из СтруктураРезюме.education_history Цикл
		
		Если Не ЗначениеЗаполнено(ДопОбразование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = ДопОбразование.institute;
		СтруктураОбразование.НаименованиеКурса = ДопОбразование.name;
		СтруктураОбразование.Окончание = ДопОбразование.yearend;
		СтруктураОбразование.ВидОбразования = УровеньДопОбразования;
		СтруктураОбразование.ВидДополнительногоОбучения = ВидДополнительногоОбучения;
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеZarplata(СтруктураРезюме, МассивОбразование) Экспорт
	
	Образования = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "educations",,, Неопределено);
	Если Образования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УровеньОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ВидОбразованияПоИдентификаторуZarplata(
		ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "education_level", "id"));
		
	Для Каждого Образование Из Образования Цикл

		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "institution", "title");
		СтруктураОбразование.Факультет = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "faculty", "title");
		СтруктураОбразование.Специальность = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "speciality", "title");
		ДатаОкончания = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "date", "to");
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			СтруктураОбразование.Окончание = Число(Лев(ДатаОкончания, 4));
		КонецЕсли;
		СтруктураОбразование.ВидОбразования = УровеньОбразования;
		
		МассивОбразование.Добавить(СтруктураОбразование);

	КонецЦикла;
	
	Курсы = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "courses",,, Неопределено);
	Если Курсы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УровеньДопОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
	ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации;
	
	Для Каждого Курс Из Курсы Цикл

		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Курс, "company");
		СтруктураОбразование.НаименованиеКурса = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Курс, "title");
		ДатаОкончания = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Курс, "date", "to");
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			СтруктураОбразование.Окончание = Число(Лев(ДатаОкончания, 4));
		КонецЕсли;
		СтруктураОбразование.ВидОбразования = УровеньДопОбразования;
		СтруктураОбразование.ВидДополнительногоОбучения = ВидДополнительногоОбучения;
		
		МассивОбразование.Добавить(СтруктураОбразование);

	КонецЦикла;
	
КонецПроцедуры

Функция РазмещениеВакансииRabota(ИдентификаторВакансии)
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаRabota();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеRabota();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("action", "publish");
	ПараметрыЗапроса.Вставить("periodDays", 14);
	ПараметрыЗапроса.Вставить("hideContact", Ложь);
	ПараметрыЗапроса.Вставить("searchable", Истина);
	ПараметрыЗапроса.Вставить("useTrap", Истина);
	
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросRabota(СтрШаблон("vacancies/%1", Формат(ИдентификаторВакансии, "ЧГ=0")), МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ПараметрыЗапроса));
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 204 Тогда
		
		РезультатДействия = РезультатСОшибкойПубликацииВакансии(Rabota(), Ответ.КодСостояния, ТекущаяСтрока);
		РезультатДействия.ИдентификаторВакансии = ИдентификаторВакансии;
		
		Возврат РезультатДействия;
		
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией(ИдентификаторВакансии);
	
КонецФункции

Функция ПубликацияВакансииHeadHunter(Дерево) Экспорт
	
	JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииHeadHunter(Дерево);
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаHeadHunter();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеHeadHunter();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросHeadHunter("/vacancies", МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, , ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 201 Тогда
		
		АдресВакансии = Ответ.Заголовки.Получить("Location");
		
		НомерВхожденияРазделителя = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(АдресВакансии, "/", 2);
		ИдентификаторВакансии = Сред(АдресВакансии, НомерВхожденияРазделителя + 1, СтрДлина(АдресВакансии) - НомерВхожденияРазделителя);
		
		Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией(ИдентификаторВакансии);
		
	Иначе
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Возврат РезультатСОшибкойПубликацииВакансии(HeadHunter(), Ответ.КодСостояния, ТекущаяСтрока);
		
	КонецЕсли;
	
КонецФункции

Функция ПубликацияВакансииRabota(Дерево) Экспорт
	
	ОписаниеВакансииДляПубликацииRabota = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииRabota(Дерево);
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаRabota();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеRabota();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросRabota("vacancies", МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ОписаниеВакансииДляПубликацииRabota);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 201 Тогда
		
		Результат = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ТекущаяСтрока);
		ИдентификаторВакансии = Результат[0];
		
		Возврат РазмещениеВакансииRabota(ИдентификаторВакансии);
		
	Иначе
		
		Возврат РезультатСОшибкойСозданияВакансии(Rabota(), Ответ.КодСостояния, ТекущаяСтрока);
		
	КонецЕсли;
	
КонецФункции

Функция ПубликацияВакансииSuperJob(Дерево) Экспорт
	
	ОписаниеВакансииДляПубликацииSuperJob = ИнтеграцияРекрутинговыхСайтов.ОписаниеВакансииДляПубликацииSuperJob(Дерево);
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаSuperJob();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеSuperJob();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросSuperJob("/2.0/vacancies/", МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ОписаниеВакансииДляПубликацииSuperJob);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 201 Тогда
		
		СтруктураВакансии = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ТекущаяСтрока);
		Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией(СтруктураВакансии.id);
		
	Иначе
		
		Возврат РезультатСОшибкойПубликацииВакансии(SuperJob(), Ответ.КодСостояния, ТекущаяСтрока);
		
	КонецЕсли;
	
КонецФункции

Функция ПубликацияВакансииZarplata(Дерево) Экспорт
	
	ОписаниеВакансииZarplata = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииZarplata(Дерево);
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаZarplata();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеZarplata();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросZarplata("/v1/vacancies", МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ОписаниеВакансииZarplata, , ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 201 Тогда
		
		АдресВакансии = Ответ.Заголовки.Получить("Location");
		
		НомерВхожденияРазделителя = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(АдресВакансии, "/", 3);
		ИдентификаторВакансии = Сред(АдресВакансии, НомерВхожденияРазделителя + 1, СтрДлина(АдресВакансии) - НомерВхожденияРазделителя);
		
		Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией(ИдентификаторВакансии);
		
	Иначе
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Возврат РезультатСОшибкойПубликацииВакансии(Zarplata(), Ответ.КодСостояния,
			ИнтеграцияРекрутинговыхСайтов.ОписаниеОшибкиЗапросаZarplata(ТекущаяСтрока));
		
	КонецЕсли;
	
КонецФункции

Функция ПовторнаяПубликацияВакансииRabota(ИдентификаторВакансии, Дерево, Вакансия) Экспорт
	
	РезультатДействия = ОбновлениеВакансииRabota(ИдентификаторВакансии, Дерево);
	
	Если РезультатДействия.Успешно Тогда
		
		ИнтеграцияРекрутинговыхСайтов.ЗаписьВРегистрИнформацииОПубликации(Вакансия, Rabota());
		ИнтеграцияРекрутинговыхСайтов.ЗаписьВРегистрДанныеПубликации(Вакансия, Rabota(), Дерево);
		
		Возврат РазмещениеВакансииRabota(ИдентификаторВакансии);
		
	Иначе
		Возврат РезультатДействия;
	КонецЕсли;
	
КонецФункции

Функция ПовторнаяПубликацияВакансииSuperJob(ИдентификаторВакансии, Дерево, Вакансия) Экспорт
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаSuperJob();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеSuperJob();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросSuperJob(СтрШаблон("/2.0/vacancies/%1/republish/", ИдентификаторВакансии), МаркерДоступа);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		РезультатДействия = РезультатСОшибкойПубликацииВакансии(SuperJob(), Ответ.КодСостояния, ТекущаяСтрока);
		РезультатДействия.ИдентификаторВакансии = ИдентификаторВакансии;
		
	Иначе
		
		РезультатДействия = ОбновлениеВакансииSuperJob(ИдентификаторВакансии, Дерево);
		Если РезультатДействия.Успешно Тогда
			
			ДатаСеанса = ТекущаяДатаСеанса();
			
			СвойстваПубликации = ИнтеграцияРекрутинговыхСайтов.НовыеСвойстваПубликацииВакансии();
			СвойстваПубликации.Опубликована = Истина;
			СвойстваПубликации.ДатаПубликации = ДатаСеанса;
			СвойстваПубликации.ДатаОбновления = ДатаСеанса;
			
			ИнтеграцияРекрутинговыхСайтов.ЗаписьВРегистрИнформацииОПубликации(Вакансия, SuperJob(), , , СвойстваПубликации);
			
		Иначе
			РезультатСнятия = СнятиеВакансииSuperJob(ИдентификаторВакансии);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатДействия;
	
КонецФункции

Функция ПовторнаяПубликацияВакансииZarplata(ИдентификаторВакансии, Дерево, Вакансия) Экспорт
	
	РезультатДействия = ОбновлениеВакансииZarplata(ИдентификаторВакансии, Дерево);
	
	Если РезультатДействия.Успешно Тогда
		
		СвойстваПубликации = ИнтеграцияРекрутинговыхСайтов.НовыеСвойстваПубликацииВакансии();
		СвойстваПубликации.ДатаОбновления = ТекущаяДатаСеанса();
		СвойстваПубликации.ДатаСнятияСПубликации = Дата(1,1,1);
		
		ИнтеграцияРекрутинговыхСайтов.ЗаписьВРегистрИнформацииОПубликации(Вакансия, Zarplata(),,, СвойстваПубликации);
		ИнтеграцияРекрутинговыхСайтов.ЗаписьВРегистрДанныеПубликации(Вакансия, Zarplata(), Дерево);
		
		Возврат РезультатДействия;
		
	Иначе
		Возврат РезультатДействия;
	КонецЕсли;
	
КонецФункции

Функция ОбновлениеВакансииHeadHunter(ИдентификаторВакансии, Дерево) Экспорт
	
	Сайт = HeadHunter();
	JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииHeadHunter(Дерево, Истина);
	
	Если Не ЗначениеЗаполнено(JSONОписаниеВакансииHeadHunter) Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(Сайт);
	КонецЕсли;
	
	ОписаниеВакансии = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(JSONОписаниеВакансииHeadHunter);
	
	ОписаниеВакансии_billing_type = Неопределено;
	ОписаниеВакансии_manager = Неопределено;
	Если ОписаниеВакансии.Свойство("billing_type") Тогда
		ОписаниеВакансии_billing_type = Новый Структура("billing_type");
		ЗаполнитьЗначенияСвойств(ОписаниеВакансии_billing_type, ОписаниеВакансии);
		ОписаниеВакансии.Удалить("billing_type");
	КонецЕсли;
	
	Если ОписаниеВакансии.Свойство("manager") Тогда
		ОписаниеВакансии_manager = Новый Структура("manager");
		ЗаполнитьЗначенияСвойств(ОписаниеВакансии_manager, ОписаниеВакансии);
		ОписаниеВакансии.Удалить("manager");
	КонецЕсли;
	
	JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ОписаниеВакансии);
	
	ТекстЗапроса = "/vacancies/" + ИдентификаторВакансии;
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаHeadHunter();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеHeadHunter();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросHeadHunter(ТекстЗапроса, МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, , ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 204 Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Если ОписаниеВакансии_billing_type <> Неопределено Тогда
		
		JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ОписаниеВакансии_billing_type);
		Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, , ИспользованиеByteOrderMark.НеИспользовать);
		
		Ответ = Соединение.Записать(Запрос);
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния <> 204 Тогда
			
			Шаблон = НСтр("ru = 'Ошибка обновления биллингового типа вакансии на сайте %1 (%2): %3'");
			Возврат РезультатСОшибкой(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеВакансии_manager <> Неопределено Тогда
		
		JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ОписаниеВакансии_manager);
		Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, , ИспользованиеByteOrderMark.НеИспользовать);
		
		Ответ = Соединение.Записать(Запрос);
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния <> 204 Тогда
			
			Шаблон = НСтр("ru = 'Ошибка обновления менеджера вакансии на сайте %1 (%2): %3'");
			Возврат РезультатСОшибкой(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция ОбновлениеВакансииRabota(ИдентификаторВакансии, Дерево) Экспорт
	
	JSONОписаниеВакансииRabota = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииRabota(Дерево, Истина);
	
	Если Не ЗначениеЗаполнено(JSONОписаниеВакансииRabota) Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(Rabota());
	КонецЕсли;
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаRabota();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеRabota();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросRabota(СтрШаблон("vacancies/%1", ИдентификаторВакансии), МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииRabota);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 204 Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(Rabota(), Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция ОбновлениеВакансииSuperJob(ИдентификаторВакансии, Дерево) Экспорт
	
	ОписаниеВакансииДляПубликацииSuperJob = ИнтеграцияРекрутинговыхСайтов.ОписаниеВакансииДляПубликацииSuperJob(Дерево);
	
	Если Не ЗначениеЗаполнено(ОписаниеВакансииДляПубликацииSuperJob) Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(SuperJob());
	КонецЕсли;
	
	ТекстЗапроса = "/2.0/vacancies/" + ИдентификаторВакансии + "/";
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаSuperJob();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеSuperJob();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросSuperJob(ТекстЗапроса, МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ОписаниеВакансииДляПубликацииSuperJob);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(SuperJob(), Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция ОбновлениеВакансииZarplata(ИдентификаторВакансии, Дерево) Экспорт
	
	JSONОписаниеВакансииZarplata = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииZarplata(Дерево, Истина);
	
	Если Не ЗначениеЗаполнено(JSONОписаниеВакансииZarplata) Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(Zarplata());
	КонецЕсли;
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаZarplata();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеZarplata();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросZarplata(СтрШаблон("/v1/vacancies/%1/", ИдентификаторВакансии), МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииZarplata);
	
	Ответ = Соединение.Изменить(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		Запрос.УстановитьТелоИзСтроки("{""state"":1}");
		Ответ = Соединение.Изменить(Запрос);
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат РезультатСОшибкойОбновленияВакансии(Zarplata(), Ответ.КодСостояния,
			ИнтеграцияРекрутинговыхСайтов.ОписаниеОшибкиЗапросаZarplata(ТекущаяСтрока));
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция СнятиеВакансииHeadHunter(ИдентификаторВакансии) Экспорт
	
	Сайт = HeadHunter();
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаHeadHunter();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеHeadHunter();
	
	ИнформацияОПользователе = ИнтеграцияРекрутинговыхСайтов.ИнформацияОПользователе(Сайт, МаркерДоступа);
	
	ИдентификаторКомпании = ИнформацияОПользователе.ИдентификаторКомпании;
	ИдентификаторПользователя = ИнформацияОПользователе.ИдентификаторПользователя;
	
	Если Не ЗначениеЗаполнено(ИдентификаторКомпании) 
		Или Не ЗначениеЗаполнено(ИдентификаторПользователя) Тогда 
		Возврат РезультатСОшибкойСнятияВакансии(Сайт);
	КонецЕсли;
	
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросHeadHunter(СтрШаблон("/employers/%1/vacancies/archived/%2", ИдентификаторКомпании, ИдентификаторВакансии), МаркерДоступа);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 204 Тогда
		Возврат РезультатСОшибкойСнятияВакансии(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция СнятиеВакансииRabota(ИдентификаторВакансии) Экспорт
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаRabota();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеRabota();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("id", ИдентификаторВакансии);
	ПараметрыЗапроса.Вставить("action", "unpublish");
	ПараметрыЗапроса.Вставить("sessionId", МаркерДоступа);
	
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросRabota(СтрШаблон("vacancies/%1", ИдентификаторВакансии), МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ПараметрыЗапроса));
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 204 Тогда
		Возврат РезультатСОшибкойСнятияВакансии(Rabota(), Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция СнятиеВакансииSuperJob(ИдентификаторВакансии) Экспорт
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаSuperJob();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеSuperJob();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросSuperJob(СтрШаблон("/2.0/vacancies/%1/archive/", ИдентификаторВакансии), МаркерДоступа);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 204 И Ответ.КодСостояния <> 403 Тогда
		Возврат РезультатСОшибкойСнятияВакансии(SuperJob(), Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция СнятиеВакансииZarplata(ИдентификаторВакансии) Экспорт
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаZarplata();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеZarplata();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросZarplata(СтрШаблон("/v1/vacancies/%1/", ИдентификаторВакансии), МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки("{""state"":0}");
	
	Ответ = Соединение.Изменить(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат РезультатСОшибкойСнятияВакансии(Zarplata(), Ответ.КодСостояния,
			ИнтеграцияРекрутинговыхСайтов.ОписаниеОшибкиЗапросаZarplata(ТекущаяСтрока));
	КонецЕсли;
	
	Возврат ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	
КонецФункции

Функция СвойстваПубликацииВакансииHeadHunter(ИдентификаторВакансии) Экспорт
	
	СвойстваПубликации = ИнтеграцияРекрутинговыхСайтов.НовыеСвойстваПубликацииВакансии();
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаHeadHunter();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеHeadHunter();
	
	Описание = ИнтеграцияРекрутинговыхСайтов.ОписаниеПубликацииВакансииHeadHunter(ИдентификаторВакансии, Соединение, МаркерДоступа, Ложь);
	Если ЗначениеЗаполнено(Описание) Тогда
		
		СвойстваПубликации.Опубликована = Не Описание.Получить("archived");
		
		Если СвойстваПубликации.Опубликована Тогда
			СвойстваПубликации.ДатаПубликации = СтрокаВДату(Описание.Получить("published_at"));
			СвойстваПубликации.ДатаОбновления = СтрокаВДату(Описание.Получить("published_at"));
		Иначе
			
			Истекает = Описание.Получить("expires_at");
			Если ЗначениеЗаполнено(Истекает) Тогда
				СвойстваПубликации.ДатаСнятияСПубликации = Мин(СтрокаВДату(Описание.Получить("expires_at")), ТекущаяДатаСеанса());
			Иначе
				СвойстваПубликации.ДатаСнятияСПубликации = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СвойстваПубликации;
	
КонецФункции

Функция СвойстваПубликацииВакансииRabota(ИдентификаторВакансии) Экспорт
	
	СвойстваПубликации = ИнтеграцияРекрутинговыхСайтов.НовыеСвойстваПубликацииВакансии();
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаRabota();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеRabota();
	
	Описание = ИнтеграцияРекрутинговыхСайтов.ОписаниеПубликацииВакансииRabota(ИдентификаторВакансии, Соединение, МаркерДоступа, Ложь);
	Если ЗначениеЗаполнено(Описание) Тогда
		
		СвойстваПубликации.Опубликована = Описание.isPublishStatus;
		
		Если СвойстваПубликации.Опубликована Тогда
			СвойстваПубликации.ДатаПубликации = СтрокаВДату(Описание.publishDate);
			СвойстваПубликации.ДатаОбновления = СтрокаВДату(Описание.modifiedDate);
		Иначе
			СвойстваПубликации.ДатаСнятияСПубликации = СтрокаВДату(Описание.modifiedDate);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СвойстваПубликации;
	
КонецФункции

Функция СвойстваПубликацииВакансииSuperJob(ИдентификаторВакансии) Экспорт
	
	СвойстваПубликации = ИнтеграцияРекрутинговыхСайтов.НовыеСвойстваПубликацииВакансии();
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаSuperJob();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеSuperJob();
	
	Описание = ИнтеграцияРекрутинговыхСайтов.ОписаниеПубликацииВакансииSuperJob(ИдентификаторВакансии, Соединение, МаркерДоступа, Ложь);
	Если ЗначениеЗаполнено(Описание) Тогда
		
		СвойстваПубликации.Опубликована = Не Описание.is_archive;
		
		СвойстваПубликации.ДатаПубликации = СекундыВДату(Описание.date_published);
		СвойстваПубликации.ДатаОбновления = СекундыВДату(Описание.date_lastedit);
		
		Если Не СвойстваПубликации.Опубликована Тогда
			СвойстваПубликации.ДатаСнятияСПубликации = СекундыВДату(Описание.date_archived);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СвойстваПубликации;
	
	Возврат Истина;
	
КонецФункции

Функция СвойстваПубликацииВакансииZarplata(ИдентификаторВакансии) Экспорт
	
	СвойстваПубликации = ИнтеграцияРекрутинговыхСайтов.НовыеСвойстваПубликацииВакансии();
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступаZarplata();
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеZarplata();
	
	Описание = ИнтеграцияРекрутинговыхСайтов.ОписаниеПубликацииВакансииZarplata(ИдентификаторВакансии, Соединение, МаркерДоступа, Ложь);
	Если Не ЗначениеЗаполнено(Описание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Вакансия = Описание["vacancies"][0];
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	СвойстваПубликации.Опубликована = (Вакансия["state"] = 1);
	СвойстваПубликации.ДатаПубликации = ИнтеграцияРекрутинговыхСайтов.ДатаПоСтрокеZarplata(Вакансия["add_date"]);
	СвойстваПубликации.ДатаОбновления = ИнтеграцияРекрутинговыхСайтов.ДатаПоСтрокеZarplata(Вакансия["mod_date"]);
	СвойстваПубликации.ДатаСнятияСПубликации = ИнтеграцияРекрутинговыхСайтов.ДатаПоСтрокеZarplata(Вакансия["archive_date"]);
	
	Возврат СвойстваПубликации;
	
КонецФункции

Функция НайтиКандидатов(ПараметрыПроцедуры, УникальныйИдентификатор, АдресХранилища) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск кандидатов'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияРекрутинговыхСайтов.ВыполнитьПоискКандидатов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	АдресХранилища = Результат.АдресРезультата;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитВакансииСоответствующийПолюПубликации(Путь, Вакансия) Экспорт
	
	Если Путь = "name" 
		Или Путь = "profession"
		Или Путь = "header"Тогда
		
		НаименованиеВакансии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Наименование");
		ПозицияСимвола = 0;
		ПозицияСимвола = СтрНайти(НаименованиеВакансии, "/");
		НаименованиеВакансии = Лев(НаименованиеВакансии, ?(ПозицияСимвола = 0, СтрДлина(НаименованиеВакансии), ПозицияСимвола - 1)); 
		
		Возврат НаименованиеВакансии;
		
	ИначеЕсли Путь = "salary.to" 
		Или Путь = "payment_to"
		Или Путь = "salaryTo"
		Или Путь = "salary_max" Тогда
		Возврат Число(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "ПредполагаемыйДоход"));
	ИначеЕсли Путь = "code" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Код");
	ИначеЕсли Путь = "work" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Обязанности");
	ИначеЕсли Путь = "compensation" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Условия");
	ИначеЕсли Путь = "candidat" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Требования");
	ИначеЕсли Путь = "description" Тогда
		
		Обязанности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Обязанности");
		Условия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Условия");
		Требования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Требования");
		
		Описание = "";
		ДобавитьАбзац(Описание, НСтр("ru = 'Обязанности:'"), Обязанности);
		ДобавитьАбзац(Описание, НСтр("ru = 'Требования:'"), Требования);
		ДобавитьАбзац(Описание, НСтр("ru = 'Условия:'"), Условия);
		
		Возврат Описание;
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьАбзац(ИсходныйТекст, ЗаголовокАбзаца, ТекстАбзаца)
	
	Если ЗначениеЗаполнено(ТекстАбзаца) Тогда
		
		Если ЗначениеЗаполнено(ИсходныйТекст) Тогда
			ИсходныйТекст = ИсходныйТекст + Символы.ПС + Символы.ПС;
		КонецЕсли;
		ИсходныйТекст = ИсходныйТекст + ЗаголовокАбзаца + Символы.ПС + ТекстАбзаца;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпубликованныеВакансииСИдентификаторами(Сайт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МестоПубликации", Сайт);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПубликацияВакансий.Вакансия КАК Вакансия,
	|	ПубликацияВакансий.ИдентификаторВакансии КАК ИдентификаторВакансии,
	|	Вакансии.Наименование КАК Наименование,
	|	Вакансии.Позиция КАК Позиция,
	|	Вакансии.Должность КАК Должность,
	|	Вакансии.Подразделение КАК Подразделение,
	|	Вакансии.ПрофильДолжности КАК ПрофильДолжности,
	|	Вакансии.ПредполагаемыйДоход КАК ПредполагаемыйДоход,
	|	Вакансии.Ответственный КАК Ответственный,
	|	Вакансии.Заявитель КАК Заявитель,
	|	Вакансии.ДатаОткрытия КАК ДатаОткрытия,
	|	Вакансии.ПланируемаяДатаЗакрытия КАК ПланируемаяДатаЗакрытия,
	|	ТекущиеСостоянияВакансий.Состояние КАК Состояние,
	|	ТекущиеСостоянияВакансий.Период КАК ДатаСостояния,
	|	Вакансии.Основание КАК Основание,
	|	Вакансии.Примечание КАК Примечание,
	|	Вакансии.СоответствуетПрофилюДолжности КАК СоответствуетПрофилюДолжности,
	|	Вакансии.Требования КАК Требования,
	|	Вакансии.Обязанности КАК Обязанности,
	|	Вакансии.Условия КАК Условия,
	|	Вакансии.Сложность КАК Сложность,
	|	Вакансии.Приоритет КАК Приоритет,
	|	Вакансии.ПричинаОткрытия КАК ПричинаОткрытия,
	|	Вакансии.СпособНабора КАК СпособНабора,
	|	Вакансии.НоваяПозиция КАК НоваяПозиция,
	|	Вакансии.УточнениеНаименования КАК УточнениеНаименования
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Вакансии КАК Вакансии
	|		ПО ПубликацияВакансий.Вакансия = Вакансии.Ссылка
	|			И (ПубликацияВакансий.МестоПубликации = &МестоПубликации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВакансий.СрезПоследних КАК ТекущиеСостоянияВакансий
	|		ПО (ТекущиеСостоянияВакансий.Вакансия = Вакансии.Ссылка)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗначениеРеквизитаПубликацииПоУмолчанию(Сайт, Вакансия, Реквизит) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		
		Если Реквизит = "Наименование" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.Получить("name")), Вакансия.Получить("name"), "");
		ИначеЕсли Реквизит = "ПредполагаемыйДоход" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.Получить("salary.to")), Вакансия.Получить("salary.to"), 0);
		ИначеЕсли Реквизит = "ДатаОткрытия" Тогда
			Возврат СтрокаВДату(Вакансия.Получить("created_at"));
		ИначеЕсли Реквизит = "ПланируемаяДатаЗакрытия" Тогда
			Возврат ДобавитьМесяц(СтрокаВДату(Вакансия.Получить("created_at")), 1);
		ИначеЕсли Реквизит = "Требования" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.Получить("description")).Требования;
		ИначеЕсли Реквизит = "Обязанности" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.Получить("description")).Обязанности;
		ИначеЕсли Реквизит = "Условия" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.Получить("description")).Условия;
		КонецЕсли;
		
	ИначеЕсли Сайт = Rabota() Тогда
		
		Если Реквизит = "Наименование" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.name), Вакансия.name, "");
		ИначеЕсли Реквизит = "ПредполагаемыйДоход" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.salaryTo), Вакансия.salaryTo, ?(ЗначениеЗаполнено(Вакансия.salaryFrom), Вакансия.salaryFrom, 0));
		ИначеЕсли Реквизит = "ДатаОткрытия" И ЗначениеЗаполнено(Вакансия.publishDate) Тогда
			Возврат СтрокаВДату(Вакансия.publishDate);
		ИначеЕсли Реквизит = "ПланируемаяДатаЗакрытия" И ЗначениеЗаполнено(Вакансия.expiresDate) Тогда
			Возврат СтрокаВДату(Вакансия.expiresDate);
		ИначеЕсли Реквизит = "Требования" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Требования;
		ИначеЕсли Реквизит = "Обязанности" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Обязанности;
		ИначеЕсли Реквизит = "Условия" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Условия;
		КонецЕсли;
		
	ИначеЕсли Сайт = SuperJob() Тогда
		
		Если Реквизит = "Наименование" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.profession), Вакансия.profession, "");
		ИначеЕсли Реквизит = "ПредполагаемыйДоход" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.payment_to), Вакансия.payment_to, 0);
		ИначеЕсли Реквизит = "ДатаОткрытия" Тогда
			Возврат СтрокаВДату(Вакансия.date_last_published);
		ИначеЕсли Реквизит = "ПланируемаяДатаЗакрытия" Тогда
			Возврат ДобавитьМесяц(СтрокаВДату(Вакансия.date_last_published), 1);
		ИначеЕсли Реквизит = "Требования" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.candidat), Вакансия.candidat, "");
		ИначеЕсли Реквизит = "Обязанности" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.work), Вакансия.work, "");
		ИначеЕсли Реквизит = "Условия" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.compensation), Вакансия.compensation ,"");
		КонецЕсли;
		
	ИначеЕсли Сайт = Zarplata() Тогда
		
		Если Реквизит = "Наименование" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.header), Вакансия.header, "");
		ИначеЕсли Реквизит = "ПредполагаемыйДоход" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.salary_min), Вакансия.salary_min, 0);
		ИначеЕсли Реквизит = "ДатаОткрытия" Тогда
			Возврат СтрокаВДату(Вакансия.add_date);
		ИначеЕсли Реквизит = "ПланируемаяДатаЗакрытия" Тогда
			Возврат ДобавитьМесяц(СтрокаВДату(Вакансия.update_date), 1);
		ИначеЕсли Реквизит = "Требования" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Требования;
		ИначеЕсли Реквизит = "Обязанности" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Обязанности;
		ИначеЕсли Реквизит = "Условия" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Условия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Реквизит = "Ответственный" Тогда
		Возврат Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	МетаданныеРеквизита = Метаданные.Справочники.Вакансии.Реквизиты.Найти(Реквизит);
	Если МетаданныеРеквизита <> Неопределено Тогда
		Если ЗначениеЗаполнено(МетаданныеРеквизита.ЗначениеЗаполнения) Тогда
			Возврат МетаданныеРеквизита.ЗначениеЗаполнения;
		КонецЕсли;
		Возврат МетаданныеРеквизита.Тип.ПривестиЗначение();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗагружаемыеРеквизитыВакансии(Сайт) Экспорт
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Наименование");
	Реквизиты.Добавить("ПредполагаемыйДоход");
	Реквизиты.Добавить("ДатаОткрытия");
	Реквизиты.Добавить("ПланируемаяДатаЗакрытия");
	Реквизиты.Добавить("Условия");
	Реквизиты.Добавить("Требования");
	Реквизиты.Добавить("Обязанности");
	
	Возврат Реквизиты;
	
КонецФункции

Функция НоваяСтепеньЗнанияЯзыка(Код) Экспорт
	
КонецФункции

Функция КонстантаИспользоватьИнтеграциюРекрутинговыхСайтов() Экспорт
	
	Возврат Константы.ИспользоватьИнтеграциюРекрутинговыхСайтов.Получить();
	
КонецФункции

Функция ОписаниеТребованийОбязанностейУсловий(Знач ОбщееОписание)
	
	ОбщееОписание = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ИзвлечьТекстИзHTML(ОбщееОписание);
	
	СвойстваОписания = Новый Структура;
	ДлинаОписания = СтрДлина(ОбщееОписание);
	
	ТаблицаРазделов = Новый ТаблицаЗначений;
	ТаблицаРазделов.Колонки.Добавить("ИндексНачала", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаРазделов.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРазделов.Колонки.Добавить("Заголовок", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	ЗаголовкиРазделов = Новый Соответствие;
	
	ЗаголовкиРазделов.Вставить("Требования", СтрРазделить("Требования:,Требования к кандидату:,Требования", ","));
	ЗаголовкиРазделов.Вставить("Обязанности", СтрРазделить("Обязанности:,Должностные обязанности:,Обязанности", ","));
	ЗаголовкиРазделов.Вставить("Условия", СтрРазделить("Условия:,Условия работы:,Условия", ","));
	
	Для Каждого ЗаголовкиРаздела Из ЗаголовкиРазделов Цикл
		
		ТекущийЗаголовок = "";
		ИндексНачала = 0;
		
		Заголовки = ЗаголовкиРаздела.Значение;
		Для Каждого Заголовок Из Заголовки Цикл
			
			ТекущийЗаголовок = Заголовок;
			ИндексНачала = СтрНайти(ОбщееОписание, ТекущийЗаголовок);
			
			Если ИндексНачала <> 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ТаблицаРазделов.Добавить();
		НоваяСтрока.Имя = ЗаголовкиРаздела.Ключ;
		НоваяСтрока.Заголовок = ТекущийЗаголовок;
		НоваяСтрока.ИндексНачала = ИндексНачала;
		
	КонецЦикла;
	
	ТаблицаРазделов.Сортировать("ИндексНачала");
	ВсегоРазделов = ТаблицаРазделов.Количество();
	
	РазделыРаспознаны = Ложь;
	ТекстПрочихУсловий = "";
	
	Для Каждого Раздел Из ТаблицаРазделов Цикл
		
		Если Раздел.ИндексНачала <> 0 Тогда
			
			Если Не РазделыРаспознаны Тогда
				
				Если Раздел.ИндексНачала <> 1 Тогда
					ТекстПрочихУсловий = СокрЛП(Сред(ОбщееОписание, 1, Раздел.ИндексНачала - 1));
				КонецЕсли;
				
				РазделыРаспознаны = Истина;
				
			КонецЕсли;
			
			ИндексНачалаОписания = Раздел.ИндексНачала + СтрДлина(Раздел.Заголовок);
			
		Иначе
			СвойстваОписания.Вставить(Раздел.Имя, "");
			Продолжить;
		КонецЕсли;
		
		КонецРаздела = ДлинаОписания;
		ИндексРаздела = ТаблицаРазделов.Индекс(Раздел);
		
		Если ИндексРаздела < ВсегоРазделов - 1 Тогда
			
			СледРаздел = ТаблицаРазделов.Получить(ИндексРаздела + 1);
			Описание = Сред(ОбщееОписание, ИндексНачалаОписания, СледРаздел.ИндексНачала - ИндексНачалаОписания);
			
		Иначе
			Описание = Сред(ОбщееОписание, ИндексНачалаОписания);
		КонецЕсли;
		
		СвойстваОписания.Вставить(Раздел.Имя, СокрЛП(Описание));
		
	КонецЦикла;
	
	Если Не РазделыРаспознаны Тогда
		ТекстПрочихУсловий = ОбщееОписание;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПрочихУсловий) Тогда
		СвойстваОписания.Условия = СвойстваОписания.Условия + Символы.ПС + ТекстПрочихУсловий;
	КонецЕсли;
	
	Возврат СвойстваОписания;
	
КонецФункции

Функция СтрокаВДату(ДатаСтрокой)
	
	Возврат Дата(СтрЗаменить(Лев(ДатаСтрокой, 10), "-", ""));
	
КонецФункции

Функция СекундыВДату(ЧислоСекунд)
	
	Возврат Дата(1970, 1, 1) + ЧислоСекунд;
	
КонецФункции

Процедура ЗаполнитьДатуСобытияВСтроке(ДанныеСтроки)
	
	ДатаСобытия = ДанныеСтроки.ДатаПубликации;
	
	СобытиеСтрокой = НСтр("ru = 'Опубликована'");
	ДатаСобытияСтрокой = "";
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаСнятияСПубликации) Тогда
		ДатаСобытия = ДанныеСтроки.ДатаСнятияСПубликации;
		СобытиеСтрокой = НСтр("ru = 'Снята с публикации'");
	Иначе
		Если ДанныеСтроки.ДатаОбновления > ДанныеСтроки.ДатаПубликации Тогда
			ДатаСобытия = ДанныеСтроки.ДатаОбновления;
			СобытиеСтрокой = НСтр("ru = 'Обновлена'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	Сегодня = НачалоДня(ТекущаяДатаСеанса());
	
	Если ДатаСобытия > Сегодня Тогда
		ДатаСобытияСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'сегодня в %1'"), 
			Формат(ДатаСобытия, "ДФ=ЧЧ:мм"));
	Иначе
		Если ДатаСобытия > НачалоДня(Сегодня - 1) Тогда
			ДатаСобытияСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'вчера в %1'"), 
				Формат(ДатаСобытия, "ДФ=ЧЧ:мм"));
		Иначе
			ДатаСобытияСтрокой = Формат(ДатаСобытия, "ДФ=ддд") + " " + Формат(ДатаСобытия, "ДЛФ=DT");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.ДатаСобытияСтрокой = СобытиеСтрокой + " " + ДатаСобытияСтрокой;
	
КонецПроцедуры

#Область Сайты

Функция HeadHunter()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter();
	
КонецФункции

Функция Rabota()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.Rabota();
	
КонецФункции

Функция SuperJob()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob();
	
КонецФункции

Функция Zarplata()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.Zarplata();
	
КонецФункции

#КонецОбласти

#Область СообщенияОбОшибках

Функция ОписаниеНеверногоНомераТелефона()
	
	Возврат НСтр("ru = 'номер телефона должен состоять из цифр (от 4 до 7). В нем не должно быть пробелов, скобок, дефисов и других лишних знаков.'");
	
КонецФункции

Функция ОписаниеНеверногоАдресаРаботы()
	
	Возврат НСтр("ru = 'проверьте обязательные для заполнения поля адреса на сайте.'");
	
КонецФункции

Функция ОписаниеНенайденнойВакансии()
	
	Возврат НСтр("ru = 'вакансия не найдена.'");
	
КонецФункции

Функция ОписаниеНезаполненногоПоля(Поле, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОписаниеОшибки = ": " + ОписаниеОшибки;
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'неверно заполнено поле ""%1""%2'"), Поле, ОписаниеОшибки);
	
КонецФункции

Функция ОписаниеНеоплаченногоПИ()
	
	Возврат НСтр("ru = 'не оплачена возможность выполнения платного метода.'");
	
КонецФункции

Функция ОписаниеНеоплаченныхУслуг()
	
	Возврат НСтр("ru = 'недостаточно оплаченных услуг.'");
	
КонецФункции

Процедура УточнитьОписаниеОшибкиHeadHunter(КодСостояния, ОписаниеОшибки)
	
	Если СтрНайти(ОписаниеОшибки, "vacancy_not_found") <> 0 Тогда
		ОписаниеОшибки = ОписаниеНенайденнойВакансии();
	ИначеЕсли СтрНайти(ОписаниеОшибки, "not_enough_purchased_services") <> 0 Тогда
		ОписаниеОшибки = ОписаниеНеоплаченныхУслуг();
	ИначеЕсли СтрНайти(ОписаниеОшибки, "api_access_payment") <> 0 Тогда
		ОписаниеОшибки = ОписаниеНеоплаченногоПИ();
	Иначе
		
		Ошибки = Новый Массив;
		ИнформацияОбОшибках = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ОписаниеОшибки);
		
		Если ТипЗнч(ИнформацияОбОшибках) = Тип("Структура") 
			И ИнформацияОбОшибках.Свойство("errors") 
			И ЗначениеЗаполнено(ИнформацияОбОшибках.errors) Тогда
			
			Если ТипЗнч(ИнформацияОбОшибках.errors) = Тип("Массив") Тогда
				Ошибки = ИнформацияОбОшибках.errors;
			Иначе
				Ошибки.Добавить(ИнформацияОбОшибках.errors);
			КонецЕсли;
			
		КонецЕсли;
		
		ПолноеОписание = "";
		Для Каждого Ошибка Из Ошибки Цикл
			
			Если КодСостояния = 400 И Ошибка.type = "bad_json_data" Тогда
				
				Поле = ИнтеграцияРекрутинговыхСайтов.ПредставлениеПоля(HeadHunter(), Ошибка.value);
				ПолноеОписание = ПолноеОписание + ?(ЗначениеЗаполнено(ПолноеОписание), Символы.ПС, "") + ОписаниеНезаполненногоПоля(Поле);
				
			Иначе
				ПолноеОписание = ПолноеОписание + ?(ЗначениеЗаполнено(ПолноеОписание), Символы.ПС, "") + Ошибка.value;
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеОшибки = ?(ЗначениеЗаполнено(ПолноеОписание), Символы.ПС + ПолноеОписание, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьОписаниеОшибкиRabota(КодСостояния, ОписаниеОшибки)
	
	ПолноеОписание = "";
	
	Если СтрНайти(ОписаниеОшибки, "phoneContainerNumber") <> 0 Тогда
		Поле = ИнтеграцияРекрутинговыхСайтов.ПредставлениеПоля(Rabota(), "phones");
		ПолноеОписание = ОписаниеНезаполненногоПоля(Поле, ОписаниеНеверногоНомераТелефона());
	КонецЕсли;
	
	Если СтрНайти(ОписаниеОшибки, "vacancy_workplace") <> 0 Тогда
		Поле = ИнтеграцияРекрутинговыхСайтов.ПредставлениеПоля(Rabota(), "address");
		ПолноеОписание = ПолноеОписание + ?(ЗначениеЗаполнено(ПолноеОписание), Символы.ПС, "") + ОписаниеНезаполненногоПоля(Поле, ОписаниеНеверногоАдресаРаботы());
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПолноеОписание) И КодСостояния = 500 Тогда
		Ошибка = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ОписаниеОшибки, Истина).Получить("error");
		Если Ошибка <> Неопределено И Ошибка.Получить("message") <> Неопределено Тогда
			ПолноеОписание = Ошибка.Получить("message");
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОшибки = ?(ЗначениеЗаполнено(ПолноеОписание), Символы.ПС + ПолноеОписание, ОписаниеОшибки);
	
КонецПроцедуры

Процедура УточнитьОписаниеОшибкиSuperJob(КодСостояния, ОписаниеОшибки)
	
	Если КодСостояния = 422 Тогда
		
		ИнформацияОбОшибках = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ОписаниеОшибки);
		
		Если ТипЗнч(ИнформацияОбОшибках) = Тип("Структура") И ИнформацияОбОшибках.Свойство("error") Тогда
			
			Если ТипЗнч(ИнформацияОбОшибках.error) = Тип("Структура") Тогда
				
				Если ТипЗнч(ИнформацияОбОшибках.error.message) = Тип("Строка") Тогда
					ОписаниеОшибки = ИнформацияОбОшибках.error.message;
				Иначе
					
					ПолноеОписание = "";
					Для Каждого ПолеИОшибкиЗаполнения Из ИнформацияОбОшибках.error.message Цикл
						
						ИмяПоля = ПолеИОшибкиЗаполнения.Ключ;
						ОшибкиЗаполнения = ПолеИОшибкиЗаполнения.Значение;
						
						Поле = ИнтеграцияРекрутинговыхСайтов.ПредставлениеПоля(SuperJob(), ИмяПоля);
						ПолноеОписание = ПолноеОписание + ?(ЗначениеЗаполнено(ПолноеОписание), Символы.ПС, "") + ОписаниеНезаполненногоПоля(Поле, ОшибкиЗаполнения[0]);
						
					КонецЦикла;
					
					ОписаниеОшибки = ?(ЗначениеЗаполнено(ПолноеОписание), Символы.ПС + ПолноеОписание, ОписаниеОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьОписаниеОшибки(Сайт, КодСостояния, ОписаниеОшибки)
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОписаниеОшибки = НСтр("ru = 'описание ошибки отсутствует.'");
	ИначеЕсли СтрНайти(ОписаниеОшибки, "token_not_found") <> 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'авторизационный токен не найден.'");
	ИначеЕсли СтрНайти(ОписаниеОшибки, "user_not_found") <> 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'пользователь не найден.'");
	ИначеЕсли КодСостояния = 404 Тогда
		ОписаниеОшибки = НСтр("ru = 'ресурс не найден.'");
	Иначе
		
		Если Сайт = HeadHunter() Тогда
			УточнитьОписаниеОшибкиHeadHunter(КодСостояния, ОписаниеОшибки);
		ИначеЕсли Сайт = Rabota() Тогда
			УточнитьОписаниеОшибкиRabota(КодСостояния, ОписаниеОшибки);
		ИначеЕсли Сайт = SuperJob() Тогда
			УточнитьОписаниеОшибкиSuperJob(КодСостояния, ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатСОшибкойСозданияВакансии(Сайт, КодСостояния = 0, ОписаниеОшибки = "")
	
	Возврат РезультатСОшибкой(НСтр("ru = 'Ошибка создания вакансии на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

Функция РезультатСОшибкойПубликацииВакансии(Сайт, КодСостояния = 0, ОписаниеОшибки = "")
	
	Возврат РезультатСОшибкой(НСтр("ru = 'Ошибка публикации вакансии на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

Функция РезультатСОшибкойОбновленияВакансии(Сайт, КодСостояния = 0, ОписаниеОшибки = "")
	
	Возврат РезультатСОшибкой(НСтр("ru = 'Ошибка обновления вакансии на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

Функция РезультатСОшибкойСнятияВакансии(Сайт, КодСостояния = 0, ОписаниеОшибки = "")
	
	Возврат РезультатСОшибкой(НСтр("ru = 'Ошибка снятия с публикации вакансии на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

Функция РезультатСОшибкой(Шаблон, Сайт, КодСостояния, Знач ОписаниеОшибки)
	
	РезультатДействия = ИнтеграцияРекрутинговыхСайтов.НовыйРезультатДействияСВакансией();
	РезультатДействия.Успешно = Ложь;
	
	УточнитьОписаниеОшибки(Сайт, КодСостояния, ОписаниеОшибки);
	РезультатДействия.ТекстОшибки = СтрШаблон(Шаблон, Сайт, КодСостояния, ОписаниеОшибки);
	
	Возврат РезультатДействия;
	
КонецФункции

Процедура СообщитьОбОшибке(Шаблон, Сайт, КодСостояния, Знач ОписаниеОшибки) Экспорт
	
	УточнитьОписаниеОшибки(Сайт, КодСостояния, ОписаниеОшибки);
	СообщитьПользователю(СтрШаблон(Шаблон, Сайт, КодСостояния, ОписаниеОшибки));
	
КонецПроцедуры

Процедура СообщитьПользователю(ТекстСообщения) Экспорт
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция ТекстОшибкиПоОписанию(Сайт, КодСостояния, ОписаниеОшибки) Экспорт
	
	Шаблон = НСтр("ru = 'Ошибка при обработке запроса к сайту %1 (%2): %3'");
	
	Возврат ТекстОшибки(Шаблон, Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

Функция ТекстОшибки(Шаблон, Сайт, КодСостояния, Знач ОписаниеОшибки) Экспорт
	
	УточнитьОписаниеОшибки(Сайт, КодСостояния, ОписаниеОшибки);
	
	Возврат СтрШаблон(Шаблон, Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

#КонецОбласти

#КонецОбласти