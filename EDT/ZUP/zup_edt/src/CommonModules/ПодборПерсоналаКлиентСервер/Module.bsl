#Область СлужебныйПрограммныйИнтерфейс

#Область Взаимодействия

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхПредметов.
Процедура ПриОпределенииВозможныхПредметов(ТипыПредметов) Экспорт
	
	ТипыПредметов.Добавить("СправочникСсылка.Кандидаты");
	
КонецПроцедуры

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхКонтактов.
Процедура ПриОпределенииВозможныхКонтактов(ТипыКонтактов) Экспорт
	
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(
		ТипыКонтактов,
		Тип("СправочникСсылка.ФизическиеЛица"),
		Истина,
		"ФизическиеЛица",
		НСтр("ru = 'Физические лица'"),
		Ложь,
		Ложь,
		"",
		Истина,
		"");
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ОбновитьДоступностьНастроекПодборПерсонала(Форма) Экспорт
	
	Форма.Элементы.ЗагрузитьДанныеИзEStaff.Доступность = Форма.ИспользоватьПодборПерсонала;
	
КонецПроцедуры

#КонецОбласти

// Конструктор структуры параметров для формы редактирования этапа работы с кандидатом.
//
Функция ПараметрыРедактированияЭтапаРаботыСКандидатом() Экспорт
	
	Параметры = Новый Структура(
		"Период, 
		|Кандидат,
		|Кандидаты,
		|ЭтапРаботы,
		|СостояниеЭтапа,
		|ШаблонАнкеты,
		|ПричинаОтклонения,
		|ТолькоПросмотр,
		|Комментарий");
	
	Параметры.Кандидаты = Новый Массив;
	
	Возврат Параметры;
		
КонецФункции

Функция ПараметрыРедактированияКомментарияКандидата() Экспорт
	
	Параметры = Новый Структура(
		"Период,
		|Пользователь,
		|Комментарий,
		|Доступность,
		|МестоПубликации");
			
	Возврат Параметры;
		
КонецФункции

// Определяет формат хранения HTML резюме кандидата.
//
Функция СтруктураHTMLРезюме() Экспорт
	
	СтруктураРезюме = Новый Структура(
		"HTML, 
		|Вложения");
	СтруктураРезюме.HTML = "";
	СтруктураРезюме.Вложения = Новый Структура;
	
	Возврат СтруктураРезюме;
	
КонецФункции

Функция РезультатУстановкиЭтапаРаботыСКандидатом() Экспорт
	
	Результат = Новый Структура(
		"Кандидаты,
		|Вакансии,
		|Участники,
		|ЭтапРаботы,
		|Напоминание,
		|Письмо,
		|СообщениеSMS,
		|Решение");
	
	Результат.ЭтапРаботы = ОписаниеЭтапаРаботыСКандидатом();
	Результат.Вакансии = Новый Массив;
	Результат.Напоминание = Новый Структура(
		"Напоминать,
		|Период,
		|ИнтервалВремени");
	Результат.Напоминание.Напоминать = Ложь;
	Результат.Письмо = Новый Структура(
		"Написать,
		|Шаблон");
	Результат.Письмо.Написать = Ложь;
	Результат.СообщениеSMS = Новый Структура(
		"Написать,
		|Шаблон");
	Результат.СообщениеSMS.Написать = Ложь;

	Результат.Решение = ОписаниеРешенияПоКандидатам();
		
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЭтапаРаботыСКандидатом() Экспорт
	
	ЭтапРаботы = Новый Структура(
		"Этап,
		|Состояние,
		|Комментарий,
		|ШаблонАнкеты,
		|Помещение,
		|Бронь,
		|Период,
		|ПериодОкончание");
		
	Возврат ЭтапРаботы;
	
КонецФункции

Функция ОписаниеСведенийВакансииДляЧатбота() Экспорт
	
	СведенияВакансии = Новый Структура(
		"Вакансия, 
		|КраткоеНаименование, 
		|Описание");
	
	Возврат СведенияВакансии;
	
КонецФункции

Функция ОписаниеПараметровОтправкиРезюме() Экспорт

	ПараметрыОтправки = Новый Структура(
		"Кандидаты, 
		|Получатели,
		|УчетнаяЗапись, 
		|ПерезаполнятьПолучателей,
		|ВложитьПрисоединенныеФайлы");
	ПараметрыОтправки.Кандидаты = Новый Массив;
	ПараметрыОтправки.Получатели = Новый Массив;
	ПараметрыОтправки.ПерезаполнятьПолучателей = Ложь;
	ПараметрыОтправки.ВложитьПрисоединенныеФайлы = Ложь;
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция ОписаниеПолучателяРезюме() Экспорт
	
	Описание = Новый Структура(
		"Контакт,
		|Представление,
		|Адрес,
		|ВариантОтправки");

	Возврат Описание;		
	
КонецФункции

Функция ВариантыОтправкиСообщенияРезюме() Экспорт
	ВариантыОтправки = Новый Структура;
	ВариантыОтправки.Вставить("Кому", НСтр("ru = 'Кому:'"));
	ВариантыОтправки.Вставить("Копия", НСтр("ru = 'Копия:'"));
	ВариантыОтправки.Вставить("СкрытаяКопия", НСтр("ru = 'Скрытая копия:'"));
	Возврат ВариантыОтправки;
КонецФункции

Процедура ЗаполнитьНаименованиеВакансии(Вакансия) Экспорт
	
	ДолжностьДляНаименования = Вакансия.Должность;
	Если Не ЗначениеЗаполнено(ДолжностьДляНаименования) Тогда
		ДолжностьДляНаименования = Вакансия.ПрофильДолжности;
	КонецЕсли;
	
	Вакансия.Наименование = НаименованиеПоДолжностиПодразделению(ДолжностьДляНаименования, Вакансия.Подразделение);
	Если ЗначениеЗаполнено(Вакансия.УточнениеНаименования) Тогда
		Вакансия.Наименование = Вакансия.Наименование + " " + Вакансия.УточнениеНаименования;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеПрофиляДолжности(ПрофильОбъект, ПрежниеРеквизиты = Неопределено) Экспорт
	
	АвтоНаименование = НаименованиеПоДолжностиПодразделению(ПрофильОбъект.Должность, ПрофильОбъект.Подразделение);
	Если Не ЗначениеЗаполнено(ПрофильОбъект.Наименование) Тогда
		ПрофильОбъект.Наименование = АвтоНаименование;
		Возврат;
	КонецЕсли;
	
	Если ПрежниеРеквизиты = Неопределено Тогда
		ПрофильОбъект.Наименование = АвтоНаименование;
		Возврат;
	КонецЕсли;
	
	ПрежнееАвтоНаименование = НаименованиеПоДолжностиПодразделению(ПрежниеРеквизиты.ПрежняяДолжность, ПрежниеРеквизиты.ПрежнееПодразделение);
	Если ПрофильОбъект.Наименование = ПрежнееАвтоНаименование Тогда
		ПрофильОбъект.Наименование = АвтоНаименование;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеРезюмеКандидата() Экспорт
	
	Структура = Новый Структура(
		"Фамилия, 
		| Имя,
		| Отчество,
		| Вакансия,
		| ФизическоеЛицо,
		| Позиция,
		| Подразделение,
		| Ответственный,
		| ДатаРегистрации,
		| ИсточникИнформации,
		| Рейтинг,
		| ОжидаемыйДоход,
		| Состояние,
		| ДатаРешения,
		| КомментарийРешения,
		| ЭтапРаботы,
		| ПричинаОтклонения,
		| УточнениеНаименования,
		| АдресРезюме,
		| ДатаРождения,
		| Пол,
		| ИНН,
		| СтраховойНомерПФР,
		| МестоРождения,
		| ИмеетНаучныеТруды,
		| ИмеетИзобретения,
		| КонтактнаяИнформация, 
		| Образование,
		| ТрудоваяДеятельность, 
		| ЗнаниеЯзыков, 
		| Гражданство,
		| СостояниеВБраке");
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок, Использование, Знач КомандыФормы) Экспорт
	
	Если ТипЗнч(КомандыФормы) <> Тип("Массив") Тогда
		КомандыФормы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КомандыФормы);
	КонецЕсли;
	
	Если Не Использование Тогда
		СнятьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок);
	Иначе
		УстановитьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок);
	КонецЕсли;
	
	Для Каждого КомандаФормы Из КомандыФормы Цикл
		КомандаФормы.Пометка = Не Использование;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок)
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано"));
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Отклонено"));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КандидатыСписок, "Состояние", СписокСостояний, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина);
	
КонецПроцедуры

Процедура СнятьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КандидатыСписок, "Состояние", , , , Ложь);
	
КонецПроцедуры

Функция НаименованиеПоДолжностиПодразделению(Должность, Подразделение) Экспорт
	
	Если Не ЗначениеЗаполнено(Должность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Строка(Должность);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 /%2/", Должность, Подразделение);
	
КонецФункции

Функция ИмяКомандыНовыйКандидатВФормеФизическиеЛица() Экспорт
	Возврат "НовыйКандидат";	
КонецФункции

Функция ОписаниеРешенияПоКандидатам() Экспорт
	
	Результат = Новый Структура(
		"Кандидаты,
		|Вакансии,
		|Решение,
		|Вакансия,
		|ДругиеКандидаты,
		|ПисьмоОдобрение,
		|СообщениеSMSОдобрение,
		|ПисьмоОтказ,
		|СообщениеSMSОтказ");

	Результат.Кандидаты = Новый Массив;
	Результат.Вакансии = Новый Массив;
	
	Результат.Решение = ОписаниеРешенияПоКандидату();
	
	Результат.Вакансия = Новый Структура(
		"ЗакрыватьВакансию,
		|Вакансия,
		|Дата");
	
	Результат.Вакансия.ЗакрыватьВакансию = Ложь;
	
	Результат.ДругиеКандидаты = Новый Структура(
		"Отклонять,
		|Кандидаты,
		|Дата");
	Результат.ДругиеКандидаты.Отклонять = Ложь;
	Результат.Кандидаты = Новый Массив;
	
	Результат.ПисьмоОдобрение = ОписаниеСообщенияПоШаблону();
	Результат.СообщениеSMSОдобрение = ОписаниеСообщенияПоШаблону();
	Результат.ПисьмоОтказ = ОписаниеСообщенияПоШаблону();
	Результат.СообщениеSMSОтказ = ОписаниеСообщенияПоШаблону();
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеСообщенияПоШаблону()
	
	Описание = Новый Структура(
		"Написать,
		|Шаблон,
		|Получатели");
	Описание.Написать = Ложь;		
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеРешенияПоКандидату() Экспорт
	
	Возврат Новый Структура(
		"Решение,
		|ДатаРешения,
		|Причина,
		|Комментарий");
		
КонецФункции

#КонецОбласти