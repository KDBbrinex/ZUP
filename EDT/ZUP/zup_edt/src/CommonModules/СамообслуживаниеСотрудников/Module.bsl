
#Область СлужебныйПрограммныйИнтерфейс

#Область БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ВремяЗавершенияРаботыПользователя", "СамообслуживаниеСотрудников.УстановитьПараметрыСеанса");
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ЗапросСправкиСотрудником);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаЕдиновременнуюКомпенсацию);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаКомандировку);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаОтпуск);
	СписокОбъектов.Добавить(Документы.ОтменаЗаявкиНаЕдиновременнуюКомпенсацию);
	СписокОбъектов.Добавить(Документы.ОтменаЗаявкиНаКомандировку);
	СписокОбъектов.Добавить(Документы.ОтменаЗаявкиНаОтпуск);
	СписокОбъектов.Добавить(Документы.СообщениеОбОтсутствии);
	СписокОбъектов.Добавить(Документы.СообщениеОНеправильныхДанныхСотрудника);
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ЗапретНаВходВПрограммуУволеннымРаботникам.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.СозданиеПользователейФизическихЛиц.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗапретНаВходВПрограммуУволеннымРаботникам.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СозданиеПользователейФизическихЛиц.ИмяМетода);
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗапретНаВходВПрограммуУволеннымРаботникам;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ЗапрещатьВходВПрограммуУволеннымСотрудникамАвтоматически;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СозданиеПользователейФизическихЛиц;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.СоздаватьПользователейДляПринятыхНаРаботуСотрудниковАвтоматически;
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfff-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗапросСправкиСотрудником);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf02-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявкаНаЕдиновременнуюКомпенсацию);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf40-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявкаНаКомандировку);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf94-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявкаНаОтпуск);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf4e-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтменаЗаявкиНаЕдиновременнуюКомпенсацию);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dc001-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтменаЗаявкиНаКомандировку);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbffe-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтменаЗаявкиНаОтпуск);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf00-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.СообщениеОбОтсутствии);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf13-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.СообщениеОНеправильныхДанныхСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf10-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыЗаявокНаЕдиновременнуюКомпенсациюСотрудникам);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf3d-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыПредоставляемыхСотрудникамСправок);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfeb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПричиныОтсутствияСотрудников);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ЗапросСправкиСотрудником, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗапросСправкиСотрудникомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаНаЕдиновременнуюКомпенсацию, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаНаЕдиновременнуюКомпенсациюПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаНаКомандировку, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаНаКомандировкуПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаНаОтпуск, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаНаОтпускПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтменаЗаявкиНаЕдиновременнуюКомпенсацию, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтменаЗаявкиНаЕдиновременнуюКомпенсациюПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтменаЗаявкиНаКомандировку, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтменаЗаявкиНаКомандировкуПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтменаЗаявкиНаОтпуск, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтменаЗаявкиНаОтпускПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СообщениеОбОтсутствии, Истина);
	Списки.Вставить(Метаданные.Справочники.СообщениеОбОтсутствииПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СообщениеОНеправильныхДанныхСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.СообщениеОНеправильныхДанныхСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ЗаявкиСотрудников, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗаявками

Процедура ПроверитьНаличиеКомандировкиПоЗаявкеСотрудника(ЗаявкаСотрудника, Сотрудник, НовыйДокумент, Отказ, ИсправленныйДокумент = Неопределено) Экспорт 
	ПроверитьНаличиеКадровогоДокументаПоЗаявкеСотрудника(ЗаявкаСотрудника, Сотрудник, НовыйДокумент, Отказ, ИсправленныйДокумент);	
КонецПроцедуры

Процедура ЗаполнитьОтпускПоЗаявкеСотрудника(Объект, ДанныеЗаполнения) Экспорт
	
	Если Не ДанныеЗаполнения.Свойство("ДанныеЗаявкиСотрудника") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОтпуска = ДанныеЗаполнения.ДанныеЗаявкиСотрудника;
	
	Объект.ЗаявкаСотрудника = ДанныеОтпуска.ЗаявкаСотрудника;
	
	Если Объект.ЭтоНовый() Тогда
		
		Объект.ПредоставитьОсновнойОтпуск = Истина;
		
		Объект.Дата = ТекущаяДатаСеанса();
		Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
		Объект.ДатаНачалаСобытия = ДанныеОтпуска.ДатаНачала;
		
		Если ЗначениеЗаполнено(ДанныеОтпуска.ФизическоеЛицо) Тогда 
			СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтпуска.ФизическоеЛицо);
			ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Ложь, Неопределено, ДанныеОтпуска.ДатаНачала);
			Если ТаблицаСотрудников.Количество() > 0 Тогда 
				Объект.Сотрудник = ТаблицаСотрудников[0].Сотрудник;
			КонецЕсли;
		КонецЕсли;	
		
		ПроизводственныйКалендарьСотрудника = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "Организация, ГрафикРаботы");
			Объект.Организация = КадровыеДанныеСотрудника[0].Организация;
			ПроизводственныйКалендарьСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанныеСотрудника[0].ГрафикРаботы, "ПроизводственныйКалендарь");
		КонецЕсли;
		
		ПланируемаяДатыВыплатыОтпуска = Документы.Отпуск.ПланируемаяДатыВыплатыОтпуска(Объект.ДатаНачалаСобытия, ПроизводственныйКалендарьСотрудника);
		Если ПланируемаяДатыВыплатыОтпуска <> Неопределено Тогда
			Объект.ПланируемаяДатаВыплаты = ПланируемаяДатыВыплатыОтпуска;
		КонецЕсли;														
	
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			
			ЗапрашиваемыеЗначения = Новый Структура;
			ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
			
			Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
				ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Объект.ДолжностьРуководителя) Тогда
				ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
			КонецЕсли; 
			
			ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "ГлавныйБухгалтер");
			ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Бухгалтер");
			
			ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "РаботникКадровойСлужбы");
			ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "ДолжностьРаботникаКадровойСлужбы");
			
			ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Объект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Объект.ПредоставитьОсновнойОтпуск Тогда 
		
		Объект.ДатаНачалаОсновногоОтпуска = ДанныеОтпуска.ДатаНачала;
		Объект.ДатаОкончанияОсновногоОтпуска = ДанныеОтпуска.ДатаОкончания;
		
		Объект.КоличествоДнейОсновногоОтпуска = ДанныеОтпуска.КоличествоДней;
		
		УстановитьПривилегированныйРежим(Истина);
		
		СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник = Объект.Сотрудник;
		СтруктураПараметров.ТекущийРегистратор = Объект.Ссылка;
		СтруктураПараметров.ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		СтруктураПараметров.ДатаНачала = Объект.ДатаНачалаОсновногоОтпуска;
		СтруктураПараметров.ДатаОкончания = Объект.ДатаОкончанияОсновногоОтпуска;
		СтруктураПараметров.ДатаКомпенсации = Объект.ПериодРегистрации;
		СтруктураПараметров.КоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсацииОсновногоОтпуска;
		ПериодОсновногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
		
		Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодОсновногоОтпуска.РабочийГодС;
		Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодОсновногоОтпуска.РабочийГодПо;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКомандировкуПоЗаявкеСотрудника(Объект, ДанныеЗаполнения) Экспорт

	Если Не ДанныеЗаполнения.Свойство("ДанныеЗаявкиСотрудника") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеКомандировки = ДанныеЗаполнения.ДанныеЗаявкиСотрудника;
	
	Объект.ЗаявкаСотрудника = ДанныеКомандировки.ЗаявкаСотрудника;
	
	Объект.ДатаНачала = ДанныеКомандировки.ДатаНачала;
	Объект.ДатаОкончания = ДанныеКомандировки.ДатаОкончания;
	Объект.МестоНазначения = ДанныеКомандировки.МестоНазначения;
	Объект.ОрганизацияНазначения = ДанныеКомандировки.ОрганизацияНазначения;
	Объект.Цель = ДанныеКомандировки.Цель;
	
	Если Не Объект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
		
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
	Объект.ДатаНачалаСобытия = ДанныеКомандировки.ДатаНачала;
	
	Если ЗначениеЗаполнено(ДанныеКомандировки.ФизическоеЛицо) Тогда 
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеКомандировки.ФизическоеЛицо);
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Ложь, Неопределено, ДанныеКомандировки.ДатаНачала);
		Если ТаблицаСотрудников.Количество() > 0 Тогда 
			Объект.Сотрудник = ТаблицаСотрудников[0].Сотрудник;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "Организация");
		Объект.Организация = КадровыеДанныеСотрудника[0].Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
	
	Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
		ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ДолжностьРуководителя) Тогда
		ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
	КонецЕсли; 
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Объект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// Процедура выполняет начальное заполнение данных подсистемы уведомлений
//
// Параметры:
//  ПараметрыОбновления  - Структура - описывает текущие параметры обновления
//
Процедура ПриНачальномЗаполненииДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("ИзменениеЗаявкиНаОтпуск");
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		ПараметрыШаблона = Новый Структура();
		
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("Тема", НСтр("ru='Заявка на отпуск - утверждена'"));
		ПараметрыШаблона.Вставить("ФорматПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru='Здравствуйте, [ДанныеУведомления.ФизическоеЛицо].
			|
			|Заявка на отпуск с [ДанныеУведомления.ДатаНачала{ДЛФ=D}] на [ДанныеУведомления.КоличествоДней] дн. - утверждена.
			|Письмо сформировано автоматически.'"));
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru='Уведомление об утверждении заявки на отпуск'"), ПараметрыШаблона);
		
		//  Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления 	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта 	= Перечисления.ВидыТранспортаУведомлений.Email;
		РассылкаОбъект.УчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		РассылкаОбъект.Наименование 	= НСтр("ru='Уведомление об утверждении заявки на отпуск'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "ФизическоеЛицо";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия;
		РассылкаОбъект.ИнтервалУведомления = 0;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет дополнить структуру видов уведомлений своими видами уведомлений. 
//
// Параметры:
//  СтруктураДоступныхВидовУведомлений - структура - перечень уведомлений, подключенных в подсистеме
//     * Ключ - Строка - Имя вида уведомления
//     * Значение - Структура - Описание вида уведомления (Структура)
//        * ВидУведомления - Строка, строковый идентификатор вида уведомления.
//        * Описание - Строка, Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//        * Инициализация - Строка, <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения
//                          запросов к базе данных.
//        * ПолучениеДанных - Строка, <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	// Заявка на отпуск
	СтруктураИзменениеЗаявкиНаОтпуск = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	СтруктураИзменениеЗаявкиНаОтпуск.ВидУведомления = НСтр("ru='Изменение заявки на отпуск'");
	СтруктураИзменениеЗаявкиНаОтпуск.GUID = "1946332a-e1a1-4887-9413-f99c7e3acda7";
	СтруктураИзменениеЗаявкиНаОтпуск.Описание = НСтр("ru='Уведомление об утверждении заявки на отпуск сотрудника.'");
	СтруктураИзменениеЗаявкиНаОтпуск.Инициализация = "СамообслуживаниеСотрудников.ИнициализацияВидаУведомленияИзменениеЗаявкиНаОтпуск";
	СтруктураИзменениеЗаявкиНаОтпуск.КатегорияСобытия = Перечисления.КатегорииВидовУведомлений.ИзменениеОбъекта;
	
	СтруктураДоступныхВидовУведомлений.Вставить("ИзменениеЗаявкиНаОтпуск", СтруктураИзменениеЗаявкиНаОтпуск);
	
КонецПроцедуры

// Позволяет переопределить имя типа шаблона сообщений по виду уведомления
//
// Параметры:
//   ИмяТипаШаблонаСообщений - Строка - имя типа предмета шаблона, которое необходимо переопределить
//   ВидУведомления - СправочникСсылка.ВидУведомления - связанный вид уведомления
Процедура ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ИзменениеЗаявкиНаОтпуск") Тогда
		ИмяТипаШаблонаСообщений = "Справочник.ФизическиеЛица";
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при подготовке шаблона сообщения и позволяет установить предмет 
// сообщения, отличный от предмета уведомления.
//
// Параметры:
//  СтрокаСообщения	 - СтрокаТЗ - строка данных уведомления, источник данных для переопределения предмета.
//  Предмет			 - ДокументСсылка, СправочникСсылка - предмет сообщения, который можно переопределить.
//
Процедура ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет) Экспорт
	
	Если СтрокаСообщения.ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ИзменениеЗаявкиНаОтпуск") Тогда
		Предмет = СтрокаСообщения.ПараметрыСобытия.Получить().ФизическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет заполнить поля, доступные для шаблона
//  соответствующего вида уведомлений.
//
// Параметры:
//  ВидУведомления           - СправочникСсылка.ВидУведомления - вид уведомления - владелец шаблона
//  Реквизиты                - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//                                      и др.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона        - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ИзменениеЗаявкиНаОтпуск") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ФизическоеЛицо", НСтр("ru='Физическое лицо'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ЗаявкаНаОтпуск", НСтр("ru='Заявка на отпуск'"), Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаОтпуск"));
		РеквизитыЗаявкаНаОтпуск = Реквизиты[Реквизиты.Количество() - 1].Строки;
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.Дата", НСтр("ru='Дата'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.ЗаявкаФизическоеЛицо", НСтр("ru='Физическое лицо'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.ДатаНачала", НСтр("ru='Дата начала'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.ДатаОкончания", НСтр("ru='Дата окончания'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.Статус", НСтр("ru='Статус'"), Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаявокСотрудников"));
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.КоличествоДней", НСтр("ru='Количество дней отпуска'"), Новый ОписаниеТипов("Число"));
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.ОписаниеОтпуска", НСтр("ru='Описание отпуска'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.Рассмотрел", НСтр("ru='Рассмотрел'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.ДатаРассмотрения", НСтр("ru='Дата рассмотрения'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.Ответственный", НСтр("ru='Ответственный'"), Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		УведомленияСервер.ДобавитьПоле(РеквизитыЗаявкаНаОтпуск, "ДанныеУведомления.Комментарий", НСтр("ru='Комментарий'"), Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет переопределить стандартную обработку заполнения прошлого состояния объекта
// и установить свою.
//
// Параметры:
//   Объект                - ДокументОбъект, СправочникОбъект  - источник события - изменившийся объект.
//   СтандартнаяОбработка  - Булево                            - признак стандартной обработки.
//
Процедура ПередЗаписьюПредметаУведомленияОбИзменениях(Объект, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаОтпуск") Тогда
		Объект.ДополнительныеСвойства.Вставить("ПрошлоеЗначениеСтатуса", Объект.Ссылка.Статус);
		Объект.ДополнительныеСвойства.Вставить("ТекущееЗначениеСтатуса", Объект.Статус);
		Объект.ДополнительныеСвойства.Вставить("ФизическоеЛицо", Объект.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет переопределить стандартную обработку события При записи объекта
// и установить свою.
//
// Параметры:
//   Объект                 - ДокументОбъект, СправочникОбъект  - источник события - изменившийся объект.
//   ЕстьРассылки           - Булево                            - признак наличия активных рассылок\
//   ДополнительныеСвойства - Структура                         - перечень параметров, сохраненных перед записью объекта.
//   СтандартнаяОбработка   - Булево                            - признак стандартной обработки.
//
Процедура ПриЗаписиПредметаУведомленияОбИзменениях(Объект, ЕстьРассылки, ДополнительныеСвойства, СтандартнаяОбработка, ВыполнятьПерезаписьПриНаличииВРегистре = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаОтпуск") Тогда
		ВыполнятьПерезаписьПриНаличииВРегистре = (ДополнительныеСвойства.ТекущееЗначениеСтатуса = Перечисления.СтатусыЗаявокСотрудников.Согласовано)
			И (ДополнительныеСвойства.ПрошлоеЗначениеСтатуса <> Перечисления.СтатусыЗаявокСотрудников.Согласовано);
		ДополнительныеСвойства.Вставить("Дата", Объект.Дата);
		ДополнительныеСвойства.Вставить("ЗаявкаФизическоеЛицо", Объект.ФизическоеЛицо);
		ДополнительныеСвойства.Вставить("ДатаНачала", Объект.ДатаНачала);
		ДополнительныеСвойства.Вставить("ДатаОкончания", Объект.ДатаОкончания);
		ДополнительныеСвойства.Вставить("Статус", Объект.Статус);
		ДополнительныеСвойства.Вставить("КоличествоДней", Объект.КоличествоДней);
		ДополнительныеСвойства.Вставить("ОписаниеОтпуска", Объект.ОписаниеОтпуска);
		ДополнительныеСвойства.Вставить("Рассмотрел", Объект.Рассмотрел);
		ДополнительныеСвойства.Вставить("ДатаРассмотрения", Объект.ДатаРассмотрения);
		ДополнительныеСвойства.Вставить("Ответственный", Объект.Ответственный);
		ДополнительныеСвойства.Вставить("Комментарий", Объект.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при формировании таблицы уведомлений по рассылкам типа "Изменение объекта"
//
// Параметры:
//    РассылкаУведомлений - СправочникСсылка.РассылкаУведомлений - обрабатываемая рассылка уведомлений.
//    ВидУведомления - СправочникСсылка.ВидыУведомлений - обрабатываемый вид уведомления
//    Предмет - СправочникСсылка, ДокументСсылка - ссылка на изменившийся объекта
//    ДатаИзменения - Дата - дата регистрации события изменения объекта.
//    ДополнительныеСвойства - Структура - Дополнительные свойства, которые были заполнены при регистрации изменения объекта
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПриСозданииУведомленийПоИзменениямОбъектов(РассылкаУведомлений, ВидУведомления, Предмет, ДатаИзменения, ДополнительныеСвойства, ТаблицаРезультата) Экспорт
	
	ИмяВидаУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидУведомления, "Имя");
	
	Если ИмяВидаУведомления = "ИзменениеЗаявкиНаОтпуск" Тогда
		ПрошлоеЗначениеСтатуса = Неопределено;
		ТекущееЗначениеСтатуса = Неопределено;
		ДополнительныеСвойства.Свойство("ПрошлоеЗначениеСтатуса", ПрошлоеЗначениеСтатуса);
		ДополнительныеСвойства.Свойство("ТекущееЗначениеСтатуса", ТекущееЗначениеСтатуса);
		Если ЗначениеЗаполнено(ПрошлоеЗначениеСтатуса) И ЗначениеЗаполнено(ТекущееЗначениеСтатуса) Тогда
			Если ПрошлоеЗначениеСтатуса <> ТекущееЗначениеСтатуса И ТекущееЗначениеСтатуса = Перечисления.СтатусыЗаявокСотрудников.Согласовано Тогда
				СтрокаРезультата = ТаблицаРезультата.Добавить();
				СтрокаРезультата.Предмет = Предмет;
				СтрокаРезультата.ДатаСобытия = ДатаИзменения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Изменение заявки на отпуск"
// 
// Параметры:
//    ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//       * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//       * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//          * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                           и совпадать с одним из полей данных уведомления
//          * Представление - Строка - пользовательское представление поля отбора
//          * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//       * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком
//                                        Значение получателей будет выбрано из данных уведомления
//          * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                           и совпадать с одним из полей данных уведомления
//          * Представление - Строка - пользовательское представление получателя
//          * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияВидаУведомленияИзменениеЗаявкиНаОтпуск(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаОтпуск");
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "ФизическоеЛицо",	НСтр("ru='Инициатор заявки на отпуск'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФизическоеЛицоПользователя(Пользователь = Неопределено) Экспорт 
	
	Если Пользователь = Неопределено Тогда 
		Пользователь = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Возврат ФизическоеЛицо;
	
КонецФункции

Функция ПользователиФизическихЛиц(СписокФизическихЛиц) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Недействителен КАК Недействителен,
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
		|	Пользователи.ИдентификаторПользователяСервиса КАК ИдентификаторПользователяСервиса
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо В(&СписокФизическихЛиц)
		|ИТОГИ ПО
		|	ФизическоеЛицо";
				   
	ВыборкаПоФизическимЛицам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПользователиФизическихЛиц = Новый Соответствие;
	Пока ВыборкаПоФизическимЛицам.Следующий() Цикл 
		СписокПользователей = Новый Массив;
		Выборка = ВыборкаПоФизическимЛицам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеПользователя = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеПользователя();
			ЗаполнитьЗначенияСвойств(ОписаниеПользователя, Выборка);
			СписокПользователей.Добавить(ОписаниеПользователя);
		КонецЦикла;
		ПользователиФизическихЛиц.Вставить(ВыборкаПоФизическимЛицам.ФизическоеЛицо, СписокПользователей);
	КонецЦикла;
	
	Возврат ПользователиФизическихЛиц;
	
КонецФункции

Функция ГруппыДоступаПользователей(СписокПользователей) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
	               |	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Пользователь В(&СписокПользователей)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Пользователь";
				   
	ГруппыДоступа = Новый Соответствие;			   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл 
		МассивГруппДоступа = Новый Массив;
		ГруппыДоступа.Вставить(Выборка.Пользователь, МассивГруппДоступа);
		Пока Выборка.Следующий() Цикл 
			МассивГруппДоступа.Добавить(Выборка.ГруппаДоступа);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ГруппыДоступа;
	
КонецФункции

Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыСамообслуживание(ОписанияПрофилей, ПараметрыОбновления) Экспорт 

	ОписаниеПрофиля = ОписаниеПрофиляСотрудник();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Функция ОписаниеПрофиляСотрудник()

	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСотрудник();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Сотрудник'");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗапросовСправокСотрудником");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаЕдиновременнуюКомпенсацию");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаКомандировку");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБронированияКомандировок", "ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаОтпуск");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСообщенийОбОтсутствии");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСообщенийОНеправильныхДанныхСотрудника");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОткликовНаОткрытыеПубликации");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаСамообслуживание");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеСамообслуживаниеСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаСотрудник");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВидовЗаявокНаЕдиновременнуюКомпенсациюСотрудникам");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВидовПредоставляемыхСотрудникамСправок");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаЗаявокСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаЕдиновременнуюКомпенсацию");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаКомандировку");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаОтпуск");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийОбОтсутствии");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийОНеправильныхДанныхСотрудника");
	// Электронное обучение.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЭлектронногоОбучения", "ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзучениеЭлектронныхКурсов");	
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ИдентификаторПрофиляСотрудник()
	
	Возврат "cb5c7284-4955-11e4-ac39-c86000df10c6";
	
КонецФункции

Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ВремяЗавершенияРаботыПользователя" Тогда
		
		УстановитьПараметрСеансаВремяЗавершенияРаботыПользователя();
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ВремяЗавершенияРаботыПользователя");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаВремяЗавершенияРаботыПользователя()
	
	ПараметрыСеанса.ВремяЗавершенияРаботыПользователя = Дата(1, 1, 1);
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьПродолжительностьСеансаПользователей") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда 
		Возврат;
	КонецЕсли;
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|ПОМЕСТИТЬ ВТГруппыДоступаПользователя
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			И (СоставыГруппПользователей.Пользователь = &Пользователь)
		|			И (СоставыГруппПользователей.Используется)
		|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыДоступаПользователя.ГруппаДоступа КАК ГруппаДоступа
		|ИЗ
		|	ВТГруппыДоступаПользователя КАК ГруппыДоступаПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыДоступаБезОграниченияПродолжительностиСеанса КАК ГруппыДоступаБезОграниченияПродолжительностиСеанса
		|		ПО ГруппыДоступаПользователя.ГруппаДоступа = ГруппыДоступаБезОграниченияПродолжительностиСеанса.ГруппаДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыДоступаПользователя.ГруппаДоступа КАК ГруппаДоступа,
		|	МАКСИМУМ(ПродолжительностьСеансаГруппДоступа.ПродолжительностьСеанса) КАК ПродолжительностьСеанса
		|ИЗ
		|	ВТГруппыДоступаПользователя КАК ГруппыДоступаПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПродолжительностьСеансаГруппДоступа КАК ПродолжительностьСеансаГруппДоступа
		|		ПО ГруппыДоступаПользователя.ГруппаДоступа = ПродолжительностьСеансаГруппДоступа.ГруппаДоступа
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыДоступаПользователя.ГруппаДоступа";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатыЗапроса[1].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатыЗапроса[2].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Если Выборка.Следующий() Тогда 
		ПараметрыСеанса.ВремяЗавершенияРаботыПользователя = ТекущаяДатаСеанса() + Выборка.ПродолжительностьСеанса * 60;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииПараметровБлокировкиСеансов(ПараметрыБлокировки) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьПродолжительностьСеансаПользователей") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ВремяЗавершенияРаботыПользователя) Тогда 
		
		НачалоБлокировки = ПараметрыБлокировки.Начало;
		
		Если Не ЗначениеЗаполнено(НачалоБлокировки) Или НачалоБлокировки > ПараметрыСеанса.ВремяЗавершенияРаботыПользователя Тогда
			
			ПараметрыБлокировки.Начало = ПараметрыСеанса.ВремяЗавершенияРаботыПользователя;
			ПараметрыБлокировки.Установлена = Истина;
			ПараметрыБлокировки.ПерезапуститьПриЗавершении = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт 
	
	Параметры.Вставить("ПревышеноМаксимальноеКоличествоСоединений", Ложь);
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьКоличествоОдновременныхСеансовПользователей") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	               |ПОМЕСТИТЬ ВТГруппыДоступаПользователя
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Пользователь = &Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователя.ГруппаДоступа
	               |ИЗ
	               |	ВТГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыДоступаБезОграниченийНаКоличествоСеансов КАК ГруппыДоступаБезОграниченийНаКоличествоСеансов
	               |		ПО ГруппыДоступаПользователя.ГруппаДоступа = ГруппыДоступаБезОграниченийНаКоличествоСеансов.ГруппаДоступа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователя.ГруппаДоступа
	               |ИЗ
	               |	ВТГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоОдновременныхСеансовГруппДоступа КАК КоличествоОдновременныхСеансовГруппДоступа
	               |		ПО ГруппыДоступаПользователя.ГруппаДоступа = КоличествоОдновременныхСеансовГруппДоступа.ГруппаДоступа";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Пользователь входит в группу доступа, которая не подпадает под ограничение на количество сеансов.
	Если Не РезультатыЗапроса[1].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	// Ни для одной из групп доступа, в которые входит пользователь, ограничение не установлено.
	Если РезультатыЗапроса[2].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппыДоступаПользователя = Новый Массив;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ГруппыДоступаПользователя.Добавить(Выборка.ГруппаДоступа);
	КонецЦикла;
	
	СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	
	ИдентификаторыПользователейИБ = Новый Массив;
	КоличествоТекущихСеансов = Новый Соответствие;
	
	Для Каждого СеансИБ Из СеансыИБ Цикл
		
		Если СеансИБ.ИмяПриложения = "SrvrConsole" Или СеансИБ.ИмяПриложения = "BackgroundJob" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СеансИБ.Пользователь <> Неопределено Тогда
			КоличествоАктивныхСеансов = КоличествоТекущихСеансов[СеансИБ.Пользователь.УникальныйИдентификатор];
			Если КоличествоАктивныхСеансов = Неопределено Тогда 
				ИдентификаторыПользователейИБ.Добавить(СеансИБ.Пользователь.УникальныйИдентификатор);
				КоличествоТекущихСеансов.Вставить(СеансИБ.Пользователь.УникальныйИдентификатор, 1);
			Иначе 
				КоличествоТекущихСеансов[СеансИБ.Пользователь.УникальныйИдентификатор] = КоличествоАктивныхСеансов + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИдентификаторыПользователейИБ", ИдентификаторыПользователейИБ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.ИдентификаторПользователяИБ В(&ИдентификаторыПользователейИБ)";
				   
	АктивныеСеансыПользователей = Новый ТаблицаЗначений;
	АктивныеСеансыПользователей.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	АктивныеСеансыПользователей.Колонки.Добавить("КоличествоАктивныхСеансов", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АктивныеСеансыПользователей.Добавить();
		НоваяСтрока.Пользователь = Выборка.Пользователь;
		НоваяСтрока.КоличествоАктивныхСеансов = КоличествоТекущихСеансов[Выборка.ИдентификаторПользователяИБ];
	КонецЦикла;
	
	Запрос.УстановитьПараметр("АктивныеСеансыПользователей", АктивныеСеансыПользователей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	АктивныеСеансыПользователей.Пользователь КАК Пользователь,
	               |	АктивныеСеансыПользователей.КоличествоАктивныхСеансов КАК КоличествоАктивныхСеансов
	               |ПОМЕСТИТЬ ВТПользователи
	               |ИЗ
	               |	&АктивныеСеансыПользователей КАК АктивныеСеансыПользователей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
	               |	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	               |ПОМЕСТИТЬ ВТГруппыДоступаПользователей
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователи КАК Пользователи
	               |		ПО ГруппыДоступаПользователи.Пользователь = Пользователи.Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГруппыДоступаПользователей.Пользователь
	               |ПОМЕСТИТЬ ВТПользователиВнеЛимита
	               |ИЗ
	               |	ВТГруппыДоступаПользователей КАК ГруппыДоступаПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыДоступаБезОграниченийНаКоличествоСеансов КАК ГруппыДоступаБезОграниченийНаКоличествоСеансов
	               |		ПО ГруппыДоступаПользователей.ГруппаДоступа = ГруппыДоступаБезОграниченийНаКоличествоСеансов.ГруппаДоступа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователей.Пользователь КАК Пользователь,
	               |	ГруппыДоступаПользователей.ГруппаДоступа КАК ГруппаДоступа
	               |ПОМЕСТИТЬ ВТОграничениеКоличестваСеансов
	               |ИЗ
	               |	ВТГруппыДоступаПользователей КАК ГруппыДоступаПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоОдновременныхСеансовГруппДоступа КАК КоличествоОдновременныхСеансовГруппДоступа
	               |		ПО ГруппыДоступаПользователей.ГруппаДоступа = КоличествоОдновременныхСеансовГруппДоступа.ГруппаДоступа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПользователиВнеЛимита КАК ПользователиВнеЛимита
	               |		ПО ГруппыДоступаПользователей.Пользователь = ПользователиВнеЛимита.Пользователь
	               |ГДЕ
	               |	ПользователиВнеЛимита.Пользователь ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОграничениеКоличестваСеансов.Пользователь КАК Пользователь,
	               |	КОЛИЧЕСТВО(ОграничениеКоличестваСеансов.ГруппаДоступа) КАК КоличествоГруппДоступа
	               |ПОМЕСТИТЬ ВТКоличествоГруппДоступаПользователей
	               |ИЗ
	               |	ВТОграничениеКоличестваСеансов КАК ОграничениеКоличестваСеансов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОграничениеКоличестваСеансов.Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОграничениеКоличестваСеансов.ГруппаДоступа КАК ГруппаДоступа,
	               |	СУММА(Пользователи.КоличествоАктивныхСеансов) КАК КоличествоПользователей
	               |ПОМЕСТИТЬ ВТИспользованныеСеансыГруппДоступа
	               |ИЗ
	               |	ВТОграничениеКоличестваСеансов КАК ОграничениеКоличестваСеансов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоГруппДоступаПользователей КАК КоличествоГруппДоступаПользователей
	               |		ПО ОграничениеКоличестваСеансов.Пользователь = КоличествоГруппДоступаПользователей.Пользователь
	               |			И (КоличествоГруппДоступаПользователей.КоличествоГруппДоступа = 1)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователи КАК Пользователи
	               |		ПО ОграничениеКоличестваСеансов.Пользователь = Пользователи.Пользователь
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОграничениеКоличестваСеансов.ГруппаДоступа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоОдновременныхСеансовГруппДоступа.ГруппаДоступа,
	               |	КоличествоОдновременныхСеансовГруппДоступа.КоличествоСеансов - ЕСТЬNULL(ИспользованныеСеансыГруппДоступа.КоличествоПользователей, 0) КАК КоличествоДоступныхСеансов
	               |ИЗ
	               |	РегистрСведений.КоличествоОдновременныхСеансовГруппДоступа КАК КоличествоОдновременныхСеансовГруппДоступа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТИспользованныеСеансыГруппДоступа КАК ИспользованныеСеансыГруппДоступа
	               |		ПО КоличествоОдновременныхСеансовГруппДоступа.ГруппаДоступа = ИспользованныеСеансыГруппДоступа.ГруппаДоступа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОграничениеКоличестваСеансов.Пользователь КАК Пользователь,
	               |	ОграничениеКоличестваСеансов.ГруппаДоступа КАК ГруппаДоступа,
	               |	Пользователи.КоличествоАктивныхСеансов КАК КоличествоАктивныхСеансов,
	               |	КоличествоГруппДоступаПользователей.КоличествоГруппДоступа КАК КоличествоГруппДоступа
	               |ИЗ
	               |	ВТОграничениеКоличестваСеансов КАК ОграничениеКоличестваСеансов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоГруппДоступаПользователей КАК КоличествоГруппДоступаПользователей
	               |		ПО ОграничениеКоличестваСеансов.Пользователь = КоличествоГруппДоступаПользователей.Пользователь
	               |			И (КоличествоГруппДоступаПользователей.КоличествоГруппДоступа > 1)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователи КАК Пользователи
	               |		ПО ОграничениеКоличестваСеансов.Пользователь = Пользователи.Пользователь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КоличествоГруппДоступа,
	               |	Пользователь,
	               |	ГруппаДоступа";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	КоличествоРезультатов = РезультатыЗапроса.Количество();
	
	КоличествоДоступныхСеансов = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[КоличествоРезультатов - 2].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		КоличествоДоступныхСеансов.Вставить(Выборка.ГруппаДоступа, Выборка.КоличествоДоступныхСеансов);
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[КоличествоРезультатов - 1].Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл
		
		ГруппыДоступаПользователя = Новый Массив;
		КоличествоАктивныхСеансов = 0;
		
		Пока Выборка.Следующий() Цикл 
			ГруппыДоступаПользователя.Добавить(Выборка.ГруппаДоступа);
		    КоличествоАктивныхСеансов = Выборка.КоличествоАктивныхСеансов;
		КонецЦикла;
		
		Для Сч = 1 По КоличествоАктивныхСеансов Цикл 
			
			ГруппаДоступа = Неопределено;
			КоличествоСеансов = 0;
			
			Для Каждого ГруппаДоступаПользователя Из ГруппыДоступаПользователя Цикл 
				ОсталосьСеансов = КоличествоДоступныхСеансов[ГруппаДоступаПользователя];
				Если ГруппаДоступа = Неопределено Или ОсталосьСеансов > КоличествоСеансов Тогда 
					ГруппаДоступа = ГруппаДоступаПользователя;
					КоличествоСеансов = ОсталосьСеансов;
				КонецЕсли;
			КонецЦикла;
			
			КоличествоДоступныхСеансов[ГруппаДоступа] = КоличествоСеансов - 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из КоличествоДоступныхСеансов Цикл 
		Если КлючИЗначение.Значение < 0 Тогда
			Параметры.Вставить("ПревышеноМаксимальноеКоличествоСоединений", Истина);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОграниченияПродолжительностиСеансаПоУмолчанию() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСамообслуживанияСотрудников.ОграничиватьПродолжительностьСеансаПользователей КАК ОграничиватьПродолжительностьСеансаПользователей
		|ИЗ
		|	РегистрСведений.НастройкиСамообслуживанияСотрудников КАК НастройкиСамообслуживанияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.ГруппыДоступаБезОграниченияПродолжительностиСеанса КАК ГруппыДоступаБезОграниченияПродолжительностиСеанса";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОграничиватьПродолжительностьСеансаПользователей = Ложь;
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда 
		ОграничиватьПродолжительностьСеансаПользователей = Выборка.ОграничиватьПродолжительностьСеансаПользователей;
	КонецЕсли;
	
	Если Не ОграничиватьПродолжительностьСеансаПользователей Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не РезультатыЗапроса[1].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПоставляемыхДанных = ИдентификаторыПоставляемыхПрофилейДоступа();
	ПрофильСотрудник = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(ИдентификаторПрофиляСотрудник());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыПоставляемыхДанных", ИдентификаторыПоставляемыхДанных);
	Запрос.УстановитьПараметр("ПрофильСотрудник", ПрофильСотрудник);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДоступа.Ссылка КАК ГруппаДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|		ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
		|			И (ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных В (&ИдентификаторыПоставляемыхДанных))
		|			И (ПрофилиГруппДоступа.Ссылка <> &ПрофильСотрудник)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыДоступа.Ссылка КАК ГруппаДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Профиль = &ПрофильСотрудник";
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Группы доступа без ограничения продолжительности сеанса
	НаборЗаписей = РегистрыСведений.ГруппыДоступаБезОграниченияПродолжительностиСеанса.СоздатьНаборЗаписей();
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// Продолжительность сеанса групп доступа
	НаборЗаписей = РегистрыСведений.ПродолжительностьСеансаГруппДоступа.СоздатьНаборЗаписей();
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.ГруппаДоступа = Выборка.ГруппаДоступа;
		НоваяСтрока.ПродолжительностьСеанса = 10;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьОграниченияНаКоличествоСеансовПоУмолчанию() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСамообслуживанияСотрудников.ОграничиватьКоличествоОдновременныхСеансовПользователей
	               |ИЗ
	               |	РегистрСведений.НастройкиСамообслуживанияСотрудников КАК НастройкиСамообслуживанияСотрудников
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	РегистрСведений.ГруппыДоступаБезОграниченийНаКоличествоСеансов КАК ГруппыДоступаБезОграниченийНаКоличествоСеансов";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОграничиватьКоличествоОдновременныхСеансовПользователей = Ложь;
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда 
		ОграничиватьКоличествоОдновременныхСеансовПользователей = Выборка.ОграничиватьКоличествоОдновременныхСеансовПользователей;
	КонецЕсли;
	
	Если Не ОграничиватьКоличествоОдновременныхСеансовПользователей Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не РезультатыЗапроса[1].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПоставляемыхДанных = ИдентификаторыПоставляемыхПрофилейДоступа();
	ПрофильСотрудник = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(ИдентификаторПрофиляСотрудник());
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИдентификаторыПоставляемыхДанных", ИдентификаторыПоставляемыхДанных);
	Запрос.УстановитьПараметр("ПрофильСотрудник", ПрофильСотрудник);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка КАК ГруппаДоступа
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	               |		ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
	               |			И (ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных В (&ИдентификаторыПоставляемыхДанных))
	               |			И (ПрофилиГруппДоступа.Ссылка <> &ПрофильСотрудник)";
				   
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Группы доступа без ограничений на количество сеансов
	НаборЗаписей = РегистрыСведений.ГруппыДоступаБезОграниченийНаКоличествоСеансов.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// Количество одновременных сеансов групп доступа
	НаборЗаписей = РегистрыСведений.КоличествоОдновременныхСеансовГруппДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ИдентификаторыПоставляемыхПрофилейДоступа()
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей();
	
	ИдентификаторыПоставляемыхДанных = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПоставляемыеПрофили.ОписанияПрофилей Цикл 
		СвойстваПрофиля = КлючИЗначение.Значение;
	    ИдентификаторыПоставляемыхДанных.Добавить(Новый УникальныйИдентификатор(СвойстваПрофиля.Идентификатор));
	КонецЦикла;
	
	Возврат ИдентификаторыПоставляемыхДанных;
	
КонецФункции

Процедура ПриУстановкеНастройкиИспользоватьПубликацииМероприятийОбученияРазвития(ИспользоватьПубликацииМероприятийОбученияРазвития) Экспорт
	
	ИспользоватьЭлектронноеОбучение = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеОбучение");
	УстановитьИспользованиеМоегоОбученияРазвития(ИспользоватьЭлектронноеОбучение, ИспользоватьПубликацииМероприятийОбученияРазвития);
	
КонецПроцедуры

Процедура УстановитьИспользованиеМоегоОбученияРазвития(ИспользоватьЭлектронноеОбучение, ИспользоватьПубликацииМероприятийОбученияРазвития) Экспорт
	
	ИспользоватьМоеОбучениеРазвитие = (ИспользоватьЭлектронноеОбучение Или ИспользоватьПубликацииМероприятийОбученияРазвития);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьСамообслуживаниеСотрудников.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиСамообслуживанияСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 
		Или НаборЗаписей[0].ИспользоватьМоеОбучениеРазвитие = ИспользоватьМоеОбучениеРазвитие Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей[0].ИспользоватьМоеОбучениеРазвитие = ИспользоватьМоеОбучениеРазвитие;
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область РаботаСЗаявками

Процедура ПроверитьНаличиеОтпускаПоЗаявкеСотрудника(ЗаявкаСотрудника, Сотрудник, НовыйДокумент, Отказ, ИсправленныйДокумент = Неопределено) Экспорт 
	ПроверитьНаличиеКадровогоДокументаПоЗаявкеСотрудника(ЗаявкаСотрудника, Сотрудник, НовыйДокумент, Отказ, ИсправленныйДокумент);	
КонецПроцедуры

Процедура ПроверитьНаличиеКадровогоДокументаПоЗаявкеСотрудника(ЗаявкаСотрудника, Сотрудник, НовыйДокумент, Отказ, ИсправленныйДокумент = Неопределено)

	Если Не ЗначениеЗаполнено(ЗаявкаСотрудника) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаСотрудника", ЗаявкаСотрудника);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("НовыйДокумент", НовыйДокумент);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыПоЗаявке.Ссылка КАК Регистратор
		|ИЗ
		|	#ТаблицаДокумента КАК ДокументыПоЗаявке
		|ГДЕ
		|	ДокументыПоЗаявке.ЗаявкаСотрудника = &ЗаявкаСотрудника
		|	И ДокументыПоЗаявке.Сотрудник = &Сотрудник
		|	И ДокументыПоЗаявке.Ссылка <> &НовыйДокумент
		|	И ДокументыПоЗаявке.Ссылка <> &ИсправленныйДокумент";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", ОбщегоНазначения.ИмяТаблицыПоСсылке(НовыйДокумент));
	
	УстановитьПривилегированныйРежим(Истина);			   
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда 
		ТекстСообщения = НСтр("ru = 'По заявке сотрудника %1 уже оформлен кадровый приказ %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗаявкаСотрудника, Выборка.Регистратор);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ЗаявкаСотрудника", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция КадровыеПриказыЗаявокСотрудников(СписокЗаявокСотрудников)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаявокСотрудников", СписокЗаявокСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОтпуска.Ссылка КАК Регистратор,
		|	ДокументыОтпуска.ЗаявкаСотрудника КАК ЗаявкаСотрудника
		|ИЗ
		|	Документ.Отпуск КАК ДокументыОтпуска
		|ГДЕ
		|	ДокументыОтпуска.ЗаявкаСотрудника В(&СписокЗаявокСотрудников)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыКомандировки.Ссылка,
		|	ДокументыКомандировки.ЗаявкаСотрудника
		|ИЗ
		|	Документ.Командировка КАК ДокументыКомандировки
		|ГДЕ
		|	ДокументыКомандировки.ЗаявкаСотрудника В(&СписокЗаявокСотрудников)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	КадровыеПриказы = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		КадровыеПриказы.Вставить(Выборка.ЗаявкаСотрудника, Выборка.Регистратор);
	КонецЦикла;
	
	Возврат КадровыеПриказы;
	
КонецФункции

Функция КадровыйПриказЗаявкиНаКомандировку(ЗаявкаСотрудника) Экспорт 
	
	СписокЗаявокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаявкаСотрудника);
	КадровыеПриказы = КадровыеПриказыЗаявокСотрудников(СписокЗаявокСотрудников);
	 
	Возврат КадровыеПриказы[ЗаявкаСотрудника];
	 
КонецФункции

Функция КадровыйПриказЗаявкиНаОтпуск(ЗаявкаСотрудника) Экспорт 
	
	СписокЗаявокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаявкаСотрудника);
	КадровыеПриказы = КадровыеПриказыЗаявокСотрудников(СписокЗаявокСотрудников);
	 
	Возврат КадровыеПриказы[ЗаявкаСотрудника];
	 
КонецФункции
 
Процедура УстановитьСтатусЗаявки(Объект, РежимЗаписи) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ЗначениеЗаполнено(Объект.Статус) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Подготовлено;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Согласовано Тогда
		УстановитьПривилегированныйРежим(Истина);
		Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Рассматривается;
		Объект.Рассмотрел = Неопределено;
		Объект.ДатаРассмотрения = Неопределено;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКадровыйПриказЗаявки(Форма) Экспорт 
	
	Объект = Форма.Объект;
	
	Форма.КадровыйПриказ = Неопределено;
	Форма.КадровыйПриказИсправленногоДокумента = Неопределено;
	Форма.ДоступноИсправлениеКадровогоПриказаИсправленногоДокумента = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	Заявки = Новый Массив;
	Заявки.Добавить(Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Заявки.Добавить(Объект.ИсправленныйДокумент);
	КонецЕсли;
	
	КадровыеПриказы = КадровыеПриказыЗаявокСотрудников(Заявки);
	
	// Кадровый приказ текущей заявки.
	Форма.КадровыйПриказ = КадровыеПриказы[Объект.Ссылка];
	
	// Кадровый приказ исправленной заявки.
	КадровыйПриказ = КадровыеПриказы[Объект.ИсправленныйДокумент];
	Если КадровыйПриказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КадровыйПриказ, "Организация, ПериодРегистрации");
	Рекомендация = ИсправлениеДокументовЗарплатаКадры.РекомендацияПоИсправлениюРасчетногоДокумента(
		КадровыйПриказ, 
		ЗначенияРеквизитов.Организация, 
		ЗначенияРеквизитов.ПериодРегистрации, 
		Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма.КадровыйПриказИсправленногоДокумента = КадровыйПриказ;
	Форма.ДоступноИсправлениеКадровогоПриказаИсправленногоДокумента = Рекомендация.РекомендованоИсправление;
	
КонецПроцедуры

Процедура ГруппаИсправлениеДополнитьФорму(Форма) Экспорт 
	
	Элементы = Форма.Элементы;
	ГруппаОтмена = Элементы.ГруппаОтмена;
	ГруппаИсправление = Элементы.ГруппаИсправление;
	
	// Добавление реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	
	ИмяДокументаОтмены = ИмяДокументаОтменыЗаявки(Форма.Объект.Ссылка);
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтменаИнфоНадпись", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументОтменен", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументОтменаЗаявки", Новый ОписаниеТипов("ДокументСсылка." + ИмяДокументаОтмены)));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	// Добавление команд и элементов
	ИмяКоманды = "Отменить";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Отменить'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Вставить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление, Элементы.Найти("ИсправлениеКартинка"));
		Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти("ОтменаКартинка") = Неопределено Тогда
		Элемент = Элементы.Добавить("ОтменаКартинка", Тип("ДекорацияФормы"), ГруппаОтмена);
		Элемент.Вид = ВидДекорацииФормы.Картинка;
		Элемент.Картинка = БиблиотекаКартинок.Предупреждение;
		Элемент.Ширина = 2;
		Элемент.Высота = 1;
	КонецЕсли;
	
	Если Элементы.Найти("ОтменаИнфоНадпись") = Неопределено Тогда
		Элемент = Элементы.Добавить("ОтменаИнфоНадпись", Тип("ПолеФормы"), ГруппаОтмена);
		Элемент.ПутьКДанным = "ОтменаИнфоНадпись";
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		Элемент.Высота = 3;
		Элемент.РастягиватьПоВертикали = Ложь;
	КонецЕсли;
	
	ИмяКоманды = "ПерейтиКДокументуОтмены";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Открыть документ отмены'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаОтмена);
		Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Ширина = 11;
		Элемент.Высота = 3;
	КонецЕсли;
	
	ИмяКоманды = "Отозвать";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Отозвать'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Форма.КоманднаяПанель);
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	ГруппаСогласование = Элементы.Найти("ГруппаСогласование");
	
	ИмяКоманды = "Согласовать";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Согласовать'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаСогласование);
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	ИмяКоманды = "Отклонить";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Отклонить'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаСогласование);
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьРеквизитыИсправления(Форма) Экспорт 
	
	Форма.ДокументОтменен = Ложь;
	Форма.ДокументОтменаЗаявки = Неопределено;
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяДокументаОтмены = ИмяДокументаОтменыЗаявки(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ." + ИмяДокументаОтмены + " КАК Документ
	|ГДЕ
	|	Документ.ЗаявкаСотрудника = &Ссылка
	|	И Документ.Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Форма.ДокументОтменен = Истина;
		Форма.ДокументОтменаЗаявки = Выборка.Ссылка;
	КонецЕсли;
	
	Форма.ТолькоПросмотр = Форма.ТолькоПросмотр Или Форма.ДокументОтменен;
			
КонецПроцедуры

Процедура УстановитьПоляИсправления(Форма, КадровыйПриказ = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(КадровыйПриказ) И Не ЗначениеЗаполнено(Форма.ДокументИсправление) Тогда 
		Форма.Элементы.ИсправлениеКартинка.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'На основании заявки оформлен кадровый приказ. Воспользуйтесь командой Исправить для исправления этого документа или Отменить для его отмены.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ДокументОтменаЗаявки) Тогда 
		Форма.ОтменаИнфоНадпись = НСтр("ru = 'Документ отменен и его редактирование невозможно.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовЗаявки(Форма, КадровыйПриказ = Неопределено) Экспорт 
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПриказОформлен = ЗначениеЗаполнено(КадровыйПриказ);
	ЕстьИсправленныйДокумент = ЗначениеЗаполнено(Объект.ИсправленныйДокумент);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаИсправление", "Видимость", Не Форма.ДокументОтменен И Объект.Проведен И (ПриказОформлен Или ЕстьИсправленныйДокумент));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтмена", "Видимость", Форма.ДокументОтменен);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ДоступноСогласование = МенеджерОбъекта.ДоступноСогласованиеДокумента();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Согласовать", "Видимость", ДоступноСогласование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Отклонить", "Видимость", ДоступноСогласование);
	
	ДокументРассмотрен = Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Отклонено Или Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Согласовано;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтатус", "Видимость", ДокументРассмотрен И Не Форма.ДокументОтменен);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерейтиКДокументуОтмены", "Видимость", Форма.ДокументОтменен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Отменить", "Видимость", Не ЗначениеЗаполнено(Форма.ДокументИсправление));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФизическоеЛицо", "ТолькоПросмотр", Форма.РежимМоиЗаявки);
	
	Если ПриказОформлен Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяДокументаОтменыЗаявки(ЗаявкаСотрудника)
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ЗаявкаСотрудника);
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяТаблицы, ".");
	ИмяДокумента = ЧастиИмени[ЧастиИмени.Количество()-1];
	ИмяДокументаОтмены = "ОтменаЗаявки" + Сред(ИмяДокумента, 7);
	
	Возврат ИмяДокументаОтмены;
	
КонецФункции

Процедура ГруппаЗаявкаСотрудникаДополнитьФорму(Форма) Экспорт 
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ГруппаЗаявкаСотрудника = Элементы.ГруппаЗаявкаСотрудника;
	
	Если ТипЗнч(Объект.ЗаявкаСотрудника) = Тип("ДокументСсылка.ЗаявкаНаОтпуск") И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаОтпуск")
		Или ТипЗнч(Объект.ЗаявкаСотрудника) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаКомандировку") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЗаявкаСотрудника) Тогда 
		Возврат;
	КонецЕсли;
	
	// Добавление команд
	ИмяКоманды = "ОткрытьЗаявкуСотрудника";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = Строка(Объект.ЗаявкаСотрудника);
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаЗаявкаСотрудника);
		Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтозватьЗаявку(Форма) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = Форма.Объект;
	
	Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Отозвано;
	Объект.Рассмотрел = Неопределено;
	Объект.ДатаРассмотрения = Неопределено;
	
	Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

Процедура СогласоватьЗаявку(Форма) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = Форма.Объект;
	
	Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Согласовано;
	Объект.Рассмотрел = Строка(Пользователи.ТекущийПользователь());
	Объект.ДатаРассмотрения = ТекущаяДатаСеанса();
	
	Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

Процедура ОтклонитьЗаявку(Форма) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = Форма.Объект;
	
	Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Отклонено;
	Объект.Рассмотрел = Строка(Пользователи.ТекущийПользователь());
	Объект.ДатаРассмотрения = ТекущаяДатаСеанса();
	
	Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаДоходВНатуральнойФорме(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаЕдиновременнуюКомпенсацию") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаявкиСотрудника = ДанныеЗаполнения.ДанныеЗаявкиСотрудника;
	
	Если ЗначениеЗаполнено(ДанныеЗаявкиСотрудника.ФизическоеЛицо) Тогда 
		
		МесяцНачисления = НачалоМесяца(ТекущаяДатаСеанса());
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаявкиСотрудника.ФизическоеЛицо);
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Ложь, Неопределено, МесяцНачисления);
		
		Если ТаблицаСотрудников.Количество() > 0 Тогда
			
			КадровыеДанные = "Организация, Подразделение";
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаСотрудников[0].Сотрудник);
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КадровыеДанные, МесяцНачисления);
			
			Если КадровыеДанныеСотрудников.Количество() > 0 Тогда
				
				Объект.Организация = КадровыеДанныеСотрудников[0].Организация;
				Объект.МесяцНачисления = МесяцНачисления;
				
				НоваяСтрока = Объект.Начисления.Добавить();
				НоваяСтрока.Сотрудник = КадровыеДанныеСотрудников[0].Сотрудник;
				НоваяСтрока.Подразделение = КадровыеДанныеСотрудников[0].Подразделение;
				НоваяСтрока.Результат = ДанныеЗаявкиСотрудника.Сумма;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаМатериальнаяПомощь(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаЕдиновременнуюКомпенсацию") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаявкиСотрудника = ДанныеЗаполнения.ДанныеЗаявкиСотрудника;
	
	Если ЗначениеЗаполнено(ДанныеЗаявкиСотрудника.ФизическоеЛицо) Тогда 
		
		МесяцНачисления = НачалоМесяца(ТекущаяДатаСеанса());
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаявкиСотрудника.ФизическоеЛицо);
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Ложь, Неопределено, МесяцНачисления);
		
		Если ТаблицаСотрудников.Количество() > 0 Тогда
			
			КадровыеДанные = "Организация, Подразделение";
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаСотрудников[0].Сотрудник);
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КадровыеДанные, МесяцНачисления);
			
			Если КадровыеДанныеСотрудников.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				
				Запрос.Текст = "ВЫБРАТЬ
				               |	Начисления.Ссылка
				               |ИЗ
				               |	ПланВидовРасчета.Начисления КАК Начисления
				               |ГДЕ
				               |	Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.МатериальнаяПомощь)
				               |	И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2760)
				               |	И НЕ Начисления.ВАрхиве";
							   
				ВидРасчета = Неопределено;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда 
					ВидРасчета = Выборка.Ссылка;
				КонецЕсли;
				
				Объект.Организация = КадровыеДанныеСотрудников[0].Организация;
				Объект.ПериодРегистрации = МесяцНачисления;
				Объект.ВидРасчета = ВидРасчета;
				
				НоваяСтрока = Объект.Начисления.Добавить();
				НоваяСтрока.Сотрудник = КадровыеДанныеСотрудников[0].Сотрудник;
				НоваяСтрока.Подразделение = КадровыеДанныеСотрудников[0].Подразделение;
				НоваяСтрока.Результат = ДанныеЗаявкиСотрудника.Сумма;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаРазовоеНачисление(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаЕдиновременнуюКомпенсацию") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаявкиСотрудника = ДанныеЗаполнения.ДанныеЗаявкиСотрудника;
	
	Если ЗначениеЗаполнено(ДанныеЗаявкиСотрудника.ФизическоеЛицо) Тогда 
		
		МесяцНачисления = НачалоМесяца(ТекущаяДатаСеанса());
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаявкиСотрудника.ФизическоеЛицо);
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Ложь, Неопределено, МесяцНачисления);
		
		Если ТаблицаСотрудников.Количество() > 0 Тогда
			
			КадровыеДанные = "Организация, Подразделение";
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаСотрудников[0].Сотрудник);
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КадровыеДанные, МесяцНачисления);
			
			Если КадровыеДанныеСотрудников.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				
				Запрос.Текст = "ВЫБРАТЬ
				               |	Начисления.Ссылка
				               |ИЗ
				               |	ПланВидовРасчета.Начисления КАК Начисления
				               |ГДЕ
				               |	Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.РазовоеНачисление)
				               |	И НЕ Начисления.ВАрхиве";
							   
				Начисление = Неопределено;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда 
					Начисление = Выборка.Ссылка;
				КонецЕсли;
				
				Объект.Организация = КадровыеДанныеСотрудников[0].Организация;
				Объект.МесяцНачисления = МесяцНачисления;
				Объект.Начисление = Начисление;
				
				НоваяСтрока = Объект.Начисления.Добавить();
				НоваяСтрока.Сотрудник = КадровыеДанныеСотрудников[0].Сотрудник;
				НоваяСтрока.Подразделение = КадровыеДанныеСотрудников[0].Подразделение;
				НоваяСтрока.Результат = ДанныеЗаявкиСотрудника.Сумма;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Предназначена для использования в ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных.
//
// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильСотрудник",
		"Роль.ИнтерфейсРабочегоСтолаСотрудник",
		"ЗарплатаКадрыРасширенная");
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПользователейФизическихЛиц

Функция НовыйПользователь(ДанныеСотрудника, НастройкиПользователей, НастройкиСообщений) Экспорт 
	
	ИмяПользователя = СвободноеИмяПользователя(ДанныеСотрудника.Фамилия, ДанныеСотрудника.Имя, ДанныеСотрудника.Отчество, " (2)");
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.Имя = ИмяПользователя;
	ОписаниеПользователяИБ.ПолноеИмя = ИмяПользователя;
	ОписаниеПользователяИБ.АутентификацияСтандартная = НастройкиПользователей.АутентификацияСтандартная;
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = НастройкиПользователей.ПоказыватьВСпискеВыбора;
	ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = НастройкиПользователей.ЗапрещеноИзменятьПароль;
	ОписаниеПользователяИБ.АутентификацияOpenID = НастройкиПользователей.АутентификацияOpenID;
	ОписаниеПользователяИБ.АутентификацияОС = НастройкиПользователей.АутентификацияОС;
	ОписаниеПользователяИБ.Пароль = СлучайныйПароль();
	
	Если ОписаниеПользователяИБ.АутентификацияОС Тогда 
		ОписаниеПользователяИБ.ПользовательОС = ДанныеСотрудника.ПользовательОС;
	КонецЕсли;
	
	ИдентификаторПользователяИБ = Неопределено;
	СоздатьНовогоПользователяИБ = Истина;
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	
	Пользователи.УстановитьСвойстваПользователяИБ(ИмяПользователя, ОписаниеПользователяИБ, Истина);
	ПользовательИБ = ОписаниеПользователяИБ.ПользовательИБ;
	
	Пользователь = Справочники.Пользователи.СоздатьЭлемент();
	
	Пользователь.Наименование = ПользовательИБ.Имя;
	Если ЗначениеЗаполнено(НастройкиПользователей.ГруппаПользователей) Тогда 
		Пользователь.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", НастройкиПользователей.ГруппаПользователей);
	КонецЕсли;
	
	Пользователь.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
	
	СвойстваПользователяИБ = Новый Структура;
	СвойстваПользователяИБ.Вставить("Действие", "Записать");
	СвойстваПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	
	Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", СвойстваПользователяИБ);
	
	Пользователь.Записать();
	
	Если НастройкиСообщений.РассылатьУведомленияАвтоматически Тогда 
		ТекстПисьма = ТекстПисьмаУведомления(ОписаниеПользователяИБ.Имя, ОписаниеПользователяИБ.Пароль, НастройкиСообщений);
	    ОтправитьСообщениеПользователю(ДанныеСотрудника, ТекстПисьма, НастройкиСообщений);
	КонецЕсли;
	
	Возврат Пользователь.Ссылка;
	
КонецФункции

Функция СвободноеИмяПользователя(Фамилия, Имя, Отчество, Постфикс = Неопределено)
	
	ВозможныеЗначения = Новый Массив;
	
	ВозможныеЗначения.Добавить(Фамилия + Лев(Имя, 1) + Лев(Отчество, 1));
	Если ЗначениеЗаполнено(Постфикс) Тогда
		ВозможныеЗначения.Добавить(Фамилия + Лев(Имя, 1) + Лев(Отчество, 1) + " " + Постфикс);
	КонецЕсли;
	
	ВозможныеЗначения.Добавить(Фамилия);
	Если ЗначениеЗаполнено(Постфикс) Тогда
		ВозможныеЗначения.Добавить(Фамилия + " " + Постфикс);
	КонецЕсли;
	
	ВозможныеЗначения.Добавить(Фамилия + " " + Имя + " " + Отчество);
	Если ЗначениеЗаполнено(Постфикс) Тогда
		ВозможныеЗначения.Добавить(Фамилия + " " + Имя + " " + Отчество + " " + Постфикс);
	КонецЕсли;
	
	ВозможныеЗначения.Добавить(Фамилия + " " + Имя);
	Если ЗначениеЗаполнено(Постфикс) Тогда
		ВозможныеЗначения.Добавить(Фамилия + " " + Имя + " " + Постфикс);
	КонецЕсли;
	
	ВозможныеЗначения.Добавить(Фамилия + " " + Имя + " " + Лев(Отчество, 1));
	Если ЗначениеЗаполнено(Постфикс) Тогда
		ВозможныеЗначения.Добавить(Фамилия + " " + Имя + " " + Лев(Отчество, 1) + " " + Постфикс);
	КонецЕсли;
	
	ВозможныеЗначения.Добавить(Фамилия + Лев(Имя, 4) + Лев(Отчество, 4));
	Если ЗначениеЗаполнено(Постфикс) Тогда
		ВозможныеЗначения.Добавить(Фамилия + Лев(Имя, 4) + Лев(Отчество, 4) + " " + Постфикс);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Пользователи.Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование В(&ВозможныеЗначения)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВозможныеЗначения", ВозможныеЗначения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗанятыеЗначения = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ЗанятыеЗначения.Вставить(СокрЛП(Выборка.Наименование), Истина);
	КонецЦикла;
	
	Для Каждого ИмяПользователя Из ВозможныеЗначения Цикл
		Если ЗанятыеЗначения[ИмяПользователя] = Неопределено Тогда
			Возврат ИмяПользователя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция СлучайныйПароль() Экспорт 
	
	НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().Пользователи;
	
	Если НастройкиВхода.МинимальнаяДлинаПароля > 8 Тогда
		МинимальнаяДлинаПароля = НастройкиВхода.МинимальнаяДлинаПароля;
	Иначе
		МинимальнаяДлинаПароля = 8;
	КонецЕсли;
	
	ПараметрыПароля = ПользователиСлужебный.ПараметрыПароля(МинимальнаяДлинаПароля, Истина);
	
	НовыйПароль = ПользователиСлужебный.СоздатьПароль(ПараметрыПароля);
	
	Возврат НовыйПароль;
	
КонецФункции

Процедура ОтправитьСообщениеПользователю(ДанныеСотрудника, ТекстПисьма, НастройкиСообщений) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДанныеСотрудника.АдресЭлектроннойПочты) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для работника %1 не указан адрес электронной почты.'"), ДанныеСотрудника.ФизическоеЛицо);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", ДанныеСотрудника.АдресЭлектроннойПочты);
	ПараметрыПисьма.Вставить("Тема", НастройкиСообщений.ЗаголовокУведомления);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при отправке уведомления работнику %1: %2.'"), ДанныеСотрудника.ФизическоеЛицо, ОписаниеОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.ДатыОтправкиСообщенийСотрудникам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ДанныеСотрудника.ФизическоеЛицо);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
	НоваяЗапись.ДатаОтправки = ТекущаяДатаСеанса();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ТекстПисьмаУведомления(ПользовательИБ, Пароль, НастройкиСообщений) Экспорт 
	
	ТекстПисьма = НастройкиСообщений.ШаблонУведомления;
	
	// имя пользователя и пароль
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ИмяПользователяИБ%", ПользовательИБ);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Пароль%", ?(Не ПустаяСтрока(Пароль), Пароль, НСтр("ru = 'без пароля'")));
	
	// адрес веб-сервера
	Если НастройкиСообщений.ВключатьВебСсылкуВУведомление Тогда
		ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1
                                                                                    |
                                                                                    |Прямая ссылка:
                                                                                    |<a href=""%2"">%2</a>'"),
						ТекстПисьма,
						ВебСсылкаПереходаВСистему(ПользовательИБ, Пароль));
	КонецЕсли;
	
	// обрабатываем разрывы строк
	ОтдельныеСтрокиТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПисьма, Символы.ПС);
	HTMLКодОтдельныхСтрок = ОтдельныеСтрокиТекста[0];
	НомерСтроки = 1;
	Пока НомерСтроки < ОтдельныеСтрокиТекста.Количество() Цикл
		HTMLКодОтдельныхСтрок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1<BR>%2</BR>",
									HTMLКодОтдельныхСтрок, 
									ОтдельныеСтрокиТекста[НомерСтроки]);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	HTMLКод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1<P>%2</P>",
				HTMLКод,
				HTMLКодОтдельныхСтрок);
	
	Возврат HTMLКод;
	
КонецФункции

Функция ВебСсылкаПереходаВСистему(ИмяПользователя, Пароль)
	
	АдресВебСервера = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
	
	Шаблон = "%1%2" + ?(ЗначениеЗаполнено(ИмяПользователя), "?N=%3", "") + ?(ЗначениеЗаполнено(Пароль), "&P=%4", "");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, 
				СокрЛП(АдресВебСервера), ?(Прав(СокрЛП(АдресВебСервера), 1) <> "/", "/", ""), ИмяПользователя, Пароль);
				
КонецФункции

Процедура УстановитьАутентификациюПользователя(ПользовательСсылка, ВходВПрограммуРазрешен) Экспорт 
	
	Пользователь = ПользовательСсылка.ПолучитьОбъект();
	Пользователь.Недействителен = Не ВходВПрограммуРазрешен;
	СвойстваПользователяИБ = Новый Структура;
	СвойстваПользователяИБ.Вставить("Действие", "Записать");
	СвойстваПользователяИБ.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
	Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", СвойстваПользователяИБ);
	Пользователь.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "СамообслуживаниеСотрудников.НачальноеЗаполнениеПараметровСозданияПользователейРегламентнымЗаданием";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "СамообслуживаниеСотрудников.НачальноеЗаполнениеПричинОтсутствияСотрудников";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "СамообслуживаниеСотрудников.НачальноеЗаполнениеВидовПредоставляемыхСотрудникамСправок";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.10";
	Обработчик.Процедура = "СамообслуживаниеСотрудников.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("df71f741-29b4-4fd9-9f4f-936779d54782");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений: самообслуживание сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.4";
	Обработчик.Процедура = "РегистрыСведений.НастройкиСамообслуживанияСотрудников.ПеренестиНастройкиИспользованияРегламентныхЗаданийВКонстанты";
	Обработчик.РежимВыполнения = "Оперативно";
	
КонецПроцедуры

Процедура НачальноеЗаполнениеПараметровСозданияПользователейРегламентнымЗаданием() Экспорт 
	
	РегистрыСведений.ПараметрыСозданияПользователейФизическихЛиц.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура НачальноеЗаполнениеПричинОтсутствияСотрудников() Экспорт 
	
	Справочники.ПричиныОтсутствияСотрудников.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВидовПредоставляемыхСотрудникамСправок() Экспорт 
	
	Справочники.ВидыПредоставляемыхСотрудникамСправок.НачальноеЗаполнение();
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("НастройкиСамообслуживанияСотрудников", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиСамообслуживанияСотрудников, Метаданные.РегистрыСведений.НастройкиСамообслуживанияСотрудников));
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НастройкиСамообслуживанияСотрудников") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиСамообслуживанияСотрудников"], СохраненныеНастройки["НастройкиСамообслуживанияСотрудников"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСамообслуживанияСотрудников.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиСамообслуживанияСотрудников);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиСамообслуживанияСотрудников, НастройкиСтруктура);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСамообслуживанияСотрудников.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиСамообслуживанияСотрудников);
	НастройкиПрограммы.Вставить("НастройкиСамообслуживанияСотрудников", НастройкиСтруктура);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСамообслуживанияСотрудников.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиСамообслуживанияСотрудников);
	Настройки.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
