
#Область СлужебныйПрограммныйИнтерфейс

#Область ШтатноеРасписание

Процедура ШтатноеРасписаниеПриСозданииНаСервере(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания) Тогда
		Форма.Элементы.ГруппаМедицинскиеОсмотры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВредныеФакторыПозицииШтатногоРасписания) Тогда
		Форма.Элементы.ВредныеФакторы.ТолькоПросмотр = Истина;
		Форма.Элементы.СкопироватьВредныеФакторыВидыРабот.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания) Тогда
		Форма.Элементы.ВидыРаботМедицинскихОсмотров.ТолькоПросмотр = Истина;
		Форма.Элементы.СкопироватьВредныеФакторыВидыРабот.Доступность = Ложь;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ТекущаяСтраницаОхранаТруда") Тогда
		Если Форма.Элементы.Найти("СтраницыФормы") <> Неопределено И Форма.Элементы.Найти("ОхранаТрудаСтраница") <> Неопределено Тогда
			Форма.Элементы["СтраницыФормы"].ТекущаяСтраница = Форма.Элементы["ОхранаТрудаСтраница"];
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ВнешниеДанные Тогда
		Форма.Элементы.ВредныеФакторы.ТолькоПросмотр = Истина;
		Форма.Элементы.ВидыРаботМедицинскихОсмотров.ТолькоПросмотр = Истина;
		Форма.Элементы.СкопироватьВредныеФакторыВидыРабот.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриДополненииФормы(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьРеквизитыФормы(Форма);
	СоздатьКомандыФормы(Форма);
	
	ДобавитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьВредныеФакторы(Форма, ТекущийОбъект);
	ПрочитатьВидыРабот(Форма, ТекущийОбъект);
	ПрочитатьПериодичностьОсмотровПозиции(Форма, ТекущийОбъект);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДублиФакторовВидовРабот(Форма.ВредныеФакторы, "ВредныйФактор");
	УдалитьДублиФакторовВидовРабот(Форма.ВидыРаботМедицинскихОсмотров, "ВидРабот");
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьВредныеФакторы(Форма, Отказ, ТекущийОбъект);
	ЗаписатьВидыРабот(Форма, Отказ, ТекущийОбъект);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	МедицинскиеОсмотры.ЗапуститьОбновлениеПериодическихОсмотров(ТекущийОбъект.Владелец);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеЭлементПриОкончанииРедактирования(Форма, ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	ПриОкончанииРедактированияСпискаВредныхФакторов(Форма, ИмяЭлемента, ДополнительныеПараметры);
	ПриОкончанииРедактированияСпискаВидовРабот(Форма, ИмяЭлемента, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеЭлементПослеУдаления(Форма, ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	ПослеУдаленияВредногоФактора(Форма, ИмяЭлемента, ДополнительныеПараметры);
	ПослеУдаленияВидаРабот(Форма, ИмяЭлемента, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеВредныхФакторовВидовРабот(Форма, Отказ);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриВыполненииКоманды(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	СкопироватьСпискиИзДругойПозиции(ИмяКоманды, Форма, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область КадровыйУчет

Процедура ПослеЗаписиФормыКадровогоДокументаНаСервере(ДокументОбъект, СотрудникиМассив) Экспорт
	МедицинскиеОсмотры.ЗапуститьОбновлениеПериодическихОсмотров();
КонецПроцедуры

#КонецОбласти
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтатноеРасписание

#Область КонструированиеФормы

Процедура СоздатьРеквизитыФормы(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"ПериодичностьМедицинскихОсмотров", 
			Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания")));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"ВредныеФакторы", 
			Новый ОписаниеТипов("РегистрСведенийНаборЗаписей.ВредныеФакторыПозицииШтатногоРасписания"),
			, 
			НСтр("ru = 'Вредные факторы'"), 
			Истина));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"ПериодичностьОсмотра", 
			Новый ОписаниеТипов("Строка"), 
			"ВредныеФакторы", 
			НСтр("ru = 'Периодичность осмотра'")));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"ВидыРаботМедицинскихОсмотров", 
			Новый ОписаниеТипов("РегистрСведенийНаборЗаписей.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания"),
			, 
			НСтр("ru = 'Виды работ'"), 
			Истина));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"ПериодичностьОсмотра", 
			Новый ОписаниеТипов("Строка"), 
			"ВидыРаботМедицинскихОсмотров", 
			НСтр("ru = 'Периодичность осмотра'")));
			
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);

КонецПроцедуры

Процедура СоздатьКомандыФормы(Форма)
	
	Если Форма.Команды.Найти("СкопироватьВредныеФакторыВидыРабот") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСкопировать = Форма.Команды.Добавить("СкопироватьВредныеФакторыВидыРабот");
	КомандаСкопировать.Действие = "Подключаемый_ОбработчикКоманды";
	КомандаСкопировать.Заголовок = НСтр("ru = 'Скопировать из другой позиции...'");
	КомандаСкопировать.ИзменяетСохраняемыеДанные = Истина;
	КомандаСкопировать.Подсказка = НСтр("ru = 'Скопировать списки вредных (опасных) производственных факторов и видов работ из другой позиции'");
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормы(Форма)
	
	Элементы = Форма.Элементы;
	ГруппаРазмещения = Элементы.Найти("ГруппаМедицинскиеОсмотры");
	ГруппаРазмещения.Заголовок = НСтр("ru = 'Медицинские осмотры'");
	ГруппаРазмещения.ОтображатьЗаголовок = Истина;
	ГруппаРазмещения.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаРазмещения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ДобавитьЭлементыПериодичность(Элементы, ГруппаРазмещения);
	ДобавитьЭлементыГруппыВредныеФакторыВидовРабот(Элементы, ГруппаРазмещения);
	
КонецПроцедуры

Процедура ДобавитьЭлементыПериодичность(Элементы, ГруппаРазмещения)
	
	Если Элементы.Найти("ПериодичностьОсмотровГруппа") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодичностьОсмотровГруппа = Элементы.Добавить("ПериодичностьОсмотровГруппа", Тип("ГруппаФормы"), ГруппаРазмещения);
	ПериодичностьОсмотровГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПериодичностьОсмотровГруппа.ОтображатьЗаголовок = Ложь;
	
	ПредставлениеПериодичностиОсмотра = Элементы.Добавить("ПредставлениеПериодичностиОсмотра", Тип("ПолеФормы"), ПериодичностьОсмотровГруппа);
	ПредставлениеПериодичностиОсмотра.Вид = ВидПоляФормы.ПолеВвода;
	ПредставлениеПериодичностиОсмотра.Заголовок = НСтр("ru = 'Сотрудники на этой позиции проходят периодические медицинские осмотры как минимум'");
	ПредставлениеПериодичностиОсмотра.ПутьКДанным = "ПериодичностьМедицинскихОсмотров.ПредставлениеПериодичностиОсмотра";
	ПредставлениеПериодичностиОсмотра.ТолькоПросмотр = Истина;
	ПредставлениеПериодичностиОсмотра.Подсказка = НСтр("ru = 'Периодичность определяется автоматически на основе требований вредных факторов и видов работ'");
	ПредставлениеПериодичностиОсмотра.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;

КонецПроцедуры

Процедура ДобавитьЭлементыГруппыВредныеФакторыВидовРабот(Элементы, ГруппаРазмещения)
	
	Если Элементы.Найти("ВредныеФакторыВидыРаботГруппа") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВредныеФакторыВидыРаботГруппа = Элементы.Добавить("ВредныеФакторыВидыРаботГруппа", Тип("ГруппаФормы"), ГруппаРазмещения);
	ВредныеФакторыВидыРаботГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ВредныеФакторыВидыРаботГруппа.Заголовок = НСтр("ru = 'Вредные (опасные) производственные факторы и виды работ'");
	ВредныеФакторыВидыРаботГруппа.ОтображатьЗаголовок = Истина;
	ВредныеФакторыВидыРаботГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	ВредныеФакторыВидыРаботГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ВредныеФакторыВидыРаботГруппа.Подсказка = НСтр("ru = 'Перечисленные вредные и (или) опасные производственные факторы и виды работ определяют периодичность осмотров сотрудников, кроме того, их перечень заполняется в направлении на медицинский осмотр.'");
	ВредныеФакторыВидыРаботГруппа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ВредныеФакторыВидыРаботГруппа.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	
	КомандаСкопироватьГруппа = Элементы.Добавить("КомандаСкопироватьГруппа", Тип("ГруппаФормы"), ВредныеФакторыВидыРаботГруппа);
	КомандаСкопироватьГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КомандаСкопироватьГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	КомандаСкопироватьГруппа.ОтображатьЗаголовок = Ложь;
	КомандаСкопироватьГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КомандаСкопироватьГруппа.РастягиватьПоГоризонтали = Истина;
	
	СкопироватьКнопка = Элементы.Добавить("СкопироватьВредныеФакторыВидыРабот", Тип("КнопкаФормы"), КомандаСкопироватьГруппа);
	СкопироватьКнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	СкопироватьКнопка.ИмяКоманды = "СкопироватьВредныеФакторыВидыРабот";
	СкопироватьКнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
	ВредныеФакторыВидыРаботСпискиГруппа = Элементы.Добавить("ВредныеФакторыВидыРаботСпискиГруппа", Тип("ГруппаФормы"), ВредныеФакторыВидыРаботГруппа);
	ВредныеФакторыВидыРаботСпискиГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ВредныеФакторыВидыРаботСпискиГруппа.ОтображатьЗаголовок = Ложь;
	ВредныеФакторыВидыРаботСпискиГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	ВредныеФакторыВидыРаботСпискиГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	// Таблица "Вредные факторы".
	ВредныеФакторы = Элементы.Добавить("ВредныеФакторы", Тип("ТаблицаФормы"), ВредныеФакторыВидыРаботСпискиГруппа);
	ВредныеФакторы.ПутьКДанным = "ВредныеФакторы";
	ВредныеФакторы.Шапка = Ложь;
	ВредныеФакторы.УстановитьДействие("ПриОкончанииРедактирования", "Подключаемый_МедицинскиеОсмотрыШтатноеРасписаниеЭлементФормыПриОкончанииРедактирования");
	ВредныеФакторы.УстановитьДействие("ПослеУдаления", "Подключаемый_МедицинскиеОсмотрыШтатноеРасписаниеЭлементФормыПослеУдаления");
	
	ВредныйФактор = Элементы.Добавить("ВредныеФакторыВредныйФактор", Тип("ПолеФормы"), ВредныеФакторы);
	ВредныйФактор.ПутьКДанным = "ВредныеФакторы.ВредныйФактор";
	ВредныйФактор.Вид = ВидПоляФормы.ПолеВвода;
	ВредныйФактор.АвтоОтметкаНезаполненного = Истина;
	ВредныйФактор.УстановитьДействие("ПриИзменении", "Подключаемый_МедицинскиеОсмотрыШтатноеРасписаниеЭлементФормыПриИзменении");
	
	ВредныеФакторыПериодичностьОсмотра = Элементы.Добавить("ВредныеФакторыПериодичностьОсмотра", Тип("ПолеФормы"), ВредныеФакторы);
	ВредныеФакторыПериодичностьОсмотра.ПутьКДанным = "ВредныеФакторы.ПериодичностьОсмотра";
	ВредныеФакторыПериодичностьОсмотра.Вид = ВидПоляФормы.ПолеНадписи;
	
	// Таблица "Виды работ".
	ВидыРабот = Элементы.Добавить("ВидыРаботМедицинскихОсмотров", Тип("ТаблицаФормы"), ВредныеФакторыВидыРаботСпискиГруппа);
	ВидыРабот.ПутьКДанным = "ВидыРаботМедицинскихОсмотров";
	ВидыРабот.Шапка = Ложь;
	ВидыРабот.УстановитьДействие("ПриОкончанииРедактирования", "Подключаемый_МедицинскиеОсмотрыШтатноеРасписаниеЭлементФормыПриОкончанииРедактирования");
	ВидыРабот.УстановитьДействие("ПослеУдаления", "Подключаемый_МедицинскиеОсмотрыШтатноеРасписаниеЭлементФормыПослеУдаления");
	
	ВидРабот = Элементы.Добавить("ВидыРаботМедицинскихОсмотровВидРабот", Тип("ПолеФормы"), ВидыРабот);
	ВидРабот.ПутьКДанным = "ВидыРаботМедицинскихОсмотров.ВидРабот";
	ВидРабот.Вид = ВидПоляФормы.ПолеВвода;
	ВидРабот.АвтоОтметкаНезаполненного = Истина;
	ВидРабот.УстановитьДействие("ПриИзменении", "Подключаемый_МедицинскиеОсмотрыШтатноеРасписаниеЭлементФормыПриИзменении");
	
	ВидыРаботПериодичностьОсмотра = Элементы.Добавить("ВидыРаботМедицинскихОсмотровПериодичностьОсмотра", Тип("ПолеФормы"), ВидыРабот);
	ВидыРаботПериодичностьОсмотра.ПутьКДанным = "ВидыРаботМедицинскихОсмотров.ПериодичностьОсмотра";
	ВидыРаботПериодичностьОсмотра.Вид = ВидПоляФормы.ПолеНадписи;
	
КонецПроцедуры

#КонецОбласти

Процедура ПрочитатьВредныеФакторы(Форма, ТекущийОбъект)
	
	НаборЗаписей = РегистрыСведений.ВредныеФакторыПозицииШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Позиция.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	
	ЗначениеВДанныеФормы(НаборЗаписей, Форма.ВредныеФакторы);
	
	ЗаполнитьПериодичностьВредныхФакторов(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьПериодичностьВредныхФакторов(Форма)
	
	ВредныеФакторыМассив = Форма.ВредныеФакторы.Выгрузить().ВыгрузитьКолонку("ВредныйФактор");
	ПериодичностьОсмотров = МедицинскиеОсмотры.ПериодичностьОсмотровПоВреднымФакторам(ВредныеФакторыМассив);
	Для Каждого СтрокаКоллекции Из Форма.ВредныеФакторы Цикл
		СтрокаКоллекции["ПериодичностьОсмотра"] = ПериодичностьОсмотров[СтрокаКоллекции.ВредныйФактор];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьВредныеФакторы(Форма, Отказ, ТекущийОбъект)
	
	НаборЗаписей = ДанныеФормыВЗначение(Форма.ВредныеФакторы, Тип("РегистрСведенийНаборЗаписей.ВредныеФакторыПозицииШтатногоРасписания"));
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		СтрокаНабора["Позиция"] = ТекущийОбъект.Ссылка;
	КонецЦикла;
	
	НаборЗаписей.Отбор.Позиция.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПрочитатьВидыРабот(Форма, ТекущийОбъект)
	
	НаборЗаписей = РегистрыСведений.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Позиция.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	
	ЗначениеВДанныеФормы(НаборЗаписей, Форма.ВидыРаботМедицинскихОсмотров);
	
	ЗаполнитьПериодичностьВидовРабот(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьПериодичностьВидовРабот(Форма)
	
	ВидыРаботМассив = Форма.ВидыРаботМедицинскихОсмотров.Выгрузить().ВыгрузитьКолонку("ВидРабот");
	ПериодичностьОсмотров = МедицинскиеОсмотры.ПериодичностьОсмотровПоВреднымФакторам(ВидыРаботМассив);
	Для Каждого СтрокаКоллекции Из Форма.ВидыРаботМедицинскихОсмотров Цикл
		СтрокаКоллекции["ПериодичностьОсмотра"] = ПериодичностьОсмотров[СтрокаКоллекции.ВидРабот];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьВидыРабот(Форма, Отказ, ТекущийОбъект)
	
	НаборЗаписей = ДанныеФормыВЗначение(Форма.ВидыРаботМедицинскихОсмотров, Тип("РегистрСведенийНаборЗаписей.ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания"));
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		СтрокаНабора["Позиция"] = ТекущийОбъект.Ссылка;
	КонецЦикла;
	
	НаборЗаписей.Отбор.Позиция.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПрочитатьПериодичностьОсмотровПозиции(Форма, ТекущийОбъект)
	
	МенеджерЗаписи = РегистрыСведений.ПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = ТекущийОбъект.Ссылка;
	МенеджерЗаписи.Прочитать();
	
	ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.ПериодичностьМедицинскихОсмотров);
	
	УстановитьПредставлениеПериодичностиОсмотровПозиции(Форма);
	
КонецПроцедуры

Процедура ПриОкончанииРедактированияСпискаВредныхФакторов(Форма, ИмяЭлемента, ДополнительныеПараметры)
	
	Если ИмяЭлемента <> "ВредныеФакторы" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПериодичностьОсмотровПозицииШтатногоРасписания(Форма);
	
КонецПроцедуры

Процедура ПослеУдаленияВредногоФактора(Форма, ИмяЭлемента, ДополнительныеПараметры)
	
	Если ИмяЭлемента <> "ВредныеФакторы" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПериодичностьОсмотровПозицииШтатногоРасписания(Форма);
	
КонецПроцедуры

Процедура ПриОкончанииРедактированияСпискаВидовРабот(Форма, ИмяЭлемента, ДополнительныеПараметры)
	
	Если ИмяЭлемента <> "ВидыРаботМедицинскихОсмотров" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПериодичностьОсмотровПозицииШтатногоРасписания(Форма);
	
КонецПроцедуры

Процедура ПослеУдаленияВидаРабот(Форма, ИмяЭлемента, ДополнительныеПараметры)
	
	Если ИмяЭлемента <> "ВидыРаботМедицинскихОсмотров" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПериодичностьОсмотровПозицииШтатногоРасписания(Форма);
	
КонецПроцедуры

Процедура ОбновитьПериодичностьОсмотровПозицииШтатногоРасписания(Форма)
	
	ВредныеФакторыРаботыМассив = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВредныеФакторыРаботыМассив, ОбщегоНазначения.ВыгрузитьКолонку(Форма.ВредныеФакторы, "ВредныйФактор", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВредныеФакторыРаботыМассив, ОбщегоНазначения.ВыгрузитьКолонку(Форма.ВидыРаботМедицинскихОсмотров, "ВидРабот", Истина), Истина);
	
	ОписаниеПериодичности = МедицинскиеОсмотры.МинимальнаяПериодичностьОсмотров(ВредныеФакторыРаботыМассив);
	
	Форма.ПериодичностьМедицинскихОсмотров.КратностьОсмотра = ОписаниеПериодичности.Кратность;
	Форма.ПериодичностьМедицинскихОсмотров.ПериодичностьОсмотра = ОписаниеПериодичности.Периодичность;
	Форма.ПериодичностьМедицинскихОсмотров.ЕдиницаПериодичностиОсмотра = ОписаниеПериодичности.ЕдиницаПериодичности;
	Форма.ПериодичностьМедицинскихОсмотров.ПредставлениеПериодичностиОсмотра = ОписаниеПериодичности.Представление;
	
	УстановитьПредставлениеПериодичностиОсмотровПозиции(Форма);
	
КонецПроцедуры

Процедура УстановитьПредставлениеПериодичностиОсмотровПозиции(Форма)
	
	Если ПустаяСтрока(Форма.ПериодичностьМедицинскихОсмотров.ПредставлениеПериодичностиОсмотра) Тогда
		Форма.ПериодичностьМедицинскихОсмотров.ПредставлениеПериодичностиОсмотра = НСтр("ru = 'Не проходят'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВредныхФакторовВидовРабот(Форма, Отказ)
	
	Для Каждого СтрокаТаблицы Из Форма.ВредныеФакторы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВредныйФактор) Тогда
			ТекстСообщения = НСтр("ru = 'Вредный фактор не заполнен.'");
			Поле = "ВредныеФакторы[" + Форма.ВредныеФакторы.Индекс(СтрокаТаблицы) + "].ВредныйФактор";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Форма.ВидыРаботМедицинскихОсмотров Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидРабот) Тогда
			ТекстСообщения = НСтр("ru = 'Вид работ не заполнен.'");
			Поле = "ВидыРаботМедицинскихОсмотров[" + Форма.ВидыРаботМедицинскихОсмотров.Индекс(СтрокаТаблицы) + "].ВидРабот";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура СкопироватьСпискиИзДругойПозиции(ИмяКоманды, Форма, ПозицияИсточник)
	
	Если ИмяКоманды <> "СкопироватьВредныеФакторыВидыРабот" Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВредныеФакторы.Очистить();
	ВредныеФакторыМассив = МедицинскиеОсмотры.ВредныеФакторыПозиции(ПозицияИсточник);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Форма.ВредныеФакторы, ВредныеФакторыМассив, "ВредныйФактор");
	
	Форма.ВидыРаботМедицинскихОсмотров.Очистить();
	ВидыРаботМассив = МедицинскиеОсмотры.ВидыРаботПозиции(ПозицияИсточник);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Форма.ВидыРаботМедицинскихОсмотров, ВидыРаботМассив, "ВидРабот");
	
	ОбновитьПериодичностьОсмотровПозицииШтатногоРасписания(Форма);
	ЗаполнитьПериодичностьВредныхФакторов(Форма);
	ЗаполнитьПериодичностьВидовРабот(Форма);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВредныеФакторыВидыРабот

Процедура ПрочитатьОписаниеПериодичностиВредногоФактораВидаРабот(Форма, ТекущийОбъект = Неопределено) Экспорт
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Форма.Объект;
	КонецЕсли;
	
	Форма.ПрежняяПериодичность = МедицинскиеОсмотрыКлиентСервер.ОписаниеПериодичностиОсмотров();
	МедицинскиеОсмотрыКлиентСервер.ЗаполнитьОписаниеПериодичностиПоВредномуФакторуВидуРабот(Форма.ПрежняяПериодичность, ТекущийОбъект);
	
КонецПроцедуры

Функция ПериодичностьВредногоФактораВидаРаботИзменилась(НоваяПериодичность, ПрежняяПериодичность) Экспорт
	
	Возврат Не ОбщегоНазначения.КоллекцииИдентичны(НоваяПериодичность, ПрежняяПериодичность);
	
КонецФункции

Процедура УдалитьДублиФакторовВидовРабот(ТаблицаФакторов, ИмяПоляФактора) Экспорт
	
	Уникальные = Новый Соответствие;
	
	Индекс = 0;
	Пока Индекс < ТаблицаФакторов.Количество() Цикл
		СтрокаТаблицы = ТаблицаФакторов[Индекс];
		Если Уникальные[СтрокаТаблицы[ИмяПоляФактора]] = Неопределено Тогда
			Уникальные.Вставить(СтрокаТаблицы[ИмяПоляФактора], Истина);
			Индекс = Индекс + 1;
		Иначе
			ТаблицаФакторов.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
