
#Область ПрограммныйИнтерфейс

// Функция возвращает таблицу значений с сотрудниками, прошедшими обучение согласно заданным отборам.
// 
// Параметры:
//	- ТаблицаФизическихЛиц	- таблица значений с колонками:
//		- ФизическоеЛицо, 
//		- ДатаНачала,
//		- ДатаОкончания
//	- ВидыМероприятий			- отбор по виду мероприятий обучения и развития (массив или СправочникСсылка.ВидыМероприятияОбученияРазвития).
//	- Мероприятия				- отбор по мероприятию обучения и развития (массив или СправочникСсылка.МероприятияОбученияРазвития).
//
// Возвращаемое значение:
//	Возвращает таблицу значений с колонками:
// 		- Подразделение
// 		- Сотрудник
// 		- ФизическоеЛицо
// 		- Мероприятие
// 		- ДатаНачала
// 		- ДатаОкончания
// 		- КоличествоУчебныхЧасов
// 		- СуммаРасходов
// 		- Контрагент
// 		- УчебноеЗаведение
// 		- Преподаватель
//
Функция ОбучениеСотрудников(ТаблицаФизическихЛиц, ВидыМероприятий = Неопределено, Мероприятия = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаФизическихЛиц.ФизическоеЛицо,
		|	ТаблицаФизическихЛиц.ДатаНачала,
		|	ТаблицаФизическихЛиц.ДатаОкончания
		|ПОМЕСТИТЬ ВТФизическиеЛицаОтбор
		|ИЗ
		|	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц";
	Запрос.Выполнить();
	
	СоздатьВТОбучениеСотрудников(Запрос.МенеджерВременныхТаблиц, ВидыМероприятий, Мероприятия);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбучениеСотрудников.Сотрудник,
		|	ОбучениеСотрудников.ФизическоеЛицо,
		|	ОбучениеСотрудников.Мероприятие,
		|	ОбучениеСотрудников.ДатаНачала,
		|	ОбучениеСотрудников.ДатаОкончания,
		|	ОбучениеСотрудников.ДокументОбучения,
		|	ОбучениеСотрудников.Подразделение,
		|	ОбучениеСотрудников.КоличествоУчебныхЧасов,
		|	ОбучениеСотрудников.СуммаРасходов,
		|	ОбучениеСотрудников.ПервичныйЭтапОбучения,
		|	ОбучениеСотрудников.Контрагент,
		|	ОбучениеСотрудников.УчебноеЗаведение,
		|	ОбучениеСотрудников.Преподаватель
		|ИЗ
		|	ВТОбучениеСотрудников КАК ОбучениеСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Сотрудник,
		|	ДатаНачала";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Процедура создает временную таблицу с событиями обучения сотрудников за указанные интервалы.
// 
// Параметры:
//	МенеджерВременныхТаблиц		- МенеджерВременныхТаблиц - содержащий таблицу "ВТФизическиеЛицаОтбор" с полями:
//		* ФизическоеЛицо 
//		* ДатаНачала
//		* ДатаОкончания
//	ВидыМероприятий				- Массив, СправочникСсылка.ВидыМероприятийОбученияРазвития - отбор по виду мероприятий обучения и развития.
//	Мероприятия					- Массив, СправочникСсылка.МероприятияОбученияРазвития - отбор по мероприятию обучения и развития.
//	ИмяРезультирующейТаблицы    - Строка - имя создаваемой ВТ.
//
// Создаваемая ВТ имеет следующие поля:
// 	* Подразделение
// 	* Сотрудник
// 	* ФизическоеЛицо
// 	* Мероприятие
// 	* ДатаНачала
// 	* ДатаОкончания
// 	* КоличествоУчебныхЧасов
// 	* СуммаРасходов
// 	* Контрагент
// 	* УчебноеЗаведение
// 	* Преподаватель
//
Процедура СоздатьВТОбучениеСотрудников(МенеджерВременныхТаблиц, ВидыМероприятий = Неопределено, Мероприятия = Неопределено, ИмяРезультирующейТаблицы = "ВТОбучениеСотрудников") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЕстьОтборПоМероприятиям = (ЗначениеЗаполнено(ВидыМероприятий) ИЛИ ЗначениеЗаполнено(Мероприятия));
		
	Если ЕстьОтборПоМероприятиям Тогда
		
		ОтборПоМероприятиям = Новый Массив;
		Если ЗначениеЗаполнено(Мероприятия) Тогда
			ОтборПоМероприятиям = ?(ТипЗнч(Мероприятия) = Тип("Массив"), Мероприятия, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Мероприятия));
		КонецЕсли;
		
		ОтборПоВидамМероприятий = Новый Массив;
		Если ЗначениеЗаполнено(ВидыМероприятий) Тогда
			ОтборПоВидамМероприятий = ?(ТипЗнч(ВидыМероприятий) = Тип("Массив"), ВидыМероприятий, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыМероприятий));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоМероприятиям", ОтборПоМероприятиям);
		Запрос.УстановитьПараметр("ОтборПоВидамМероприятий", ОтборПоВидамМероприятий);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	МероприятияОбученияРазвития.Ссылка КАК Мероприятие
			|ПОМЕСТИТЬ ВТМероприятияОтбор
			|ИЗ
			|	Справочник.МероприятияОбученияРазвития КАК МероприятияОбученияРазвития
			|ГДЕ
			|	МероприятияОбученияРазвития.ВидМероприятия В(&ОтборПоВидамМероприятий)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	МероприятияОбученияРазвития.Ссылка
			|ИЗ
			|	Справочник.МероприятияОбученияРазвития КАК МероприятияОбученияРазвития
			|ГДЕ
			|	МероприятияОбученияРазвития.Ссылка В(&ОтборПоМероприятиям)";
			Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
	КонецЕсли;	
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбучениеСотрудников.Сотрудник КАК Сотрудник,
		|	ОбучениеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбучениеСотрудников.Мероприятие,
		|	ОбучениеСотрудников.ДатаНачала КАК ДатаНачала,
		|	ОбучениеСотрудников.ДатаОкончания,
		|	ОбучениеСотрудников.Регистратор КАК ДокументОбучения,
		|	ОбучениеСотрудников.Подразделение,
		|	ОбучениеСотрудников.КоличествоУчебныхЧасов,
		|	ОбучениеСотрудников.СуммаРасходов,
		|	ОбучениеСотрудников.ПервичныйЭтапОбучения,
		|	ОбучениеСотрудников.Контрагент,
		|	ОбучениеСотрудников.УчебноеЗаведение,
		|	ОбучениеСотрудников.Преподаватель
		|ПОМЕСТИТЬ %ВТОбучениеСотрудников%
		|ИЗ
		|	РегистрСведений.ОбучениеСотрудников КАК ОбучениеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаОтбор КАК ВТФизическиеЛицаОтбор
		|		ПО ОбучениеСотрудников.ФизическоеЛицо = ВТФизическиеЛицаОтбор.ФизическоеЛицо
		|			И (ОбучениеСотрудников.ДатаНачала МЕЖДУ ВТФизическиеЛицаОтбор.ДатаНачала И ВТФизическиеЛицаОтбор.ДатаОкончания
		|				ИЛИ (ВТФизическиеЛицаОтбор.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|						И ВТФизическиеЛицаОтбор.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ВТФизическиеЛицаОтбор.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|						И ОбучениеСотрудников.ДатаНачала >= ВТФизическиеЛицаОтбор.ДатаНачала))";
	Если ЕстьОтборПоМероприятиям Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМероприятияОтбор КАК ВТМероприятияОтбор
		|		ПО ОбучениеСотрудников.Мероприятие = ВТМероприятияОтбор.Мероприятие";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВТОбучениеСотрудников%", ИмяРезультирующейТаблицы);
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеРегламентныхДокументов
	
Процедура ЗаполнитьОтпускИзДокументаОбучения(Объект, ДанныеЗаполнения) Экспорт
	
	Если Не ДанныеЗаполнения.Свойство("ДанныеДокументаОбучения") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОтпуска = ДанныеЗаполнения.ДанныеДокументаОбучения;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтпуска.Подразделение, "Источник");
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Объект.Организация = Организация;
	КонецЕсли;
	
	Объект.ПредоставитьОсновнойОтпуск = Ложь;
	
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
	
	Если ДанныеОтпуска.Сотрудник.Количество() > 0 Тогда
		Объект.Сотрудник = ДанныеОтпуска.Сотрудник[0];
	КонецЕсли;
	
	ПроизводственныйКалендарьСотрудника = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "Организация, ГрафикРаботы");
		Объект.Организация = КадровыеДанныеСотрудника[0].Организация;
		ПроизводственныйКалендарьСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанныеСотрудника[0].ГрафикРаботы, "ПроизводственныйКалендарь");
	КонецЕсли;
	
	ПланируемаяДатыВыплатыОтпуска = Документы.Отпуск.ПланируемаяДатыВыплатыОтпуска(Объект.ДатаНачалаСобытия, ПроизводственныйКалендарьСотрудника);
	Если ПланируемаяДатыВыплатыОтпуска <> Неопределено Тогда
		Объект.ПланируемаяДатаВыплаты = ПланируемаяДатыВыплатыОтпуска;
	КонецЕсли;														
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
		
		Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
			ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Объект.ДолжностьРуководителя) Тогда
			ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
		КонецЕсли; 
		
		ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "ГлавныйБухгалтер");
		ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Бухгалтер");
		
		ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "РаботникКадровойСлужбы");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "ДолжностьРаботникаКадровойСлужбы");
		
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Объект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
		
		
		Объект.ПредоставитьДополнительныйОтпуск = Истина;
		
		// Вводим строку отпуска.
		НоваяСтрокаДополнительногоОтпуска = Объект.ДополнительныеОтпуска.Добавить();
		НоваяСтрокаДополнительногоОтпуска.ВидОтпуска = ДанныеОтпуска.ВидОтпуска;
		НоваяСтрокаДополнительногоОтпуска.ДатаНачала = ДанныеОтпуска.ДатаНачала;
		НоваяСтрокаДополнительногоОтпуска.ДатаОкончания = ДанныеОтпуска.ДатаОкончания;
		
		Если ЗначениеЗаполнено(НоваяСтрокаДополнительногоОтпуска.ДатаОкончания) И ЗначениеЗаполнено(НоваяСтрокаДополнительногоОтпуска.ДатаНачала) 
			И НоваяСтрокаДополнительногоОтпуска.ДатаНачала <= НоваяСтрокаДополнительногоОтпуска.ДатаОкончания Тогда
			
			ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(НоваяСтрокаДополнительногоОтпуска.ВидОтпуска, Ложь);
			
			НоваяСтрокаДополнительногоОтпуска.КоличествоДней = 
			УчетРабочегоВремениРасширенный.ДлительностьИнтервала(
			Объект.Сотрудник,
			НоваяСтрокаДополнительногоОтпуска.ДатаНачала,
			НоваяСтрокаДополнительногоОтпуска.ДатаОкончания,
			ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням,
			ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
			
		Иначе
			НоваяСтрокаДополнительногоОтпуска.КоличествоДней = 0;
		КонецЕсли;
		
		// ОбновитьРабочийГодДополнительногоОтпуска.
		Если (ЗначениеЗаполнено(НоваяСтрокаДополнительногоОтпуска.ВидОтпуска) И ЗначениеЗаполнено(НоваяСтрокаДополнительногоОтпуска.ДатаНачала) И ЗначениеЗаполнено(НоваяСтрокаДополнительногоОтпуска.ДатаОкончания))
			Или (ЗначениеЗаполнено(НоваяСтрокаДополнительногоОтпуска.КоличествоДнейКомпенсации)) Тогда               
			
			УстановитьПривилегированныйРежим(Истина);
			
			СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
			СтруктураПараметров.Сотрудник = Объект.Сотрудник;
			СтруктураПараметров.ТекущийРегистратор = Объект.Ссылка;
			СтруктураПараметров.ВидОтпуска = НоваяСтрокаДополнительногоОтпуска.ВидОтпуска;
			СтруктураПараметров.ДатаНачала = НоваяСтрокаДополнительногоОтпуска.ДатаНачала;
			СтруктураПараметров.ДатаОкончания = НоваяСтрокаДополнительногоОтпуска.ДатаОкончания;
			СтруктураПараметров.ДатаКомпенсации = Объект.ПериодРегистрации;
			СтруктураПараметров.КоличествоДнейКомпенсации = НоваяСтрокаДополнительногоОтпуска.КоличествоДнейКомпенсации;
			ПериодДополнительногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
			
			НоваяСтрокаДополнительногоОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодС;
			НоваяСтрокаДополнительногоОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодПо;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтпускаСотрудниковИзДокументаОбучения(Объект, ДанныеЗаполнения) Экспорт
	
	Если Не ДанныеЗаполнения.Свойство("ДанныеДокументаОбучения") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОтпуска = ДанныеЗаполнения.ДанныеДокументаОбучения;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтпуска.Подразделение, "Источник");
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Объект.Организация = Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Объект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	КонецЕсли; 
	
	Для каждого Сотрудник Из ДанныеОтпуска.Сотрудник Цикл
	
		НовыйСотрудник = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйСотрудник, ДанныеОтпуска, "ДатаНачала, ДатаОкончания, ВидОтпуска");
		НовыйСотрудник.Сотрудник = Сотрудник;
		
		Если ЗначениеЗаполнено(НовыйСотрудник.ДатаОкончания) И ЗначениеЗаполнено(НовыйСотрудник.ДатаНачала) 
			И НовыйСотрудник.ДатаНачала <= НовыйСотрудник.ДатаОкончания Тогда
			
			ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(НовыйСотрудник.ВидОтпуска, Ложь);
			
			НовыйСотрудник.КоличествоДней = 
				УчетРабочегоВремениРасширенный.ДлительностьИнтервала(
					НовыйСотрудник.Сотрудник,
					НовыйСотрудник.ДатаНачала,
					НовыйСотрудник.ДатаОкончания,
					ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням,
					ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
			
		Иначе
			НовыйСотрудник.КоличествоДней = 0;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник = НовыйСотрудник.Сотрудник;
		СтруктураПараметров.ТекущийРегистратор = Объект.Ссылка;
		СтруктураПараметров.ВидОтпуска = НовыйСотрудник.ВидОтпуска;
		СтруктураПараметров.ДатаНачала = НовыйСотрудник.ДатаНачала;
		СтруктураПараметров.ДатаОкончания = НовыйСотрудник.ДатаОкончания;
		ПериодДополнительногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
				
		НовыйСотрудник.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодС;
		НовыйСотрудник.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодПо;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьКомандировкуИзДокументаОбучения(Объект, ДанныеЗаполнения) Экспорт

	Если Не ДанныеЗаполнения.Свойство("ДанныеДокументаОбучения") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеКомандировки = ДанныеЗаполнения.ДанныеДокументаОбучения;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКомандировки.Подразделение, "Источник");
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Объект.Организация = Организация;
	КонецЕсли;
	
	Объект.ДатаНачала = ДанныеКомандировки.ДатаНачала;
	Объект.ДатаОкончания = ДанныеКомандировки.ДатаОкончания;
	Объект.МестоНазначения = ДанныеКомандировки.МестоПроведения;
	Объект.ОрганизацияНазначения = ДанныеКомандировки.УчебноеЗаведение;
	Объект.Цель = НСтр("ru = 'Обучение.'");
	
	
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
	Объект.ДатаНачалаСобытия = ДанныеКомандировки.ДатаНачала;
	
	Если ДанныеКомандировки.Сотрудник.Количество() > 0 Тогда
		Объект.Сотрудник = ДанныеКомандировки.Сотрудник[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "Организация");
		Объект.Организация = КадровыеДанныеСотрудника[0].Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
		
		Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
			ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Объект.ДолжностьРуководителя) Тогда
			ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
		КонецЕсли; 
		
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Объект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьКомандировкиСотрудниковИзДокументаОбучения(Объект, ДанныеЗаполнения) Экспорт

	Если Не ДанныеЗаполнения.Свойство("ДанныеДокументаОбучения") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеКомандировки = ДанныеЗаполнения.ДанныеДокументаОбучения;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКомандировки.Подразделение, "Источник");
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Объект.Организация = Организация;
	КонецЕсли;
	
	Объект.ДатаСобытия = ДанныеКомандировки.ДатаНачала;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Объект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	КонецЕсли; 
	
	Для каждого Сотрудник Из ДанныеКомандировки.Сотрудник Цикл
	
		НовыйСотрудник = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйСотрудник, ДанныеКомандировки, "ДатаНачала, ДатаОкончания");
		
		НовыйСотрудник.Сотрудник = Сотрудник;
		НовыйСотрудник.МестоНазначения = ДанныеКомандировки.МестоПроведения;
		НовыйСотрудник.ОрганизацияНазначения = ДанныеКомандировки.УчебноеЗаведение;
		НовыйСотрудник.Цель = НСтр("ru = 'Обучение.'");
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьСвидетельствоИзДокументаОбучения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	Если НЕ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	Если НЕ ДанныеЗаполнения.Свойство("ДанныеДокументаОбучения") ИЛИ НЕ ДанныеЗаполнения.Свойство("Ссылка") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеСвидетельства = ДанныеЗаполнения.ДанныеДокументаОбучения;
	
	Если Объект.ЭтоНовый() Тогда
		
		Объект.Владелец = ДанныеСвидетельства.ФизическоеЛицо;
		ЗаполнитьЗначенияСвойств(Объект, ДанныеСвидетельства, "УчебноеЗаведение, Квалификация, Начало, Окончание, НаименованиеКурса, КоличествоЧасов, Основание");
		Объект.ВидДокумента = ДанныеСвидетельства.ВидДокументаОбОбразовании;
		Объект.Специальность = ДанныеСвидетельства.ПрисваиваемаяСпециальность;
		Объект.ВидОбразования = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование");
		
		Если ДанныеСвидетельства.ВидМероприятия = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыМероприятияОбученияРазвития.Переподготовка") Тогда
			 Объект.ВидДополнительногоОбучения = ПредопределенноеЗначение("Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка");
		ИначеЕсли ДанныеСвидетельства.ВидМероприятия = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыМероприятияОбученияРазвития.ПовышениеКвалификации") Тогда
			 Объект.ВидДополнительногоОбучения = ПредопределенноеЗначение("Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации");
		КонецЕсли;
		 
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ПрограммаОбученияПрофиляДолжности(ПрофильДолжности) Экспорт

	ВозвращаемаяСтруктура = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиДолжностей.ПродолжительностьПланаОбучения КАК ПродолжительностьПланаОбучения,
		|	ПрофилиДолжностей.РазмерностьПродолжительностиПланаОбучения КАК РазмерностьПродолжительностиПланаОбучения
		|ИЗ
		|	Справочник.ПрофилиДолжностей КАК ПрофилиДолжностей
		|ГДЕ
		|	ПрофилиДолжностей.Ссылка = &ПрофильДолжности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрофилиДолжностейПрограммаОбучения.Мероприятие КАК Мероприятие,
		|	ПрофилиДолжностейПрограммаОбучения.Ответственный КАК Ответственный,
		|	ПрофилиДолжностейПрограммаОбучения.Начало КАК Начало,
		|	ПрофилиДолжностейПрограммаОбучения.Окончание КАК Окончание
		|ИЗ
		|	Справочник.ПрофилиДолжностей.ПрограммаОбучения КАК ПрофилиДолжностейПрограммаОбучения
		|ГДЕ
		|	ПрофилиДолжностейПрограммаОбучения.Ссылка = &ПрофильДолжности";
	
	Запрос.УстановитьПараметр("ПрофильДолжности", ПрофильДолжности);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатНастройки = РезультатЗапроса[РезультатЗапроса.Количество() - 2];
	РезультатПрограммаОбучения = РезультатЗапроса[РезультатЗапроса.Количество() - 1];
	
	СтруктураНастроек = Новый Структура("ПродолжительностьПланаОбучения, РазмерностьПродолжительностиПланаОбучения");
	Если Не РезультатНастройки.Пустой() Тогда
		Выборка = РезультатНастройки.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Выборка);
	КонецЕсли;
	
	ВозвращаемаяСтруктура.Вставить("НастройкиПрограммыОбучения", СтруктураНастроек);
	ВозвращаемаяСтруктура.Вставить("ПрограммаОбучения", РезультатПрограммаОбучения.Выгрузить());
	
	Возврат ВозвращаемаяСтруктура;

КонецФункции

#КонецОбласти 

#Область ДвиженияДокументов

// Заполняет движения ОбучениеСотрудников.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ПлановыеДвижения - таблица значений с полями:
//		Организация
//		Мероприятие
//		ДатаНачала
//		ДатаОкончания
//		Сотрудник
//		КоличествоУчебныхЧасов
//		СуммаРасходов
//		Преподаватель
//		УчебноеЗаведение
//		Контрагент
//
Процедура СформироватьДвиженияОбучения(Движения, ДвиженияОбучения) Экспорт
	
	Для Каждого СтрокаДанных Из ДвиженияОбучения Цикл
		НоваяСтрока = Движения.ОбучениеСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных,"Подразделение, Мероприятие, ДатаНачала, ДатаОкончания,
			|ФизическоеЛицо, Сотрудник, КоличествоУчебныхЧасов, СуммаРасходов, Преподаватель,
			|УчебноеЗаведение, Контрагент, ПервичныйЭтапОбучения, Оценка, КомментарийКОценке, Балл");
	КонецЦикла;
	
	Движения.ОбучениеСотрудников.Записать();
	Движения.ОбучениеСотрудников.Записывать = Ложь;
	
КонецПроцедуры

// Заполняет движения УсловияУченическогоДоговора.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ПлановыеДвижения - таблица значений с полями:
//		Организация
//		ФизическоеЛицо
//		УченическийДоговор
//		ДатаНачалаОбязательств
//		Сумма
//
Процедура СформироватьДвиженияУсловийУченическогоДоговора(Движения, ДвиженияУсловийУченическогоДоговора) Экспорт
	
	Для Каждого СтрокаДанных Из ДвиженияУсловийУченическогоДоговора Цикл
		НоваяСтрока = Движения.УсловияУченическогоДоговора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных,"Организация, ФизическоеЛицо, УченическийДоговор, ДатаНачалаОбязательств, ДатаОкончанияОбязательств, Сумма");
	КонецЦикла;
	
	Движения.УсловияУченическогоДоговора.Записать();
	Движения.УсловияУченическогоДоговора.Записывать = Ложь;
	
КонецПроцедуры

// Заполняет движения ПланОбученияПланОбученияПоМероприятиям.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ПлановыеДвижения - таблица значений с полями:
//		Организация
//		Мероприятие
//		ДатаНачала
//		ДатаОкончания
//		Сотрудник
//		КоличествоУчебныхЧасов
//		СуммаРасходов
//		ДатаНачалаПланирования
//		ДатаОкончанияПланирования
//
Процедура СформироватьДвиженияПланаПоМероприятиям(Движения, ПлановыеДвиженияМероприятий) Экспорт
	
	// Движения по мероприятиям 
	Для Каждого СтрокаДанных Из ПлановыеДвиженияМероприятий Цикл
		НоваяСтрока = Движения.ПланОбученияПоМероприятиям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
	КонецЦикла;
	
	Движения.ПланОбученияПоМероприятиям.Записать();
	Движения.ПланОбученияПоМероприятиям.Записывать = Ложь;
	
КонецПроцедуры

// Заполняет движения ПланОбученияСотрудников.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ПлановыеДвижения - таблица значений с полями:
//		Организация
//		Мероприятие
//		ДатаНачала
//		ДатаОкончания
//		Сотрудник
//		КоличествоУчебныхЧасов
//		СуммаРасходов
//		ДатаНачалаПланирования
//		ДатаОкончанияПланирования
//
Процедура СформироватьДвиженияПланаПоСотрудникам(Движения, ПлановыеДвиженияСотрудников) Экспорт
	
	// Детальные движения по сотрудникам 
	Для Каждого СтрокаДанных Из ПлановыеДвиженияСотрудников Цикл
		НоваяСтрока = Движения.ПланОбученияСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
	КонецЦикла;
	
	Движения.ПланОбученияСотрудников.Записать();
	Движения.ПланОбученияСотрудников.Записывать = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область УправлениеЗаявками

// Устанавливает видимость команд заявки.
//
Процедура СкрытьНеРазрешенныеКомандыПоРолям(Форма) Экспорт
	
	// Устанавливаем видимость команд в зависимости от доступности ролей.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаВернутьНаПодготовку",
		"Видимость",
		Форма.ДоступноСогласованиеПервогоУровня);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаОтклонить",
		"Видимость",
		Форма.ДоступноСогласованиеВторогоУровня);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаОтменитьСогласование",
		"Видимость",
		Форма.ДоступноСогласованиеПервогоУровня ИЛИ Форма.ДоступноСогласованиеВторогоУровня);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаНаправитьНаСогласование",
		"Видимость",
		Форма.ДоступноСогласованиеПервогоУровня);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаСогласовать",
		"Видимость",
		Форма.ДоступноСогласованиеВторогоУровня);
	
КонецПроцедуры

Процедура УстановитьРеквизитыДоступностиРолей(Форма) Экспорт

	Форма.ДоступноСогласованиеПервогоУровня = Пользователи.РолиДоступны("ДобавлениеИзменениеЗаявокНаОбучениеРазвитие",, Ложь);
	Форма.ДоступноСогласованиеВторогоУровня = Форма.ДоступноСогласованиеПервогоУровня И Пользователи.РолиДоступны("СогласованиеЗаявокНаОбучениеРазвитие",, Ложь);

КонецПроцедуры

// Запись заявки на обучение и развитие.
//
Функция ЗаписатьЗаявкуНаСервере(ЗаявкаОбъект, НовыйСтатус) Экспорт
	
	// Определяем режим проведения документа.
	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка") Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Записывать = Истина;
	СтатусДоЗаписи = ЗаявкаОбъект.Статус;
	ЗаявкаОбъект.Статус = НовыйСтатус;
	// Перед проведением проверим заполнение
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Записывать = ЗаявкаОбъект.ПроверитьЗаполнение();
	КонецЕсли;
	
	ВозвращаемаяСтруктура = Новый Структура("Записана", Записывать);
	Если Записывать Тогда
		ЗаявкаОбъект.Записать(РежимЗаписи);
		ВозвращаемаяСтруктура.Вставить("Ссылка", ЗаявкаОбъект.Ссылка);
	Иначе
		// Если проверка заполнения не удалась необходимо откатить статус.
		ЗаявкаОбъект.Статус = СтатусДоЗаписи;
	КонецЕсли;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Возвращает структуру, описывающую текущий статус заявки на мероприятие обучения и развития по ссылке.
//
Функция СтатусЗаявкиНаВключениеВПлан(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ВключенаВПлан
		|ПОМЕСТИТЬ ВключениеВПлан
		|ИЗ
		|	Документ.ПланОбученияРазвития.Мероприятия КАК ПланОбученияРазвитияМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланОбученияРазвития КАК ПланОбученияРазвития
		|		ПО ПланОбученияРазвитияМероприятия.Ссылка = ПланОбученияРазвития.Ссылка
		|ГДЕ
		|	ПланОбученияРазвитияМероприятия.Заявка = &Ссылка
		|	И ПланОбученияРазвития.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаВключениеВПланОбучения.Статус КАК Статус,
		|	ЕСТЬNULL(ВключениеВПлан.ВключенаВПлан, ЛОЖЬ) КАК ВключенаВПлан,
		|	ВЫБОР
		|		КОГДА НЕ ВключениеВПлан.ВключенаВПлан ЕСТЬ NULL 
		|			ТОГДА &ЗапланированоОбучение
		|		КОГДА ЗаявкаНаВключениеВПланОбучения.Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.ПустаяСсылка)
		|			ТОГДА &Готовится
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаявкаНаВключениеВПланОбучения.Статус)
		|	КОНЕЦ КАК СтатусНаименование
		|ИЗ
		|	Документ.ЗаявкаНаВключениеВПланОбучения КАК ЗаявкаНаВключениеВПланОбучения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВключениеВПлан КАК ВключениеВПлан
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЗаявкаНаВключениеВПланОбучения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ЗапланированоОбучение", НСтр("ru = 'Запланировано обучение'"));
	Запрос.УстановитьПараметр("Готовится", НСтр("ru = 'Готовится'"));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
			
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить("Статус", ВыборкаДетальныеЗаписи.Статус);
		ВозвращаемаяСтруктура.Вставить("ВключенаВПлан", ВыборкаДетальныеЗаписи.ВключенаВПлан);
		ВозвращаемаяСтруктура.Вставить("СтатусНаименование", ВыборкаДетальныеЗаписи.СтатусНаименование);
		ВозвращаемаяСтруктура.Вставить("ОтображатьСтатус", ВыборкаДетальныеЗаписи.ВключенаВПлан);
		
		Возврат ВозвращаемаяСтруктура;
		
	КонецЕсли;

КонецФункции

// Возвращает структуру, описывающую текущий статус заявки на мероприятие обучения и развития по ссылке.
//
Функция СтатусЗаявкиНаОбучение(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ВключенаВОбучение
		|ПОМЕСТИТЬ ПроведениеОбучения
		|ИЗ
		|	Документ.ОбучениеРазвитиеСотрудников КАК ОбучениеРазвитиеСотрудников
		|ГДЕ
		|	ОбучениеРазвитиеСотрудников.Основание = &Ссылка
		|	И ОбучениеРазвитиеСотрудников.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаОбучениеРазвитие.Статус КАК Статус,
		|	ЕСТЬNULL(ПроведениеОбучения.ВключенаВОбучение, ЛОЖЬ) КАК ВключенаВОбучение,
		|	ВЫБОР
		|		КОГДА НЕ ПроведениеОбучения.ВключенаВОбучение ЕСТЬ NULL 
		|			ТОГДА &Исполнена
		|		КОГДА ЗаявкаНаОбучениеРазвитие.Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.ПустаяСсылка)
		|			ТОГДА &Готовится
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаявкаНаОбучениеРазвитие.Статус)
		|	КОНЕЦ КАК СтатусНаименование
		|ИЗ
		|	Документ.ЗаявкаНаОбучениеРазвитие КАК ЗаявкаНаОбучениеРазвитие
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПроведениеОбучения КАК ПроведениеОбучения
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЗаявкаНаОбучениеРазвитие.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Исполнена", НСтр("ru = 'Исполнена'"));
	Запрос.УстановитьПараметр("Готовится", НСтр("ru = 'Готовится'"));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ОтображатьСтатус = ВыборкаДетальныеЗаписи.ВключенаВОбучение
			ИЛИ ВыборкаДетальныеЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано");
			
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить("Статус", ВыборкаДетальныеЗаписи.Статус);
		ВозвращаемаяСтруктура.Вставить("ВключенаВОбучение", ВыборкаДетальныеЗаписи.ВключенаВОбучение);
		ВозвращаемаяСтруктура.Вставить("СтатусНаименование", ВыборкаДетальныеЗаписи.СтатусНаименование);
		ВозвращаемаяСтруктура.Вставить("ОтображатьСтатус", ОтображатьСтатус);
		
		Возврат ВозвращаемаяСтруктура;
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ЗаписьОснованияПРОФДокументов

Процедура ЗаписатьКомандировкаОснования(ОбъектСсылка, Обучение, Организация = Неопределено) Экспорт

	Если Организация = Неопределено Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Организация");
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.КомандировкаОснования.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ОбъектСсылка = ОбъектСсылка;
	МенеджерЗаписи.Обучение = Обучение;
	МенеджерЗаписи.Организация = Организация;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗаписатьКомандировкиСотрудниковОснования(ОбъектСсылка, Обучение, Организация = Неопределено) Экспорт

	Если Организация = Неопределено Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Организация");
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.КомандировкиСотрудниковОснования.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ОбъектСсылка = ОбъектСсылка;
	МенеджерЗаписи.Обучение = Обучение;
	МенеджерЗаписи.Организация = Организация;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗаписатьОбразованиеФизическихЛицОснования(ОбъектСсылка, Обучение, ФизическоеЛицо = Неопределено, Мероприятие = Неопределено) Экспорт

	МенеджерЗаписи = РегистрыСведений.ОбразованиеФизическихЛицОснования.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ОбъектСсылка = ОбъектСсылка;
	МенеджерЗаписи.Обучение = Обучение;
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Мероприятие = Мероприятие;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗаписатьОтпускОснования(ОбъектСсылка, Обучение, Организация = Неопределено) Экспорт

	Если Организация = Неопределено Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Организация");
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОтпускОснования.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ОбъектСсылка = ОбъектСсылка;
	МенеджерЗаписи.Обучение = Обучение;
	МенеджерЗаписи.Организация = Организация;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗаписатьОтпускаСотрудниковОснования(ОбъектСсылка, Обучение, Организация = Неопределено) Экспорт

	Если Организация = Неопределено Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Организация");
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОтпускаСотрудниковОснования.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ОбъектСсылка = ОбъектСсылка;
	МенеджерЗаписи.Обучение = Обучение;
	МенеджерЗаписи.Организация = Организация;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

#КонецОбласти

// Возвращает выборку запроса с запланированными мероприятиями, попадающих в указанный период.
//	для указанного физического лица.
Функция ОткрытыеПубликацииДляФизическогоЛица(ФизическоеЛицо, ДатаПубликации) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппыСотрудников.СоздатьВТГруппыСотрудниковФизическихЛиц(Запрос.МенеджерВременныхТаблиц, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо), Истина);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаГрупп.Группа
		|ПОМЕСТИТЬ ВТГруппы
		|ИЗ
		|	ВТГруппыСотрудниковФизическихЛиц КАК ТаблицаГрупп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПубликацияМероприятияОбученияРазвития.Ссылка КАК Публикация,
		|	ПубликацияМероприятияОбученияРазвития.ДатаОкончания,
		|	ПубликацияМероприятияОбученияРазвития.Мероприятие,
		|	ПубликацияМероприятияОбученияРазвития.ДатаНачалаСобытия,
		|	ПубликацияМероприятияОбученияРазвития.МестоПроведения КАК МестоПроведения,
		|	ПубликацияМероприятияОбученияРазвития.ДополнительнаяИнформация
		|ПОМЕСТИТЬ ОткрытыеПубликации
		|ИЗ
		|	Документ.ПубликацияМероприятияОбученияРазвития КАК ПубликацияМероприятияОбученияРазвития
		|ГДЕ
		|	(ПубликацияМероприятияОбученияРазвития.ДатаОкончания >= &ДатаПубликации
		|			ИЛИ ПубликацияМероприятияОбученияРазвития.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|	И ПубликацияМероприятияОбученияРазвития.Проведен
		|	И ПубликацияМероприятияОбученияРазвития.ДоступнаВсемСотрудникам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПубликацияМероприятияОбученияРазвития.Ссылка,
		|	ПубликацияМероприятияОбученияРазвития.ДатаОкончания,
		|	ПубликацияМероприятияОбученияРазвития.Мероприятие,
		|	ПубликацияМероприятияОбученияРазвития.ДатаНачалаСобытия,
		|	ПубликацияМероприятияОбученияРазвития.МестоПроведения,
		|	ПубликацияМероприятияОбученияРазвития.ДополнительнаяИнформация
		|ИЗ
		|	Документ.ПубликацияМероприятияОбученияРазвития КАК ПубликацияМероприятияОбученияРазвития
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГруппы КАК ВТГруппы
		|		ПО ПубликацияМероприятияОбученияРазвития.ГруппаСотрудников = ВТГруппы.Группа
		|ГДЕ
		|	ПубликацияМероприятияОбученияРазвития.Проведен
		|	И НЕ ПубликацияМероприятияОбученияРазвития.ДоступнаВсемСотрудникам
		|	И (ПубликацияМероприятияОбученияРазвития.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ПубликацияМероприятияОбученияРазвития.ДатаОкончания >= &ДатаПубликации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОткрытыеПубликации.Публикация КАК Публикация,
		|	ОткрытыеПубликации.Мероприятие КАК Мероприятие,
		|	ОткрытыеПубликации.ДатаНачалаСобытия,
		|	ОткрытыеПубликации.МестоПроведения,
		|	ОткрытыеПубликации.ДатаОкончания,
		|	ОткрытыеПубликации.ДополнительнаяИнформация,
		|	ОткликиНаПубликациюМероприятияОбученияРазвития.Отклик
		|ИЗ
		|	ОткрытыеПубликации КАК ОткрытыеПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОткликиНаПубликациюМероприятияОбученияРазвития КАК ОткликиНаПубликациюМероприятияОбученияРазвития
		|		ПО ОткрытыеПубликации.Публикация = ОткликиНаПубликациюМероприятияОбученияРазвития.Публикация
		|			И (ОткликиНаПубликациюМероприятияОбученияРазвития.ФизическоеЛицо = &ФизическоеЛицо)";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		Запрос.УстановитьПараметр("ДатаПубликации", ДатаПубликации);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Возврат РезультатЗапроса;

КонецФункции

// Заполняет табличную часть документа на основании мероприятия
//
Процедура ЗаполнитьТабличнуюЧастьРасходовПоМероприятию(МероприятиеСтруктураРеквизитов, ТабличнаяЧастьРасходы, КоличествоСотрудников) Экспорт

	// В случае если сотрудники еще не подобраны - все равно рассчитываем сумму исходя из одного сотрудника.
	КоличествоСотрудников = Макс(КоличествоСотрудников,1);
	
	// заполняем расходы
	ТабличнаяЧастьРасходы.Очистить();
	Если МероприятиеСтруктураРеквизитов.Стоимость > 0 Тогда
		НоваяСтрокаРасходов = ТабличнаяЧастьРасходы.Добавить();
		Если МероприятиеСтруктураРеквизитов.СпособОпределенияСтоимости = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыРасходовНаПерсонал.СуммаКратнаКоличествуСотрудников") Тогда
			НоваяСтрокаРасходов.Сумма = МероприятиеСтруктураРеквизитов.Стоимость * КоличествоСотрудников;
		Иначе
			НоваяСтрокаРасходов.Сумма = МероприятиеСтруктураРеквизитов.Стоимость;
		КонецЕсли;
		НоваяСтрокаРасходов.Примечание = ПримечаниеРасходовНаОбучение(МероприятиеСтруктураРеквизитов.Наименование, КоличествоСотрудников);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыОбучениеРазвитие(ОписанияПрофилей, ПараметрыОбновления) Экспорт 

	ОписаниеПрофиля = ОписаниеПрофиляМенеджерПоОбучению();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт

	// Раздел ОбучениеРазвитие
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаОбучениеРазвитие",							"ДатаНачала",				"ОбучениеРазвитие", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаВключениеВПланОбучения",						"ДатаНачала",				"ОбучениеРазвитие", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОбучениеРазвитиеСотрудников",					 	"ДатаНачала",				"ОбучениеРазвитие", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПланОбученияРазвития",				 				"ДатаНачалаПланирования",	"ОбучениеРазвитие", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПубликацияМероприятияОбученияРазвития", 				"Дата",						"ОбучениеРазвитие");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УченическийДоговор", 								"Дата",						"ОбучениеРазвитие", "Организация");

КонецПроцедуры

// Формирует текст, содержащий в себе основные сведения о мероприятии.
//	Параметры
//		Мероприятие - СправочникСсылка.МероприятияОбученияРазвития
//		Приемник - тип ДокументСсылка.
Функция ИнфоНадписьМероприятия(Мероприятие, Приемник = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаРеквизитов = 
		"ВидМероприятия, 
		|СпособПроведения, 
		|ОбучениеСОтрывомОтПроизводства, 
		|КоличествоУчебныхЧасов, 
		|Преподаватель, 
		|УчебноеЗаведение, 
		|МестоПроведения, 
		|Контрагент";
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие, ИменаРеквизитов);
	
	// Основные реквизиты.
	ТекстТипМероприятия = ?(РеквизитыМероприятия.ОбучениеСОтрывомОтПроизводства, НСтр("ru = 'с отрывом от производства'"), НСтр("ru = 'без отрыва от производства'"));
	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, %2'"),РеквизитыМероприятия.СпособПроведения, ТекстТипМероприятия);
	
	ТекстНадписи = ТекстНадписи + ДополнитьИнфоНадписьМероприятия(РеквизитыМероприятия, Приемник = Тип("ДокументСсылка.ОбучениеРазвитиеСотрудников"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекстНадписи;

КонецФункции 

Функция НаименованиеПреподавателяПоВидуМероприятия(ВидМероприятия, НачинатьСЗаглавной = Истина) Экспорт
	
	Если ВидМероприятия = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыМероприятияОбученияРазвития.Стажировка") Тогда
		НаименованиеПреподавателя = НСтр("ru = 'наставник'");
	Иначе
		НаименованиеПреподавателя = НСтр("ru = 'преподаватель'");
	КонецЕсли;
	
	Если НачинатьСЗаглавной Тогда
		НаименованиеПреподавателя = ТРег(НаименованиеПреподавателя);
	КонецЕсли;
	
	Возврат НаименованиеПреподавателя;
	
КонецФункции

// Используется в модуле ОбработкаПроверкиЗаполнения документов, проверяет наличие дублей физических лиц сотрудников.
//
Процедура ПроверитьТабличнуюЧастьСотрудниковНаДублиФизическихЛиц(ДокументОбъект, Отказ, ИмяТабличнойЧастиСотрудники = "Сотрудники") Экспорт

	ТаблицаСотрудников = ДокументОбъект[ИмяТабличнойЧастиСотрудники];
	СписокФизическихЛиц = Новый Соответствие;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
	
	Для каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
	    ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаСотрудника.Сотрудник];
		Если СписокФизическихЛиц.Получить(ФизическоеЛицо) = Неопределено Тогда
			СписокФизическихЛиц.Вставить(ФизическоеЛицо, Истина);
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru ='Данный человек уже подобран в документ.'"),
			ДокументОбъект,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяТабличнойЧастиСотрудники + "[%1].Сотрудник", ТаблицаСотрудников.Индекс(СтрокаСотрудника)),,
			Отказ);
	КонецЦикла; 

КонецПроцедуры

// Дополняет строки удержаний документа "Увольнение" удержанием по ученическим договорам, если такие существуют.
// 
Процедура ДополнитьТаблицуУдержанийДаннымиПоУченическимДоговорамСотрудника(Сотрудник, ДатаУвольнения, МенеджерРасчета) Экспорт

	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	
	УдержанияСотрудниковПоДоговорам = ОбязательстваСотрудниковПоУченическимДоговорам(ФизическоеЛицо, ДатаУвольнения);
	СуммаУдержания = УдержанияСотрудниковПоДоговорам.Получить(ФизическоеЛицо);
	
	Если НЕ СуммаУдержания = Неопределено Тогда
		УдержаниеПоДоговору = РасчетЗарплаты.УдержанияПоКатегории(Перечисления.КатегорииУдержаний.ОбязательстваПоУченическомуДоговору);
		Если УдержаниеПоДоговору.Количество() > 0 Тогда
			НоваяСтрокаУдержания = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыУдержаний(МенеджерРасчета.Зарплата.Удержания);
			НоваяСтрокаУдержания.ФизическоеЛицо = ФизическоеЛицо;
			НоваяСтрокаУдержания.Категория = Перечисления.КатегорииУдержаний.ОбязательстваПоУченическомуДоговору;
			НоваяСтрокаУдержания.Удержание = УдержаниеПоДоговору[0];
			НоваяСтрокаУдержания.Результат = СуммаУдержания;
			НоваяСтрокаУдержания.ДатаНачала = ДатаУвольнения;
			НоваяСтрокаУдержания.ДатаОкончания = ДатаУвольнения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет соответствие СвойстваПоКатегориям описанием категории ОбязательстваПоУченическомуДоговору.
//
Процедура ДополнитьСвойстваПоКатегориямУдержаниемПоУченическимДоговорам(СвойстваПоКатегориям, Описание) Экспорт

	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ОбязательстваПоУченическомуДоговору, Описание);

КонецПроцедуры

// Создает или выключает удержание по ученическому договору.
//
Процедура СоздатьОтключитьУдержаниеПоУченическомуДоговору(КоллекторУдержаний) Экспорт
	
	БылПривилегированныйРежим = ПривилегированныйРежим();
	Если НЕ БылПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СвойстваУдержаний = ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
	ОписаниеУдержания = ПланыВидовРасчета.Удержания.ОписаниеУдержания();
	
	ОписаниеУдержания.КатегорияУдержания	= Перечисления.КатегорииУдержаний.ОбязательстваПоУченическомуДоговору;
	ЗаполнитьЗначенияСвойств(ОписаниеУдержания, СвойстваУдержаний[Перечисления.КатегорииУдержаний.ОбязательстваПоУченическомуДоговору]);
	ОписаниеУдержания.Код						= НСтр("ru = 'УЧДОГ'");
	ОписаниеУдержания.Наименование				= НСтр("ru = 'Удержание по ученическому договору'");
	ОписаниеУдержания.КраткоеНаименование 		= НСтр("ru = 'По учен. договору'");
	ОписаниеУдержания.ФормулаРасчета 			= "";
	ОписаниеУдержания.Рассчитывается 			= Ложь;
	НастройкиОбучения = РегистрыСведений.НастройкиОбученияРазвития.Получить();
	Если НастройкиОбучения.ИспользоватьУченическиеДоговоры Тогда
		ПланыВидовРасчета.Удержания.СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, ОписаниеУдержания);
	Иначе
		ПланыВидовРасчета.Удержания.ОтключитьИспользованиеУдержания(КоллекторУдержаний, Перечисления.КатегорииУдержаний.ОбязательстваПоУченическомуДоговору);
	КонецЕсли;
	
	// Расставляем порядок для вновь созданных видов расчета.
	ПланыВидовРасчета.Удержания.ЗаполнитьПорядокУдержаний(КоллекторУдержаний);
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторУдержаний);
	
	Если НЕ БылПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОтклик(Публикация, ФизическоеЛицо, Отклик) Экспорт 
	
	Если ЗначениеЗаполнено(Отклик) Тогда
		МенеджерЗаписи = РегистрыСведений.ОткликиНаПубликациюМероприятияОбученияРазвития.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Публикация = Публикация;
		МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
		МенеджерЗаписи.Отклик = Отклик;
		МенеджерЗаписи.Записать(Истина);
	Иначе
		НаборЗаписей = РегистрыСведений.ОткликиНаПубликациюМероприятияОбученияРазвития.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Публикация.Установить(Публикация);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиВариантовОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных).
//
// Описание:
//   В Разделы необходимо добавить метаданные тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.ОбучениеИРазвитие) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.ОбучениеИРазвитие, НСтр("ru = 'Отчеты по обучению и развитию'"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ИсполнениеПланаОбучения);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РезультатыОбучения);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОбязательстваПоУченическимДоговорам);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИсполнениеПланаОбучения, "ИсполнениеПланаОбучения");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьОбучениеРазвитиеСотрудников");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РезультатыОбучения, "Мероприятия");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьОбучениеРазвитиеСотрудников");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РезультатыОбучения, "УчебныеЦентры");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьОбучениеРазвитиеСотрудников");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РезультатыОбучения, "Сотрудники");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьОбучениеРазвитиеСотрудников");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОбязательстваПоУченическимДоговорам, "ОбязательстваСотрудниковПоУчебнымДоговорам");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьУченическиеДоговоры");
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПрограммыОбученияВРешенииОПриеме(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПрограммаОбучения.Мероприятие");
	МассивНепроверяемыхРеквизитов.Добавить("ПрограммаОбучения.ДатаНачала");
	МассивНепроверяемыхРеквизитов.Добавить("ПрограммаОбучения.ДатаОкончания");
	
	СкрытаяПроверка = Не ПравоДоступа("Просмотр", Метаданные.Документы.РешениеОПриемеНаРаботу.ТабличныеЧасти.ПрограммаОбучения);
	
	Если Не ДокументОбъект.ЗапланироватьПрограммуОбучения Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Для каждого СтрокаОбучения Из ДокументОбъект.ПрограммаОбучения Цикл
		Если Не ЗначениеЗаполнено(СтрокаОбучения.Мероприятие) Тогда
			ЕстьОшибкиЗаполнения = Истина;
			Если Не СкрытаяПроверка Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнено мероприятие'"),
					ДокументОбъект,
					СтрШаблон("ПрограммаОбучения[%1].Мероприятие", ДокументОбъект.ПрограммаОбучения.Индекс(СтрокаОбучения)));
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаОбучения.ДатаНачала) Тогда
			ЕстьОшибкиЗаполнения = Истина;
			Если Не СкрытаяПроверка Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнена дата начала мероприятия'"),
					ДокументОбъект,
					СтрШаблон("ПрограммаОбучения[%1].ДатаНачала", ДокументОбъект.ПрограммаОбучения.Индекс(СтрокаОбучения)));
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаОбучения.ДатаОкончания) Тогда
			ЕстьОшибкиЗаполнения = Истина;
			Если Не СкрытаяПроверка Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнена дата окончания мероприятия'"),
					ДокументОбъект,
					СтрШаблон("ПрограммаОбучения[%1].ДатаОкончания", ДокументОбъект.ПрограммаОбучения.Индекс(СтрокаОбучения)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Если СкрытаяПроверка Тогда
		ДокументОбъект.ЗапланироватьПрограммуОбучения = Не ЕстьОшибкиЗаполнения;
	Иначе
		Отказ = Отказ ИЛИ ЕстьОшибкиЗаполнения;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

#КонецОбласти

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.25";
	Обработчик.Процедура = "Документы.ОбучениеРазвитиеСотрудников.ЗаполнитьПервичныйЭтап";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d2fefd9f-b19d-44a7-8d4d-66f4f416b5df");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ПервичныйЭтапОбучения.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.10";
	Обработчик.Процедура = "ОбучениеРазвитие.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("aa469cb6-72fa-4f58-b84b-ea9aa89d0a19");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений: обучение и развитие.'");
	
КонецПроцедуры

Функция ПримечаниеРасходовНаОбучение(ОбучениеНаименование, ОбучениеКоличество) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расходы на мероприятие обучения и развития <%1>, %2 чел.'"),
				ОбучениеНаименование,
				ОбучениеКоличество);
КонецФункции

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.ИндивидуальныйПланРазвития);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаОбучениеРазвитие);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаВключениеВПланОбучения);
	СписокОбъектов.Добавить(Документы.ПланОбученияРазвития);
	СписокОбъектов.Добавить(Документы.ОбучениеРазвитиеСотрудников);
	СписокОбъектов.Добавить(Документы.ПубликацияМероприятияОбученияРазвития);
	СписокОбъектов.Добавить(Документы.УченическийДоговор);
	
КонецПроцедуры

Процедура УстановитьБаллОценкеОбучения(ОценкаСсылка, Балл) Экспорт

	ОценкаОбъект = ОценкаСсылка.ПолучитьОбъект();
	ОценкаОбъект.Балл = Балл;
	ОценкаОбъект.Записать();

КонецПроцедуры

#КонецОбласти

Функция ПрограммаОбученияПоДатам(ДатаОтсчета, ПрограммаОбучения, РазмерностьПродолжительностиПланаОбучения) Экспорт

	ПрограммаОбученияПоДатам = Новый ТаблицаЗначений;
	ПрограммаОбученияПоДатам.Колонки.Добавить("Мероприятие", Новый ОписаниеТипов("СправочникСсылка.МероприятияОбученияРазвития"));
	ПрограммаОбученияПоДатам.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ПрограммаОбученияПоДатам.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Если РазмерностьПродолжительностиПланаОбучения = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		РазмерностьДни = 1;
		РазмерностьМесяц = 0;
	ИначеЕсли РазмерностьПродолжительностиПланаОбучения = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		РазмерностьДни = 7;
		РазмерностьМесяц = 0;
	ИначеЕсли РазмерностьПродолжительностиПланаОбучения = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		РазмерностьДни = 10;
		РазмерностьМесяц = 0;
	ИначеЕсли РазмерностьПродолжительностиПланаОбучения = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		РазмерностьДни = 0;
		РазмерностьМесяц = 1;
	ИначеЕсли РазмерностьПродолжительностиПланаОбучения = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		РазмерностьДни = 0;
		РазмерностьМесяц = 3;
	ИначеЕсли РазмерностьПродолжительностиПланаОбучения = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		РазмерностьДни = 0;
		РазмерностьМесяц = 6;
	ИначеЕсли РазмерностьПродолжительностиПланаОбучения = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		РазмерностьДни = 0;
		РазмерностьМесяц = 12;
	Иначе
		РазмерностьДни = 0;
		РазмерностьМесяц = 0;
	КонецЕсли;
	
	Для каждого СтрокаПрограммы Из ПрограммаОбучения Цикл
		НоваяСтрока = ПрограммаОбученияПоДатам.Добавить();
		НоваяСтрока.Мероприятие = СтрокаПрограммы.Мероприятие;
		
		НоваяСтрока.ДатаНачала = ДобавитьМесяц(НачалоДня(ДатаОтсчета), РазмерностьМесяц * (СтрокаПрограммы.Начало - 1))
									+ (СтрокаПрограммы.Начало - 1)*(РазмерностьДни*86400);
		
		НоваяСтрока.ДатаОкончания = ДобавитьМесяц(НачалоДня(ДатаОтсчета), РазмерностьМесяц * (СтрокаПрограммы.Окончание))
									+ СтрокаПрограммы.Окончание*(РазмерностьДни*86400) - 1;
	КонецЦикла; 

	Возврат ПрограммаОбученияПоДатам;
	
КонецФункции

Процедура ОбновитьПрограммуОбученияПозицийШтатногоРасписанияПоПрофилюДолжности(ПрофильДолжности, ПрограммаОбучения, ПродолжительностьПланаОбучения, РазмерностьПродолжительностиПланаОбучения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПозицииШтатногоРасписанияПоПрофилю(Запрос.МенеджерВременныхТаблиц, ПрофильДолжности);
	
	РегистрыСведений.НастройкиПрограммОбученияПозицийШтатногоРасписания.ОбновитьНастройкиПрограммОбученияПозицийШтатногоРасписанияПоПрофилюДолжности(
		Запрос.МенеджерВременныхТаблиц, ПродолжительностьПланаОбучения, РазмерностьПродолжительностиПланаОбучения);
	РегистрыСведений.ПрограммыОбученияПозицийШтатногоРасписания.ОбновитьПрограммыОбученияПозицийШтатногоРасписанияПоПрофилюДолжности(
		Запрос.МенеджерВременныхТаблиц, ПрограммаОбучения);
		
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТПозиции");
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf6b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявкаНаВключениеВПланОбучения);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf1c-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявкаНаОбучениеРазвитие);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОбучениеРазвитиеСотрудников);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf86-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПланОбученияРазвития);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf22-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПубликацияМероприятияОбученияРазвития);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbff4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УченическийДоговор);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf05-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыМероприятияОбученияРазвития);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf1d-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ИндивидуальныйПланРазвития);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf20-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.МероприятияОбученияРазвития);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ИндивидуальныйПланРазвития, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаНаВключениеВПланОбучения, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаНаВключениеВПланОбученияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаНаОбучениеРазвитие, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаНаОбучениеРазвитиеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОбучениеРазвитиеСотрудников, Истина);
	Списки.Вставить(Метаданные.Справочники.ОбучениеРазвитиеСотрудниковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПланОбученияРазвития, Истина);
	Списки.Вставить(Метаданные.Справочники.ПланОбученияРазвитияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.УченическийДоговор, Истина);
	Списки.Вставить(Метаданные.Справочники.УченическийДоговорПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// Процедура выполняет начальное заполнение данных подсистемы уведомлений
//
Процедура ПриНачальномЗаполненииДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("МероприятиеОбучения");
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		ПараметрыШаблона = Новый Структура();
		
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("ТемаПисьма", НСтр("ru='Уведомление о предстоящем обучении'"));
		ПараметрыШаблона.Вставить("ТипТекстаПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("ТекстШаблонаПисьма", НСтр("ru='Здравствуйте, [ФизическиеЛица.ФИО]!
			|Вам назначено обучение [ДанныеУведомления.ОбучениеСОтрывомОтПроизводства{БЛ=""без отрыва от производства""; БИ=""с отрывом от производства""}]:
			|Способ проведения: [ДанныеУведомления.СпособПроведения]
			|Учебное заведение: [ДанныеУведомления.УчебноеЗаведение]
			|Мероприятие: [ДанныеУведомления.Мероприятие]
			|Дата начала обучения:[ДанныеУведомления.ДатаСобытия]
			|Дата окончания обучения: [ДанныеУведомления.ДатаОкончания]'"));
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru='Уведомление о предстоящем обучении'"), ПараметрыШаблона);
		
		// Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления 	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта 	= Перечисления.ВидыТранспортаУведомлений.Email;
		РассылкаОбъект.УчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		РассылкаОбъект.Наименование 	= НСтр("ru='Уведомление о предстоящем обучении'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Предмет";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ДоСобытия;
		РассылкаОбъект.ИнтервалУведомления = 14;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.День;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет дополнить структуру видов уведомлений своими видами уведомлений. 
//
// Параметры:
//  СтруктураДоступныхВидовУведомлений - структура - перечень уведомлений, подключенных в подсистеме
//     * Ключ - Строка - Имя вида уведомления
//     * Значение - Структура - Описание вида уведомления (Структура)
//        * ВидУведомления - Строка, строковый идентификатор вида уведомления.
//        * Описание - Строка, Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//        * Инициализация - Строка, <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения
//                          запросов к базе данных.
//        * ПолучениеДанных - Строка, <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	// Предстоящее обучение
	СтруктураМероприятиеОбучения = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	СтруктураМероприятиеОбучения.ВидУведомления = НСтр("ru = 'Мероприятие обучения'");
	СтруктураМероприятиеОбучения.GUID = "1c50a48f-44b2-40ce-ba2a-687cbbf73b13";
	СтруктураМероприятиеОбучения.Описание = НСтр("ru = 'Уведомление, связанное с мероприятием обучения.'");
	СтруктураМероприятиеОбучения.Инициализация = "ОбучениеРазвитие.ИнициализацияМероприятиеОбучения";
	СтруктураМероприятиеОбучения.ПолучениеДанных = "ОбучениеРазвитие.ПолучениеДанныхМероприятиеОбучения";
	
	СтруктураДоступныхВидовУведомлений.Вставить("МероприятиеОбучения", СтруктураМероприятиеОбучения);
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет заполнить поля, доступные для шаблона
//  соответствующего вида уведомлений.
//
// Параметры:
//  ВидУведомления           - СправочникСсылка.ВидУведомления - вид уведомления - владелец шаблона
//  Реквизиты                - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//                                      и др.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона        - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "МероприятиеОбучения") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Предмет", НСтр("ru='Направляемый на обучение'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаСобытия", НСтр("ru='Дата начала обучения'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ОбучениеСОтрывомОтПроизводства", НСтр("ru='Обучение с отрывом от производства'"), Новый ОписаниеТипов("Булево"), "БЛ='без отрыва от производства'; БИ='с отрывом от производства'");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.СпособПроведения",НСтр("ru='Способ проведения'"), Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПроведенияМероприятийОбученияРазвития"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Мероприятие",НСтр("ru='Мероприятие'"), Новый ОписаниеТипов("СправочникСсылка.МероприятияОбученияРазвития"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ДатаОкончания",НСтр("ru='Дата окончания обучения'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Подразделение",НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.КоличествоУчебныхЧасов",НСтр("ru='Количество учебных часов'"), Новый ОписаниеТипов("Число"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Контрагент",НСтр("ru='Контрагент'"), Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.УчебноеЗаведение",НСтр("ru='Учебное заведение'"), Новый ОписаниеТипов("СправочникСсылка.УчебныеЗаведения"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Преподаватель",НСтр("ru='Преподаватель'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Назначено собеседование"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияМероприятиеОбучения(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Предмет", НСтр("ru='Сотрудник, направляемый на обучение'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "СпособПроведения", НСтр("ru='Способ проведения'"), Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПроведенияМероприятийОбученияРазвития"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ОбучениеСОтрывомОтПроизводства", НСтр("ru='Обучение с отрывом от производства'"), Новый ОписаниеТипов("Булево"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "УчебноеЗаведение", НСтр("ru='Учебное заведение'"), Новый ОписаниеТипов("СправочникСсылка.УчебныеЗаведения"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Подразделение", НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
КонецПроцедуры

// Процедура заполняет таблицу уведомлений по переданным параметрам и отборам.
//
// Параметры:
//    СтруктураПериода - Структура - два элемента - НачалоПериода и ОкончаниеПериода
//    Отборы - ТаблицаЗначений - перечень отборов событий, заданный пользователем
//       * ЛевоеЗначение - Строка - имя поля отбора в источнике данных.
//       * ВидСравнения - ВидСравнения - Вид сравнения
//       * ЛевоеЗначение - Булево, Число, Строка, Дата, ЛюбаяСсылка - значение отбора.
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПолучениеДанныхМероприятиеОбучения(СтруктураПериода, Отборы, ТаблицаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", СтруктураПериода.ОкончаниеПериода);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	ОбучениеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОбучениеСотрудников.Мероприятие КАК Мероприятие,
	|	ОбучениеСотрудников.ДатаНачала КАК ДатаНачала,
	|	ОбучениеСотрудников.ДатаОкончания КАК ДатаОкончания,
	|	ОбучениеСотрудников.Подразделение КАК Подразделение,
	|	ОбучениеСотрудников.КоличествоУчебныхЧасов КАК КоличествоУчебныхЧасов,
	|	ОбучениеСотрудников.СуммаРасходов КАК СуммаРасходов,
	|	ОбучениеСотрудников.Контрагент КАК Контрагент,
	|	ОбучениеСотрудников.УчебноеЗаведение КАК УчебноеЗаведение,
	|	ОбучениеСотрудников.Преподаватель КАК Преподаватель,
	|	ОбучениеСотрудников.Мероприятие.ОбучениеСОтрывомОтПроизводства КАК ОбучениеСОтрывомОтПроизводства,
	|	ОбучениеСотрудников.Мероприятие.СпособПроведения КАК СпособПроведения
	|ПОМЕСТИТЬ вт_Мероприятия
	|ИЗ
	|	РегистрСведений.ОбучениеСотрудников КАК ОбучениеСотрудников
	|ГДЕ
	|	ОбучениеСотрудников.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ОбучениеСотрудников.ДатаНачала >= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Мероприятия.ФизическоеЛицо КАК Предмет,
	|	вт_Мероприятия.Мероприятие КАК Мероприятие,
	|	вт_Мероприятия.ДатаНачала КАК ДатаСобытия,
	|	вт_Мероприятия.ДатаОкончания КАК ДатаОкончания,
	|	вт_Мероприятия.Подразделение КАК Подразделение,
	|	вт_Мероприятия.КоличествоУчебныхЧасов КАК КоличествоУчебныхЧасов,
	|	вт_Мероприятия.СуммаРасходов КАК СуммаРасходов,
	|	вт_Мероприятия.Контрагент КАК Контрагент,
	|	вт_Мероприятия.УчебноеЗаведение КАК УчебноеЗаведение,
	|	вт_Мероприятия.Преподаватель КАК Преподаватель,
	|	вт_Мероприятия.ОбучениеСОтрывомОтПроизводства КАК ОбучениеСОтрывомОтПроизводства,
	|	вт_Мероприятия.СпособПроведения КАК СпособПроведения
	|ИЗ
	|	вт_Мероприятия КАК вт_Мероприятия");

	Если Отборы.Количество() > 0 Тогда
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Отбор;
		Для Каждого СтрокаОтбора Из Отборы Цикл
			Если СтрокаОтбора.Использование Тогда
				ТекстУсловия = УведомленияСервер.ПредставлениеУсловияДляЗапроса(
					СтрокаОтбора.ВидСравнения,
					СтрокаОтбора.ЛевоеЗначение,
					"вт_Мероприятия." + СтрокаОтбора.ЛевоеЗначение);
				ОтборЗапроса.Добавить(ТекстУсловия);
				Запрос.УстановитьПараметр(СтрокаОтбора.ЛевоеЗначение, СтрокаОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
		ПараметрыСобытия = Новый Структура();
		Для Каждого КолонкаРезультата Из СхемаЗапроса.ПакетЗапросов[1].Колонки Цикл
			ПараметрыСобытия.Вставить(КолонкаРезультата.Псевдоним);
		КонецЦикла;
		
		Для Каждого СтрокаРезультатаЗапроса Из ТаблицаДанных Цикл
			СтрокаТаблицы = ТаблицаРезультата.Добавить();
			СтрокаТаблицы.Предмет = СтрокаРезультатаЗапроса.Предмет;
			СтрокаТаблицы.ДатаСобытия = СтрокаРезультатаЗапроса.ДатаСобытия;
			ЗаполнитьЗначенияСвойств(ПараметрыСобытия, СтрокаРезультатаЗапроса);
			СтрокаТаблицы.ПараметрыСобытия = ПараметрыСобытия;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает соответствие с сотрудниками и их обязательствами по ученическим договорам.
//
Функция ОбязательстваСотрудниковПоУченическимДоговорам(МассивСотрудников, ДатаСреза)

	Если НЕ ТипЗнч(МассивСотрудников) = Тип("Массив") И ЗначениеЗаполнено(МассивСотрудников) Тогда
		ПараметрМассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивСотрудников);
	Иначе
		ПараметрМассивСотрудников = МассивСотрудников;
	КонецЕсли;
	
	Если ДатаСреза = '00010101' Тогда
		ДатаСреза = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУченическогоДоговора.ФизическоеЛицо КАК Сотрудник,
		|	СУММА(УсловияУченическогоДоговора.Сумма) КАК Сумма
		|ИЗ
		|	РегистрСведений.УсловияУченическогоДоговора КАК УсловияУченическогоДоговора
		|ГДЕ
		|	&ДатаСреза МЕЖДУ УсловияУченическогоДоговора.ДатаНачалаОбязательств И УсловияУченическогоДоговора.ДатаОкончанияОбязательств
		|	И УсловияУченическогоДоговора.ФизическоеЛицо В(&МассивСотрудников)
		|
		|СГРУППИРОВАТЬ ПО
		|	УсловияУченическогоДоговора.ФизическоеЛицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(УсловияУченическогоДоговора.Сумма) > 0";
	Запрос.УстановитьПараметр("МассивСотрудников", ПараметрМассивСотрудников);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Результат = Новый Соответствие;
	ВыборкаДетальныеЗаписи= Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить(ВыборкаДетальныеЗаписи.Сотрудник, ВыборкаДетальныеЗаписи.Сумма);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторПрофиляМенеджерПоОбучению() 
	
	Возврат "b8a947b6-83fb-4cb5-8df1-b89d1314c563";
	
КонецФункции

Функция ОписаниеПрофиляМенеджерПоОбучению()

	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляМенеджерПоОбучению();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер по обучению'");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	
	// Роли на общие объекты КОРП из подсистемы «характеристики персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДействийСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеХарактеристикПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКомпетенцийПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "УправлениеМероприятиемОценкиПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	
	// Роли обучения и развития
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаОбучениеРазвитие");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗаявокНаОбучениеРазвитие");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОбученияСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОткликовНаОткрытыеПубликации");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПланаОбучениеРазвитие");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПубликацийМероприятийОбученияРазвития");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУченическихДоговоров");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИндивидуальныхПлановРазвитияСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаОбученияРазвития");
	// Смежные КОРП подсистемы.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПрофилейДолжности");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхПрограммОбучения");
	
	// Электронное обучение.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЭлектронногоОбучения");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЭлектронныхКурсов");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКаталогаЭлектронныхКурсов");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСтатистикиЭлектронныхКурсовСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовИзученияЭлектронныхКурсов");
	
	// Пользовательские роли.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СохранениеДанныхПользователя");
	
	// Интерфейсные роли.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаКадры");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаОбучениеИРазвитие");
	
	// Добавление сопутствующих ролей.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШтатногоРасписания");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваКонфигурацииЗарплатаКадрыРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДолжностей");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПодразделенийОрганизации");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОбОбразованииФизическихЛиц"); // для работы с образованием физических лиц
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАрхиваФизическихЛиц", "ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИспытательногоСрокаСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаГруппСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраЗначенийТарифов");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраИсторииНачисленийШтатногоРасписания");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");// для форматированной строки во включении
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПродолжительностиДоговоров");// для форматированной строки во включении
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");// графики работы
	
	// Для того, чтобы менеджер мог читать введенные на основании обучения командировки и отпуска - добавим соответствующие роли.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКомандировок");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтпусков");
	
	// Добавление оценки персонала.
	ОценкаПерсонала.ДополнитьОписаниеПрофиляОценкойПерсонала(ОписаниеПрофиля);
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	// КонфигурацииЗарплатаКадрыРасширенный
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	// Конец КонфигурацииЗарплатаКадрыРасширенный
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ДополнитьИнфоНадписьМероприятия(РеквизитыМероприятия, ВыводитьТолькоУчебноеЗаведение)

	ВнешнееОбучение = РеквизитыМероприятия.СпособПроведения = ПредопределенноеЗначение("Перечисление.СпособыПроведенияМероприятийОбученияРазвития.ВнешнееМероприятие");
	ТекстНадписи = "";
	
	// Преподаватель / Учебное заведение.
	ДополнительныйТекст = "";
	Если ВнешнееОбучение И ЗначениеЗаполнено(РеквизитыМероприятия.УчебноеЗаведение) Тогда
		ДополнительныйТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'учебное заведение - %1'"), РеквизитыМероприятия.УчебноеЗаведение);
	ИначеЕсли НЕ ВыводитьТолькоУчебноеЗаведение И НЕ ВнешнееОбучение И ЗначениеЗаполнено(РеквизитыМероприятия.Преподаватель) Тогда
		НаименованиеПреподавателя = НаименованиеПреподавателяПоВидуМероприятия(РеквизитыМероприятия.ВидМероприятия, Ложь);
		ДополнительныйТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - %2'"), НаименованиеПреподавателя, РеквизитыМероприятия.Преподаватель);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДополнительныйТекст) Тогда
		ТекстНадписи = ТекстНадписи + ", ";
		ТекстНадписи = ТекстНадписи + ДополнительныйТекст;
	КонецЕсли;
	
	Если НЕ ВыводитьТолькоУчебноеЗаведение Тогда
		// Учебные часы.
		Если ЗначениеЗаполнено(РеквизитыМероприятия.КоличествоУчебныхЧасов) Тогда
			ТекстНадписи = ТекстНадписи + ", ";
			ТекстНадписи = ТекстНадписи + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'продолжительность - %1 ч.'"), РеквизитыМероприятия.КоличествоУчебныхЧасов);
		КонецЕсли;
		// Место проведения.
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МестоПроведения) Тогда
			ТекстНадписи = ТекстНадписи + ", ";
			ТекстНадписи = ТекстНадписи + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'место проведения - %1'"), РеквизитыМероприятия.МестоПроведения);
		КонецЕсли;
		// Контрагент.
		Если ВнешнееОбучение И ЗначениеЗаполнено(РеквизитыМероприятия.Контрагент) Тогда
			ТекстНадписи = ТекстНадписи + ", ";
			ТекстНадписи = ТекстНадписи + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'юр. лицо - %1'"), РеквизитыМероприятия.Контрагент);
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстНадписи;
	
КонецФункции

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Раздел = Разделы.Добавить();
	Раздел.Имя  = "ОбучениеРазвитие";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("462bf9be-6dae-4ac3-b0e8-c8040cf0b599");
	Раздел.Представление = НСтр("ru = 'Обучение и развитие'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("НастройкиОбученияРазвития", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиОбученияРазвития, Метаданные.РегистрыСведений.НастройкиОбученияРазвития));
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НастройкиОбученияРазвития") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиОбученияРазвития"], СохраненныеНастройки["НастройкиОбученияРазвития"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиОбученияРазвития.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиОбученияРазвития);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиОбученияРазвития, НастройкиСтруктура);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиОбученияРазвития.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиОбученияРазвития);
	НастройкиПрограммы.Вставить("НастройкиОбученияРазвития", НастройкиСтруктура);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиОбученияРазвития.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиОбученияРазвития);
	Настройки.Записать();
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТПозицииШтатногоРасписанияПоПрофилю(МенеджерВременныхТаблиц, ПрофильДолжности)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиДействийХарактеристикШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	РегистрСведений.НастройкиДействийХарактеристикШтатногоРасписания КАК НастройкиДействийХарактеристикШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПрограммОбученияПозицийШтатногоРасписания КАК НастройкиПрограммОбученияПозицийШтатногоРасписания
		|		ПО НастройкиДействийХарактеристикШтатногоРасписания.ПозицияШтатногоРасписания = НастройкиПрограммОбученияПозицийШтатногоРасписания.ПозицияШтатногоРасписания
		|ГДЕ
		|	НастройкиДействийХарактеристикШтатногоРасписания.ПрофильДолжности = &ПрофильДолжности
		|	И НастройкиПрограммОбученияПозицийШтатногоРасписания.СоответствуютПрофилюДолжности = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПозицияШтатногоРасписания";
	
	Запрос.УстановитьПараметр("ПрофильДолжности", ПрофильДолжности);
	
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти