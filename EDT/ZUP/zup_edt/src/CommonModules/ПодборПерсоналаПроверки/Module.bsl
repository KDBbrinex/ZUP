#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполняет начальное заполнение данных контроля задержки кандидатов
//
// Параметры:
//  ПараметрыОбновления  - Структура - описывает текущие параметры обновления
//
Процедура ПриНачальномЗаполненииДанныхКонтроляЗадержкиКандидатов(ПараметрыОбновления) Экспорт
	
	НастройкиПодбораПерсонала = РегистрыСведений.НастройкиПодбораПерсонала.ЗначенияНастроек();
	Если НастройкиПодбораПерсонала.ПричинаАвтоматическогоОтклонения <> Справочники.ПричиныОтклоненияКандидатов.ПустаяСсылка() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПричиныОтклоненияКандидатов");
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиПодбораПерсонала");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		ПричинаОтклонения = Справочники.ПричиныОтклоненияКандидатов.ДобавитьПричинуОтклоненияКандидатов(НСтр("ru = 'Задержка на этапе'"));
		НастройкиПодбораПерсонала.ДнейДоСообщения = 30;
		НастройкиПодбораПерсонала.ДнейДоОтклонения = 60;
		НастройкиПодбораПерсонала.ПричинаАвтоматическогоОтклонения = ПричинаОтклонения;
		РегистрыСведений.НастройкиПодбораПерсонала.УстановитьНастройки(НастройкиПодбораПерсонала);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПроверкаНаличияЗадержавшихсяКандидатов(Проверка, ПараметрыПроверки) Экспорт
	
	ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе = ПолучитьФункциональнуюОпцию("ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе");
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") ИЛИ Не ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РезультатПроверкиНаличияЗадержавшихсяКандидатов();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Кандидат, ПараметрыПроверки);
		Проблема.ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Предупреждение;
		ДнейДоСообщения = ЗарплатаКадрыКлиентСервер.ПредставлениеПоПериодичности(Выборка.ДнейДоСообщения, Перечисления.Периодичность.День);
		Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Кандидат %1 находится на этапе %2 более чем %3.
						|Рекомендация: Продолжить работу с кандидатом или отклонить его (если работа завершена).'"),
			Выборка.Кандидат,
			Выборка.ЭтапРаботы,
			ДнейДоСообщения);
		УстановитьПривилегированныйРежим(Истина);
		КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗадержавшиесяКандидатыДляТекущихДел() Экспорт
	
	Возврат РезультатПроверкиНаличияЗадержавшихсяКандидатов().Выгрузить().ВыгрузитьКолонку("Кандидат");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатПроверкиНаличияЗадержавшихсяКандидатов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СостоянияРешениеПринято", Перечисления.СостоянияСогласования.СостоянияРешениеПринято());
	Запрос.УстановитьПараметр("ДнейДоСообщения", РегистрыСведений.НастройкиПодбораПерсонала.ЗначенияНастроек().ДнейДоСообщения);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1)); 
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДнейДоСообщения КАК ДнейДоСообщения,
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.Ссылка КАК Кандидат,
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеЭтапыРаботыСКандидатами.ЭтапРаботы КАК ЭтапРаботы
		|ИЗ
		|	РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущиеЭтапыРаботыСКандидатами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыСКандидатами
		|		ПО ТекущиеЭтапыРаботыСКандидатами.ЭтапРаботы = ЭтапыРаботыСКандидатами.Ссылка
		|			И (НЕ ТекущиеЭтапыРаботыСКандидатами.Кандидат.Состояние В (&СостоянияРешениеПринято))
		|			И (ЭтапыРаботыСКандидатами.ПроверятьКандидатовНаЗадержку = ИСТИНА)
		|			И (ЭтапыРаботыСКандидатами.СпособПроверкиКандидатовНаЗадержку = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияЗадержкиКандидатов.КакЗаданоВНастройках))
		|			И (ТекущиеЭтапыРаботыСКандидатами.ДатаВремя <> &ПустаяДата)
		|			И (РАЗНОСТЬДАТ(ТекущиеЭтапыРаботыСКандидатами.ДатаВремя, &ТекущаяДата, ДЕНЬ) >= &ДнейДоСообщения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭтапыРаботыСКандидатами.ДнейДоСообщения,
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.Ссылка,
		|	ТекущиеЭтапыРаботыСКандидатами.Кандидат.ФизическоеЛицо,
		|	ТекущиеЭтапыРаботыСКандидатами.ЭтапРаботы
		|ИЗ
		|	РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущиеЭтапыРаботыСКандидатами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыСКандидатами
		|		ПО ТекущиеЭтапыРаботыСКандидатами.ЭтапРаботы = ЭтапыРаботыСКандидатами.Ссылка
		|			И (НЕ ТекущиеЭтапыРаботыСКандидатами.Кандидат.Состояние В (&СостоянияРешениеПринято))
		|			И (ЭтапыРаботыСКандидатами.ПроверятьКандидатовНаЗадержку = ИСТИНА)
		|			И (ЭтапыРаботыСКандидатами.СпособПроверкиКандидатовНаЗадержку = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияЗадержкиКандидатов.КакЗаданоВЭтапе))
		|			И (ТекущиеЭтапыРаботыСКандидатами.ДатаВремя <> &ПустаяДата)
		|			И (РАЗНОСТЬДАТ(ТекущиеЭтапыРаботыСКандидатами.ДатаВремя, &ТекущаяДата, ДЕНЬ) >= ЭтапыРаботыСКандидатами.ДнейДоСообщения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Кандидат";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли