
#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//										общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.150";
	Обработчик.Процедура = "КонтрольСамочувствияУведомления.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("59bc982f-b1ec-4a32-8bd3-bef67696a14b");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений: контроль самочувствия.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.150";
	Обработчик.Процедура = "Справочники.ГрафикУчетаСамочувствияСотрудников.ЗаполнитьГрафикПоУмолчанию";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("28a3337b-36fa-48e9-bdb0-5b8a07d55861");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение графика контроля самочувствия.'");
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// Процедура выполняет начальное заполнение данных подсистемы уведомлений
//
Процедура ПриНачальномЗаполненииДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("КонтрольСамочувствия");
	
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		ПараметрыШаблона = Новый Структура();
		
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("Тема", НСтр("ru='Время контроля самочувствия'"));
		ПараметрыШаблона.Вставить("ФорматПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru='Здравствуйте, [ФизическиеЛица.Имя] [ФизическиеЛица.Отчество]!
			|
			|Настало время планового контроля самочувствия [ДанныеУведомления.ВремяЗамера].
			|Измерьте температуру.'"));
		
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru='Уведомление о контроле самочувствия'"), ПараметрыШаблона);
		
		// 	Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		РассылкаОбъект.ВидУведомления 	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта 	= Перечисления.ВидыТранспортаУведомлений.Email;
		РассылкаОбъект.УчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		РассылкаОбъект.Наименование 	= НСтр("ru='Уведомление сотрудников о контроле самочувствия'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Предмет";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		РассылкаОбъект.ИнтервалУведомления = 0;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет дополнить структуру видов уведомлений своими видами уведомлений. 
//
// Параметры:
//  СтруктураДоступныхВидовУведомлений - структура - перечень уведомлений, подключенных в подсистеме
//     * Ключ - Строка - Имя вида уведомления
//     * Значение - Структура - Описание вида уведомления (Структура)
//        * ВидУведомления - Строка, строковый идентификатор вида уведомления.
//        * Описание - Строка, Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//        * Инициализация - Строка, <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения
//                          запросов к базе данных.
//        * ПолучениеДанных - Строка, <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	СтруктураКонтрольСамочувствия = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	СтруктураКонтрольСамочувствия.ВидУведомления 	= НСтр("ru='Контроль самочувствия'");
	СтруктураКонтрольСамочувствия.GUID 				= "992fb553-d3f9-4291-aef5-f9cf848b6b97";
	СтруктураКонтрольСамочувствия.Описание 			= НСтр("ru='Уведомление о контроле самочувствия.'");
	СтруктураКонтрольСамочувствия.Инициализация 	= "КонтрольСамочувствияУведомления.ИнициализацияКонтрольСамочувствия";
	СтруктураКонтрольСамочувствия.ПолучениеДанных 	= "КонтрольСамочувствияУведомления.ПолучениеДанныхКонтрольСамочувствия";
	
	СтруктураДоступныхВидовУведомлений.Вставить("КонтрольСамочувствия", СтруктураКонтрольСамочувствия);
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет заполнить поля, доступные для шаблона
//  соответствующего вида уведомлений.
//
// Параметры:
//  ВидУведомления           - СправочникСсылка.ВидУведомления - вид уведомления - владелец шаблона
//  Реквизиты                - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//                                      и др.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона        - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "КонтрольСамочувствия") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Предмет",НСтр("ru='Сотрудник для контроля самочувствия'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ВремяЗамера",НСтр("ru='Время замера'"), Новый ОписаниеТипов("Дата"), "ДФ=HH:mm;");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Контроль самочувствия"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияКонтрольСамочувствия(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Предмет", НСтр("ru='Сотрудник для контроля самочувствия'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ТекущаяОрганизация",	НСтр("ru='Текущая организация'"), Новый ОписаниеТипов("СправочникСсылка.Организации"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Подразделение",		НСтр("ru='Подразделение'"), Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "ТекущаяДолжность",		НСтр("ru='Текущая должность'"), Новый ОписаниеТипов("СправочникСсылка.Должности"));
	УведомленияСервер.ДобавитьОтбор(ОписаниеДанных, "Пол",					НСтр("ru='Пол'"), Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));

КонецПроцедуры

// Процедура заполняет таблицу уведомлений по переданным параметрам и отборам.
//
// Параметры:
//    СтруктураПериода - Структура - два элемента - НачалоПериода и ОкончаниеПериода
//    Отборы - ТаблицаЗначений - перечень отборов событий, заданный пользователем
//       * ЛевоеЗначение - Строка - имя поля отбора в источнике данных.
//       * ВидСравнения - ВидСравнения - Вид сравнения
//       * ЛевоеЗначение - Булево, Число, Строка, Дата, ЛюбаяСсылка - значение отбора.
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПолучениеДанныхКонтрольСамочувствия(СтруктураПериода, Отборы, ТаблицаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлижайшаяДатаУчетаСамочувствия = БлижайшаяДатаУчетаСамочувствия();
	Если Не ЗначениеЗаполнено(БлижайшаяДатаУчетаСамочувствия) Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизическихЛиц = СотрудникиПодлежащиеУчетуСамочувствия(БлижайшаяДатаУчетаСамочувствия);
	Если СписокФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.СписокФизическихЛиц = СписокФизическихЛиц;
	ПараметрыПолучения.КадровыеДанные = "Организация, Пол, Подразделение, Должность";
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.Использование Тогда
			ВидСравненияСтрокой = УведомленияСервер.ВидСравненияДляЗапроса(Отбор.ВидСравнения);
			Если Не ЗначениеЗаполнено(ВидСравненияСтрокой) Тогда
				Продолжить;
			КонецЕсли;
			Если Отбор.ЛевоеЗначение = "ТекущаяОрганизация" Тогда
				Отбор.ЛевоеЗначение = "Организация";
			ИначеЕсли Отбор.ЛевоеЗначение = "ТекущаяДолжность" Тогда
				Отбор.ЛевоеЗначение = "Должность";
			КонецЕсли;
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПолучения.Отборы,
				Отбор.ЛевоеЗначение,
				ВидСравненияСтрокой,
				Отбор.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
	
	Если Не ЗначениеЗаполнено(СотрудникиОрганизации) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаСотрудников Из СотрудникиОрганизации Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Добавить();
		СтрокаТаблицы.Предмет = СтрокаСотрудников.ФизическоеЛицо;
		СтрокаТаблицы.ДатаСобытия = БлижайшаяДатаУчетаСамочувствия;
		ПараметрыСобытия = Новый Структура("Предмет, ВремяЗамера");
		ПараметрыСобытия.Предмет = СтрокаСотрудников.ФизическоеЛицо;		
		ПараметрыСобытия.ВремяЗамера = БлижайшаяДатаУчетаСамочувствия;		
		СтрокаТаблицы.ПараметрыСобытия = ПараметрыСобытия;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает ближайшую дату учета самочувствия.
//
// Параметры:
//  ДатаРасчета - Дата - Дата, относительно которой нужно выполнить расчета.
// 
// Возвращаемое значение:
//  Дата - Ближайшая дата учета самочувствия.
//
Функция БлижайшаяДатаУчетаСамочувствия(Знач ДатаРасчета = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачалоДня = НачалоДня(ДатаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГрафикУчетаСамочувствияСотрудников.ВремяЗамера КАК Время
		|ИЗ
		|	Справочник.ГрафикУчетаСамочувствияСотрудников КАК ГрафикУчетаСамочувствияСотрудников
		|ГДЕ
		|	ГрафикУчетаСамочувствияСотрудников.Недействительная = ЛОЖЬ
		|	И ГрафикУчетаСамочувствияСотрудников.ВремяЗамера >= &Время
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяЗамера";
	
	Запрос.УстановитьПараметр("Время", Дата(1,1,1) + (ДатаРасчета - НачалоДня));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Дата(
			Год(НачалоДня),
			Месяц(НачалоДня),
			День(НачалоДня),
			Час(Выборка.Время),
			Минута(Выборка.Время),
			0);
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;
	
КонецФункции

// Возвращает сотрудников для которых следует учесть самочувствие на дату.
//
// Параметры:
//  ДатаУчета - Дата и время
//
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Пользователи
//
Функция СотрудникиПодлежащиеУчетуСамочувствия(ДатаУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получаем сотрудников НЕ на дистанционной работе, и НЕ отсутствующих.
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.КадровыеДанные = "ФизическоеЛицо, ГоловнаяОрганизация, Состояние";
	ПараметрыЗапроса.НачалоПериода = ДатаУчета;
	ПараметрыЗапроса.ОкончаниеПериода = ДатаУчета;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыЗапроса.Отборы, "РаботаетДистанционно", "=", Ложь);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Ложь, ПараметрыЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаУчета);
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСотрудника.Работа);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком);
	Запрос.УстановитьПараметр("Состояния", Состояния);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НАЧАЛОПЕРИОДА(&ДатаАктуальности, МЕСЯЦ) КАК Месяц,
		|	&ДатаАктуальности КАК ДатаАктуальности,
		|	НАЧАЛОПЕРИОДА(&ДатаАктуальности, ДЕНЬ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Состояние В (&Состояния)";
	Запрос.Выполнить();
	
	ПараметрыЗапроса = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(МенеджерВТ, Ложь, ПараметрыЗапроса);

	Запрос.УстановитьПараметр("РабочееВремя", УчетРабочегоВремениРасширенный.ВидыВремениВключаемыеВНорму());
	Запрос.УстановитьПараметр("График", КалендарныеГрафики.ОсновнойПроизводственныйКалендарь());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО (Сотрудники.Сотрудник = ПлановоеВремя.Сотрудник)
		|		И (Сотрудники.Месяц = ПлановоеВремя.Месяц)
		|		И (ПлановоеВремя.ВидУчетаВремени В (&РабочееВремя))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДатыКалендаря
		|		ПО (ДатыКалендаря.Дата = ПлановоеВремя.Дата)
		|		И (ДатыКалендаря.ПроизводственныйКалендарь = &График)
		|		И (ДатыКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)))";
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаСотрудников.ВыгрузитьКолонку("ФизическоеЛицо"); 
	
КонецФункции

#КонецОбласти