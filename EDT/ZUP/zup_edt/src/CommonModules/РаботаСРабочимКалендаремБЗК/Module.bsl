////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рабочий календарь".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Дополняет передаваемую таблицу занятости сведениями об отсутствиях по кадровым документам.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриПолученииТаблицыЗанятости.
//
Процедура ПриПолученииТаблицыЗанятостиПользователей(ТаблицаЗанятости, ПараметрыЗанятости) Экспорт
	
	ДоступностьПользователей = ДоступностьПользователей(
		ПараметрыЗанятости.Пользователи, 
		ПараметрыЗанятости.ДатаНачала, 
		ПараметрыЗанятости.ДатаОкончания);
	
	Для Каждого СтрокаДоступности Из ДоступностьПользователей Цикл
		
		Если СтрокаДоступности.Доступен Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЗанятости = ТаблицаЗанятости.НайтиСтроки(Новый Структура("Пользователь", СтрокаДоступности.Пользователь));
		Если СтрокиЗанятости.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			
			НоваяСтрока.Пользователь = СтрокаДоступности.Пользователь;
			НоваяСтрока.ДатаНачала = СтрокаДоступности.ДатаНачала;
			НоваяСтрока.ДатаОкончания = КонецДня(СтрокаДоступности.ДатаОкончания);
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Отсутствует;
			
		Иначе
			
			Если (СтрокиЗанятости[0].Занят = Перечисления.СостоянияЗанятости.Доступен
				Или СтрокиЗанятости[0].Занят = Перечисления.СостоянияЗанятости.ПодВопросом) Тогда
				
				СтрокиЗанятости[0].Занят = Перечисления.СостоянияЗанятости.Отсутствует;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет признак необходимости предупреждения об отсутствии.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииНеобходимостиПредупреждатьОбОтсутствии.
//
Процедура ПриОпределенииНеобходимостиПредупреждатьОбОтсутствии(ПредупреждатьОбОтсутствии) Экспорт
	
	ПредупреждатьОбОтсутствии = Истина;
	
КонецПроцедуры

// Переопределяет признак доступности изменения заданной записи рабочего календаря.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииПраваИзмененияЗаписиРабочегоКалендаря.
//
Процедура ПриОпределенииПраваИзмененияЗаписиРабочегоКалендаря(ЗаписьКалендаря, ЕстьПраво) Экспорт
	
	Если ПравоДоступа("Изменение", ЗаписьКалендаря.Метаданные()) Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ЕстьПраво = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Пользователь") = Пользователь
			Или Пользователи.ЭтоПолноправныйПользователь(Пользователь));
		
	КонецЕсли;
	
КонецПроцедуры

// Подключает напоминание, если связанная запись календаря текущего пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриПодключенииНапоминанияАвтоматически.
//
Процедура ПриПодключенииНапоминанияАвтоматически(ЗаписьКалендаря, Напоминание) Экспорт
	
	Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Пользователь");
	
	Если Пользователь <> Пользователи.ТекущийПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	УстанавливатьНапоминаниеАвтоматически =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
			
	Если Не УстанавливатьНапоминаниеАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	СрокНапоминанияПоУмолчанию =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
	
	Напоминание = НапоминанияПользователяВызовСервера.ПодключитьНапоминаниеДоВремениПредмета(
		Строка(ЗаписьКалендаря),
		СрокНапоминанияПоУмолчанию * 60,
		ЗаписьКалендаря,
		"ДатаНачала");
		
КонецПроцедуры

// Переопределяет признак доступности изменения рабочего календаря пользователем.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииНеобходимостиПредупреждатьОбОтсутствии.
//
Процедура ПриОпределенииПраваИзмененияКалендаря(Пользователь, ЕстьПраво) Экспорт
	
	ЕстьПраво = Пользователи.ЭтоПолноправныйПользователь(Пользователь);
	
КонецПроцедуры

// Переопределяет представление предмета записи рабочего календаря.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриПолученииПредставленияПредмета.
//
Процедура ПриПолученииПредставленияПредмета(Предмет, ПредставлениеПредмета) Экспорт
	
	Если Не ПравоДоступа("Чтение", Предмет.Метаданные()) Тогда
		ПредставлениеПредмета = Строка(Предмет);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Наименование");
	Иначе
		Наименование = Строка(Предмет)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет.Метаданные().ПредставлениеОбъекта) Тогда 
		ПредставлениеОбъекта = Предмет.Метаданные().ПредставлениеОбъекта; 
	Иначе
		ПредставлениеОбъекта = Предмет.Метаданные().Синоним;
	КонецЕсли;
	
	ПредставлениеПредмета = СтрШаблон("%1 (%2)", Наименование, ПредставлениеОбъекта);
	
КонецПроцедуры

// Переопределяет признак заданности графика работы пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииЗаданностиГрафикаРаботыПользователя.
//
Процедура ПриОпределенииЗаданностиГрафикаРаботыПользователя(Пользователь, Знач ПроверяемаяДата, ГрафикЗадан) Экспорт
	
	ГрафикЗадан = Истина;
	
КонецПроцедуры

// Заполняет список рабочих дней текущего пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриЗаполненииРабочихДнейПользователя.
//
Процедура ПриЗаполненииРабочихДнейПользователя(РабочиеДни, Знач ЗаполняемыеГода, Знач ДатаЗаполнения) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	РабочиеДниПользователя = РабочиеДниПользователя(Пользователь, ЗаполняемыеГода, ДатаЗаполнения);
	
	Для Каждого СтрокаДня Из РабочиеДниПользователя Цикл
		РабочиеДни.Добавить(СтрокаДня.Дата, , СтрокаДня.Рабочий);
	КонецЦикла
	
КонецПроцедуры

// Заполняет настройки доступного времени пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриЗаполненииДоступногоВремениПользователя.
//
Процедура ПриЗаполненииДоступногоВремениПользователя(НастройкиДоступногоВремени) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЗанятостьНаНеделе = ЗанятостьПользователяНаНеделе(Пользователь, ТекущаяДатаСеанса());
	
	Для Каждого СтрокаЗанятости Из ЗанятостьНаНеделе Цикл
		
		НастройкаДоступногоВремени = НастройкиДоступногоВремени.Добавить();
		НастройкаДоступногоВремени.Пользователь = Пользователь;
		
		ЗаполнитьЗначенияСвойств(НастройкаДоступногоВремени, СтрокаЗанятости);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты создаваемой или обновляемой записи рабочего календаря по данным предмета.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриЗаполненииЗаписиРабочегоКалендаряПоПредмету.
//
Процедура ПриЗаполненииЗаписиРабочегоКалендаряПоПредмету(Предмет, ЗаписьКалендаря) Экспорт
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				Или ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
		РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Дата,Текст,ТекстHTML,Тема");
		
		Если ЗначениеЗаполнено(РеквизитыПредмета.Текст) Тогда
			ТекстПисьма = РеквизитыПредмета.Текст;
		Иначе
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(РеквизитыПредмета.ТекстHTML);
		КонецЕсли;
		
		ТекстДляАнализа = СокрЛП(РеквизитыПредмета.Тема) + "." + Символы.ПС + ТекстПисьма;
		
		ТекстСобытия = Новый Массив;
		Событие = Обработки.АнализТекста.Событие(ТекстДляАнализа, РеквизитыПредмета.Дата);
		Если Событие <> Неопределено Тогда
			
			ЗаписьКалендаря.ДатаНачала = Событие.Начало;
			ЗаписьКалендаря.ДатаОкончания = Событие.Конец;
			
			ТекстСобытия.Добавить(Событие.Текст);
			
			// Место
			Если ЗначениеЗаполнено(Событие.Место) Тогда
				ТекстСвойства = СтрШаблон("%1: %2", НСтр("ru = 'Место проведения'"), Событие.Место);
				ТекстСобытия.Добавить(ТекстСвойства);
			КонецЕсли;
			
		Иначе
			ТекстСобытия.Добавить(СокрЛП(РеквизитыПредмета.Тема));
		КонецЕсли;
		
		ЗаписьКалендаря.Описание = СтрСоединить(ТекстСобытия, Символы.ПС);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.Бронь") Тогда
		
		ЗаписьКалендаря.Описание = БронированиеПомещений.ПолучитьОписаниеБрони(Предмет);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,"Наименование,Дата,ДатаНачала,ДатаИсполнения,СрокИсполнения");
		
		ЗаписьКалендаря.Описание = РеквизитыПредмета.Наименование;
		
		Если ЗначениеЗаполнено(РеквизитыПредмета.ДатаНачала) Тогда
			ЗаписьКалендаря.ДатаНачала = РеквизитыПредмета.ДатаНачала;
		Иначе
			ЗаписьКалендаря.ДатаНачала = РеквизитыПредмета.Дата;
		КонецЕсли;
		
		ЗаписьКалендаря.ДатаОкончания = РеквизитыПредмета.СрокИсполнения;
		ЗаписьКалендаря.ВесьДень = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет состав участников и записи календаря по этапу работы с кандидатом.
//
// Параметры:
//	Кандидат 	- СправочникСсылка.Кандидаты - кандидат для которого назначен этап.
//	ЭтапРаботы	- СправочникСсылка.ЭтапыРаботыСКандидатами - назначенный этап работы.
//	Участники	- Массив - список пользователей, которые приглашены поучаствовать в событии.
//	ПрежниеДанныеЭтапа	 - Структура - со свойствами:
//		* ПрежнееСостояние	- ПеречислениеСсылка.СостоянияЭтаповРаботыСКандидатами - прежнее состояние этапа.
//		* ПрежнийПериод	 - Дата - прежняя дата начала проведения этапа работы с кандидатом.
//		* ПрежнийПериодОкончание - Дата - прежняя дата окончания проведения этапа работы с кандидатом.
//
Процедура ОбновитьЗаписиКалендаряПоЭтапуРаботыСКандидатом(Кандидат, ЭтапРаботы, Участники, ПрежниеДанныеЭтапа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Этап = ЭтапРаботы.Этап;
	СостояниеЭтапа = ЭтапРаботы.Состояние;
	
	Если Не ЗначениеЗаполнено(СостояниеЭтапа)
		Или СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
		
		Справочники.ЗаписиРабочегоКалендаря.УдалитьСвязанныеЗаписиКалендаря(Кандидат, Этап);
		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда 
		
		ДанныеСвязанныхЗаписей = Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(Кандидат, Этап);
		Для Каждого ДанныеЗаписи Из ДанныеСвязанныхЗаписей Цикл
			РаботаСРабочимКалендарем.УстановитьОтработанаЗаписьКалендаря(ДанныеЗаписи.Ссылка, Истина);
		КонецЦикла;
		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		
		Помещение = ЭтапРаботы.Помещение;
		Участники = ?(Участники = Неопределено, Новый Массив, Участники);
		
		ПрежниеУчастники = РегистрыСведений.УчастникиЭтапаРаботыСКандидатом.УчастникиЭтапа(Кандидат, Этап);
		
		НовыеУчастники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Участники, ПрежниеУчастники);
		ИсключенныеУчастники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрежниеУчастники, Участники);
		
		ИзмененСоставУчастников = (НовыеУчастники.Количество() <> 0
			Или ИсключенныеУчастники.Количество() <> 0);
		
		ИзмениласьДата = (ЗначениеЗаполнено(ПрежниеДанныеЭтапа.Период) 
			И ЭтапРаботы.Период <> ПрежниеДанныеЭтапа.Период)
			Или (ЗначениеЗаполнено(ПрежниеДанныеЭтапа.ПериодОкончание) 
			И ЭтапРаботы.ПериодОкончание <> ПрежниеДанныеЭтапа.ПериодОкончание);
		
		ИзменилосьПомещение = ПрежниеДанныеЭтапа.Помещение <> ЭтапРаботы.Помещение;
		
		Если ИзмененСоставУчастников Тогда
			РегистрыСведений.УчастникиЭтапаРаботыСКандидатом.ЗаписатьУчастниковЭтапа(Кандидат, Этап, Участники);
		КонецЕсли;
		
		ДанныеСвязанныхЗаписей = Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(Кандидат, Этап);
		
		РеквизитыЗаписиКалендаря = Новый Структура;
		РеквизитыЗаписиКалендаря.Вставить("ДатаНачала", ЭтапРаботы.Период);
		РеквизитыЗаписиКалендаря.Вставить("ДатаОкончания", ЭтапРаботы.ПериодОкончание);
		
		Если ИзменилосьПомещение Или НовыеУчастники.Количество() <> 0 Тогда
			
			Описание = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(Кандидат, Этап, , Помещение);
			РеквизитыЗаписиКалендаря.Вставить("Описание", Описание);
			
		КонецЕсли;
		
		Для Каждого ДанныеЗаписи Из ДанныеСвязанныхЗаписей Цикл
			
			Если ИсключенныеУчастники.Количество() > 0 
				И ИсключенныеУчастники.Найти(Новый Структура("Пользователь", ДанныеЗаписи.Пользователь)) <> 0 Тогда
				
				Справочники.ЗаписиРабочегоКалендаря.УдалитьСвязаннуюЗаписьКалендаря(ДанныеЗаписи.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			Если ИзмениласьДата Или ИзменилосьПомещение Тогда
				Справочники.ЗаписиРабочегоКалендаря.ОбновитьСвязаннуюЗаписьКалендаря(ДанныеЗаписи.Ссылка, Кандидат, РеквизитыЗаписиКалендаря);
			КонецЕсли;
			
			Если РаботаСРабочимКалендарем.ЗаписьКалендаряОтработана(ДанныеЗаписи.Ссылка) Тогда
				РаботаСРабочимКалендарем.УстановитьОтработанаЗаписьКалендаря(ДанныеЗаписи.Ссылка, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеСвязанныхЗаписей.Количество() > 0 Тогда
			
			ПользователиСЗаписями = ДанныеСвязанныхЗаписей.ВыгрузитьКолонку("Пользователь");
			ПользователиБезЗаписей = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрежниеУчастники, ПользователиСЗаписями);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеУчастники, ПользователиБезЗаписей, Истина);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеУчастники, ПрежниеУчастники, Истина);
		КонецЕсли;
		
		Если НовыеУчастники.Количество() <> 0 Тогда
			
			РеквизитыЗаписиКалендаря.Вставить("Связанная", Истина);
			РеквизитыЗаписиКалендаря.Вставить("СвязанныйПредмет", Этап);
			
			Для Каждого Участник Из НовыеУчастники Цикл
				
				РеквизитыЗаписиКалендаря.Вставить("Пользователь", Участник);
				
				Справочники.ЗаписиРабочегоКалендаря.СоздатьСвязаннуюЗаписьКалендаря(Кандидат, Ложь, Истина, РеквизитыЗаписиКалендаря);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Пользователи

// Возвращает данные о доступности пользователей. Работает на указанный период.
//
// Параметры:
//	СписокПользователей	- Массив ссылок на элементы справочника Пользователи или 
//						- СправочникСсылка.Пользователи
//	НачалоПериода			- Дата
//	ОкончаниеПериода		- Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//								получены на дату НачалоПериода.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* Пользователь  - СправочникСсылка.Пользователи.
//		* ДатаНачала - Дата - дата начала состояния занятости.
//		* ДатаОкончания - Дата - дата окончания состояния занятости.
//		* Доступен - Булево.
//
Функция ДоступностьПользователей(Пользователи, НачалоПериода, ОкончаниеПериода)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиПользователей(Запрос.МенеджерВременныхТаблиц, 
		Пользователи, 
		НачалоПериода, 
		ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиКомпании.Сотрудник КАК Сотрудник,
	|	&НачалоПериода КАК ДатаНачала,
	|	&КонецПериода КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериодыСостояний
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК СотрудникиКомпании";
	
	Запрос.Выполнить();
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериодыСостояний");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиПользователей.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Начало ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Начало
	|		ИНАЧЕ &НачалоПериода
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Окончание ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Окончание
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ КАК ДатаОкончания,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПериодыСостоянийСотрудников.Сотрудник ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Доступен
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК СотрудникиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ПО СотрудникиПользователей.Сотрудник = ПериодыСостоянийСотрудников.Сотрудник
	|			И (НЕ ПериодыСостоянийСотрудников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа), ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком)))
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиПользователей.Пользователь,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Начало ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Начало
	|		ИНАЧЕ &НачалоПериода
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Окончание ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Окончание
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает данные о рабочих днях пользователя.
//
// Параметры:
//	Пользователь	- СправочникСсылка.Пользователи.
//	ЗаполняемыеГода	- Массив - массив лет, подлежащих заполнению.
//	ДатаЗаполнения	- Дата - дата получения данных о рабочих днях.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* Дата - Дата - дата в году.
//		* Рабочий - Булево.
//
Функция РабочиеДниПользователя(Пользователь, Знач ЗаполняемыеГода, Знач ДатаЗаполнения)
	
	РабочиеДни = Новый ТаблицаЗначений();
	РабочиеДни.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	РабочиеДни.Колонки.Добавить("Рабочий", Новый ОписаниеТипов("Булево"));
	
	ОсновныеСотрудники = ОсновныеСотрудникиПользователей(Пользователь, ДатаЗаполнения);
	
	Если ОсновныеСотрудники.Количество() <> 0 Тогда
		
		Сотрудник = ОсновныеСотрудники[0].Сотрудник;
		
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
		
		Для Каждого Год Из ЗаполняемыеГода Цикл
			
			Для НомерМесяца = 1 По 12 Цикл
				
				СтрокаТаблицы = ТаблицаСотрудников.Добавить();
				СтрокаТаблицы.Сотрудник = Сотрудник;
				СтрокаТаблицы.ПериодРегистрации = ДатаЗаполнения;
				СтрокаТаблицы.Месяц = Дата(Год, НомерМесяца, 1);
				СтрокаТаблицы.ДатаНачала = СтрокаТаблицы.Месяц;
				СтрокаТаблицы.ДатаОкончания = КонецМесяца(СтрокаТаблицы.Месяц);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.Месяц,
		|	ТаблицаСотрудников.ДатаНачала,
		|	ТаблицаСотрудников.ДатаОкончания,
		|	ТаблицаСотрудников.ПериодРегистрации КАК ДатаАктуальности
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
		Запрос.Выполнить();
		
		ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
		
		УстановитьПривилегированныйРежим(Истина);
		УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.УстановитьПараметр("ВидыРабочегоВремени", УчетРабочегоВремениРасширенный.ВидыВремениВключаемыеВНорму());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановоеВремя.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ПлановоеВремя.ВидУчетаВремени В (&ВидыРабочегоВремени)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Рабочий
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(РабочиеДни.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РабочиеДни;
	
КонецФункции

// Возвращает данные о занятости пользователя на неделе.
//
// Параметры:
//	Пользователь	- СправочникСсылка.Пользователи.
//	ДатаЗаполнения	- Дата - дата получения данных о рабочих днях.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* ДеньНедели - Число.
//		* ВремяНачала - время начала работы.
//		* ВремяОкончания - время окончания работы.
//
Функция ЗанятостьПользователяНаНеделе(Пользователь, Знач ДатаЗаполнения)
	
	ЗанятостьНаНеделе = Новый ТаблицаЗначений();
	ЗанятостьНаНеделе.Колонки.Добавить("ДеньНедели", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ЗанятостьНаНеделе.Колонки.Добавить("Рабочий", Новый ОписаниеТипов("Булево"));
	ЗанятостьНаНеделе.Колонки.Добавить("ВремяНачала", Новый ОписаниеТипов("Дата"));
	ЗанятостьНаНеделе.Колонки.Добавить("ВремяОкончания", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиПользователей(Запрос.МенеджерВременныхТаблиц, Пользователь, ДатаЗаполнения);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ГрафикиПользователей.Пользователь КАК Пользователь,
	|	ГрафикиПользователей.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафиковРаботыСотрудников.ПоНеделям)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполняетсяПоНеделям
	|ИЗ
	|	ВТГрафикиПользователей КАК ГрафикиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ГрафикиПользователей.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОРабочихЧасах.НомерДняЦикла КАК НомерДняЦикла,
	|	ДанныеОРабочихЧасах.Часов КАК Часов,
	|	ДанныеОРабочихЧасах.Ссылка КАК ГрафикРаботы
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников.ДанныеОРабочихЧасах КАК ДанныеОРабочихЧасах
	|ГДЕ
	|	ДанныеОРабочихЧасах.Ссылка В
	|			(ВЫБРАТЬ
	|				ГрафикиПользователей.ГрафикРаботы КАК ГрафикРаботы
	|			ИЗ
	|				ВТГрафикиПользователей КАК ГрафикиПользователей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерДняЦикла";
	
	Результаты = Запрос.ВыполнитьПакет();
	МаксИндекс = Результаты.ВГраница();
	
	ВыбораПользователей = Результаты[МаксИндекс - 1].Выбрать();
	ВыбораДанныхГрафиков = Результаты[МаксИндекс].Выбрать();
	
	Если ВыбораПользователей.Следующий() 
		И ВыбораПользователей.ЗаполняетсяПоНеделям Тогда
		
		ПустаяДата = Дата(1, 1, 1);
		ВремяС = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
		Если ЗначениеЗаполнено(ВремяС) Тогда
			ВремяНачала = ?(ЗначениеЗаполнено(ВремяС), ВремяС * 3600, Неопределено);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ГрафикРаботы", ВыбораПользователей.ГрафикРаботы);
		Пока ВыбораДанныхГрафиков.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если ВыбораДанныхГрафиков.Часов > 0 Тогда
				
				Если ЗначениеЗаполнено(ВремяНачала) Тогда
					ВремяОкончания = ВремяНачала + ВыбораДанныхГрафиков.Часов * 3600;
				Иначе
					ВремяОкончания = 86400;
				КонецЕсли;
				
				Занятость = ЗанятостьНаНеделе.Добавить();
				Занятость.ДеньНедели = ВыбораДанныхГрафиков.НомерДняЦикла;
				Занятость.ВремяНачала = ПустаяДата + ВремяНачала;
				Занятость.ВремяОкончания = ПустаяДата + ВремяОкончания;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗанятостьНаНеделе;
	
КонецФункции

// Возвращает регистраторы отсутствий пользователя за указанный период.
//
// Параметры:
//	Пользователь		- СправочникСсылка.Пользователи.
//	НачалоПериода		- Дата - дата, с которой выполняется проверка.
//	ОкончаниеПериода	- Дата - дата, до которой выполняется проверка.
//
// Возвращаемое значение:
//	Массив - коллекция ссылок на документы.
//
Функция ОтсутствияПользователя(Пользователь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиПользователей(Запрос.МенеджерВременныхТаблиц, 
		Пользователь, 
		НачалоПериода, 
		ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияСотрудника.ОтпускОсновной);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиКомпании.Сотрудник КАК Сотрудник,
	|	&Состояние КАК Состояние,
	|	&НачалоПериода КАК Начало,
	|	&КонецПериода КАК Окончание
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК СотрудникиКомпании";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныеДанные = Запрос.Выполнить().Выгрузить();
	Регистратор = Документы.Отпуск.ПустаяСсылка();
	
	Отсутствия = Новый Массив;
	ДанныеПроверки = СостоянияСотрудников.ПроверитьПересечениеПериодовОтсутствия(ИсходныеДанные, Регистратор);
	
	Если Не ДанныеПроверки.Отказ Тогда
		
		Для Каждого КлючИЗначение Из ДанныеПроверки.ДанныеСотрудников Цикл
			Отсутствия.Добавить(КлючИЗначение.Значение.Регистратор);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(Отсутствия);
		
	КонецЕсли;
	
	Возврат Отсутствия;
	
КонецФункции

// Возвращает таблицу значений содержащую поля Пользователь и Сотрудник. Сотрудник отбирается по принципам:
//	- Работает на указанный период.
//	- Выбирается сотрудник, работающий в структурном подразделении, указанном для пользователя.
//	- Если соответствия нет, то выбирается основной сотрудник в первой из организаций. Принцип выбора см. в описании 
//		процедуры КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц.
//
// Параметры:
//	СписокПользователей	- Массив ссылок на элементы справочника Пользователи или 
//						- СправочникСсылка.Пользователи
//	НачалоПериода			- Дата
//	ОкончаниеПериода		- Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//								получены на дату НачалоПериода.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений, содержащая поля Сотрудник и соответствующее сотруднику ФизическоеЛицо.
//
Функция ОсновныеСотрудникиПользователей(СписокПользователей, НачалоПериода, ОкончаниеПериода = '00010101')
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = ЗапросОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода);
	
	УстановитьПривилегированныйРежим(Истина);
	ОсновныеСотрудникиПользователей = Запрос.Выполнить().Выгрузить();
	
	Возврат ОсновныеСотрудникиПользователей;
	
КонецФункции

// Формирует временную таблицу содержащую поля Пользователь и Сотрудник. Сотрудник отбирается по принципам:
//	- Работает на указанный период.
//	- Выбирается сотрудник, работающий в структурном подразделении, указанном для пользователя.
//	- Если соответствия нет, то выбирается основной сотрудник в первой из организаций. Принцип выбора см. в описании 
//		процедуры КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	СписокПользователей		- Массив ссылок на элементы справочника Пользователи или 
//							- СправочникСсылка.Пользователи
//	НачалоПериода			- Дата
//	ОкончаниеПериода		- Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//								получены на дату НачалоПериода.
//
Процедура СоздатьВТОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода = '00010101')
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода);
	
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТОсновныеСотрудникиПользователей");
	
КонецПроцедуры

// Формирует временную таблицу содержащую поля Пользователь и ГрафикРаботы. График работы соответствует кадровым данным
// сотрудника пользователя. Принцип выбора сотрудника см. в описании процедуры ОсновныеСотрудникиПользователей.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	СписокПользователей		- Массив ссылок на элементы справочника Пользователи или 
//							- СправочникСсылка.Пользователи
//	Период					- Дата
//
Процедура СоздатьВТГрафикиПользователей(МенеджерВременныхТаблиц, СписокПользователей, Период)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросГрафикиПользователей(МенеджерВременныхТаблиц, СписокПользователей, Период);
	
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТГрафикиПользователей");
	
КонецПроцедуры

Функция ЗапросОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода = '00010101')
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Пользователи.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&СписокПользователей)
	|	И Пользователи.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Запрос.Выполнить();
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолучения.КадровыеДанные = "ОсновноеРабочееМестоВОрганизации,ФизическоеЛицо,МестоВСтруктуреПредприятия";
	ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолучения.НачалоПериода = НачалоПериода;
	ПараметрыПолучения.ОкончаниеПериода = ОкончаниеПериода;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизации.Сотрудник) КАК Сотрудник,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОсновныеРабочиеМеста
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ГДЕ
	|	СотрудникиОрганизации.ОсновноеРабочееМестоВОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиОрганизации.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Подразделение КАК Подразделение,
	|	СУММА(ВЫБОР
	|			КОГДА СотрудникиОрганизации.Сотрудник ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КолВоРабочихМест
	|ПОМЕСТИТЬ ВТВсегоРабочихМестФизическихЛиц
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ФизическиеЛица.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Подразделение,
	|	ФизическиеЛица.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.КолВоРабочихМест > 1
	|				И ФизическиеЛица.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИскатьПоСтруктуреПредприятия,
	|	ОсновныеРабочиеМеста.Сотрудник КАК ОсновноеРабочееМесто
	|ПОМЕСТИТЬ ВТПараметрыОтбораОсновныхСотрудников
	|ИЗ
	|	ВТВсегоРабочихМестФизическихЛиц КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеРабочиеМеста КАК ОсновныеРабочиеМеста
	|		ПО ФизическиеЛица.ФизическоеЛицо = ОсновныеРабочиеМеста.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновныеРабочиеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВсегоРабочихМестФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОтбораОсновныхСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПараметрыОтбораОсновныхСотрудников.ИскатьПоСтруктуреПредприятия
	|				И НЕ СотрудникиВСтруктуреПредприятия.Сотрудник ЕСТЬ NULL
	|			ТОГДА СотрудникиВСтруктуреПредприятия.Сотрудник
	|		ИНАЧЕ СотрудникиОрганизации.Сотрудник
	|	КОНЕЦ КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиКомпании
	|ИЗ
	|	ВТПараметрыОтбораОсновныхСотрудников КАК ПараметрыОтбораОсновныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ПараметрыОтбораОсновныхСотрудников.ОсновноеРабочееМесто = СотрудникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиВСтруктуреПредприятия
	|		ПО ПараметрыОтбораОсновныхСотрудников.ФизическоеЛицо = СотрудникиВСтруктуреПредприятия.ФизическоеЛицо
	|			И ПараметрыОтбораОсновныхСотрудников.Подразделение = СотрудникиВСтруктуреПредприятия.МестоВСтруктуреПредприятия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПараметрыОтбораОсновныхСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА СотрудникиКомпании.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|		ИНАЧЕ СотрудникиКомпании.Сотрудник
	|	КОНЕЦ КАК Сотрудник
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКомпании КАК СотрудникиКомпании
	|		ПО ФизическиеЛица.ФизическоеЛицо = СотрудникиКомпании.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиКомпании";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросГрафикиПользователей(МенеджерВременныхТаблиц, СписокПользователей, Период)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиПользователей(Запрос.МенеджерВременныхТаблиц, СписокПользователей, Период);
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеСотрудникиПользователей.Сотрудник,
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК ОсновныеСотрудникиПользователей";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "ГрафикРаботы";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, КадровыеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсновныеСотрудникиПользователей.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) КАК ГрафикРаботы
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК ОсновныеСотрудникиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ОсновныеСотрудникиПользователей.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

Процедура УстановитьНастройкуИспользоватьРабочийКалендарь() Экспорт
	Константы.ИспользоватьРабочийКалендарь.Установить(Истина);
КонецПроцедуры

#КонецОбласти
