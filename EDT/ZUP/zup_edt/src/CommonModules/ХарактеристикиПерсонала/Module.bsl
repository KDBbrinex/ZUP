
#Область ПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
//  необходимые данной подсистеме.
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. описание функции НоваяТаблицаОбработчиковОбновления
//  	общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает вид характеристики и его картинку.
//
// Параметры:
//  Характеристика	 - ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала	 - характеристика персонала, вид которой нужно
//  	получить.
// 
// Возвращаемое значение:
//  Структура - вид переданной характеристики персонала и его картинкой.
//
Функция ВидИКартинкаХарактеристики(Характеристика) Экспорт
	
	ВидХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "ВидХарактеристики");
	КартинкаВида = КартинкаВидаХарактеристики(ВидХарактеристики);
	
	Результат = Новый Структура;
	Результат.Вставить("ВидХарактеристики", ВидХарактеристики);
	Результат.Вставить("Картинка", КартинкаВида);
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив структур со свойствами строк характеристик персонала.
//
// Параметры:
//  СписокДействий	 - Массив	 - действия.
// 
// Возвращаемое значение:
//  Массив - структуры с полями строк характеристик персонала.
//
Функция МассивСтруктурХарактеристикСоЗначениямиИзДействий(СписокДействий) Экспорт
	Возврат МассивСтруктурХарактеристикСоЗначениями(СписокДействий, "ДействияСотрудников.ХарактеристикиПерсонала");
КонецФункции

// Находит или создает характеристику персонала и ее значения по наименованиям из макета Библиотека.
//
// Параметры:
//  Характеристика			 - строка	 - наименование характеристики персонала.
//  ЗначениеХарактеристики	 - строка	 - наименование значения характеристики.
//  БиблиотекаТаблица		 - ТаблицаЗначений	 - таблица характеристик персонала из библиотеки.
// 
// Возвращаемое значение:
//  Структура - ссылки на характеристику и ее значение.
//
Функция ХарактеристикаИзМакета(Характеристика, ЗначениеХарактеристики, БиблиотекаТаблица) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Наименование", Характеристика);
	СтрокиХарактеристики = БиблиотекаТаблица.НайтиСтроки(СтруктураПоиска);
	СтруктураПоиска.Вставить("НаименованиеЗначенияХарактеристики", ЗначениеХарактеристики);
	СтрокиЗначения = БиблиотекаТаблица.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗначения.Количество() > 0 Тогда
		РеквизитДопУпорядочивания = СтрокиЗначения[0].РеквизитДопУпорядочивания;
	Иначе
		РеквизитДопУпорядочивания = 0;
	КонецЕсли;
	
	ХарактеристикаСсылка = ПланыВидовХарактеристик.ХарактеристикиПерсонала.НайтиПоНаименованию(Характеристика, Истина);
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
			СтруктураВозврата.Вставить("Характеристика", ХарактеристикаСсылка);
			СтруктураВозврата.Вставить("Значение", Справочники.ЗначенияХарактеристикПерсонала.ПустаяСсылка());
			Возврат СтруктураВозврата;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияХарактеристикПерсонала.Ссылка
		|ИЗ
		|	Справочник.ЗначенияХарактеристикПерсонала КАК ЗначенияХарактеристикПерсонала
		|ГДЕ
		|	ЗначенияХарактеристикПерсонала.Владелец = &Владелец
		|	И ЗначенияХарактеристикПерсонала.Наименование = &Наименование
		|	И НЕ ЗначенияХарактеристикПерсонала.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", ХарактеристикаСсылка);
		Запрос.УстановитьПараметр("Наименование", ЗначениеХарактеристики);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеХарактеристикиСсылка = Выборка.Ссылка;
		Иначе
			НовоеЗначение = Справочники.ЗначенияХарактеристикПерсонала.СоздатьЭлемент();
			НовоеЗначение.Владелец = ХарактеристикаСсылка;
			НовоеЗначение.Наименование = ЗначениеХарактеристики;
			НовоеЗначение.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
			НовоеЗначение.Записать();
			ЗначениеХарактеристикиСсылка = НовоеЗначение.Ссылка;
		КонецЕсли;
		СтруктураВозврата.Вставить("Характеристика", ХарактеристикаСсылка);
		СтруктураВозврата.Вставить("Значение", ЗначениеХарактеристикиСсылка);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если СтрокиХарактеристики.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяХарактеристика = ПланыВидовХарактеристик.ХарактеристикиПерсонала.СоздатьЭлемент();
	НоваяХарактеристика.Наименование = Характеристика;
	НоваяХарактеристика.ВидХарактеристики = Перечисления.ВидыХарактеристикПерсонала[СтрокиХарактеристики[0].ВидХарактеристики];
	НоваяХарактеристика.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияХарактеристикПерсонала");
	НоваяХарактеристика.Записать();
	СтруктураВозврата.Вставить("Характеристика", НоваяХарактеристика.Ссылка);
	
	ЗначениеХарактеристикиСсылка = Справочники.ЗначенияХарактеристикПерсонала.ПустаяСсылка();
	Для Каждого ТекущаяСтрока Из СтрокиХарактеристики Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.НаименованиеЗначенияХарактеристики) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеЗначение = Справочники.ЗначенияХарактеристикПерсонала.СоздатьЭлемент();
		НовоеЗначение.Владелец = НоваяХарактеристика.Ссылка;
		НовоеЗначение.Наименование = ТекущаяСтрока.НаименованиеЗначенияХарактеристики;
		НовоеЗначение.РеквизитДопУпорядочивания = ТекущаяСтрока.РеквизитДопУпорядочивания;
		НовоеЗначение.Записать();
		
		Если ТекущаяСтрока.НаименованиеЗначенияХарактеристики = ЗначениеХарактеристики Тогда
			ЗначениеХарактеристикиСсылка = НовоеЗначение.Ссылка;
		КонецЕсли;
	КонецЦикла;
	СтруктураВозврата.Вставить("Значение", ЗначениеХарактеристикиСсылка);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Находит или создает действие сотрудника по наименованию из макета Библиотека.
//
// Параметры:
//  ДействиеСотрудника				 - строка		 - наименование действия сотрудника.
//  БиблиотекаТаблица				 - ТаблицаЗначений	 - таблица из библиотеки Действий сотрудников.
//  БиблиотекаХарактеристикТаблица	 - ТаблицаЗначений	 - таблица характеристик персонала из библиотеки.
// 
// Возвращаемое значение:
//  СправочникСсылка.ДействияСотрудников - ссылка на действие сотрудника.
//
Функция ДействиеСотрудникаИзМакета(ДействиеСотрудника, БиблиотекаТаблица, БиблиотекаХарактеристикТаблица) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеСотрудника) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДействиеСотрудникаСсылка = Справочники.ДействияСотрудников.НайтиПоНаименованию(ДействиеСотрудника, Истина);
	Если ЗначениеЗаполнено(ДействиеСотрудникаСсылка) Тогда
		Возврат ДействиеСотрудникаСсылка;
	КонецЕсли;
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Наименование", ДействиеСотрудника);
	СтрокиДействия = БиблиотекаТаблица.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиДействия.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовоеДействие = Справочники.ДействияСотрудников.СоздатьЭлемент();
	НовоеДействие.Наименование = ДействиеСотрудника;
	Для Каждого ТекущаяСтрока Из СтрокиДействия Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураХарактеристики = ХарактеристикаИзМакета(ТекущаяСтрока.Характеристика, ТекущаяСтрока.Значение, БиблиотекаХарактеристикТаблица);
		Если СтруктураХарактеристики = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТЧ = НовоеДействие.ХарактеристикиПерсонала.Добавить();
		НоваяСтрокаТЧ.Характеристика = СтруктураХарактеристики.Характеристика;
		НоваяСтрокаТЧ.Значение = СтруктураХарактеристики.Значение;
		НоваяСтрокаТЧ.Вес = ТекущаяСтрока.Вес;
		НоваяСтрокаТЧ.ВесЗначения = ТекущаяСтрока.ВесЗначения;
		НоваяСтрокаТЧ.ТребуетсяОбучение = ТекущаяСтрока.ТребуетсяОбучение;
		НоваяСтрокаТЧ.ТребуетсяПроверка = ТекущаяСтрока.ТребуетсяПроверка;
	КонецЦикла;
	НовоеДействие.Записать();
	Возврат НовоеДействие.Ссылка;
	
КонецФункции

// Функция - Заполнить характеристики персонала по позиции штатного расписания
//
// Параметры:
//  Позиция	 - СправочникСсылка.ШтатноеРасписание - позиция штатного расписания
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - характеристики персонала позиции
//
Функция ХарактеристикиПерсоналаПоПозицииШтатногоРасписания(Позиция) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ХарактеристикиПерсоналаПозицийШтатногоРасписания) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ХарактеристикаПерсонала.Ссылка КАК Характеристика,
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ХарактеристикаПерсонала.ВидХарактеристики КАК Вид,
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.Значение.Ссылка КАК Значение
		|ИЗ
		|	РегистрСведений.ХарактеристикиПерсоналаПозицийШтатногоРасписания КАК ХарактеристикиПерсоналаПозицийШтатногоРасписания
		|ГДЕ
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ПозицияШтатногоРасписания = &Позиция");
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	
	Характеристики = Новый Массив;
	ХарактеристикаЗначения = Новый Соответствие;
	
	ВыборкаХарактеристикиПерсонала = Запрос.Выполнить().Выбрать();
	Пока ВыборкаХарактеристикиПерсонала.Следующий() Цикл
		ОписаниеХарактеристики = Новый Структура("Характеристика, Значение");
		ЗаполнитьЗначенияСвойств(ОписаниеХарактеристики, ВыборкаХарактеристикиПерсонала);
		Значения = ХарактеристикаЗначения.Получить(ОписаниеХарактеристики.Характеристика);
		Если Значения = Неопределено Тогда
			Значения = Новый Массив;
			Характеристики.Добавить(ОписаниеХарактеристики.Характеристика);
		КонецЕсли;
		Значения.Добавить(ОписаниеХарактеристики.Значение);
		ХарактеристикаЗначения.Вставить(ОписаниеХарактеристики.Характеристика, Значения);
	КонецЦикла;
	
	Возврат Характеристики;
	
КонецФункции

// Функция - Заполнить действия сотрудников по позиции штатного расписания
//
// Параметры:
//  Позиция	 - СправочникСсылка.ШтатноеРасписание - позиция штатного расписания
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - действия сотрудника позиции
//
Функция ДействияСотрудниковПоПозицииШтатногоРасписания(Позиция) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДействияПозицийШтатногоРасписания) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействияПозицийШтатногоРасписания.ДействиеСотрудника.Ссылка КАК ДействиеСотрудника
		|ИЗ
		|	РегистрСведений.ДействияПозицийШтатногоРасписания КАК ДействияПозицийШтатногоРасписания
		|ГДЕ
		|	ДействияПозицийШтатногоРасписания.ПозицияШтатногоРасписания = &Позиция");
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДействиеСотрудника");
	
КонецФункции

// Функция - Профили должностей по позиции штатного расписания
//
// Параметры:
//  Позиция	 - СправочникСсылка.ШтатноеРасписание - позиция штатного расписания
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - профили должностей позиции
//
Функция ПрофильДолжностиПоПозицииШтатногоРасписания(Позиция) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиДействийХарактеристикШтатногоРасписания) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиДействийХарактеристик.ПрофильДолжности КАК ПрофильДолжности
		|ИЗ
		|	РегистрСведений.НастройкиДействийХарактеристикШтатногоРасписания КАК НастройкиДействийХарактеристик
		|ГДЕ
		|	НастройкиДействийХарактеристик.ПозицияШтатногоРасписания = &Позиция");
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПрофильДолжности");
	
КонецФункции

// В соответствии с профилем должности обновляет состав Действий и Характеристик для тех позиций штатного расписания,
//  которые соответствуют записываемому профилю.
//
// Параметры:
//  ПрофильДолжности		 - СправочникСсылка.ПрофилиДолжностей	 - записываемый профиль
//  ДействияСотрудников		 - ТабличнаяЧасть						 - табличная часть действий профиля
//  ХарактеристикиПерсонала	 - ТабличнаяЧасть						 - табличная часть характеристик профиля
//
Процедура ОбновитьДействияХарактеристикиПозицийШтатногоРасписанияПоПрофилюДолжности(ПрофильДолжности, ДействияСотрудников, ХарактеристикиПерсонала) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ДействияПозицийШтатногоРасписания.ОбновитьДействияПозицийШтатногоРасписанияПоПрофилюДолжности(ПрофильДолжности, ДействияСотрудников);
	РегистрыСведений.ХарактеристикиПерсоналаПозицийШтатногоРасписания.ОбновитьХарактеристикиПозицийШтатногоРасписанияПоПрофилюДолжности(ПрофильДолжности, ХарактеристикиПерсонала);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf47-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.КомпетенцииПерсонала);
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьДанныеПозицииШтатногоРасписания(ДанныеПозиции, ПозицияШтатногоРасписания) Экспорт
	
	ДанныеПозиции.Вставить("ПрофильДолжности", Неопределено);
	ДанныеПозиции.Вставить("СоответствуютПрофилюДолжности", Ложь);
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиДействийХарактеристикШтатногоРасписания) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписание.Ссылка КАК Ссылка,
		|	НастройкиДействийХарактеристик.ПрофильДолжности КАК ПрофильДолжности,
		|	НастройкиДействийХарактеристик.СоответствуютПрофилюДолжности КАК СоответствуютПрофилюДолжности
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиДействийХарактеристикШтатногоРасписания КАК НастройкиДействийХарактеристик
		|		ПО (НастройкиДействийХарактеристик.ПозицияШтатногоРасписания = ШтатноеРасписание.Ссылка)
		|			И (ШтатноеРасписание.Ссылка = &Позиция)");
		
	Запрос.УстановитьПараметр("Позиция", ПозицияШтатногоРасписания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеПозиции.ПрофильДолжности = Выборка.ПрофильДолжности;
	ДанныеПозиции.СоответствуютПрофилюДолжности = Выборка.СоответствуютПрофилюДолжности;
	
КонецПроцедуры

#Область ПереносДанныхИзПрежнихПрограмм

Процедура НастройкиДействийХарактеристикШтатногоРасписания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.РаботникиПоДоговорамГПХ = Истина;
	ПараметрыЗапроса.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыЗапроса.КадровыеДанные = "ДолжностьПоШтатномуРасписанию";
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	МАКСИМУМ(ПрофилиДолжностей.Ссылка) КАК ПрофильДолжности,
	|	ИСТИНА КАК СоответствуютПрофилюДолжности
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиДолжностей КАК ПрофилиДолжностей
	|		ПО ШтатноеРасписание.Должность = ПрофилиДолжностей.Должность
	|			И (ШтатноеРасписание.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтатноеРасписание.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.НастройкиДействийХарактеристикШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
	НаборЗаписей.Записать();	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список удаляемых характеристик персонала при удалении действия сотрудника.
//
// Параметры:
//  УдаляемыеДействия	 - Массив			 - массив удаляемых действий.
//  ТаблицаДействий		 - ТаблицаЗначений	 - общая таблица действий.
//  ТаблицаХарактеристик - ТаблицаЗначений	 - общая таблица характеристик.
//  ТаблицаЗначений		 - ТаблицаЗначений	 - общая таблица значений характеристик.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - удаляемые характеристики и их значения.
//
Функция ТаблицаУдаляемыхХарактеристикИЗначенийПоУдаляемымДействиям(УдаляемыеДействия, ТаблицаДействий, ТаблицаХарактеристик, ТаблицаЗначений) Экспорт
	
	Возврат ТаблицаУдаляемыхХарактеристикИЗначенийПоУдаляемымОснованиям(
		Справочники.ДействияСотрудников, 
		УдаляемыеДействия,
		ТаблицаДействий,
		ТаблицаХарактеристик,
		ТаблицаЗначений);
		
КонецФункции

// Возвращает список удаляемых характеристик персонала при удалении действия сотрудника.
//
// Параметры:
//   УдаляемыеКомпетенции - Массив - массив удаляемых компетенций.
//   ТаблицаОснований - общая таблица оснований для характеристик.
//   ТаблицаХарактеристик - общая таблица характеристик.
//   ТаблицаЗначений - общая таблица значений характеристик.
//
// ВозвращаемоеЗначение:
//   Таблица значений - удаляемые характеристики и их значения.
//		* Характеристика - характеристика персонала
//		* Значение - значение характеристики.
//
Функция ТаблицаУдаляемыхХарактеристикИЗначенийПоУдаляемымОснованиям(МенеджерСправочника, УдаляемыеОснования, ТаблицаОснований, ТаблицаХарактеристик, ТаблицаЗначений)
	
	УдаляемыеХарактеристики = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОснований.ИмяПоля КАК Основание
		|ПОМЕСТИТЬ ВТВсеОснования
		|ИЗ
		|	&ТаблицаОснований КАК ТаблицаОснований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаХарактеристик.Характеристика КАК ХарактеристикаОснования
		|ПОМЕСТИТЬ ВТХарактеристики
		|ИЗ
		|	&ТаблицаХарактеристик КАК ТаблицаХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗначений.Характеристика КАК ХарактеристикаОснования,
		|	ТаблицаЗначений.Значение КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ВТЗначения
		|ИЗ
		|	&ТаблицаЗначений КАК ТаблицаЗначений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Характеристики.ХарактеристикаОснования КАК ХарактеристикаОснования,
		|	Значения.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ВТВсеХарактеристики
		|ИЗ
		|	ВТХарактеристики КАК Характеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначения КАК Значения
		|		ПО Характеристики.ХарактеристикаОснования = Значения.ХарактеристикаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТВсеОснования.Основание КАК Основание,
		|	ТЧОснованияХарактеристикиПерсонала.Характеристика КАК ХарактеристикаОснования,
		|	ТЧОснованияХарактеристикиПерсонала.Значение КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ВТВсеОснованияХарактеристики
		|ИЗ
		|	ВТВсеОснования КАК ВТВсеОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомпетенцииПерсонала.ХарактеристикиПерсонала КАК ТЧОснованияХарактеристикиПерсонала
		|		ПО ВТВсеОснования.Основание = ТЧОснованияХарактеристикиПерсонала.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеОснованияХарактеристики.Основание КАК Основание,
		|	ВсеОснованияХарактеристики.ХарактеристикаОснования КАК ХарактеристикаОснования,
		|	ВсеОснованияХарактеристики.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ВТУдаляемыеОснования
		|ИЗ
		|	ВТВсеОснованияХарактеристики КАК ВсеОснованияХарактеристики
		|ГДЕ
		|	ВсеОснованияХарактеристики.Основание В(&УдаляемыеОснования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВсеОснованияХарактеристики.Основание КАК Основание,
		|	ВТВсеОснованияХарактеристики.ХарактеристикаОснования КАК ХарактеристикаОснования,
		|	ВТВсеОснованияХарактеристики.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ВТОставшиесяОснования
		|ИЗ
		|	ВТВсеОснованияХарактеристики КАК ВТВсеОснованияХарактеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдаляемыеОснования КАК ВТУдаляемыеОснования
		|		ПО ВТВсеОснованияХарактеристики.Основание = ВТУдаляемыеОснования.Основание
		|ГДЕ
		|	ВТУдаляемыеОснования.Основание ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВсеХарактеристики.ХарактеристикаОснования КАК Характеристика,
		|	ВТВсеХарактеристики.ЗначениеХарактеристики КАК Значение
		|ИЗ
		|	ВТВсеХарактеристики КАК ВТВсеХарактеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдаляемыеОснования КАК ВТУдаляемыеОснования
		|		ПО ВТВсеХарактеристики.ХарактеристикаОснования = ВТУдаляемыеОснования.ХарактеристикаОснования
		|			И ВТВсеХарактеристики.ЗначениеХарактеристики = ВТУдаляемыеОснования.ЗначениеХарактеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОставшиесяОснования КАК ВТОставшиесяОснования
		|		ПО ВТВсеХарактеристики.ХарактеристикаОснования = ВТОставшиесяОснования.ХарактеристикаОснования
		|			И ВТВсеХарактеристики.ЗначениеХарактеристики = ВТОставшиесяОснования.ЗначениеХарактеристики
		|ГДЕ
		|	ВТОставшиесяОснования.Основание ЕСТЬ NULL
		|	И НЕ ВТУдаляемыеОснования.Основание ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("УдаляемыеОснования", УдаляемыеОснования);
	Запрос.УстановитьПараметр("ТаблицаОснований", ТаблицаОснований);
	Запрос.УстановитьПараметр("ТаблицаХарактеристик", ТаблицаХарактеристик);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	
	Если МенеджерСправочника = Справочники.КомпетенцииПерсонала Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОснований.ИмяПоля КАК Основание", "ТаблицаОснований.Компетенция КАК Основание");
	ИначеЕсли МенеджерСправочника = Справочники.ДействияСотрудников Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОснований.ИмяПоля КАК Основание", "ТаблицаОснований.ДействиеСотрудника КАК Основание");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомпетенцииПерсонала.ХарактеристикиПерсонала", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияСотрудников.ХарактеристикиПерсонала");
	Иначе
		Возврат УдаляемыеХарактеристики;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВозвращаемыйМассив = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить());
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

// Возвращает картинку вида характеристики персонала
//
// Параметры:
//   ВидХарактеристики - ПеречислениеСсылка.ВидыХарактеристикПерсонала - вид характеристики персонала, картинку которого
//                                                                       нужно получить.
//
// ВозвращаемоеЗначение:
//   Число - номер в коллекции картинки вида характеристики персонала.
//
Функция КартинкаВидаХарактеристики(ВидХарактеристики) Экспорт
	
	Если ВидХарактеристики = Перечисления.ВидыХарактеристикПерсонала.Знание Тогда
		НомерКартинки = 0;
	ИначеЕсли ВидХарактеристики = Перечисления.ВидыХарактеристикПерсонала.Навык Тогда
		НомерКартинки = 1;
	ИначеЕсли ВидХарактеристики = Перечисления.ВидыХарактеристикПерсонала.ЛичноеКачество Тогда
		НомерКартинки = 2;
	Иначе
		НомерКартинки = 3;
	КонецЕсли;
	
	Возврат НомерКартинки;
	
КонецФункции

// Возвращает массив структур со свойствами строк характеристик персонала.
//
// Параметры:
//   СписокСсылок - Массив - список ссылок-отборов.
//
// ВозвращаемоеЗначение:
//   Массив - Структуры с полями строк характеристик персонала.
//
Функция МассивСтруктурХарактеристикСоЗначениями(СписокСсылок, СтрокаИсточника = "КомпетенцииПерсонала.ХарактеристикиПерсонала")
	
	МассивСтруктурХарактеристик = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.Характеристика КАК Характеристика,
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.Значение КАК Значение,
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.Вес КАК Вес,
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.ТребуетсяПроверка КАК ТребуетсяПроверка,
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.ТребуетсяОбучение КАК ТребуетсяОбучение,
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.ВесЗначения КАК ВесЗначения
		|ИЗ
		|	Справочник.КомпетенцииПерсонала.ХарактеристикиПерсонала КАК КомпетенцииПерсоналаХарактеристикиПерсонала
		|ГДЕ
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.Ссылка В(&СписокСсылок)";
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КомпетенцииПерсонала.ХарактеристикиПерсонала", СтрокаИсточника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураХарактеристик = ОписаниеСтруктурыХарактеристик();
		ЗаполнитьЗначенияСвойств(СтруктураХарактеристик, Выборка);
		МассивСтруктурХарактеристик.Добавить(СтруктураХарактеристик);
	КонецЦикла;
	
	Возврат МассивСтруктурХарактеристик;
	
КонецФункции

Функция ОписаниеСтруктурыХарактеристик()

	СтруктураХарактеристик = Новый Структура;
	
	СтруктураХарактеристик.Вставить("Характеристика");
	СтруктураХарактеристик.Вставить("Значение");
	СтруктураХарактеристик.Вставить("Вес");
	СтруктураХарактеристик.Вставить("ТребуетсяПроверка");
	СтруктураХарактеристик.Вставить("ТребуетсяОбучение");
	СтруктураХарактеристик.Вставить("ВесЗначения");
	
	Возврат СтруктураХарактеристик;
	
КонецФункции

#КонецОбласти