#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.39";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("14ab3bc1-f294-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ОбновитьПубликуемыеПодразделенияПредприятия";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикуемых подразделений предприятия.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("352b4407-f724-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ОбновитьПубликациюСотрудников";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации сотрудников.'");
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТШтатноеРасписание(МенеджерВТ) Экспорт
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка <> &УправленческаяОрганизация";
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Для каждого Организация Из Организации Цикл
			УправлениеШтатнымРасписанием.СоздатьПозицииОрганизации(Организация);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТШтатноеРасписание
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Владелец В(&Организации)
	|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск);
	
КонецПроцедуры


#Область РегистрацияПубликуемыхОбъектов

Процедура ОбновитьСтруктуруПредприятия() Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктураСобытия");
		Модуль.ОбновитьСтруктуруПредприятия(Ложь);
	КонецЕсли;

КонецПроцедуры

Функция НоваяПубликуемаяСтруктураПредприятияПозиций(Позиции) Экспорт

	ПодразделенияПредприятия = ПубликуемаяСтруктураПредприятия(Позиции);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодразделенияПредприятия", ПодразделенияПредприятия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&ПодразделенияПредприятия)";
	НовыеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПредприятия, НовыеПодразделения);

КонецФункции

Функция ПубликуемаяСтруктураПредприятия(Позиции) Экспорт
	
	ПодразделенияПредприятия = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
		ПодразделенияПредприятия = ОбщегоНазначения.ВыгрузитьКолонку(СтруктураПредприятия,"Подразделение",Истина);
	КонецЕсли;
	
	Если ПодразделенияПредприятия.Количество() > 0 Тогда
		ПодразделенияПредприятия = РодителиПодразделений(ПодразделенияПредприятия);
	КонецЕсли;
	
	Возврат ПодразделенияПредприятия;
	
КонецФункции

Функция РодителиПодразделений(Подразделения)
	
	РодителиПодразделений = Новый Массив;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Родитель", Ложь);
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			РодителиПодразделений.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	РодителиПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодителиПодразделений);
	Если РодителиПодразделений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
		РодителиПодразделений = РодителиПодразделений(РодителиПодразделений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Подразделения);

КонецФункции

Функция ИменаКонтролируемыхПолей(Объект) Экспорт
	
	ИменаКонтролируемыхПолей = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		ИменаКонтролируемыхПолей = "Наименование,ПометкаУдаления";
	Иначе
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			ИменаКонтролируемыхПолей = Модуль.ИменаКонтролируемыхПолейКабинетСотрудника(Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИменаКонтролируемыхПолей;
	
КонецФункции

Процедура ОбъектПриЗаписи(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		ПриЗаписиПозицииШтатногоРасписания(Объект);
	Иначе
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			Модуль.ПриЗаписиПубликуемогоОбъекта(Объект);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбъектПередЗаписью(Объект) Экспорт

	Если Объект.ЭтоНовый() И ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		Объект.ДополнительныеСвойства.Вставить("ОбновитьНастройкуПубликации", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиПозицииШтатногоРасписания(Объект)
	
	Если Объект.ГруппаПозицийПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкуПубликации = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ОбновитьНастройкуПубликации", ОбновитьНастройкуПубликации);
	Если ОбновитьНастройкуПубликации <> Неопределено Тогда
		// Запись новой позиции штатного расписания.
		
		ПроверяемыеОбъекты = Новый Массив;
		ПроверяемыеОбъекты.Добавить(Объект.Владелец);
		ПроверяемыеОбъекты.Добавить(Объект.Подразделение);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила КАК ОбъектПравила
		|ИЗ
		|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликацииКабинетСотрудника
		|ГДЕ
		|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила В(&ПроверяемыеОбъекты)";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			МенеджерЗаписи = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ОбъектПравила = Объект.Ссылка;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации 	= Объект.Ссылка;
			МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
			
			ПодразделениеПредприятия = МестоПозицийВСтруктуреПредприятия(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= ПодразделениеПредприятия;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();	
			КонецЕсли;
			
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		КабинетСотрудника.ПриЗаписиПубликуемогоОбъекта(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

Функция МестоПозицийВСтруктуреПредприятия(ПозицияШР)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.МестоПозицииВСтруктуреПредприятия(ПозицияШР);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПодразделениеВСтруктуреПредприятия(Подразделение) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.ПодразделениеВСтруктуреПредприятия(Подразделение.Ссылка);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Процедура ПриЗаписиМестаПозицииШтатногоРасписанияВСтруктуреПредприятия(МенеджерВТ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВСтруктуреПредприятия.МестоВСтруктуреПредприятия КАК Подразделение
	|ПОМЕСТИТЬ ВТПубликуемыеПодразделения
	|ИЗ
	|	ВТМестаВСтруктуреПредприятияПозиций КАК МестаВСтруктуреПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО МестаВСтруктуреПредприятия.Позиция = ПубликуемыеОбъекты.ОбъектПубликации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПодразделений.СтароеМестоВСтруктуреПредприятия КАК Подразделение
	|ПОМЕСТИТЬ ВТПодразделения
	|ИЗ
	|	ВТМестаВСтруктуреПредприятияПозиций КАК ТаблицаПодразделений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ТаблицаПодразделений.СтароеМестоВСтруктуреПредприятия = ПубликуемыеОбъекты.ОбъектПубликации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПубликуемыеПодразделения.Подразделение КАК Подразделение
	|ИЗ
	|	ВТПубликуемыеПодразделения КАК ПубликуемыеПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПубликуемыеПодразделения.Подразделение = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	Если Подразделения.Количество() > 0 Тогда
		
		Для каждого Подразделение Из Подразделения Цикл
			
			МенеджерЗаписи = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ОбъектПубликации = Подразделение;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Подразделение;
			МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор); 
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Ранее публикуемые подразделения, проверяем есть ли у них публикуемые позиции.
	// Получим позиции подразделений.
	МодульОрганизационнаяСтруктура.СоздатьВТПозицииПодразделений(МенеджерВТ, "ВТПодразделения");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПозицииПодразделений.Подразделение КАК Подразделение
	|ИЗ
	|	ВТПозицииПодразделений КАК ПозицииПодразделений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПозицииПодразделений.Позиция = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL";
	
	Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	Если Подразделения.Количество() > 0 Тогда
		
		Для каждого Подразделение Из Подразделения Цикл
			
			НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектПубликации.Установить(Подразделение);
			НаборЗаписей.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Подразделение;
			МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор); 
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ПриЗаписиПозицииРуководителейПодразделений(Подразделения) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&Подразделения)";
	
	УстановитьПривилегированныйРежим(Истина);
	Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	Если Подразделения.Количество() > 0 Тогда
		
		Для каждого Подразделение Из Подразделения Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Подразделение;
			МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор); 
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияОтпусков(НаборЗаписей) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = НаборЗаписей.Отбор.Найти("Сотрудник");
	Если ЭлементОтбора = Неопределено Или Не ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	Сотрудник = ЭлементОтбора.Значение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации = &Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
		Запись.Сотрудник = Выборка.Сотрудник;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзменениеКадровойИстории(ИзменившиесяДанные) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		Возврат;
	КонецЕсли;
	МодульРуководителиПодразделений = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
	
	УстановитьПривилегированныйРежим(Истина);
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "СтароеЗначениеДолжностьПоШтатномуРасписанию", Истина);
	НовыеЗначенияПозиций  = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "НовоеЗначениеДолжностьПоШтатномуРасписанию", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Позиции, НовыеЗначенияПозиций, Истина);
	Подразделения = МодульРуководителиПодразделений.ПодразделенияПозицийРуководителей(Позиции);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&Подразделения)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПредметПубликации = Выборка.Подразделение;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТипШтатноеРасписание() Экспорт

	Возврат Тип("СправочникСсылка.ШтатноеРасписание");

КонецФункции

Функция ТипСтруктураПредприятия() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат МодульОрганизационнаяСтруктура.ТипСтруктураПредприятия();
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область Публикация

Процедура ДобавитьЭлементБлокировкиОбновленияПравНаОтпуск(Блокировка) Экспорт
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновленияПубликацииПравНаОтпуск(ПубликуемыеОбъекты) Экспорт
	
	НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьНаборЗаписей();
	Для каждого ОбъектПубликации Из ПубликуемыеОбъекты Цикл
		Если ТипЗнч(ОбъектПубликации) = Тип("СправочникСсылка.Сотрудники") Тогда
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Сотрудник = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(Сотрудник) Экспорт
	
	Запись = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
	Запись.Сотрудник = Сотрудник;
	Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	Запись.Записать();
	
КонецПроцедуры

Функция ДанныеДляОбновленияПубликацииПравНаОтпуск() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ПраваНаОтпуск.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ПраваНаОтпуск.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск КАК ПраваНаОтпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПраваНаОтпуск.Сотрудник = ПубликуемыеОбъекты.ОбъектПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО ПраваНаОтпуск.Сотрудник.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|ГДЕ
	|	ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ОтменитьРегистрациюСотрудникиДляОбновленияПубликацииПравНаОтпуск(ТаблицаИзменений, Результат) Экспорт
	
	Если ТаблицаИзменений.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
			Запрос.УстановитьПараметр("Выгружено", Результат.Выгружено);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаИзменений.Сотрудник КАК Сотрудник,
			|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
			|	ТаблицаИзменений.Публикуется КАК Публикуется
			|ПОМЕСТИТЬ ВТОтменитьИзменения
			|ИЗ
			|	&ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	(ТаблицаИзменений.ФизическоеЛицо В (&Выгружено)
			|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтменитьИзменения.Сотрудник КАК Сотрудник
			|ИЗ
			|	ВТОтменитьИзменения КАК ОтменитьИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск КАК Сотрудники
			|		ПО ОтменитьИзменения.Сотрудник = Сотрудники.Сотрудник
			|			И (ОтменитьИзменения.ВерсияДанных = Сотрудники.ВерсияДанных
			|				ИЛИ НЕ ОтменитьИзменения.Публикуется)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ВерсияДанных КАК ВерсияДанных,
			|	Сотрудники.БылаОшибкаПриПубликации КАК БылаОшибкаПриПубликации,
			|	Сотрудники.ОписаниеОшибки КАК ОписаниеОшибки
			|ИЗ
			|	РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск КАК Сотрудники";
			Таб = Запрос.Выполнить().Выгрузить();
			
			
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Сотрудник = Выборка.Сотрудник;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ВерсияДанных КАК ВерсияДанных,
			|	Сотрудники.БылаОшибкаПриПубликации КАК БылаОшибкаПриПубликации,
			|	Сотрудники.ОписаниеОшибки КАК ОписаниеОшибки
			|ИЗ
			|	РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск КАК Сотрудники";
			Таб = Запрос.Выполнить().Выгрузить();

			
			Если Результат.БылиОшибки Тогда
				Для Каждого Ошибка Из Результат.НеВыгружено Цикл
					МенеджерЗаписи = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Сотрудник = Ошибка.Ключ;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
					МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			КабинетСотрудника.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
			Результат.БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	СтруктураПредприятия = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
	КонецЕсли;
	Возврат СтруктураПредприятия;

КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Функция ТипыОбрабатываемыхЗаявок() Экспорт

	ТипыЗаявок = Новый Массив;
	Для каждого ТипЗаявки Из Перечисления.ТипыЗаявокКабинетСотрудника Цикл
		ТипыЗаявок.Добавить(ТипЗаявки);
	КонецЦикла;
	
	Возврат ТипыЗаявок;

КонецФункции

Функция ФотографииФизическихЛиц(СписокФизическихЛиц) Экспорт
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФотографииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФотографииФизическихЛиц.Фотография КАК Фотография
	|ИЗ
	|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
	|ГДЕ
	|	ФотографииФизическихЛиц.ФизическоеЛицо В (&СписокФизическихЛиц)");
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.ФизическоеЛицо, Выборка.Фотография);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция ДанныеШтатногоРасписания(Список) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание();
	УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШтатногоРасписания.ПозицияШтатногоРасписания.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеШтатногоРасписания.*
	|ИЗ
	|	ВТШтатноеРасписание КАК ДанныеШтатногоРасписания
	|ГДЕ
	|	ДанныеШтатногоРасписания.ПозицияШтатногоРасписания В (&Список)";
	Запрос.УстановитьПараметр("Список", Список);
	ДанныеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	Возврат ДанныеШтатногоРасписания;

КонецФункции

Функция ДанныеСтруктурыПредприятия(Список) Экспорт
	
	СуществуетРуководителиПодразделений = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Список", Список);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК СтруктураПредприятия,
	|	СтруктураПредприятия.Код КАК Код,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	СтруктураПредприятия.Родитель КАК Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицоРуководителя,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Источник.РеквизитДопУпорядочиванияИерархического, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА СтруктураПредприятия.Источник.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&Список)";
	ТаблицаСтруктурыПредприятия = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаСтруктурыПредприятия) Тогда
		Возврат ТаблицаСтруктурыПредприятия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО (ФизическиеЛица.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|				И НЕ ОшибкиЗаполнения.ЕстьОшибки)
	|ГДЕ
	|	ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	РуководителиОрганизаций = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтруктурыПредприятия, "Организация", Истина);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ОтвЛица = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Организация, "Руководитель", ТекущаяДатаСеанса());
		Если ПубликуемыеФизическиеЛица[ОтвЛица.Руководитель] <> Неопределено Тогда
			РуководителиОрганизаций.Вставить(Организация, ОтвЛица.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеРуководителей = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		ОписанияРуководителей = Модуль.ДанныеРуководителей(Список);
		Для каждого ЭлементКоллекции Из ОписанияРуководителей Цикл
			ДанныеРуководителей.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ФизическоеЛицо);
		КонецЦикла;
	Иначе
		КабинетСотрудникаРасширенныйПереопределяемый.ЗаполнитьДанныеРуководителей(ДанныеРуководителей, Список);
	КонецЕсли;
	
	ПорядокОрганизаций = ПорядокОрганизаций();
	Для Каждого СтрокаТаблицы Из ТаблицаСтруктурыПредприятия Цикл
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТаблицы.Организация];
		ПорядокПодразделения = СтрокаТаблицы.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТаблицы.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		СтрокаТаблицы.ФизическоеЛицоРуководителя = ДанныеРуководителей[СтрокаТаблицы.СтруктураПредприятия];
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицоРуководителя) Или ПубликуемыеФизическиеЛица[СтрокаТаблицы.ФизическоеЛицоРуководителя] = Неопределено Тогда
			СтрокаТаблицы.ФизическоеЛицоРуководителя = РуководителиОрганизаций[СтрокаТаблицы.Организация];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСтруктурыПредприятия;
	
КонецФункции

Функция ПорядокОрганизаций()
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование");
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Счетчик = 1;
		Пока Выборка.Следующий() Цикл
			Порядок = ДобавитьЛидирующиеНули(Формат(Счетчик, "ЧГ=0"), 3);
			Результат.Вставить(Выборка.Организация, Порядок);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Знач Строка, Знач ДлинаСтроки)
	
	ТекстПолный = Строка;
	Пока СтрДлина(ТекстПолный) < ДлинаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

Функция ПечатнаяФормаСправкаСМестаРаботы(МассивОбъектов) Экспорт
	
	Возврат Обработки.ПечатьКадровыхПриказовРасширенная.ПечатнаяФормаСправкаСМестаРаботы(МассивОбъектов);
	
КонецФункции

Функция ПечатнаяФормаСправкаОбОстаткахОтпусков(МассивОбъектов) Экспорт
	
	ДокРезультат = Новый ТабличныйДокумент;
	ДокРезультат.АвтоМасштаб = Истина;
	ОтчетОбъект = Отчеты.СправкаПоОтпускам.Создать();
	ОтчетОбъект.ИнициализироватьОтчет();
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.СправкаПоОтпускам.Настройки);
	ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор,
		"Сотрудник",
		ВидСравненияКомпоновкиДанных.ВСписке,
		МассивОбъектов);
	ОтчетОбъект.СкомпоноватьРезультат(ДокРезультат);
	Возврат ДокРезультат;
	
КонецФункции

Функция КоличествоДнейОтпускаФизическогоЛица(ФизическоеЛицо, ДатаНачала, ДатаОкончания) Экспорт
	
	Результат = 0;
	
	Сотрудники = ОсновныеСотрудникиФизическихЛиц(ФизическоеЛицо);
	Если Не ЗначениеЗаполнено(Сотрудники) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(Сотрудники[0], ДатаНачала, ДатаОкончания, Истина, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоОтпускам(Сотрудники) Экспорт

	Результат = Новый Структура("ИнформацияОбОтпусках,ОстаткиОтпусков");
	
	ПараметрыОстатков = ОписаниеПараметровДляОстаткиОтпусковСУчетомБудущихПериодов();
	ПараметрыОстатков.Сотрудники = Сотрудники;
	РезультатОстатки = ОстаткиОтпусковСУчетомБудущихПериодов(ПараметрыОстатков);
	
	Результат.ИнформацияОбОтпусках = ИнформацияОбОтпусках(Сотрудники, РезультатОстатки.ТекущиеОстатки);
	Результат.ОстаткиОтпусков = ДанныеОстатковОтпусковБудущихПериодов(Сотрудники, РезультатОстатки.БудущиеПериоды);
	
	Возврат Результат;

КонецФункции

Функция ИнформацияОбОтпусках(Сотрудники, ТекущиеОстаткиОтпусков)
	
	Запрос = ЗапросФактическиеОтпускаСотрудников(Сотрудники);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТекущиеОстаткиОтпусков", ТекущиеОстаткиОтпусков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТФактическиеОтпускаСотрудников.Сотрудник КАК Сотрудник,
	|	ВТФактическиеОтпускаСотрудников.ДатаНачала КАК ДатаНачала,
	|	ВТФактическиеОтпускаСотрудников.ДатаОкончания КАК ДатаОкончания,
	|	ВТФактическиеОтпускаСотрудников.КоличествоДней КАК КоличествоДней
	|ПОМЕСТИТЬ ВТОтпускаФактические
	|ИЗ
	|	ВТФактическиеОтпускаСотрудников КАК ВТФактическиеОтпускаСотрудников
	|ГДЕ
	|	НЕ ВТФактическиеОтпускаСотрудников.ЭтоКомпенсация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСотрудники.Сотрудник,
	|	ЗаявкаКабинетСотрудника.ДатаНачалаОтпуска,
	|	ЗаявкаКабинетСотрудника.ДатаОкончанияОтпуска,
	|	ЗаявкаКабинетСотрудника.КоличествоДнейОтпуска
	|ИЗ
	|	БизнесПроцесс.ЗаявкаКабинетСотрудника КАК ЗаявкаКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
	|		ПО ЗаявкаКабинетСотрудника.ФизическоеЛицо = ВТСотрудники.Сотрудник.ФизическоеЛицо
	|			И (ЗаявкаКабинетСотрудника.ТипЗаявки = ЗНАЧЕНИЕ(Перечисление.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск))
	|			И (ЗаявкаКабинетСотрудника.ОтпускСогласован)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтпускаФактические.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТОтпускаФактические.ДатаНачала) КАК ДатаНачала
	|ПОМЕСТИТЬ ВТДатыПредыдущихОтпусков
	|ИЗ
	|	ВТОтпускаФактические КАК ВТОтпускаФактические
	|ГДЕ
	|	ВТОтпускаФактические.ДатаНачала < &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтпускаФактические.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтпускаФактические.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ВТОтпускаФактические.ДатаНачала) КАК ДатаНачала
	|ПОМЕСТИТЬ ВТДатыСледующихОтпусков
	|ИЗ
	|	ВТОтпускаФактические КАК ВТОтпускаФактические
	|ГДЕ
	|	ВТОтпускаФактические.ДатаНачала >= &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтпускаФактические.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСотрудники.Сотрудник КАК Сотрудник,
	|	ВТСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(ВТДатыПредыдущихОтпусков.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПредыдущегоОтпуска,
	|	ЕСТЬNULL(ВТДатыСледующихОтпусков.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаСледующегоОтпуска
	|ПОМЕСТИТЬ ВТСотрудникиСДатами
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПредыдущихОтпусков КАК ВТДатыПредыдущихОтпусков
	|		ПО ВТСотрудники.Сотрудник = ВТДатыПредыдущихОтпусков.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыСледующихОтпусков КАК ВТДатыСледующихОтпусков
	|		ПО ВТСотрудники.Сотрудник = ВТДатыСледующихОтпусков.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачалаПредыдущегоОтпуска,
	|	ДатаНачалаСледующегоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеЕжегодныеОтпуска.Сотрудник КАК Сотрудник,
	|	ПлановыеЕжегодныеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ПлановыеЕжегодныеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ПлановыеЕжегодныеОтпуска.КоличествоДней КАК КоличествоДней
	|ПОМЕСТИТЬ ВТПлановыеОтпуска
	|ИЗ
	|	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
	|ГДЕ
	|	ПлановыеЕжегодныеОтпуска.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТСотрудникиСДатами.Сотрудник
	|			ИЗ
	|				ВТСотрудникиСДатами
	|			ГДЕ
	|				ВТСотрудникиСДатами.ДатаНачалаСледующегоОтпуска = ДАТАВРЕМЯ(1, 1, 1))
	|	И ПлановыеЕжегодныеОтпуска.ДатаНачала >= &ТекущаяДата
	|	И ПлановыеЕжегодныеОтпуска.Запланирован
	|	И НЕ ПлановыеЕжегодныеОтпуска.Перенесен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПлановыеОтпуска.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ВТПлановыеОтпуска.ДатаНачала) КАК ДатаНачала
	|ПОМЕСТИТЬ ВТДатыСледующихПлановыхОтпусков
	|ИЗ
	|	ВТПлановыеОтпуска КАК ВТПлановыеОтпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПлановыеОтпуска.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСледующиеПлановыеОтпуска.Сотрудник КАК Сотрудник,
	|	ВТСледующиеПлановыеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ВТПлановыеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ВТПлановыеОтпуска.КоличествоДней КАК КоличествоДней
	|ПОМЕСТИТЬ ВТСледующиеПлановыеОтпуска
	|ИЗ
	|	ВТДатыСледующихПлановыхОтпусков КАК ВТСледующиеПлановыеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеОтпуска КАК ВТПлановыеОтпуска
	|		ПО ВТСледующиеПлановыеОтпуска.Сотрудник = ВТПлановыеОтпуска.Сотрудник
	|			И ВТСледующиеПлановыеОтпуска.ДатаНачала = ВТПлановыеОтпуска.ДатаНачала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеОстаткиОтпусков.Сотрудник КАК Сотрудник,
	|	ТекущиеОстаткиОтпусков.КоличествоДней КАК КоличествоДней
	|ПОМЕСТИТЬ ВТТекущиеОстаткиОтпусков
	|ИЗ
	|	&ТекущиеОстаткиОтпусков КАК ТекущиеОстаткиОтпусков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСотрудникиСДатами.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТСотрудникиСДатами.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(ВТТекущиеОстаткиОтпусков.КоличествоДней, 0) КАК ОстатокОтпуска,
	|	ВТСотрудникиСДатами.ДатаНачалаПредыдущегоОтпуска КАК ДатаНачалаПредыдущегоОтпуска,
	|	ЕСТЬNULL(ВТОтпускаФактическиеПрошлогоПериода.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПредыдущегоОтпуска,
	|	ЕСТЬNULL(ВТОтпускаФактическиеПрошлогоПериода.КоличествоДней, 0) КАК КоличествоДнейПредыдущегоОтпуска,
	|	ЕСТЬNULL(ЕСТЬNULL(ВТСотрудникиСДатами.ДатаНачалаСледующегоОтпуска, ВТСледующиеПлановыеОтпуска.ДатаНачала), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаСледующегоОтпуска,
	|	ЕСТЬNULL(ЕСТЬNULL(ВТОтпускаФактическиеБудущегоПериода.ДатаОкончания, ВТСледующиеПлановыеОтпуска.ДатаОкончания), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияСледующегоОтпуска,
	|	ЕСТЬNULL(ЕСТЬNULL(ВТОтпускаФактическиеБудущегоПериода.КоличествоДней, ВТСледующиеПлановыеОтпуска.КоличествоДней), 0) КАК КоличествоДнейСледующегоОтпуска
	|ИЗ
	|	ВТСотрудникиСДатами КАК ВТСотрудникиСДатами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеОстаткиОтпусков КАК ВТТекущиеОстаткиОтпусков
	|		ПО ВТСотрудникиСДатами.Сотрудник = ВТТекущиеОстаткиОтпусков.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаФактические КАК ВТОтпускаФактическиеПрошлогоПериода
	|		ПО ВТСотрудникиСДатами.Сотрудник = ВТОтпускаФактическиеПрошлогоПериода.Сотрудник
	|			И ВТСотрудникиСДатами.ДатаНачалаПредыдущегоОтпуска = ВТОтпускаФактическиеПрошлогоПериода.ДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаФактические КАК ВТОтпускаФактическиеБудущегоПериода
	|		ПО ВТСотрудникиСДатами.Сотрудник = ВТОтпускаФактическиеБудущегоПериода.Сотрудник
	|			И ВТСотрудникиСДатами.ДатаНачалаСледующегоОтпуска = ВТОтпускаФактическиеБудущегоПериода.ДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеПлановыеОтпуска КАК ВТСледующиеПлановыеОтпуска
	|		ПО ВТСотрудникиСДатами.Сотрудник = ВТСледующиеПлановыеОтпуска.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеОстатковОтпусковБудущихПериодов(Список, ОстаткиБудущихПериодов)
	
	Результат = ОстаткиБудущихПериодов.Скопировать(, "ФизическоеЛицо");
	Результат.Свернуть("ФизическоеЛицо");
	Результат.Колонки.Добавить("Остатки");
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		СтрокиФизЛица = ОстаткиБудущихПериодов.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо));
		Если ЗначениеЗаполнено(СтрокиФизЛица) Тогда
			СтрокаТаблицы.Остатки = ОстаткиБудущихПериодов.Скопировать(СтрокиФизЛица, "Период, КоличествоДней");
		Иначе
			СтрокаТаблицы.Остатки = ОстаткиБудущихПериодов.СкопироватьКолонки("Период, КоличествоДней");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СпособыВыплатыЗарплатыПоРегистратору(РегистраторыВыплаты) Экспорт

	СпособыВыплаты = Новый Соответствие;
	Для каждого Регистратор Из РегистраторыВыплаты Цикл
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			СпособыВыплаты.Вставить(Регистратор, "НаКарту");
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВедомостьПрочихДоходовВБанк") Тогда
			СпособыВыплаты.Вставить(Регистратор, "НаКарту");
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением") Тогда
			СпособыВыплаты.Вставить(Регистратор, "НаСчет");
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВедомостьПрочихДоходовПеречислением") Тогда
			СпособыВыплаты.Вставить(Регистратор, "НаСчет");
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			СпособыВыплаты.Вставить(Регистратор, "Касса");
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком") Тогда
			СпособыВыплаты.Вставить(Регистратор, "Касса");
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВедомостьПрочихДоходовВКассу") Тогда
			СпособыВыплаты.Вставить(Регистратор, "Касса");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СпособыВыплаты;

КонецФункции

#Область Отпуска

// Возвращает структуру, которая используется для передачи параметров для функции ОстаткиОтпусков().
// 	- ДатаОстатков 				- дата, на которую происходит расчет остатков.
// 	- Сотрудники				- массив сотрудников или одиночное значение типа СправочникСсылка.Сотрудники
// 	- ВидыОтпусков				- массив видов отпусков или одиночное значение типа СправочникСсылка.ВидыОтпусков
// 	- ИсключаемыеРегистраторы 	- массив ссылок регистраторов или одиночное значение типа ДокументСсылка.
//
Функция ОписаниеПараметровДляОстаткиОтпусковСУчетомБудущихПериодов()

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаОстатков", НачалоДня(ТекущаяДатаСеанса()));
	СтруктураПараметров.Вставить("Сотрудники");
	СтруктураПараметров.Вставить("ВидыОтпусков");
	СтруктураПараметров.Вставить("ИсключаемыеРегистраторы");
	СтруктураПараметров.Вставить("ЭтоРасчетПриУвольнении", Ложь);
	
	Возврат СтруктураПараметров;

КонецФункции

// Функция расчета отпусков, положенных сотруднику, с данными на год вперед.
//
// Параметры
//	СтруктураПараметров - тип Структура - см. функцию ОписаниеПараметровДляОстаткиОтпусковСУчетомБудущихПериодов.
//		* ДатаОстатков				- дата, на которую вычисляются остатки, тип Дата
//		* Сотрудники 				- список сотрудников, тип Массив или СправочникСсылка.Сотрудники
//		* ВидыОтпусков 				- список видов отпусков, тип Массив или СправочникСсылка.ВидыОтпусков
//		* ИсключаемыеРегистраторы	- список регистраторов, исключаемых при расчете остатков, тип Массив или ДокументСсылка.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * ТекущиеОстатки - ТаблицаЗначений - содержит колонки:
//        ** Сотрудник - СправочникСсылка.Сотрудники
//        ** Период - Дата
//        ** Организация - СправочникСсылка.Организации
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** КоличествоДней - Число
//     * БудущиеПериоды - ТаблицаЗначений - содержит колонки:
//        ** Сотрудник - СправочникСсылка.Сотрудники
//        ** Период - Дата
//        ** Организация - СправочникСсылка.Организации
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** КоличествоДней - Число
//
Функция ОстаткиОтпусковСУчетомБудущихПериодов(ПараметрыОстатков)
	
	ОписаниеПараметров = ОстаткиОтпусков.ОписаниеПараметровДляОстаткиОтпусков();
	ЗаполнитьЗначенияСвойств(ОписаниеПараметров, ПараметрыОстатков);
	ОписаниеПараметров.ЗаработанныеПраваНаГодВперед = Истина;
	
	Остатки = ОстаткиОтпусков.ОстаткиОтпусков(ОписаниеПараметров);
	Остатки.Свернуть("Сотрудник", "Дни");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ПараметрыОстатков.ДатаОстатков);
	Запрос.УстановитьПараметр("Сотрудники", ПараметрыОстатков.Сотрудники);
	
	СогласованныеЗаявления = СогласованныеБудущиеОтпуска(ПараметрыОстатков.Сотрудники);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	               |	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	               |	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска.СрезПоследних(&ДатаОстатков, Сотрудник В (&Сотрудники)) КАК ЗаработанныеПраваНаОтпуска";
	
	ЗаработанныеПраваНачальныеЗначения = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	               |	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	               |	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	               |ГДЕ
	               |	ЗаработанныеПраваНаОтпуска.Период > &ДатаОстатков
	               |	И ЗаработанныеПраваНаОтпуска.Период <= ДОБАВИТЬКДАТЕ(&ДатаОстатков, ГОД, 1)
	               |	И ЗаработанныеПраваНаОтпуска.Сотрудник В(&Сотрудники)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаработанныеПраваНаОтпуска.Период";
	
	ЗаработанныеПраваНаОтпуска = Запрос.Выполнить().Выгрузить();
	ЗаработанныеПраваНаОтпуска.Индексы.Добавить("Сотрудник");
	
	БудущиеПериоды = Новый ТаблицаЗначений;
	БудущиеПериоды.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	БудущиеПериоды.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	БудущиеПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеПериоды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	БудущиеПериоды.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	ТекущиеОстатки = БудущиеПериоды.СкопироватьКолонки();
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ПараметрыОстатков.Сотрудники, "Организация, ФизическоеЛицо", ПараметрыОстатков.ДатаОстатков);
	Для Каждого КадровыеДанные Из КадровыеДанныеСотрудников Цикл
		
		ИспользованоДней = 0;
		ЗаявленияНаОтпуск = СогласованныеЗаявления.НайтиСтроки(Новый Структура("ФизическоеЛицо", КадровыеДанные.ФизическоеЛицо));
		Для Каждого Заявление Из ЗаявленияНаОтпуск Цикл
			ИспользованоДней = ИспользованоДней + Заявление.КоличествоДней;
		КонецЦикла;
		
		ОстатокОтпуска = 0;
		ОстатокОтпускаСотрудника = Остатки.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанные.Сотрудник));
		Если ОстатокОтпускаСотрудника.Количество() > 0 Тогда
			ОстатокОтпуска = ОстатокОтпускаСотрудника[0].Дни;
		КонецЕсли;
		
		ТекущиеОстаткиСотрудника = ТекущиеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеОстаткиСотрудника, КадровыеДанные);
		ТекущиеОстаткиСотрудника.Период = ПараметрыОстатков.ДатаОстатков;
		ТекущиеОстаткиСотрудника.КоличествоДней = ОстатокОтпуска - ИспользованоДней;
		
		ПредыдущиеЗначения = Новый Соответствие;
		ПредыдущиеЗначенияСотрудника = ЗаработанныеПраваНачальныеЗначения.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанные.Сотрудник));
		Для Каждого ПраваСотрудника Из ПредыдущиеЗначенияСотрудника Цикл
			ПредыдущиеЗначения.Вставить(ПраваСотрудника.ВидЕжегодногоОтпуска, ПраваСотрудника.КоличествоДней);
		КонецЦикла;
		
		НоваяСтрока = Неопределено;
		ЗаработаноДней = ТекущиеОстаткиСотрудника.КоличествоДней;
		ЗаработанныеПрава = ЗаработанныеПраваНаОтпуска.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанные.Сотрудник));
		Для Каждого ПраваСотрудника Из ЗаработанныеПрава Цикл 
			Если НоваяСтрока = Неопределено Или НоваяСтрока.Период <> ПраваСотрудника.Период Тогда
				НоваяСтрока = БудущиеПериоды.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КадровыеДанные);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПраваСотрудника);
			ПредыдущееЗначение = ПредыдущиеЗначения.Получить(ПраваСотрудника.ВидЕжегодногоОтпуска);
			ПредыдущееЗначение = ?(ПредыдущееЗначение = Неопределено, 0, ПредыдущееЗначение);
			ЗаработаноДней = ЗаработаноДней + ПраваСотрудника.КоличествоДней - ПредыдущееЗначение;
			НоваяСтрока.КоличествоДней = ?(ЗаработаноДней >= 0, Цел(ЗаработаноДней), Цел(ЗаработаноДней) - 1);
			ПредыдущиеЗначения.Вставить(ПраваСотрудника.ВидЕжегодногоОтпуска, ПраваСотрудника.КоличествоДней);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, БудущиеПериоды", ТекущиеОстатки, БудущиеПериоды);
	
КонецФункции

Функция ОсновныеСотрудникиФизическихЛиц(ФизическиеЛица)
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПараметрыПолучения.СписокФизическихЛиц = Новый Массив;
		ПараметрыПолучения.СписокФизическихЛиц.Добавить(ФизическиеЛица);
	Иначе
		ПараметрыПолучения.СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	ПараметрыПолучения.НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	ПараметрыПолучения.ОкончаниеПериода = КонецДня(ПараметрыПолучения.НачалоПериода);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолучения.Отборы, "ВидЗанятости", "=", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);

	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
	
	Возврат СотрудникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция ЗапросФактическиеОтпускаСотрудников(Сотрудники, ДатаНачала = Неопределено , ДатаОкончания = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("НачалоПериода", ?(ДатаНачала = Неопределено, Дата(1,1,1), ДатаНачала));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ?(ДатаОкончания = Неопределено, Дата(1,1,1), ДатаОкончания));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	&НачалоПериода КАК НачалоПериода,
	|	&ОкончаниеПериода КАК ОкончаниеПериода,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)";
	
	Запрос.Выполнить();
	
	Описатель = ОстаткиОтпусков.ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	ОстаткиОтпусков.СоздатьВТФактическиеОтпускаСотрудников(Описатель, Ложь);
	
	Возврат Запрос;
	
КонецФункции

Функция СогласованныеБудущиеОтпуска(Сотрудники)
	
	Запрос = ЗапросФактическиеОтпускаСотрудников(Сотрудники, НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТСотрудники.Сотрудник КАК Сотрудник,
	|	ЗаявкаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗаявкаКабинетСотрудника.ДатаНачалаОтпуска КАК ДатаНачала,
	|	ЗаявкаКабинетСотрудника.ДатаОкончанияОтпуска КАК ДатаОкончания,
	|	ЗаявкаКабинетСотрудника.КоличествоДнейОтпуска КАК КоличествоДней
	|ИЗ
	|	БизнесПроцесс.ЗаявкаКабинетСотрудника КАК ЗаявкаКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
	|		ПО ЗаявкаКабинетСотрудника.ФизическоеЛицо = ВТСотрудники.Сотрудник.ФизическоеЛицо
	|			И (ЗаявкаКабинетСотрудника.ТипЗаявки = ЗНАЧЕНИЕ(Перечисление.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск))
	|			И (ЗаявкаКабинетСотрудника.ДатаНачалаОтпуска > &ТекущаяДата)
	|			И (ЗаявкаКабинетСотрудника.ОтпускСогласован)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТФактическиеОтпускаСотрудников.Сотрудник,
	|	ВТФактическиеОтпускаСотрудников.Сотрудник.ФизическоеЛицо,
	|	ВТФактическиеОтпускаСотрудников.ДатаНачала,
	|	ВТФактическиеОтпускаСотрудников.ДатаОкончания,
	|	ВТФактическиеОтпускаСотрудников.КоличествоДней
	|ИЗ
	|	ВТФактическиеОтпускаСотрудников КАК ВТФактическиеОтпускаСотрудников
	|ГДЕ
	|	НЕ ВТФактическиеОтпускаСотрудников.ЭтоКомпенсация";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


#КонецОбласти

#КонецОбласти

Процедура ОчиститьДанныеПриОтключенииСервиса() Экспорт

	РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьНаборЗаписей().Записать();

КонецПроцедуры

Процедура ОбновитьПубликуемыеПодразделенияПредприятия(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.СтруктураПредприятия";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПодразделенияПредприятия = РодителиПодразделений(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектПубликации"));
	ПодразделенияДляПубликации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПредприятия, РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектПубликации"));
	Если ПодразделенияДляПубликации.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	Для каждого ПодразделениеПредприятия Из ПодразделенияДляПубликации Цикл
	
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника", "ОбъектПубликации", ПодразделениеПредприятия) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(ПодразделениеПредприятия);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ОбъектПубликации = ПодразделениеПредприятия;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
	КонецЦикла;
	
	Если ОбработкаВыполнена Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьПубликациюСотрудников(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Изменения.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И Изменения.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника", "ПредметПубликации", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации = Выборка.Ссылка;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ОбработкаВыполнена Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти




