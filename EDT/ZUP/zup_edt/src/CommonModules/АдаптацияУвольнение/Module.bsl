////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адаптация и увольнение".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//										общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.МероприятияАдаптацииУвольнения.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.10";
	Обработчик.Процедура = "АдаптацияУвольнение.ПриНачальномЗаполненииДанныхПодсистемыУведомлений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b87fdf54-42e5-4b64-8ded-87a10063ba8e");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение данных системы уведомлений: адаптация, увольнение.'");
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОбОтпускеПоУходуЗаРебенком", "ДатаНачала", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОбУвольнении", "ДатаУвольнения", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком", "ДатаВозврата", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОВосстановленииВДолжности", "ДатаВосстановления", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОКадровомПереводе", "ДатаНачала", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОПриемеНаРаботу", "ДатаПриема", "ПодборПерсонала", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъектаОснования

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	УникальныеЗначения = Новый Соответствие;
	
	Мероприятия = ДокументОбъект.МероприятияАдаптацииУвольнения.ВыгрузитьКолонку("Мероприятие");
	ЛичныеМероприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Мероприятия, "ИсполняетсяСотрудником");
	
	Для Каждого ДанныеМероприятия Из ДокументОбъект.МероприятияАдаптацииУвольнения Цикл
		ИндексСтроки = ДокументОбъект.МероприятияАдаптацииУвольнения.Индекс(ДанныеМероприятия);
		
		// Проверка мероприятия.
		Если Не ЗначениеЗаполнено(ДанныеМероприятия.Мероприятие) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указано мероприятие.'"),
				ДокументОбъект, 
				СтрШаблон("МероприятияАдаптацииУвольнения[%1].Мероприятие", Формат(ИндексСтроки, "ЧН=0; ЧГ=0")),, Отказ);
		ИначеЕсли УникальныеЗначения.Получить(ДанныеМероприятия.Мероприятие) = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Информация о мероприятии ""%1"" была введена в документе ранее.'"), ДанныеМероприятия.Мероприятие),
				ДокументОбъект, 
				СтрШаблон("МероприятияАдаптацииУвольнения[%1].Мероприятие", Формат(ИндексСтроки, "ЧН=0; ЧГ=0")),, Отказ);
		Иначе
			УникальныеЗначения.Вставить(ДанныеМероприятия.Мероприятие, Истина);
		КонецЕсли;
		
		// Проверка исполнителя.
		Если Не ЗначениеЗаполнено(ДанныеМероприятия.Исполнитель) Тогда
			Отказ = Истина;
			СообщитьОбОшибкеИсполнителяВСтроке(ДокументОбъект, ДанныеМероприятия, ИндексСтроки, ЛичныеМероприятия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеМероприятийАдаптацииВРешенииОПриеме(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.РешениеОПриемеНаРаботу.ТабличныеЧасти.МероприятияАдаптацииУвольнения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.ПометкаУдаления
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаЗаданийПоДокументу(ДокументОбъект.Ссылка);
	
	Пока Выборка.Следующий() Цикл
		
		БизнесПроцессОбъект = Выборка.Задание.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если БизнесПроцессОбъект.Стартован Тогда 
			Если Не БизнесПроцессОбъект.Завершен Тогда
				БизнесПроцессОбъект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен");
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
		Иначе
			БизнесПроцессыИЗадачиСервер.ОтключитьОтложенныйСтартПроцесса(БизнесПроцессОбъект.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(ДокументОбъект, Отказ) Экспорт
	
	Если Не ДокументОбъект.ПометкаУдаления 
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаЗаданийПоДокументу(ДокументОбъект.Ссылка);
	
	Пока Выборка.Следующий() Цикл
		ПометитьНаУдалениеЗаданиеАдаптацииУвольнения(Выборка.Задание);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КадровыеДокументы

Процедура ОбработкаЗаполненияКадровогоПриказа(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ИспользуетсяАдаптацияУвольнение()
		Или ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если Метаданные.ОпределяемыеТипы.СобытияАдаптацииУвольнения.Тип.СодержитТип(ТипДанныхЗаполнения) Тогда
		
		Если ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОКадровомПереводе") Тогда
			
			КопируемыеРеквизиты = "ДатаНачала, ДатаОкончания, ДолжностьПоШтатномуРасписанию, ОбособленноеПодразделение, Организация, Сотрудник, ФизическоеЛицо";
			
			РеквизитыПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДолжностьПоШтатномуРасписанию, "Подразделение, Должность");
			ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПозиции);
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОбУвольнении") Тогда
			
			КопируемыеРеквизиты = "ДатаУвольнения, Организация, Сотрудник, ФизическоеЛицо";
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОбОтпускеПоУходуЗаРебенком") Тогда
			
			КопируемыеРеквизиты = "ДатаНачала, ДатаНачала, Организация, ОсновнойСотрудник";
			ДокументОбъект.Сотрудник = ДанныеЗаполнения.ФизическоеЛицо;
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОВосстановленииВДолжности") Тогда
			
			КопируемыеРеквизиты = "ДатаВосстановления, Организация, Сотрудник, ФизическоеЛицо, ДолжностьПоШтатномуРасписанию";
			
			РеквизитыПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДолжностьПоШтатномуРасписанию, "Подразделение, Должность");
			ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПозиции);
			
			ПриказСвязанныйСОснованием = СвязанныйСРешениемПриказ(ДанныеЗаполнения.ДокументОснование);
			Если ЗначениеЗаполнено(ПриказСвязанныйСОснованием) Тогда
				ДокументОбъект.ДокументУвольнения = ПриказСвязанныйСОснованием;
				ДокументОбъект.ДатаУвольнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПриказСвязанныйСОснованием, "ДатаУвольнения");
			КонецЕсли;
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком") Тогда
			
			КопируемыеРеквизиты = "ДатаВозврата, Организация, ОсновнойСотрудник";
			ДокументОбъект.Сотрудник = ДанныеЗаполнения.ФизическоеЛицо;
			
			ПриказСвязанныйСОснованием = СвязанныйСРешениемПриказ(ДанныеЗаполнения.ДокументОснование);
			Если ЗначениеЗаполнено(ПриказСвязанныйСОснованием) Тогда
				ДокументОбъект.ДокументОснование = ПриказСвязанныйСОснованием;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения, КопируемыеРеквизиты);
		ДокументОбъект.Решение = ДанныеЗаполнения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Заполняет наборы записей регистра МероприятияАдаптацииУвольненияПоДокументу.
// Параметры:
//	Движения - коллекция движений регистратора.
//	ДанныеМероприятийАдаптацииУвольнения - ТаблицаЗначений - таблица с колонками:
//		* ДокументОснование
//		* Мероприятие
//		* Сотрудник
//		* ДатаНачала
//		* ДатаОкончания
//		* ДатаОкончания
//
Процедура СформироватьДвиженияМероприятияАдаптацииУвольненияПоДокументу(Движения, ДанныеМероприятийАдаптацииУвольнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеМероприятийАдаптацииУвольнения)Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеМероприятийАдаптацииУвольнения Цикл
		ЗаполнитьЗначенияСвойств(Движения.МероприятияАдаптацииУвольненияПоДокументу.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	Движения.МероприятияАдаптацииУвольненияПоДокументу.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗарегистрироватьДокументДляОбновленияЗаданийАдаптацииУвольнения(Движения) Экспорт
	
	СтрокаДвижений = Движения.ОбновлениеЗаданийАдаптацииУвольнения.Добавить();
	СтрокаДвижений.ДокументОснование = Движения.ОбновлениеЗаданийАдаптацииУвольнения.Отбор.Регистратор.Значение;
	СтрокаДвижений.ЗаданияОбновлены = Ложь;
	
	Движения.ОбновлениеЗаданийАдаптацииУвольнения.Записывать = Истина;
	
КонецПроцедуры

Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.СобытияАдаптацииУвольнения.Тип.СодержитТип(ТипВладелецФайла) Тогда
		ИменаСправочников.Вставить("РешенияПоКадровымИзменениямПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПодменюРешенияПоКадровымИзменениям(ОписаниеМеню) Экспорт
	
	Если Не ИспользуетсяАдаптацияУвольнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.РешениеОКадровомПереводе) Тогда
		Возврат;
	КонецЕсли;
	
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.РешениеОКадровомПереводе");
	ПунктыМеню.Добавить("Документы.РешениеОбУвольнении");
	ПунктыМеню.Добавить("Документы.РешениеОбОтпускеПоУходуЗаРебенком");
	ПунктыМеню.Добавить("Документы.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком");
	ПунктыМеню.Добавить("Документы.РешениеОВосстановленииВДолжности");
	
	ОписаниеМеню.Пункты.Добавить(
	СотрудникиФормы.РазделМеню(НСтр("ru='Решения'"), ПунктыМеню));
	
КонецПроцедуры

Функция СвязанныйСРешениемПриказ(Решение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Решение", Решение);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыйДокумент
		|ИЗ
		|	РегистрСведений.КадровыеДокументыПоРешениям
		|ГДЕ
		|	Решение = &Решение";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КадровыйДокумент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.РешениеОбОтпускеПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.РешениеОбУвольнении);
	СписокОбъектов.Добавить(Документы.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.РешениеОВосстановленииВДолжности);
	СписокОбъектов.Добавить(Документы.РешениеОКадровомПереводе);
	СписокОбъектов.Добавить(Документы.РешениеОПриемеНаРаботу);
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения.ИмяМетода);
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf90-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РешениеОбОтпускеПоУходуЗаРебенком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbefa-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РешениеОбУвольнении);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dc003-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РешениеОВосстановленииВДолжности);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4dd-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РешениеОКадровомПереводе);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f1-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РешениеОПриемеНаРаботу);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbef6-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.МероприятияАдаптацииУвольнения);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.РешенияПоКадровымИзменениямПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.РешениеОбОтпускеПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.Документы.РешениеОбУвольнении, Истина);
	Списки.Вставить(Метаданные.Документы.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.Документы.РешениеОВосстановленииВДолжности, Истина);
	Списки.Вставить(Метаданные.Документы.РешениеОКадровомПереводе, Истина);
	Списки.Вставить(Метаданные.Документы.РешениеОПриемеНаРаботу, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// Процедура выполняет начальное заполнение данных подсистемы уведомлений
//
Процедура ПриНачальномЗаполненииДанныхПодсистемыУведомлений(ПараметрыОбновления = Неопределено) Экспорт
	
	ВидУведомления = УведомленияСервер.ВидУведомленияПоИмени("ЗадачаИсполнителя");
	
	Если ЗначениеЗаполнено(ВидУведомления) И Не УведомленияСервер.ЕстьРассылкиПоВидуУведомления(ВидУведомления) Тогда 
		ПараметрыШаблона = Новый Структура();
		
		ПараметрыШаблона.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Справочник.ФизическиеЛица");
		ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
		ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
		ПараметрыШаблона.Вставить("Назначение", "ФизическиеЛица");
		ПараметрыШаблона.Вставить("ВладелецШаблона", ВидУведомления);
		ПараметрыШаблона.Вставить("Тема", НСтр("ru='Направлена новая задача'"));
		ПараметрыШаблона.Вставить("ФорматПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		ПараметрыШаблона.Вставить("Текст", НСтр("ru='Здравствуйте, [ДанныеУведомления.Исполнитель]!
			|
			|Направлена новая задача: [ДанныеУведомления.Наименование], по предмету [ДанныеУведомления.ПредметСтрокой]
			| [ДанныеУведомления.Описание]
			|Срок исполнения: [ДанныеУведомления.СрокИсполнения].'"));
		ШаблонСообщенияСсылка = ШаблоныСообщений.СоздатьШаблон(НСтр("ru='Уведомление о новой задаче'"), ПараметрыШаблона);
		
		// 	Рассылка уведомления
		РассылкаОбъект = Справочники.РассылкиУведомлений.СоздатьЭлемент();
		
		РассылкаОбъект.ВидУведомления 	= ВидУведомления;
		РассылкаОбъект.ВидТранспорта 	= Перечисления.ВидыТранспортаУведомлений.Email;
		РассылкаОбъект.УчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		РассылкаОбъект.Наименование 	= НСтр("ru='Уведомление о новых заданиях адаптации увольнения'");
		СтрокаПолучателя = РассылкаОбъект.ПолучателиУведомленийДинамические.Добавить();
		СтрокаПолучателя.Получатель = "Исполнитель";
		СтрокаПолучателя.ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтрокаПолучателя.ШаблонСообщения = ШаблонСообщенияСсылка;
		РассылкаОбъект.СпособОпределенияМоментаУведомления = Перечисления.СпособыОпределенияМоментаУведомления.ПослеСобытия;
		РассылкаОбъект.ИнтервалУведомления = 0;
		РассылкаОбъект.ЕдиницаИзмеренияИнтервалаУведомления = Перечисления.ЕдиницыИзмеренияИнтервалаУведомлений.Час;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект, Ложь, Ложь);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет дополнить структуру видов уведомлений своими видами уведомлений. 
//
// Параметры:
//  СтруктураДоступныхВидовУведомлений - структура - перечень уведомлений, подключенных в подсистеме
//     * Ключ - Строка - Имя вида уведомления
//     * Значение - Структура - Описание вида уведомления (Структура)
//        * ВидУведомления - Строка, строковый идентификатор вида уведомления.
//        * Описание - Строка, Текстовое описание получаемых данных. Доступно пользователю в справочнике Видов уведомлений.
//        * Инициализация - Строка, <ИмяМодуля>.<ИмяПроцедуры> описывающей данные вида уведомления без выполнения
//                          запросов к базе данных.
//        * ПолучениеДанных - Строка, <ИмяМодуля>.<ИмяПроцедуры> выполняемой для получения данных уведомления.
//
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	// Создание новой задачи
	СтруктураЗадачиИсполнителя = УведомленияСервер.ПустоеОписаниеВидаУведомления();
	СтруктураЗадачиИсполнителя.ВидУведомления = НСтр("ru = 'Формирование нового задания адаптации увольнения'");
	СтруктураЗадачиИсполнителя.GUID = "203f4740-034a-44ec-946a-5077a240d0b3";
	СтруктураЗадачиИсполнителя.Описание = НСтр("ru = 'Срабатывает при создании нового задания адаптации увольнения.'");
	СтруктураЗадачиИсполнителя.Инициализация = "АдаптацияУвольнение.ИнициализацияЗадачаИсполнителя";
	СтруктураЗадачиИсполнителя.КатегорияСобытия = Перечисления.КатегорииВидовУведомлений.ИзменениеОбъекта;
	
	СтруктураДоступныхВидовУведомлений.Вставить("ЗадачаИсполнителя", СтруктураЗадачиИсполнителя);
	
КонецПроцедуры

// Позволяет переопределить имя типа шаблона сообщений по виду уведомления
//
// Параметры:
//   ИмяТипаШаблонаСообщений - Строка - имя типа предмета шаблона, которое необходимо переопределить
//   ВидУведомления - СправочникСсылка.ВидУведомления - связанный вид уведомления
Процедура ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ЗадачаИсполнителя") Тогда
		ИмяТипаШаблонаСообщений = "Справочник.ФизическиеЛица";
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет заполнить поля, доступные для шаблона
//  соответствующего вида уведомлений.
//
// Параметры:
//  ВидУведомления           - СправочникСсылка.ВидУведомления - вид уведомления - владелец шаблона
//  Реквизиты                - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//                                      и др.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  НазначениеШаблона        - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ЗадачаИсполнителя") Тогда
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Дата", НСтр("ru='Дата задачи'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Наименование", НСтр("ru='Наименование'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Описание", НСтр("ru='Описание задачи'"), Новый ОписаниеТипов("Строка"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Исполнитель", НСтр("ru='Исполнитель задачи'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.Автор", НСтр("ru='Автор задачи'"), Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.СрокИсполнения", НСтр("ru='Срок исполнения'"), Новый ОписаниеТипов("Дата"), "ДФ=dd.MM.yyyy HH:mm");
		УведомленияСервер.ДобавитьПоле(Реквизиты, "ДанныеУведомления.ПредметСтрокой", НСтр("ru='Предмет'"), Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при подготовке шаблона сообщения и позволяет установить предмет 
// сообщения, отличный от предмета уведомления.
//
// Параметры:
//  СтрокаСообщения	 - СтрокаТЗ - строка данных уведомления, источник данных для переопределения предмета.
//  Предмет			 - ДокументСсылка, СправочникСсылка - предмет сообщения, который можно переопределить.
//
Процедура ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет) Экспорт
	
	Если СтрокаСообщения.ВидУведомления = Справочники.ВидыУведомлений.НайтиПоРеквизиту("Имя", "ЗадачаИсполнителя") Тогда
		Предмет = СтрокаСообщения.ПараметрыСобытия.Получить().Исполнитель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет переопределить стандартную обработку заполнения прошлого состояния объекта
// и установить свою.
//
// Параметры:
//   Объект                - ДокументОбъект, СправочникОбъект  - источник события - изменившийся объект.
//   СтандартнаяОбработка  - Булево                            - признак стандартной обработки.
//
Процедура ПередЗаписьюПредметаУведомленияОбИзменениях(Объект, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		Объект.ДополнительныеСвойства.Вставить("ЭтоНоваяЗадача", Объект.Ссылка.Пустая());
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет переопределить стандартную обработку события При записи объекта
// и установить свою.
//
// Параметры:
//   Объект                 - ДокументОбъект, СправочникОбъект  - источник события - изменившийся объект.
//   ЕстьРассылки           - Булево                            - признак наличия активных рассылок\
//   ДополнительныеСвойства - Структура                         - перечень параметров, сохраненных перед записью объекта.
//   СтандартнаяОбработка   - Булево                            - признак стандартной обработки.
//
Процедура ПриЗаписиПредметаУведомленияОбИзменениях(Объект, ЕстьРассылки, ДополнительныеСвойства, СтандартнаяОбработка, ВыполнятьПерезаписьПриНаличииВРегистре = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.РешениеОбУвольнении") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.РешениеОКадровомПереводе") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.РешениеОПриемеНаРаботу") Тогда
			ДополнительныеСвойства.Вставить("Дата", Объект.Дата);
			ДополнительныеСвойства.Вставить("Наименование", Объект.Наименование);
			ДополнительныеСвойства.Вставить("Описание", Объект.Описание);
			ДополнительныеСвойства.Вставить("Исполнитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Исполнитель, "ФизическоеЛицо"));
			ДополнительныеСвойства.Вставить("Автор", Объект.Автор);
			ДополнительныеСвойства.Вставить("СрокИсполнения", Объект.СрокИсполнения);
			ДополнительныеСвойства.Вставить("ПредметСтрокой", Объект.ПредметСтрокой);
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при формировании таблицы уведомлений по рассылкам типа "Изменение объекта"
//
// Параметры:
//    РассылкаУведомлений - СправочникСсылка.РассылкаУведомлений - обрабатываемая рассылка уведомлений.
//    ВидУведомления - СправочникСсылка.ВидыУведомлений - обрабатываемый вид уведомления
//    Предмет - СправочникСсылка, ДокументСсылка - ссылка на изменившийся объекта
//    ДатаИзменения - Дата - дата регистрации события изменения объекта.
//    ДополнительныеСвойства - Структура - Дополнительные свойства, которые были заполнены при регистрации изменения объекта
//    ТаблицаРезультата - ТаблицаЗначений - содержит события изменения объекта.
//
Процедура ПриСозданииУведомленийПоИзменениямОбъектов(РассылкаУведомлений, ВидУведомления, Предмет, ДатаИзменения, ДополнительныеСвойства, ТаблицаРезультата) Экспорт
	
	ИмяВидаУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидУведомления, "Имя");
	
	Если ИмяВидаУведомления = "ЗадачаИсполнителя" Тогда
		ЭтоНоваяЗадача = Неопределено;
		Если ДополнительныеСвойства.Свойство("ЭтоНоваяЗадача", ЭтоНоваяЗадача) И ЭтоНоваяЗадача И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ПометкаУдаления") Тогда
			СтрокаРезультата = ТаблицаРезультата.Добавить();
			СтрокаРезультата.Предмет = Предмет;
			СтрокаРезультата.ДатаСобытия = ДатаИзменения;
			СтрокаРезультата.ПараметрыСобытия = Новый ХранилищеЗначения(ДополнительныеСвойства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры вида уведомления "Назначено собеседование"
// 
// Параметры:
//  ОписаниеДанных - Структура - Содержит элементы, описывающий вид уведомления
//    * ТипПредмета - ОписаниеТипов - указывает тип предмета уведомления
//    * Отборы - ТаблицаЗначений - описывает отборы, которые будут доступны пользователю, при настройке рассылки
//        * Имя - Строка - Имя поля отбора, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление поля отбора
//        * ОписаниеТипов - ОписаниеТипов - тип значения отбора
//    * Получатели - ТаблицаЗначений - описывает получателей, предлагаемых разработчиком.
//                                 Значение получателей будет выбрано из данных уведомления
//        * Имя - Строка - Имя поля получателя, должно быть уникально в пределах таблицы отборов
//                         и совпадать с одним из полей данных уведомления
//        * Представление - Строка - пользовательское представление получателя
//        * ОписаниеТипов - ОписаниеТипов - тип значения получателя
//
Процедура ИнициализацияЗадачаИсполнителя(ОписаниеДанных) Экспорт
	
	ОписаниеДанных.ТипПредмета = Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
	УведомленияСервер.ДобавитьПолучателя(ОписаниеДанных, "Исполнитель", НСтр("ru='Исполнитель'"), Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ДополнитьОбъектыИзмененияОрганизацийФизическихЛиц(МассивОбъектов) Экспорт
	МассивОбъектов.Добавить(Метаданные.Документы.РешениеОПриемеНаРаботу);
	МассивОбъектов.Добавить(Метаданные.Документы.РешениеОКадровомПереводе);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СотрудникиНаАдаптацииУвольняемые);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СотрудникиНаАдаптацииУвольняемые, "АдаптацияУвольнение");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьАдаптациюУвольнение");
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьАдаптациюУвольнение;
	
КонецПроцедуры

Процедура ОбновлениеЗаданийАдаптацииУвольнения(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОснование = Неопределено;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.Свойство("ДокументОснование", ДокументОснование);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование КАК ДокументОснование,
		|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование.Организация КАК Организация,
		|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ОбновлениеЗаданийАдаптацииУвольнения КАК ОбновлениеЗаданийАдаптацииУвольнения
		|ГДЕ
		|	НЕ ОбновлениеЗаданийАдаптацииУвольнения.ЗаданияОбновлены
		|	И ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование = &ДокументОснование";
	
	Если ДокументОснование = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование = &ДокументОснование", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДокументОснование", Выборка.ДокументОснование);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование КАК ДокументОснование
			|ПОМЕСТИТЬ ВТОснованияЗаданий
			|ИЗ
			|	РегистрСведений.ОбновлениеЗаданийАдаптацииУвольнения КАК ОбновлениеЗаданийАдаптацииУвольнения
			|ГДЕ
			|	НЕ ОбновлениеЗаданийАдаптацииУвольнения.ЗаданияОбновлены
			|	И ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТОснованияЗаданий.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	ВТОснованияЗаданий КАК ВТОснованияЗаданий";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбновлениеЗаданийАдаптацииУвольнения.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.ДокументОснование);
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МероприятияАдаптацииУвольненияПоДокументу.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.ДокументОснование);
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияАдаптацииУвольнения");
			ЭлементБлокировки.УстановитьЗначение("ДокументОснование", Выборка.ДокументОснование);
			Блокировка.Заблокировать();
			ОбновитьЗаданияАдаптацииУвольненияПоДокументу(Выборка, Запрос, ПараметрыОбновления);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обновление заданий адаптации и увольнения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗаданияАдаптацииУвольненияПоДокументу(Знач Выборка, Знач Запрос, ПараметрыОбновления)
	
	ВидСобытия = ВидСобытияАдаптацииУвольненияДокумента(Выборка.ДокументОснование);
	ПроцессыДляЗапуска = Новый Массив;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МероприятияПоДокументу.ДокументОснование КАК ДокументОснование,
		|	МероприятияПоДокументу.Мероприятие КАК Мероприятие,
		|	МероприятияПоДокументу.Сотрудник КАК Сотрудник,
		|	МероприятияПоДокументу.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МероприятияПоДокументу.ДатаНачала КАК ДатаНачала,
		|	МероприятияПоДокументу.ДатаОкончания КАК ДатаОкончания,
		|	МероприятияПоДокументу.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ ВТАктуальныеМероприятия
		|ИЗ
		|	РегистрСведений.МероприятияАдаптацииУвольненияПоДокументу КАК МероприятияПоДокументу
		|ГДЕ
		|	МероприятияПоДокументу.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ОснованияЗаданий.ДокументОснование
		|			ИЗ
		|				ВТОснованияЗаданий КАК ОснованияЗаданий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Задания.ДокументОснование КАК ДокументОснование,
		|	Задания.Мероприятие КАК Мероприятие,
		|	Задания.Сотрудник КАК Сотрудник,
		|	Задания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Задания.Задание КАК Задание,
		|	Задания.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
		|	Задания.ДатаНачала КАК ДатаНачала,
		|	Задания.ДатаОкончания КАК ДатаОкончания,
		|	Задания.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ ВТТекущиеМероприятия
		|ИЗ
		|	РегистрСведений.ЗаданияАдаптацииУвольнения КАК Задания
		|ГДЕ
		|	Задания.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ОснованияЗаданий.ДокументОснование
		|			ИЗ
		|				ВТОснованияЗаданий КАК ОснованияЗаданий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеМероприятия.Сотрудник КАК Сотрудник,
		|	АктуальныеМероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АктуальныеМероприятия.ФизическоеЛицо.ФИО КАК ФИО,
		|	АктуальныеМероприятия.ФизическоеЛицо.Код КАК Код,
		|	АктуальныеМероприятия.Мероприятие КАК Мероприятие,
		|	АктуальныеМероприятия.ДатаНачала КАК ДатаНачала,
		|	АктуальныеМероприятия.ДатаОкончания КАК ДатаОкончания,
		|	АктуальныеМероприятия.Исполнитель КАК Исполнитель,
		|	Мероприятия.Наименование КАК Наименование,
		|	Мероприятия.Описание КАК Описание,
		|	ВЫБОР
		|		КОГДА АктуальныеМероприятия.Исполнитель = Мероприятия.Исполнитель
		|			ТОГДА Мероприятия.ОсновнойОбъектАдресации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ОсновнойОбъектАдресации,
		|	ВЫБОР
		|		КОГДА АктуальныеМероприятия.Исполнитель = Мероприятия.Исполнитель
		|			ТОГДА Мероприятия.ДополнительныйОбъектАдресации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДополнительныйОбъектАдресации,
		|	ЕСТЬNULL(Сотрудники.Код, """") КАК ТабНомер
		|ИЗ
		|	ВТАктуальныеМероприятия КАК АктуальныеМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеМероприятия КАК ТекущиеМероприятия
		|		ПО АктуальныеМероприятия.ДокументОснование = ТекущиеМероприятия.ДокументОснование
		|			И АктуальныеМероприятия.Мероприятие = ТекущиеМероприятия.Мероприятие
		|			И АктуальныеМероприятия.ФизическоеЛицо = ТекущиеМероприятия.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МероприятияАдаптацииУвольнения КАК Мероприятия
		|		ПО АктуальныеМероприятия.Мероприятие = Мероприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО АктуальныеМероприятия.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	ТекущиеМероприятия.ФизическоеЛицо ЕСТЬ NULL
		|ИТОГИ
		|	МАКСИМУМ(ФИО),
		|	МАКСИМУМ(Код),
		|	МАКСИМУМ(ТабНомер)
		|ПО
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеМероприятия.Сотрудник КАК Сотрудник,
		|	АктуальныеМероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АктуальныеМероприятия.Мероприятие КАК Мероприятие,
		|	АктуальныеМероприятия.ДатаНачала КАК ДатаНачала,
		|	АктуальныеМероприятия.ДатаОкончания КАК ДатаОкончания,
		|	АктуальныеМероприятия.Исполнитель КАК Исполнитель,
		|	ТекущиеМероприятия.Исполнитель КАК ТекущийИсполнитель,
		|	ТекущиеМероприятия.Задание КАК Задание,
		|	ВЫБОР
		|		КОГДА АктуальныеМероприятия.ДатаОкончания <> ТекущиеМероприятия.ДатаОкончания
		|				ИЛИ АктуальныеМероприятия.Исполнитель <> ТекущиеМероприятия.Исполнитель
		|				ИЛИ Задания.ПометкаУдаления
		|				ИЛИ Задания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновитьБизнесПроцесс,
		|	Задания.Стартован КАК ПроцессСтартован,
		|	ВЫБОР
		|		КОГДА АктуальныеМероприятия.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		|				И (АктуальныеМероприятия.ДатаНачала <> ТекущиеМероприятия.ДатаНачала
		|					ИЛИ ПроцессыДляЗапуска.Владелец ЕСТЬ NULL)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НастроитьОтложенныйСтарт,
		|	ВЫБОР
		|		КОГДА АктуальныеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				И НЕ ПроцессыДляЗапуска.Владелец ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтключитьОтложенныйСтарт
		|ИЗ
		|	ВТАктуальныеМероприятия КАК АктуальныеМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеМероприятия КАК ТекущиеМероприятия
		|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Задание КАК Задания
		|			ПО ТекущиеМероприятия.Задание = Задания.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		|			ПО ТекущиеМероприятия.Задание = ПроцессыДляЗапуска.Владелец
		|		ПО АктуальныеМероприятия.ДокументОснование = ТекущиеМероприятия.ДокументОснование
		|			И АктуальныеМероприятия.ФизическоеЛицо = ТекущиеМероприятия.ФизическоеЛицо
		|			И АктуальныеМероприятия.Мероприятие = ТекущиеМероприятия.Мероприятие
		|ГДЕ
		|	НЕ ТекущиеМероприятия.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеМероприятия.Задание КАК Задание,
		|	ТекущиеМероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеМероприятия.Мероприятие КАК Мероприятие
		|ИЗ
		|	ВТТекущиеМероприятия КАК ТекущиеМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеМероприятия КАК АктуальныеМероприятия
		|		ПО ТекущиеМероприятия.ДокументОснование = АктуальныеМероприятия.ДокументОснование
		|			И ТекущиеМероприятия.ФизическоеЛицо = АктуальныеМероприятия.ФизическоеЛицо
		|			И ТекущиеМероприятия.Мероприятие = АктуальныеМероприятия.Мероприятие
		|ГДЕ
		|	АктуальныеМероприятия.ФизическоеЛицо ЕСТЬ NULL";
	
	Результаты = Запрос.ВыполнитьПакет();
	МаксИндекс = Результаты.ВГраница();
	
	Если Результаты[МаксИндекс - 2].Пустой()
		И Результаты[МаксИндекс - 1].Пустой()
		И Результаты[МаксИндекс].Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ВыборкаДобавляемых = Результаты[МаксИндекс - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИзменяемых = Результаты[МаксИндекс - 1].Выбрать();
	ВыборкаПомечаемых = Результаты[МаксИндекс].Выбрать();
	
	НаборЗаписей = РегистрыСведений.ЗаданияАдаптацииУвольнения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
	НаборЗаписей.Прочитать();
	
	ЗаписиКУдалению = Новый Массив;
	СтруктураПоиска = Новый Структура("ФизическоеЛицо, Мероприятие");
	
	Для Каждого Запись Из НаборЗаписей Цикл
		ВыборкаПомечаемых.Сбросить();
		ВыборкаИзменяемых.Сбросить();
		
		СтруктураПоиска.Мероприятие = Запись.Мероприятие;
		СтруктураПоиска.ФизическоеЛицо = Запись.ФизическоеЛицо;
		
		Если ВыборкаПомечаемых.НайтиСледующий(СтруктураПоиска) Тогда
			ЗаписиКУдалению.Добавить(Запись);
			Если ЗначениеЗаполнено(ВыборкаПомечаемых.Задание) Тогда
				ПометитьНаУдалениеЗаданиеАдаптацииУвольнения(ВыборкаПомечаемых.Задание);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаИзменяемых.НайтиСледующий(СтруктураПоиска) Тогда
			БизнесПроцесс = ВыборкаИзменяемых.Задание;
			Если ВыборкаИзменяемых.ОбновитьБизнесПроцесс Тогда
				ПараметрыОбновления = Новый Структура;
				ПараметрыОбновления.Вставить("СрокИсполнения", ВыборкаИзменяемых.ДатаОкончания);
				Если ВыборкаИзменяемых.Исполнитель <> ВыборкаИзменяемых.ТекущийИсполнитель Тогда
					ПараметрыОбновления.Вставить("Исполнитель", ВыборкаИзменяемых.Исполнитель);
				КонецЕсли;
				ОбновитьЗаданиеАдаптацииУвольнения(БизнесПроцесс, ПараметрыОбновления);
			КонецЕсли;
			
			Если Не ВыборкаИзменяемых.ПроцессСтартован Тогда
				// Если ранее старт бизнес-процесса был отложен, но сейчас он обязателен, то отключаем отложенность,
				// и стартуем процесс после обновления набора записей регистра ЗаданияАдаптацииУвольнения.
				Если ВыборкаИзменяемых.ОтключитьОтложенныйСтарт Тогда
					БизнесПроцессыИЗадачиСервер.ОтключитьОтложенныйСтартПроцесса(БизнесПроцесс);
					ПроцессыДляЗапуска.Добавить(БизнесПроцесс);
				ИначеЕсли ВыборкаИзменяемых.НастроитьОтложенныйСтарт Тогда
					БизнесПроцессыИЗадачиСервер.ДобавитьПроцессДляОтложенногоСтарта(БизнесПроцесс, ВыборкаИзменяемых.ДатаНачала);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаИзменяемых, "ДатаНачала, ДатаОкончания, Исполнитель");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Запись Из ЗаписиКУдалению Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	Пока ВыборкаДобавляемых.Следующий() Цикл
		СтрокаСотрудник = НСтр("ru = 'ФИО: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаКод = НСтр("ru = 'Код: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаТабНомер = НСтр("ru = 'Таб. номер: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрШаблон(СтрокаСотрудник, ВыборкаДобавляемых.ФИО));
		МассивСтрок.Добавить(СтрШаблон(СтрокаКод, ВыборкаДобавляемых.Код));
		
		Если ЗначениеЗаполнено(ВыборкаДобавляемых.ТабНомер) Тогда
			МассивСтрок.Добавить(СтрШаблон(СтрокаТабНомер, ВыборкаДобавляемых.ТабНомер));
		КонецЕсли;
		
		ИнформацияПоСотруднику = СтрСоединить(МассивСтрок, Символы.ПС);
		
		ВыборкаЗаданий = ВыборкаДобавляемых.Выбрать();
		Пока ВыборкаЗаданий.Следующий() Цикл 
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(ИнформацияПоСотруднику);
			Если ЗначениеЗаполнено(ВыборкаЗаданий.Описание) Тогда
				МассивСтрок.Добавить("");
				МассивСтрок.Добавить(ВыборкаЗаданий.Описание);
			КонецЕсли;
			ПараметрыСоздания = Новый Структура;
			ПараметрыСоздания.Вставить("Дата", Выборка.Дата);
			ПараметрыСоздания.Вставить("Предмет", Выборка.ДокументОснование);
			ПараметрыСоздания.Вставить("Наименование", ВыборкаЗаданий.Наименование);
			ПараметрыСоздания.Вставить("Содержание", СтрСоединить(МассивСтрок, Символы.ПС));
			ПараметрыСоздания.Вставить("Исполнитель", ВыборкаЗаданий.Исполнитель);
			ПараметрыСоздания.Вставить("СрокИсполнения", ВыборкаЗаданий.ДатаОкончания);
			ПараметрыСоздания.Вставить("ОсновнойОбъектАдресации", ВыборкаЗаданий.ОсновнойОбъектАдресации);
			ПараметрыСоздания.Вставить("ДополнительныйОбъектАдресации", ВыборкаЗаданий.ДополнительныйОбъектАдресации);
			БизнесПроцесс = СоздатьЗаданиеАдаптацииУвольнения(ПараметрыСоздания);
			Если Не ЗначениеЗаполнено(ВыборкаЗаданий.ДатаНачала) Тогда
				ПроцессыДляЗапуска.Добавить(БизнесПроцесс);
			Иначе
				БизнесПроцессыИЗадачиСервер.ДобавитьПроцессДляОтложенногоСтарта(БизнесПроцесс, ВыборкаЗаданий.ДатаНачала);
			КонецЕсли;
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаданий);
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка, "Организация, ДокументОснование");
			НоваяЗапись.Задание = БизнесПроцесс;
			НоваяЗапись.ВидСобытия = ВидСобытия;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// Старт бизнес-процессов выполняется после обновления набора записей регистра ЗаданияАдаптацииУвольнения, 
	// чтобы при записи задач, их можно было дописать в уже существующие наборы.
	Для Каждого БизнесПроцесс Из ПроцессыДляЗапуска Цикл
		Если Не БизнесПроцесс.Стартован Тогда
			БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Старт();
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ОбновлениеЗаданийАдаптацииУвольнения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].ЗаданияОбновлены = Истина;
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область ЗаданияАдаптацииУвольнения

Функция СоздатьЗаданиеАдаптацииУвольнения(Параметры)
	
	БизнесПроцессОбъект = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
	ЗаполнитьЗначенияСвойств(БизнесПроцессОбъект, Параметры);
	БизнесПроцессОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	БизнесПроцессОбъект.Записать();
	
	Возврат БизнесПроцессОбъект.Ссылка;
	
КонецФункции

Процедура ОбновитьЗаданиеАдаптацииУвольнения(БизнесПроцесс, Параметры)
	
	БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	
	ЗаполнитьЗначенияСвойств(БизнесПроцессОбъект, Параметры);
	БизнесПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	БизнесПроцессОбъект.ПометкаУдаления = Ложь;
	БизнесПроцессОбъект.Записать();
	
	ИзменитьРеквизитыНевыполненныхЗадач(БизнесПроцессОбъект.Ссылка, Параметры);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеЗаданиеАдаптацииУвольнения(Задание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцессОбъект = Задание.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	БизнесПроцессОбъект.ДополнительныеСвойства.Вставить("ПометкаОснованияЗадачАдаптацииУвольнения", Истина);
	БизнесПроцессОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

Функция ВыборкаЗаданийПоДокументу(ДокументСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданияАдаптацииУвольнения.Задание
	|ИЗ
	|	РегистрСведений.ЗаданияАдаптацииУвольнения КАК ЗаданияАдаптацииУвольнения
	|ГДЕ
	|	ЗаданияАдаптацииУвольнения.ДокументОснование = &ДокументОснование";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать();
	
КонецФункции

Процедура ИзменитьРеквизитыНевыполненныхЗадач(БизнесПроцесс, Параметры)

	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", БизнесПроцесс);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И НЕ Задачи.ПометкаУдаления
		|	И НЕ Задачи.Выполнена");
		
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Задача = Выборка.Ссылка.ПолучитьОбъект();
			Задача.СрокИсполнения = Параметры.СрокИсполнения;
			
			Исполнитель = Неопределено;
			Если Параметры.Свойство("Исполнитель", Исполнитель) Тогда
				
				Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Задача.РольИсполнителя = Исполнитель;
					Задача.Исполнитель = Неопределено;
				Иначе
					Задача.Исполнитель = Исполнитель;
					Задача.РольИсполнителя = Неопределено;
				КонецЕсли;
				
				Задача.ОсновнойОбъектАдресации = Неопределено;
				Задача.ДополнительныйОбъектАдресации = Неопределено;
			
			КонецЕсли;
			
			Задача.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ВидыСобытийАдаптацииУвольнения

Функция ВидСобытияАдаптацииУвольненияДокумента(ДокументСсылка)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
	Возврат Менеджер.ВидСобытияАдаптацииУвольнения();
	
КонецФункции

Функция СобытиеВозвратИзОтпускаПоУходуЗаРебенком() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.ВозвратИзОтпускаПоУходуЗаРебенком;
	
КонецФункции

Функция СобытиеВосстановлениеВДолжности() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.ВосстановлениеВДолжности;
	
КонецФункции

Функция СобытиеОтпускПоУходуЗаРебенком() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.ОтпускПоУходуЗаРебенком;
	
КонецФункции

Функция СобытиеПеремещение() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение;
	
КонецФункции

Функция СобытиеПрием() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.Прием;
	
КонецФункции

Функция СобытиеУвольнение() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.Увольнение;
	
КонецФункции

#КонецОбласти

Функция ИспользуетсяАдаптацияУвольнение() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьАдаптациюУвольнение");
	
КонецФункции

Функция ПараметрыЗаполненияМероприятий() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация");
	ПараметрыЗаполнения.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Позиция");
	ПараметрыЗаполнения.Вставить("Подразделение");
	ПараметрыЗаполнения.Вставить("Должность");
	ПараметрыЗаполнения.Вставить("ВидСобытия");
	ПараметрыЗаполнения.Вставить("ВидМероприятия");
	ПараметрыЗаполнения.Вставить("ДатаСобытия", '00010101');
	ПараметрыЗаполнения.Вставить("ДатаОкончанияСобытия", '00010101');
	ПараметрыЗаполнения.Вставить("ПредыдущаяОрганизация");
	ПараметрыЗаполнения.Вставить("ПредыдущаяПозиция");
	ПараметрыЗаполнения.Вставить("ПредыдущееПодразделение");
	ПараметрыЗаполнения.Вставить("ПредыдущаяДолжность");
	ПараметрыЗаполнения.Вставить("ПредыдущийВидКадровогоСобытия");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьКоллекциюНазначаемымиМероприятиями(ДанныеМероприятий, ПараметрыЗаполнения, ОчиститьПередЗаполнением = Ложь) Экспорт
	
	Если ОчиститьПередЗаполнением Тогда
		ДанныеМероприятий.Очистить();
	КонецЕсли;
	
	ВидыСобытийАдаптации = Перечисления.ВидыСобытийАдаптацииУвольнения.СобытияАдаптации();
	ВидыСобытийУвольнения = Перечисления.ВидыСобытийАдаптацииУвольнения.СобытияУвольнения();
	
	ОписаниеПрошлыхМероприятийАдаптации = НоваяТаблицаОписанияМероприятий();
	ОписаниеТекущихМероприятийУвольнения = НоваяТаблицаОписанияМероприятий();
	ОписаниеБудущихМероприятийУвольнения = НоваяТаблицаОписанияМероприятий();
	
	ТекущийВидСобытия = ПараметрыЗаполнения.ВидСобытия;
	ПредыдущийВидСобытия = ВидСобытияАдаптацииУвольнения(ПараметрыЗаполнения.ПредыдущийВидКадровогоСобытия);
	
	Если ПараметрыЗаполнения.Позиция = ПараметрыЗаполнения.ПредыдущаяПозиция 
		И ПараметрыЗаполнения.ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущийВидСобытия) Тогда
		
		// Получаем мероприятия адаптации для предыдущего кадрового события, чтобы исключить их из текущего состава
		// мероприятий. Мероприятия событий не связанных со сменой позиции учитываем полностью, поэтому для них это не актуально.
		Если ПараметрыЗаполнения.ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение Тогда
			
			ПараметрыПрошлогоСобытияАдаптации = ПараметрыЗаполненияМероприятий();
			ЗаполнитьЗначенияСвойств(ПараметрыПрошлогоСобытияАдаптации, ПараметрыЗаполнения, "ФизическоеЛицо, ДатаСобытия");
			ПараметрыПрошлогоСобытияАдаптации.Организация = ПараметрыЗаполнения.ПредыдущаяОрганизация;
			ПараметрыПрошлогоСобытияАдаптации.Позиция = ПараметрыЗаполнения.ПредыдущаяПозиция;
			ПараметрыПрошлогоСобытияАдаптации.Подразделение = ПараметрыЗаполнения.ПредыдущееПодразделение;
			ПараметрыПрошлогоСобытияАдаптации.Должность = ПараметрыЗаполнения.ПредыдущаяДолжность;
			ПараметрыПрошлогоСобытияАдаптации.ВидСобытия = ПредыдущийВидСобытия;
			ПараметрыПрошлогоСобытияАдаптации.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Адаптация;
			
			ОписаниеПрошлыхМероприятийАдаптации = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыПрошлогоСобытияАдаптации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВидСобытия) Тогда 
		
		// Текущий список мероприятий дополняем мероприятиями вызванными освобождением позиции текущим событием.
		Если ВидыСобытийУвольнения.Найти(ТекущийВидСобытия) <> Неопределено Тогда
			
			ПараметрыТекущегоСобытияУвольнения = ПараметрыЗаполненияМероприятий();
			ЗаполнитьЗначенияСвойств(ПараметрыТекущегоСобытияУвольнения, ПараметрыЗаполнения, "ФизическоеЛицо, ДатаСобытия");
			ПараметрыТекущегоСобытияУвольнения.Организация = ПараметрыЗаполнения.ПредыдущаяОрганизация;
			ПараметрыТекущегоСобытияУвольнения.Позиция = ПараметрыЗаполнения.ПредыдущаяПозиция;
			ПараметрыТекущегоСобытияУвольнения.Подразделение = ПараметрыЗаполнения.ПредыдущееПодразделение;
			ПараметрыТекущегоСобытияУвольнения.Должность = ПараметрыЗаполнения.ПредыдущаяДолжность;
			ПараметрыТекущегоСобытияУвольнения.ВидСобытия = ТекущийВидСобытия;
			ПараметрыТекущегоСобытияУвольнения.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Увольнение;
			
			ОписаниеТекущихМероприятийУвольнения = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыТекущегоСобытияУвольнения);
			
		КонецЕсли;
		
		Если ВидыСобытийАдаптации.Найти(ТекущийВидСобытия) <> Неопределено Тогда
			
			ПараметрыЗаполнения.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Адаптация;
			ОписаниеТекущихМероприятийАдаптации = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыЗаполнения);
			
			Для Каждого ОписаниеМероприятия Из ОписаниеТекущихМероприятийАдаптации Цикл
				
				Если Не ЗначениеЗаполнено(ОписаниеПрошлыхМероприятийАдаптации.Найти(ОписаниеМероприятия.Мероприятие, "Мероприятие")) Тогда
					ЗаполнитьЗначенияСвойств(ДанныеМероприятий.Добавить(), ОписаниеМероприятия, "Мероприятие, Исполнитель, ДатаНачала, ДатаОкончания");
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыЗаполнения.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Увольнение;
			ПараметрыЗаполнения.ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.СобытияУвольнения();
			ОписаниеБудущихМероприятийУвольнения = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыЗаполнения);
			
		КонецЕсли;
		
		Для Каждого ОписаниеМероприятия Из ОписаниеТекущихМероприятийУвольнения Цикл
			
			// Исключаем выполнение мероприятий связанных с освобождением должности, если они будут выполнены позже.
			Если Не ЗначениеЗаполнено(ОписаниеБудущихМероприятийУвольнения.Найти(ОписаниеМероприятия.Мероприятие, "Мероприятие")) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеМероприятий.Добавить(), ОписаниеМероприятия, "Мероприятие, Исполнитель, ДатаНачала, ДатаОкончания");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеМероприятий.Сортировать("ДатаОкончания, Мероприятие");
	
КонецПроцедуры

Процедура ЗаполнитьПоСотруднику(ДокументОбъект, ДанныеЗаполнения, ЗаполнятьСотрудника = Истина, ЗаполнятьПозицию = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат;
	КонецЕсли;
		
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДанныеЗаполнения, "Организация,ФизическоеЛицо,ДолжностьПоШтатномуРасписанию");
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеКадровыеДанныеСотрудника = КадровыеДанные[0];
	
	ДокументОбъект.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудника.ФизическоеЛицо;
	ДокументОбъект.Организация = ТекущиеКадровыеДанныеСотрудника.Организация;
	
	Если ЗаполнятьСотрудника Тогда
		ДокументОбъект.Сотрудник = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ЗаполнятьПозицию Тогда
		ДокументОбъект.ДолжностьПоШтатномуРасписанию = ТекущиеКадровыеДанныеСотрудника.ДолжностьПоШтатномуРасписанию;
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаОписанияМероприятий()
	
	ТаблицаМероприятий = Новый ТаблицаЗначений;
	
	ОписанияТиповИсполнителя = Новый Массив;
	ОписанияТиповИсполнителя.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ОписанияТиповИсполнителя.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	ТаблицаМероприятий.Колонки.Добавить("Мероприятие",	Новый ОписаниеТипов("СправочникСсылка.МероприятияАдаптацииУвольнения"));
	ТаблицаМероприятий.Колонки.Добавить("Исполнитель",	Новый ОписаниеТипов(ОписанияТиповИсполнителя));
	ТаблицаМероприятий.Колонки.Добавить("ДатаНачала",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаМероприятий.Колонки.Добавить("ДатаОкончания",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ТаблицаМероприятий;
	
КонецФункции

Функция ПолучитьОписаниеМероприятийПоСобытию(ПараметрыСобытия)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТМероприятияКадровогоСобытия(Запрос.МенеджерВременныхТаблиц, ПараметрыСобытия);
	СоздатьВТСвойстваНазначаемыхМероприятий(Запрос.МенеджерВременныхТаблиц, ПараметрыСобытия, "ВТМероприятияКадровогоСобытия");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СвойстваМероприятий.Ссылка КАК Мероприятие,
	|	СвойстваМероприятий.Исполнитель,
	|	СвойстваМероприятий.ДатаНачала,
	|	СвойстваМероприятий.ДатаОкончания
	|ИЗ
	|	ВТСвойстваНазначаемыхМероприятий КАК СвойстваМероприятий
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваМероприятий.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТМероприятияКадровогоСобытия(МенеджерВременныхТаблиц, ПараметрыОтбора)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Организация = ПараметрыОтбора.Организация;
	Подразделение = ПараметрыОтбора.Подразделение;
	Должность = ПараметрыОтбора.Должность;
	
	Если (Не ЗначениеЗаполнено(Должность) 
		Или Не ЗначениеЗаполнено(Подразделение)
		Или Не ЗначениеЗаполнено(Организация)) 
		И ЗначениеЗаполнено(ПараметрыОтбора.Позиция) Тогда
		
		РеквизитыПозицииШР = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтбора.Позиция, "Владелец,Подразделение,Должность");
		
		Организация = ?(ЗначениеЗаполнено(Организация), Организация, РеквизитыПозицииШР.Владелец);
		Подразделение = ?(ЗначениеЗаполнено(Подразделение), Подразделение, РеквизитыПозицииШР.Подразделение);
		Должность =  ?(ЗначениеЗаполнено(Должность), Должность, РеквизитыПозицииШР.Должность);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Подразделение",	Подразделение);
	Запрос.УстановитьПараметр("Должность",		Должность);
	Запрос.УстановитьПараметр("Позиция",		ПараметрыОтбора.Позиция);
	Запрос.УстановитьПараметр("ВидСобытия",		ПараметрыОтбора.ВидСобытия);
	Запрос.УстановитьПараметр("ВидМероприятия",	ПараметрыОтбора.ВидМероприятия);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Мероприятия.Ссылка КАК Ссылка,
	|	Мероприятия.Исполнитель КАК Исполнитель,
	|	Мероприятия.СдвигСрокаНачалаИсполнения КАК СдвигСрокаНачалаИсполнения,
	|	Мероприятия.СдвигСрокаОкончанияИсполнения КАК СдвигСрокаОкончанияИсполнения,
	|	Мероприятия.Наименование
	|ПОМЕСТИТЬ ВТМероприятияПоВидуСобытияПредварительная
	|ИЗ
	|	Справочник.МероприятияАдаптацииУвольнения КАК Мероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МероприятияАдаптацииУвольнения.События КАК СобытияМероприятий
	|		ПО Мероприятия.Ссылка = СобытияМероприятий.Ссылка
	|ГДЕ
	|	НЕ Мероприятия.ВАрхиве
	|	И (Мероприятия.ВидМероприятия В (&ВидМероприятия)
	|			ИЛИ Мероприятия.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийАдаптацииУвольнения.ПустаяСсылка))
	|	И (СобытияМероприятий.ВидСобытия В (&ВидСобытия)
	|			ИЛИ СобытияМероприятий.ВидСобытия ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МероприятияПоВидуСобытия.Ссылка,
	|	МероприятияПоВидуСобытия.Исполнитель,
	|	МероприятияПоВидуСобытия.СдвигСрокаНачалаИсполнения,
	|	МероприятияПоВидуСобытия.СдвигСрокаОкончанияИсполнения,
	|	МероприятияПоВидуСобытия.Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоОрганизации.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоОрганизации.ОбъектНазначения = &Организация
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущейОрганизации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоПозиции.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоПозиции.ОбъектНазначения = &Позиция
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущейПозиции,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоПодразделению.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоПодразделению.ОбъектНазначения = &Подразделение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущегоПодразделения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоДолжности.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоДолжности.ОбъектНазначения = &Должность
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущейДолжности
	|ПОМЕСТИТЬ ВТМероприятияПоВидуСобытия
	|ИЗ
	|	ВТМероприятияПоВидуСобытияПредварительная КАК МероприятияПоВидуСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоОрганизации
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоОрганизации.Мероприятие
	|			И (ОтборПоОрганизации.ОбъектНазначения ССЫЛКА Справочник.Организации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоПозиции
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоПозиции.Мероприятие
	|			И (ОтборПоПозиции.ОбъектНазначения ССЫЛКА Справочник.ШтатноеРасписание)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоПодразделению
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоПодразделению.Мероприятие
	|			И (ОтборПоПодразделению.ОбъектНазначения ССЫЛКА Справочник.ПодразделенияОрганизаций)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоДолжности
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоДолжности.Мероприятие
	|			И (ОтборПоДолжности.ОбъектНазначения ССЫЛКА Справочник.Должности)
	|
	|СГРУППИРОВАТЬ ПО
	|	МероприятияПоВидуСобытия.Наименование,
	|	МероприятияПоВидуСобытия.Ссылка,
	|	МероприятияПоВидуСобытия.Исполнитель,
	|	МероприятияПоВидуСобытия.СдвигСрокаНачалаИсполнения,
	|	МероприятияПоВидуСобытия.СдвигСрокаОкончанияИсполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МероприятияПоВидуСобытия.Ссылка,
	|	МероприятияПоВидуСобытия.Исполнитель,
	|	МероприятияПоВидуСобытия.СдвигСрокаНачалаИсполнения,
	|	МероприятияПоВидуСобытия.СдвигСрокаОкончанияИсполнения,
	|	МероприятияПоВидуСобытия.Наименование
	|ПОМЕСТИТЬ ВТМероприятияКадровогоСобытия
	|ИЗ
	|	ВТМероприятияПоВидуСобытия КАК МероприятияПоВидуСобытия
	|ГДЕ
	|	МероприятияПоВидуСобытия.ДляТекущейОрганизации
	|	И МероприятияПоВидуСобытия.ДляТекущейПозиции
	|	И МероприятияПоВидуСобытия.ДляТекущегоПодразделения
	|	И МероприятияПоВидуСобытия.ДляТекущейДолжности";
	
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТМероприятияПоВидуСобытияПредварительная");
	УдалитьВТ.Добавить("ВТМероприятияПоВидуСобытия");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТСвойстваНазначаемыхМероприятий(МенеджерВременныхТаблиц, ПараметрыЗапроса, ИмяВТМероприятия = "ВТНазначаемыеМероприятия")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",	ПараметрыЗапроса.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаСобытия", 	ПараметрыЗапроса.ДатаСобытия);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НазначаемыеМероприятия.Ссылка,
	|	&ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТМероприятияИсполняемыеСотрудниками
	|ИЗ
	|	ВТНазначаемыеМероприятия КАК НазначаемыеМероприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МероприятияАдаптацииУвольнения КАК МероприятияАдаптацииУвольнения
	|		ПО НазначаемыеМероприятия.Ссылка = МероприятияАдаптацииУвольнения.Ссылка
	|			И (НазначаемыеМероприятия.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Мероприятия.Ссылка КАК Мероприятие,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Пользователи.Ссылка ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИНАЧЕ Пользователи.Ссылка
	|		КОНЕЦ) КАК Исполнитель
	|ПОМЕСТИТЬ ВТИсполнителиМероприятий
	|ИЗ
	|	ВТМероприятияИсполняемыеСотрудниками КАК Мероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Мероприятия.ФизическоеЛицо = Пользователи.ФизическоеЛицо
	|			И (НЕ Пользователи.Недействителен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Мероприятия.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НазначаемыеМероприятия.Ссылка,
	|	ВЫБОР
	|		КОГДА НазначаемыеМероприятия.СдвигСрокаНачалаИсполнения = 0
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаСобытия, ДЕНЬ, НазначаемыеМероприятия.СдвигСрокаНачалаИсполнения)
	|	КОНЕЦ КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(&ДатаСобытия, ДЕНЬ, НазначаемыеМероприятия.СдвигСрокаОкончанияИсполнения) КАК ДатаОкончания,
	|	НазначаемыеМероприятия.Наименование,
	|	ВЫБОР
	|		КОГДА НЕ ИсполнителиМероприятий.Мероприятие ЕСТЬ NULL
	|				И ИсполнителиМероприятий.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ИсполнителиМероприятий.Исполнитель
	|		ИНАЧЕ НазначаемыеМероприятия.Исполнитель
	|	КОНЕЦ КАК Исполнитель
	|ПОМЕСТИТЬ ВТСвойстваНазначаемыхМероприятий
	|ИЗ
	|	ВТНазначаемыеМероприятия КАК НазначаемыеМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсполнителиМероприятий КАК ИсполнителиМероприятий
	|		ПО НазначаемыеМероприятия.Ссылка = ИсполнителиМероприятий.Мероприятие";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНазначаемыеМероприятия", ИмяВТМероприятия);
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТМероприятияИсполняемыеСотрудниками");
	УдалитьВТ.Добавить("ВТИсполнителиМероприятий");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Функция СвойстваНазначаемогоМероприятия(Мероприятие, ПараметрыЗапроса) Экспорт
	
	СвойстваМероприятия = Новый Структура("Исполнитель, ДатаНачала, ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МероприятияАдаптацииУвольнения.Ссылка,
	|	МероприятияАдаптацииУвольнения.Исполнитель,
	|	МероприятияАдаптацииУвольнения.СдвигСрокаНачалаИсполнения,
	|	МероприятияАдаптацииУвольнения.СдвигСрокаОкончанияИсполнения,
	|	МероприятияАдаптацииУвольнения.Наименование
	|ПОМЕСТИТЬ ВТМероприятияАдаптацииУвольнения
	|ИЗ
	|	Справочник.МероприятияАдаптацииУвольнения КАК МероприятияАдаптацииУвольнения
	|ГДЕ
	|	МероприятияАдаптацииУвольнения.Ссылка = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Запрос.Выполнить();
	
	СоздатьВТСвойстваНазначаемыхМероприятий(Запрос.МенеджерВременныхТаблиц, ПараметрыЗапроса, "ВТМероприятияАдаптацииУвольнения");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СвойстваМероприятий.Исполнитель КАК Исполнитель,
	|	СвойстваМероприятий.ДатаНачала КАК ДатаНачала,
	|	СвойстваМероприятий.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТСвойстваНазначаемыхМероприятий КАК СвойстваМероприятий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СвойстваМероприятия, Выборка);
	КонецЦикла;
	
	Возврат СвойстваМероприятия;
	
КонецФункции

Функция ВидСобытияАдаптацииУвольнения(ВидКадровогоСобытия)
	
	Если Не ЗначениеЗаполнено(ВидКадровогоСобытия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.ПустаяСсылка();
	
	Если ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.ВосстановлениеВДолжности;
	ИначеЕсли ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Прием;
	ИначеЕсли ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение;
	ИначеЕсли ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Увольнение;
	КонецЕсли;
	
	Возврат ВидСобытия;
	
КонецФункции

Процедура СообщитьОбОшибкеИсполнителяВСтроке(ДокументОбъект, СтрокаДанных, ИндексСтроки, ЛичныеМероприятия)
	
	СтрокиСообщения = Новый Массив();
	СтрокиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Не подобран исполнитель мероприятия ""%1"".'"), СтрокаДанных.Мероприятие));
	
	Если ЛичныеМероприятия.Получить(СтрокаДанных.Мероприятие) <> Неопределено Тогда
		СтрокиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Убедитесь, что есть пользователь, связанный с сотрудником %1, и перезаполните табличную часть.'"), ДокументОбъект.ФизическоеЛицо));
	Иначе
		СтрокиСообщения.Добавить(НСтр("ru = 'Уточните настройки мероприятия и перезаполните табличную часть.'"));
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(СтрокиСообщения, Символы.ПС);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект, 
		СтрШаблон("МероприятияАдаптацииУвольнения[%1].Исполнитель", Формат(ИндексСтроки, "ЧН=0; ЧГ=0")));
	
КонецПроцедуры

Процедура ПроверитьНаличиеДубляДокумента(ДокументОбъект, Отказ) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	МодульМенеджера = Документы[МетаданныеДокумента.Имя];
	
	Запрос = Новый Запрос;
	
	Разделитель = "";
	ТекстУсловийПроверки = "";
	ШаблонУсловия = "%1Решение.%2 = &%2";
	
	Для Каждого Поле Из МодульМенеджера.ПоляПроверкиУникальности() Цикл
		
		Если ЗначениеЗаполнено(ТекстУсловийПроверки)
			И Не ЗначениеЗаполнено(Разделитель) Тогда
			Разделитель = "
			|	И ";
		КонецЕсли;
		
		ТекстУсловийПроверки = ТекстУсловийПроверки + СтрШаблон(ШаблонУсловия, Разделитель, Поле);
		Запрос.УстановитьПараметр(Поле, ДокументОбъект[Поле]);
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Решение.Ссылка
	|ИЗ
	|	&ПолноеИмяДокумента КАК Решение
	|ГДЕ
	|	НЕ Решение.ПометкаУдаления
	|	И Решение.Ссылка <> &Ссылка
	|	И &УсловияПроверки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяДокумента", ПолноеИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияПроверки", ТекстУсловийПроверки);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ с такими характеристиками уже есть: %1.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибки, Выборка.Ссылка), Выборка.Ссылка, , , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
