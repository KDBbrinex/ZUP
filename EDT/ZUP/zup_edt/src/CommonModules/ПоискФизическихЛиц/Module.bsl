#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.ДанныеПоискаФизическихЛиц, Истина);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.81";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("44adb0ce-f589-43f9-9773-4f762a96ee23");
	Обработчик.Процедура = "РегистрыСведений.ДанныеПоискаФизическихЛиц.ЗаполнитьДанныеПоискаФизическихЛиц";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение данных поиска для физических лиц'");

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

Процедура ДополнитьОписаниеПрофиля(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхПоискаФизическихЛиц");
	
КонецПроцедуры

#КонецОбласти

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.Справочники.ФизическиеЛица
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Справочники.ФизическиеЛица;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ДанныеПоискаФизическихЛиц;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзла(ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления = Неопределено Тогда
		ПараметрыОбновления = Новый Структура("ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	Пока Не ПараметрыОбновления.ОбработкаЗавершена Цикл
		РегистрыСведений.ДанныеПоискаФизическихЛиц.ЗаполнитьДанныеПоискаФизическихЛиц(ПараметрыОбновления);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоискаФизическогоЛица(ФизическоеЛицо) Экспорт

	ТипыКонтактнойИнформации = Новый Массив;
	ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	МассивФизическиеЛица = Новый Массив;
	МассивФизическиеЛица.Добавить(ФизическоеЛицо.Ссылка);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивФизическиеЛица, ТипыКонтактнойИнформации, , Ложь);
	
	Контакты = КонтактыВФорматеПоиска(ТаблицаКИ);
	
	Если КонтактыИзменились(ФизическоеЛицо, Контакты) Тогда
		РегистрыСведений.ДанныеПоискаФизическихЛиц.ОбновитьДанныеПоискаФизическихЛиц(
			ФизическоеЛицо.Ссылка, Контакты.АдресаЭлектроннойПочты, Контакты.Телефоны);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КонтактыИзменились(ФизическоеЛицо, Контакты)
	
	Если Не ФизическоеЛицо.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		Возврат Не ПустаяСтрока(Контакты.Телефоны) Или Не ПустаяСтрока(Контакты.АдресаЭлектроннойПочты);
	КонецЕсли;
	
	ТаблицаКИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ФизическоеЛицо.ДополнительныеСвойства["ПрежниеЗначения"], "ТаблицаКИ");
	Если ТаблицаКИ = Неопределено Тогда
		Возврат Не ПустаяСтрока(Контакты.Телефоны) Или Не ПустаяСтрока(Контакты.АдресаЭлектроннойПочты);
	КонецЕсли;
	
	КонтактыПрежние = КонтактыВФорматеПоиска(ТаблицаКИ);
	Возврат КонтактыПрежние.Телефоны <> Контакты.Телефоны 
		Или КонтактыПрежние.АдресаЭлектроннойПочты <> Контакты.АдресаЭлектроннойПочты;
	
КонецФункции

Функция КонтактыВФорматеПоиска(ТаблицаКИ) Экспорт
	
	Контакты = Новый Структура();
	Контакты.Вставить("Телефоны", "");
	Контакты.Вставить("АдресаЭлектроннойПочты", "");
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ДобавитьКонтакт(Контакты.Телефоны, ТелефонВФорматеПоиска(СтрокаКИ.Представление));
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ДобавитьКонтакт(Контакты.АдресаЭлектроннойПочты, СтрокаКИ.Представление);
		Иначе
			ОбщегоНазначенияКлиентСервер.Проверить(Истина, 
				НСтр("ru = 'Обнаружен недопустимый тип контактной информации в таблице контактов для поиска'"), 
				"ПоискФизическихЛиц.КонтактыВФорматеПоиска");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Контакты;
	
КонецФункции

Процедура ДобавитьКонтакт(Представление, Контакт)
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = Представление + ", ";
	КонецЕсли;
	
	Представление = Представление + Контакт;
	
КонецПроцедуры

Функция ТелефонВФорматеПоиска(Телефон)

	Если Не ЗначениеЗаполнено(Телефон) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	
	Для Инд = 1 По СтрДлина(Телефон) Цикл
		Символ = Сред(Телефон, Инд, 1);
		Если Символ = "," Тогда
			Символ = ", ";
		Иначе
			Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Символ = "7" Тогда
			Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(Результат, 1)) Или Результат = "" Тогда
				Символ = "8";
			КонецЕсли;
		КонецЕсли;
		Результат = "" + Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти