
#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в РаботаВБезопасномРежимеПереопределяемый
//  из СтандартныеПодсистемы.БазоваяФункциональность.
//
// Параметры:
//	ЗапросыРазрешений - заполняемые разрешения.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Разрешения = Новый Массив;
	
	Для Каждого КлючИЗначение Из АдресаРекрутинговыхСайтов() Цикл
		
		Адрес = КлючИЗначение.Значение;
		Описание = СтрШаблон(НСтр("ru = 'Веб-сервис доступа к вакансиям и кандидатам ""%1.""'"), КлючИЗначение.Ключ);
		
		Разрешения.Добавить(
			РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("HTTPS", Адрес, , Описание));
		
	КонецЦикла;
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения));
	
КонецПроцедуры

// Вызывается при получении формой данных объекта.
// Настраивает условное оформление и команды таблицы Публикации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма вакансии.
//
Процедура ВакансииПриПолученииДанныхНаСервере(Форма) Экспорт
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ВакансииПриПолученииДанныхНаСервере(Форма);
	
КонецПроцедуры

// Обновляет команды для публикации/снятия с публикации вакансий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма вакансии.
//
Процедура ОбновитьКомандыПубликацииВакансии(Форма) Экспорт
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ОбновитьКомандыПубликацииВакансии(Форма);
	
КонецПроцедуры

// Формирует подменю для загрузки вакансий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка вакансии.
//
Процедура ВакансииСписокПриСозданииНаСервере(Форма) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиИнтеграцииРекрутинговыхСайтов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КонстантаИспользоватьИнтеграциюРекрутинговыхСайтов() Тогда
		Возврат;
	КонецЕсли;
	
	МассивАктуальныхСайтов = ИспользуемыеСайты();
	
	Если МассивАктуальныхСайтов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.СоответствиеКомандИСайтов) Тогда
		СоответствиеКомандИСайтовПромежуточное = ИнтеграцияРекрутинговыхСайтовКлиентСервер.СоответствиеПоФиксированномуСоответствию(Форма.СоответствиеКомандИСайтов);
	Иначе
		СоответствиеКомандИСайтовПромежуточное = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Сайт Из МассивАктуальныхСайтов Цикл
		
		ЕстьМенюДляСайта = Ложь;
		Если ЗначениеЗаполнено(Форма.СоответствиеКомандИСайтов) Тогда
			Для Каждого ЭлементСоответствия Из Форма.СоответствиеКомандИСайтов Цикл
				Если ЭлементСоответствия.Значение = Сайт Тогда
					ЕстьМенюДляСайта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЕстьМенюДляСайта Тогда
			СоздатьКомандуЗагрузкиССайта(Форма, Сайт, СоответствиеКомандИСайтовПромежуточное);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СоответствиеКомандИСайтов = Новый ФиксированноеСоответствие(СоответствиеКомандИСайтовПромежуточное);
	
КонецПроцедуры

// Записывает данные в РС ДанныеПубликацииРезюме.
// 
// Параметры:
//  МестоПубликации - СправочникСсылка.ИсточникиИнформацииОКандидатах.
//  ДанныеПубликацииРезюмеНаборЗаписей - РегистрСведенийНаборЗаписей.ДанныеПубликацииРезюме - Набор записей регистра.
//  СтруктураРезюме - Структура - Структура резюме, полученная с сайта. Состав структуры отличается в зависимости от источника.
//  Кандидат - СправочникСсылка.Кандидаты - Кандидат, чье резюме сохраняется в регистре.
//
Процедура ЗаполнитьДанныеПубликацииРезюмеНаборЗаписей(МестоПубликации, ДанныеПубликацииРезюмеНаборЗаписей, СтруктураРезюме, Кандидат) Экспорт
	
	ДанныеПубликацииРезюмеНаборЗаписей.Очистить();
	
	Для Каждого КлючИЗначение Из СтруктураРезюме Цикл
		Если КлючИЗначение.Значение = Неопределено 
			Или ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") 
			Или ТипЗнч(КлючИЗначение.Значение) = Тип("Картинка") Тогда
			Продолжить;
		Иначе
			НоваяЗапись = ДанныеПубликацииРезюмеНаборЗаписей.Добавить();
			НоваяЗапись.Кандидат = Кандидат;
			НоваяЗапись.МестоПубликации = МестоПубликации;
			НоваяЗапись.ПолеДанных = КлючИЗначение.Ключ;
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КлючИЗначение.Значение)) Тогда
				НоваяЗапись.Значение = Строка(КлючИЗначение.Значение);
			Иначе
				НоваяЗапись.Значение = ЗаписьJSON(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру данных кандидата по структуре резюме (для заполнения карточки кандидата).
// 
// Параметры:
//  Сайт - СправочникСсылка.ИсточникиИнформацииОКандидатах - Сайт, с которого была произведена загрузка резюме.
//  СтруктураРезюме - Структура - Структура резюме, полученная с сайта. Состав структуры отличается в зависимости от источника.
//
// Возвращаемое значение:
//  Структура (см. описание в функции Справочники.Кандидаты.СтруктураДанныхКандидата()).
//
Функция СтруктураДанныхКандидата(Сайт, СтруктураРезюме) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		Возврат СтруктураДанныхКандидатаHeadHunter(СтруктураРезюме);
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат СтруктураДанныхКандидатаRabota(СтруктураРезюме);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат СтруктураДанныхКандидатаSuperJob(СтруктураРезюме);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат СтруктураДанныхКандидатаZarplata(СтруктураРезюме);
	ИначеЕсли Сайт = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.ПустаяСсылка") Тогда
		
		СтруктураДанныхКандидата = Справочники.Кандидаты.СтруктураДанныхКандидата();
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураДанныхКандидата, СтруктураРезюме, Истина);
		СтруктураДанныхКандидата.Вставить("Ответственный", Пользователи.ТекущийПользователь());
		СтруктураДанныхКандидата.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
		СтруктураДанныхКандидата.Вставить("ДатаОткрытия", ТекущаяДатаСеанса());
		
		Возврат СтруктураДанныхКандидата;
		
	КонецЕсли;
	
КонецФункции

// Устанавливает функциональную опцию ИспользоватьИнтеграциюРекрутинговыхСайтовДляПользователя.
//
Процедура УстановитьФОИспользуетсяВзаимодействиеСРекрутинговымиСайтами() Экспорт
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.УстановитьФОИспользуетсяВзаимодействиеСРекрутинговымиСайтами();
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементаФормы(Элемент) Экспорт
	
	Элемент.Видимость = ЕстьДоступКРекрутинговымСайтам();
	
КонецПроцедуры

#Область ПубликацияВакансий

#Область ПоляВакансии

Функция ПоляВакансииHeadHunter(ОбновлениеПубликации = Ложь) Экспорт
	
	ТипЗначенияJSONСтрока = ТипЗначенияJSONСтрока();
	ТипЗначенияJSONНачалоМассива = ТипЗначенияJSONНачалоМассива();
	ТипЗначенияJSONНачалоОбъекта = ТипЗначенияJSONНачалоОбъекта();
	ТипЗначенияJSONЧисло = ТипЗначенияJSONЧисло();
	ТипЗначенияJSONБулево = ТипЗначенияJSONБулево();

	МассивПолей = Новый Массив;
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "name";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Название'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "description";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Описание (не менее 200 символов)'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Ключевые навыки
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "key_skills";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Список ключевых навыков (не более 30)'");
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_key_skills = СтруктураПоля();
	СтруктураПоля_key_skills.Путь = "name";
	СтруктураПоля_key_skills.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_key_skills.Описание = НСтр("ru = 'Название ключевого навыка'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_key_skills);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Специализации
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "specializations";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Список специализаций (не более 6)'");
	СтруктураПоля.Обязательное = Истина;
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_specializations = СтруктураПоля();
	СтруктураПоля_specializations.Путь = "id";
	СтруктураПоля_specializations.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_specializations.Описание = НСтр("ru = 'Специализация (не более 6)'");
	СтруктураПоля_specializations.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_specializations);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Регион публикации
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "area";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Регион публикации'");
	Если ОбновлениеПубликации Тогда
		СтруктураПоля.Использование = Ложь;
	КонецЕсли;
	СтруктураПоля.Обязательное = Истина;
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_area = СтруктураПоля();
	СтруктураПоля_area.Путь = "id";
	СтруктураПоля_area.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_area.Описание = НСтр("ru = 'Регион публикации'");
	СтруктураПоля_area.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_area);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Тип вакансии
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "type";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Тип вакансии'");
	Если ОбновлениеПубликации Тогда
		СтруктураПоля.Использование = Ложь;
	КонецЕсли;
	СтруктураПоля.Обязательное = Истина;
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_type = СтруктураПоля();
	СтруктураПоля_type.Путь = "id";
	СтруктураПоля_type.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_type.Описание = НСтр("ru = 'Тип вакансии'");
	СтруктураПоля_type.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_type);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Биллинговый тип вакансии
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "billing_type";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Биллинговый тип вакансии'");
	СтруктураПоля.Обязательное = Истина;
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_billing_type = СтруктураПоля();
	СтруктураПоля_billing_type.Путь = "id";
	СтруктураПоля_billing_type.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_billing_type.Описание = НСтр("ru = 'Биллинговый тип вакансии'");
	СтруктураПоля_billing_type.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_billing_type);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Внутренний код вакансии
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "code";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Внутренний код'");
	МассивПолей.Добавить(СтруктураПоля);
	
	// Департамент
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "department";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Департамент'");
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_department = СтруктураПоля();
	СтруктураПоля_department.Путь = "id";
	СтруктураПоля_department.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_department.Описание = НСтр("ru = 'Департамент'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_department);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Зарплата
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "salary";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Зарплата'");
	
	ПодчиненныеЭлементы = Новый Массив;
	
	СтруктураПоля_salary = СтруктураПоля();
	СтруктураПоля_salary.Путь = "from";
	СтруктураПоля_salary.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля_salary.Описание = НСтр("ru = 'Нижняя граница зарплаты'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_salary);
	
	СтруктураПоля_salary = СтруктураПоля();
	СтруктураПоля_salary.Путь = "to";
	СтруктураПоля_salary.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля_salary.Описание = НСтр("ru = 'Верхняя граница зарплаты'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_salary);
	
	СтруктураПоля_salary = СтруктураПоля();
	СтруктураПоля_salary.Путь = "currency";
	СтруктураПоля_salary.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля_salary.Описание = НСтр("ru = 'Валюта'");
	СтруктураПоля_salary.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_salary);
	
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Адрес
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "address";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Адрес'");
	
	ПодчиненныеЭлементы = Новый Массив;
	
	СтруктураПоля_address = СтруктураПоля();
	СтруктураПоля_address.Путь = "id";
	СтруктураПоля_address.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля_address.Описание = НСтр("ru = 'Адрес'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_address);
	
	СтруктураПоля_address = СтруктураПоля();
	СтруктураПоля_address.Путь = "show_metro_only";
	СтруктураПоля_address.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля_address.Описание = НСтр("ru = 'Показывать только метро'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_address);
	
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Опыт работы
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "experience";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Требуемый опыт работы'");
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_experience = СтруктураПоля();
	СтруктураПоля_experience.Путь = "id";
	СтруктураПоля_experience.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_experience.Описание = НСтр("ru = 'Требуемый опыт работы'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_experience);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// График работы
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "schedule";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'График работы'");
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_schedule = СтруктураПоля();
	СтруктураПоля_schedule.Путь = "id";
	СтруктураПоля_schedule.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_schedule.Описание = НСтр("ru = 'График работы'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_schedule);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Тип занятости
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "employment";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Тип занятости'");
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_employment = СтруктураПоля();
	СтруктураПоля_employment.Путь = "id";
	СтруктураПоля_employment.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_employment.Описание = НСтр("ru = 'Тип занятости'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_employment);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Контактная информация (для вакансий рабочих специальностей) 
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "contacts";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Контактная информация (для вакансий рабочих специальностей)'");
	
	ПодчиненныеЭлементы = Новый Массив;
	
	СтруктураПоля_contacts = СтруктураПоля();
	СтруктураПоля_contacts.Путь = "name";
	СтруктураПоля_contacts.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_contacts.Описание = НСтр("ru = 'Контактное лицо'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_contacts);
	
	СтруктураПоля_contacts = СтруктураПоля();
	СтруктураПоля_contacts.Путь = "email";
	СтруктураПоля_contacts.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_contacts.Описание = НСтр("ru = 'Электронная почта'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_contacts);
	
	СтруктураПоля_contacts = СтруктураПоля();
	СтруктураПоля_contacts.Путь = "phones";
	СтруктураПоля_contacts.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля_contacts.Описание = НСтр("ru = 'Список телефонов для связи'");
	
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_contacts);
	
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Тест
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "test";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Тест'");
	СтруктураПоля.Использование = Ложь;
	
	ПодчиненныеЭлементы = Новый Массив;
	
	СтруктураПоля_test = СтруктураПоля();
	СтруктураПоля_test.Путь = "id";
	СтруктураПоля_test.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_test.Описание = НСтр("ru = 'Тест'");
	СтруктураПоля_test.Использование = Ложь;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_test);
	
	СтруктураПоля_test = СтруктураПоля();
	СтруктураПоля_test.Путь = "required";
	СтруктураПоля_test.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля_test.Описание = НСтр("ru = 'Требовать прохождение теста для отклика на вакансию'");
	СтруктураПоля_test.Использование = Ложь;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_test);
	
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// URL отклика для прямых вакансий
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "response_url";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'URL отклика для рекламных вакансий'");
	МассивПолей.Добавить(СтруктураПоля);
	Если ОбновлениеПубликации Тогда
		СтруктураПоля.Использование = Ложь;
	КонецЕсли;
	
	// Название компании для анонимных вакансий
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "custom_employer_name";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Название компании (для анонимных вакансий)'");
	МассивПолей.Добавить(СтруктураПоля);
	
	// Контактное лицо
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "manager";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Контактное лицо'");
	
	ПодчиненныеЭлементы = Новый Массив;
	СтруктураПоля_manager = СтруктураПоля();
	СтруктураПоля_manager.Путь = "id";
	СтруктураПоля_manager.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля_manager.Описание = НСтр("ru = 'Контактное лицо'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_manager);
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Уведомлять о новых откликах
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "response_notifications";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Уведомлять о новых откликах'");
	МассивПолей.Добавить(СтруктураПоля);
	
	// Возможность переписки с кандидатами
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "allow_messages";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Возможность переписки с кандидатами'");
	МассивПолей.Добавить(СтруктураПоля);
	
	// Требовать сопроводительное письмо
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "response_letter_required";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Требовать сопроводительное письмо'");
	МассивПолей.Добавить(СтруктураПоля);
	
	// Вакансия доступна для соискателей с инвалидностью
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "accept_handicapped";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Вакансия доступна для соискателей с инвалидностью'");
	МассивПолей.Добавить(СтруктураПоля);
	
	Возврат МассивПолей;
	
КонецФункции

Функция ПоляВакансииRabota() Экспорт
	
	ТипЗначенияJSONСтрока = ТипЗначенияJSONСтрока();
	ТипЗначенияJSONНачалоМассива = ТипЗначенияJSONНачалоМассива();
	ТипЗначенияJSONНачалоОбъекта = ТипЗначенияJSONНачалоОбъекта();
	ТипЗначенияJSONЧисло = ТипЗначенияJSONЧисло();
	ТипЗначенияJSONБулево = ТипЗначенияJSONБулево();
	
	МассивПолей = Новый Массив;
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "name";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Название вакансии'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "isStudyCourse";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Это стажировка'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "offerTrades";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Рубрика размещения (не более 3)'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "salaryFrom"; // может быть не указано, если agreementSalary = true
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Зарплата от'");
	СтруктураПоля.СвязанноеПолеПуть = "agreementSalary";
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "salaryTo";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Зарплата до'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "agreementSalary"; // может быть не указано, если указано salaryFrom
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Зарплата по договоренности'");
	СтруктураПоля.СвязанноеПолеПуть = "salaryFrom";
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "noSalary"; // значение true допустимо при isStudyCourse = true
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Без оплаты (только для стажировок)'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "currency";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Валюта'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "isNonresident"; 
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Рассматриваются иногородние'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "region";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Регион показа'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "description";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Описание вакансии'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "operatingSchedule";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'График работы'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "operatingScheduleComment";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Комментарий к графику работы'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "experienceYearCount";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Опыт работы'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "education";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Образование'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "gender";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Предпочтительный пол'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "ageFrom";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Возраст от'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "ageTo";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Возраст до'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "contactFio";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Контактное лицо'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "contactEmail";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'E-mail'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "wantResponseByMail";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Получать отклики на e-mail'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "address";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Адреса работы'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "phones";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Телефоны'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "language";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Значение языков'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "additionalInformation";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Доп. информация'");
	
	ПодчиненныеЭлементы = Новый Массив;
	
	СтруктураПоля_auto = СтруктураПоля();
	СтруктураПоля_auto.Путь = "auto";
	СтруктураПоля_auto.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля_auto.Описание = НСтр("ru = 'Есть личный автомобиль'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_auto);
	
	СтруктураПоля_drivingLicense = СтруктураПоля();
	СтруктураПоля_drivingLicense.Путь = "drivingLicense";
	СтруктураПоля_drivingLicense.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля_drivingLicense.Описание = НСтр("ru = 'Категории водительских прав'");
	ПодчиненныеЭлементы.Добавить(СтруктураПоля_drivingLicense);
	
	СтруктураПоля.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля);
	
	Возврат МассивПолей;
	
КонецФункции

Функция ПоляВакансииSuperJob() Экспорт
	
	ТипЗначенияJSONСтрока = ТипЗначенияJSONСтрока();
	ТипЗначенияJSONНачалоМассива = ТипЗначенияJSONНачалоМассива();
	ТипЗначенияJSONНачалоОбъекта = ТипЗначенияJSONНачалоОбъекта();
	ТипЗначенияJSONЧисло = ТипЗначенияJSONЧисло();
	ТипЗначенияJSONБулево = ТипЗначенияJSONБулево();
	
	МассивПолей = Новый Массив;
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "profession";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Название'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "town";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Город'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "published";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Тип доступа'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "id_user";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Пользователь'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "catalogues";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Сфера деятельности (не более 5)'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "code";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Код вакансии'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "external_url";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'URL внешнего сайта'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "work";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Должностные обязанности'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "candidat";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Требования к кандидату'");
	МассивПолей.Добавить(СтруктураПоля);

	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "compensation";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Условия работы'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "type_of_work";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Тип занятости'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "place_of_work";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Место работы'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "education";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Образование'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "experience";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Опыт работы'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "languages";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Наименование и уровень владения иностранными языками'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "contact";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Имя контактного лица'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "email";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Адрес электронной почты'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "url";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Адрес сайта компании'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "phones";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Номер телефона'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "driving_licence";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Наличие водительских прав'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "payment_from";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Сумма оклада от'");
	МассивПолей.Добавить(СтруктураПоля);

	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "payment_to";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Сумма оклада до'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "firm_name";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Название компании'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "firm_activity";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Описание деятельности компании'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "address";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Адрес компании'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "anonymous";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Анонимная вакансия'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "refresh_vac";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Обновлять вакансию автоматически'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "extend_vac";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Продлевать вакансию автоматически'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "resumesubscription_status";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Включить подписку на резюме'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "resumesubscription_keywords";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Ключевые слова подписки на резюме'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "resumesubscription_kwc";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Как искать слова в подписке на резюме'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "resumesubscription_rws";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Где искать слова в подписке на резюме'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "moveable";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Рассматриваются соискатели из других городов'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "gender";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Пол'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "age_from";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Возраст от'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "age_to";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Возраст до'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "maritalstatus";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Семейное положение'");
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "children";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Наличие детей'");
	МассивПолей.Добавить(СтруктураПоля);
	
	Возврат МассивПолей;
	
КонецФункции

Функция ПоляВакансииZarplata() Экспорт
	
	ТипЗначенияJSONСтрока = ТипЗначенияJSONСтрока();
	ТипЗначенияJSONНачалоМассива = ТипЗначенияJSONНачалоМассива();
	ТипЗначенияJSONНачалоОбъекта = ТипЗначенияJSONНачалоОбъекта();
	ТипЗначенияJSONЧисло = ТипЗначенияJSONЧисло();
	ТипЗначенияJSONБулево = ТипЗначенияJSONБулево();

	МассивПолей = Новый Массив;
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "header";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Название (не более 100 символов)'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);

	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "description";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Описание (не менее 20 символов)'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Рубрики
	СтруктураПоля_rubrics = СтруктураПоля();
	СтруктураПоля_rubrics.Путь = "rubrics";
	СтруктураПоля_rubrics.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля_rubrics.Описание = НСтр("ru = 'Рубрики (не более 10)'");
	СтруктураПоля_rubrics.Обязательное = Истина;
	
	ПодчиненныеЭлементы = Новый Массив;
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "id";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Специальности'");
	СтруктураПоля.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля);
	
	СтруктураПоля_rubrics.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля_rubrics);

	// Зарплата
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "payment_type_alias";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Тип оплаты'");
	СтруктураПоля.Обязательное = Истина;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "currency";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Валюта'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);

	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "salary_min";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Минимальная зарплата'");
	МассивПолей.Добавить(СтруктураПоля);

	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "salary_max";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONЧисло;
	СтруктураПоля.Описание = НСтр("ru = 'Максимальная зарплата'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);

	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "is_salary_gross";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Зарплата указана до вычета НДФЛ'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);
	
	// Контактная информация
	СтруктураПоля_contact = СтруктураПоля();
	СтруктураПоля_contact.Путь = "contact";
	СтруктураПоля_contact.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля_contact.Описание = НСтр("ru = 'Контактная информация'");
	
	ПодчиненныеЭлементы = Новый Массив;
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "name";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'ФИО'");
	СтруктураПоля.Обязательное = Ложь;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "email";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Контактный E-Mail'");
	СтруктураПоля.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "skype";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Skype-логин'");
	СтруктураПоля.Обязательное = Ложь;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "url";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONСтрока;
	СтруктураПоля.Описание = НСтр("ru = 'Веб-сайт'");
	СтруктураПоля.Обязательное = Ложь;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "phones";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоМассива;
	СтруктураПоля.Описание = НСтр("ru = 'Телефоны для контактов вакансии'");
	СтруктураПоля.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "city";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Город публикации'");
	СтруктураПоля.Обязательное = Истина;
	ПодчиненныеЭлементы.Добавить(СтруктураПоля);
	
	СтруктураПоля_contact.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
	МассивПолей.Добавить(СтруктураПоля_contact);

	// Прочее
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "working_type";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Тип занятости'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "schedule";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'График работы'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "education";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Требуемый уровень образования'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "experience_length";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONНачалоОбъекта;
	СтруктураПоля.Описание = НСтр("ru = 'Требуемый опыт работы'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "is_available_for_invalids";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Доступна для инвалидов'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "is_available_for_students";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Доступна для студентов'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);
	
	СтруктураПоля = СтруктураПоля();
	СтруктураПоля.Путь = "is_available_for_pensioners";
	СтруктураПоля.ТипJSON = ТипЗначенияJSONБулево;
	СтруктураПоля.Описание = НСтр("ru = 'Доступна для пенсионеров'");
	СтруктураПоля.Обязательное = Ложь;
	МассивПолей.Добавить(СтруктураПоля);

	Возврат МассивПолей;

КонецФункции

#КонецОбласти

#Область ДействияСВакансией

Функция НовыйРезультатДействияСВакансией(ИдентификаторВакансии = "") Экспорт
	
	Возврат Новый Структура("ИдентификаторВакансии,Успешно,ТекстОшибки", ИдентификаторВакансии, Истина, "");
	
КонецФункции

Функция ОпубликоватьВакансию(Вакансия, Сайт, Дерево) Экспорт
	
	РезультатДействия = ПубликацияВакансии(Сайт, Дерево);
	ИдентификаторВакансии = РезультатДействия.ИдентификаторВакансии;
	
	Если ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		
		ИдентификаторВакансии = Формат(ИдентификаторВакансии, "ЧГ=0");
		
		Если Сайт = HeadHunter() Тогда
			АдресПубликации = АдресВакансииHeadHunter(ИдентификаторВакансии);
		ИначеЕсли Сайт = Rabota() Тогда
			АдресПубликации = АдресВакансииRabota(ИдентификаторВакансии);
		ИначеЕсли Сайт = SuperJob() Тогда
			АдресПубликации = АдресВакансииSuperJob(ИдентификаторВакансии);
		ИначеЕсли Сайт = Zarplata() Тогда
			АдресПубликации = АдресВакансииZarplata(ИдентификаторВакансии);
		КонецЕсли;
		
		ЗаписьВРегистрИнформацииОПубликации(Вакансия, Сайт, ИдентификаторВакансии, АдресПубликации);
		
		ЗаписьВРегистрДанныеПубликации(Вакансия, Сайт, Дерево);
		
	КонецЕсли;
	
	Возврат РезультатДействия;
	
КонецФункции

Функция ПовторноОпубликоватьВакансию(Вакансия, Сайт, Дерево, ИдентификаторВакансии = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	КонецЕсли;
	
	РезультатДействия = ПовторнаяПубликацияВакансии(ИдентификаторВакансии, Сайт, Дерево, Вакансия);
	
	Если РезультатДействия.Успешно Тогда
		
		Если Сайт = Rabota() Тогда
			
			ДатаСеанса = ТекущаяДатаСеанса();
			
			СвойстваПубликации = НовыеСвойстваПубликацииВакансии();
			СвойстваПубликации.Опубликована = Истина;
			СвойстваПубликации.ДатаПубликации = ДатаСеанса;
			СвойстваПубликации.ДатаОбновления = ДатаСеанса;
			
			ЗаписьВРегистрИнформацииОПубликации(Вакансия, Сайт, , , СвойстваПубликации);
			
		ИначеЕсли Сайт = SuperJob() Тогда
			
			ЗаписьВРегистрДанныеПубликации(Вакансия, Сайт, Дерево);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатДействия;
	
КонецФункции

Функция ОбновитьПубликациюВакансии(Вакансия, Сайт, Дерево, ИдентификаторВакансии = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	КонецЕсли;
	
	РезультатДействия = ОбновлениеПубликацииВакансии(ИдентификаторВакансии, Сайт, Дерево);
	
	Если РезультатДействия.Успешно Тогда
		
		ЗаписьВРегистрИнформацииОПубликации(Вакансия, Сайт);
		ЗаписьВРегистрДанныеПубликации(Вакансия, Сайт, Дерево);
		
	КонецЕсли;
	
	Возврат РезультатДействия;
	
КонецФункции

Функция СнятьПубликациюВакансии(Вакансия, Сайт, ИдентификаторВакансии = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	КонецЕсли;
	
	РезультатДействия = СнятиеПубликацииВакансии(ИдентификаторВакансии, Сайт);
	
	Если РезультатДействия.Успешно Тогда
		ОтметитьПубликациюВакансииСнятой(Вакансия, Сайт);
	КонецЕсли;
	
	Возврат РезультатДействия;
	
КонецФункции

Функция ОтметитьПубликациюВакансииСнятой(Вакансия, Сайт) Экспорт
	
	СвойстваПубликации = НовыеСвойстваПубликацииВакансии();
	СвойстваПубликации.ДатаСнятияСПубликации = ТекущаяДатаСеанса();
	
	ЗаписьВРегистрИнформацииОПубликации(Вакансия, Сайт, , , СвойстваПубликации);
	
КонецФункции

Процедура ЗаписьВРегистрИнформацииОПубликации(Вакансия, Сайт, ИдентификаторВакансии = Неопределено, Адрес = Неопределено, СвойстваПубликации = Неопределено) Экспорт
	
	ДатаСеанса = ТекущаяДатаСеанса();
	МенеджерЗаписи = РегистрыСведений.ПубликацияВакансий.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Вакансия = Вакансия;
	МенеджерЗаписи.МестоПубликации = Сайт;
	
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() 
		Или ЗначениеЗаполнено(Адрес) Тогда
		
		МенеджерЗаписи.АдресПубликации = Адрес;
		МенеджерЗаписи.ДатаПубликации = ДатаСеанса;
		
		Если ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
			МенеджерЗаписи.ИдентификаторВакансии = ИдентификаторВакансии;
		КонецЕсли;
		
		Если Не МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.Вакансия = Вакансия;
			МенеджерЗаписи.МестоПубликации = Сайт;
			
		Иначе
			МенеджерЗаписи.ДатаСнятияСПубликации = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваПубликации) Тогда
		
		Если ЗначениеЗаполнено(СвойстваПубликации.ДатаПубликации) Тогда
			МенеджерЗаписи.ДатаПубликации = СвойстваПубликации.ДатаПубликации;
		КонецЕсли;
		Если ЗначениеЗаполнено(СвойстваПубликации.ДатаОбновления) Тогда
			МенеджерЗаписи.ДатаОбновления = СвойстваПубликации.ДатаОбновления;
		КонецЕсли;
		
		МенеджерЗаписи.ДатаСнятияСПубликации = СвойстваПубликации.ДатаСнятияСПубликации;
		
	Иначе
		МенеджерЗаписи.ДатаОбновления = ДатаСеанса;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция НовыеСвойстваПубликацииВакансии() Экспорт
	
	СвойстваПубликации = Новый Структура(
		"Опубликована,
		|ДатаПубликации,
		|ДатаОбновления,
		|ДатаСнятияСПубликации", 
		Ложь);
	
	Возврат СвойстваПубликации;
	
КонецФункции

Функция СвойстваПубликацииВакансии(Вакансия, Сайт) Экспорт
	
	СвойстваПубликации = НовыеСвойстваПубликацииВакансии();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликацияВакансий.ДатаПубликации КАК ДатаПубликации,
	|	ПубликацияВакансий.ДатаОбновления КАК ДатаОбновления,
	|	ПубликацияВакансий.ДатаСнятияСПубликации КАК ДатаСнятияСПубликации,
	|	ВЫБОР
	|		КОГДА ПубликацияВакансий.ДатаПубликации <> &ПустаяДата
	|				И ПубликацияВакансий.ДатаСнятияСПубликации = &ПустаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Опубликована
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|ГДЕ
	|	ПубликацияВакансий.Вакансия = &Вакансия
	|	И ПубликацияВакансий.МестоПубликации = &Сайт";
	
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("Сайт", Сайт);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СвойстваПубликации, Выборка);
	КонецЕсли;
	
	Возврат СвойстваПубликации;
	
КонецФункции

Функция СайтыСПубликациейВакансии(Вакансия, ПроверяемыеСайты = Неопределено, ТолькоАктивные = Ложь) Экспорт
	
	СайтыСПубликациями = СайтыСПубликациямиВакансий(Вакансия, ПроверяемыеСайты, ТолькоАктивные);
	
	Если СайтыСПубликациями.Количество() > 0 Тогда
		Возврат СайтыСПубликациями.Получить(Вакансия);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция СайтыСПубликациямиВакансий(Знач Вакансии, ПроверяемыеСайты = Неопределено, ТолькоАктивные = Ложь) Экспорт
	
	СайтыСПубликациямиВакансий = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Вакансии) Тогда
		Возврат СайтыСПубликациямиВакансий;
	КонецЕсли;
	
	Если ТипЗнч(Вакансии) <> Тип("Массив") Тогда
		Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вакансии);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПубликацияВакансий.Вакансия КАК Вакансия,
	|	ПубликацияВакансий.МестоПубликации КАК Сайт
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|ГДЕ
	|	ПубликацияВакансий.Вакансия В(&Вакансия)
	|	И &УсловиеПоСайтам
	|	И &УсловиеПоПубликация
	|ИТОГИ ПО
	|	Вакансия";
	
	Если ЗначениеЗаполнено(ПроверяемыеСайты) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСайтам", "ПубликацияВакансий.МестоПубликации В (&Сайты)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСайтам", "ИСТИНА");
	КонецЕсли;
	
	Если ТолькоАктивные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПубликация", "ПубликацияВакансий.ДатаСнятияСПубликации = ДАТАВРЕМЯ(1, 1, 1)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПубликация", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Вакансия", Вакансии);
	Запрос.УстановитьПараметр("Сайты", ПроверяемыеСайты);
	
	ВыборкаВакансий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВакансий.Следующий() Цикл
		
		МестаПубликации = Новый Массив;
		ВыборкаМестПубликации = ВыборкаВакансий.Выбрать();
		
		Пока ВыборкаМестПубликации.Следующий() Цикл
			МестаПубликации.Добавить(ВыборкаМестПубликации.Сайт);
		КонецЦикла;
		
		СайтыСПубликациямиВакансий.Вставить(ВыборкаВакансий.Вакансия, МестаПубликации);
		
	КонецЦикла;
	
	Возврат СайтыСПубликациямиВакансий;
	
КонецФункции

Функция СинхронизироватьСвойстваПубликацииВакансии(Вакансия, Сайт, ИдентификаторВакансии = Неопределено) Экспорт
	
	Успешно = Истина;
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	КонецЕсли;
	
	ТекущиеСвойства = СвойстваПубликацииВакансии(Вакансия, Сайт);
	СвойстваНаСайте = СвойстваПубликацииВакансииНаСайте(Сайт, ИдентификаторВакансии);
	
	Если ЗначениеЗаполнено(СвойстваНаСайте) Тогда
		
		Если ТекущиеСвойства.Опубликована <> СвойстваНаСайте.Опубликована Тогда
			ЗаписьВРегистрИнформацииОПубликации(Вакансия, Сайт , , , СвойстваНаСайте);
		КонецЕсли;
		
	Иначе
		Успешно = Ложь;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ЗагрузитьКлассификаторы(Сайт) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		ЗагрузитьКлассификаторыHeadHunter();
	ИначеЕсли Сайт = Rabota() Тогда
		ЗагрузитьКлассификаторыRabota();
	ИначеЕсли Сайт = SuperJob() Тогда
		ЗагрузитьКлассификаторыSuperJob();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДерево(Классификатор, Дерево, ИспользуемыеСайты = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(Классификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Классификатор = "specializations" Тогда
		ЗаполнитьДеревоСпециализацийHeadHunter(Дерево);
	ИначеЕсли Классификатор = "areas" Тогда
		ЗаполнитьДеревоРегионовHeadHunter(Дерево);
	ИначеЕсли Классификатор = "offer_trades" Тогда
		ЗаполнитьДеревоРубрикRabota(Дерево);
	ИначеЕсли Классификатор = "regions" Тогда
		ЗаполнитьДеревоРегионовRabota(Дерево);
	ИначеЕсли Классификатор = "towns" Тогда
		ЗаполнитьДеревоРегионовSuperJob(Дерево);
	ИначеЕсли Классификатор = "catalogues" Тогда
		ЗаполнитьДеревоСпециализацийSuperJob(Дерево);
	ИначеЕсли Классификатор = "areas_towns" Тогда
		ЗаполнитьОбъединенноеДеревоРегионов(Дерево, ИспользуемыеСайты);
	ИначеЕсли Классификатор = "rubrics" Тогда
		ЗаполнитьДеревоРубрикZarplata(Дерево);
	ИначеЕсли Классификатор = "geo" Тогда
		ЗаполнитьДеревоРегионовZarplata(Дерево);
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураМаркеров(Сайт, КодАвторизации, Обновление = Ложь, Знач ИмяПользователя = Неопределено, Знач Пароль = Неопределено) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		
		ИдентификаторПриложения = ЗарплатаКадрыРасширенный.ИдентификацияПриложенияДляHeadHunter();
		Структура_token_uri = ОбщегоНазначенияКлиентСервер.СтруктураURI(ИдентификаторПриложения.token_uri);
		АдресАутентификации = Структура_token_uri.Хост;
		РесурсНаСервере = Структура_token_uri.ПутьНаСервере;
		Если Обновление Тогда
			СтрокаЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"grant_type=refresh_token&refresh_token=%1",
						КодАвторизации);
		Иначе
			СтрокаЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"grant_type=authorization_code&client_id=%1&client_secret=%2&redirect_uri=%3&code=%4",
						ИдентификаторПриложения.client_id,
						ИдентификаторПриложения.client_secret,
						ИдентификаторПриложения.redirect_uri,
						КодАвторизации); 
		КонецЕсли;
			
		// Создаем соединение.
		Соединение = НовоеHTTPСоединение(АдресАутентификации, Истина);
		
		// Формируем общие заголовки.
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
		ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
		
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
		
		// Отправляем POST запрос.
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		// Разбираем ответ сервера.
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьОбОшибкеАвторизации(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			Возврат Неопределено;
			
		Иначе
			
			СтруктураМаркеров = ПарсерJSON(ТекущаяСтрока);
			
			Если ЗначениеЗаполнено(СтруктураМаркеров) Тогда
				СохранитьНастройкиАвторизации(Сайт, СтруктураМаркеров, ИмяПользователя, Пароль);
				Возврат СтруктураМаркеров;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Сайт = Zarplata() Тогда

		ИдентификаторПриложения = ЗарплатаКадрыРасширенный.ИдентификацияПриложенияДляZarplata();
		Структура_token_uri = ОбщегоНазначенияКлиентСервер.СтруктураURI(ИдентификаторПриложения.token_uri);
		АдресАутентификации = Структура_token_uri.Хост;
		РесурсНаСервере = Структура_token_uri.ПутьНаСервере;
		Если Обновление Тогда
			СтрокаЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"grant_type=refresh_token&client_id=%1&client_secret=%2&refresh_token=%3&scope=basic",
						ИдентификаторПриложения.client_id,
						ИдентификаторПриложения.client_secret,
						КодАвторизации);
		Иначе
			СтрокаЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"grant_type=authorization_code&client_id=%1&client_secret=%2&redirect_uri=%3&code=%4&scope=basic",
						ИдентификаторПриложения.client_id,
						ИдентификаторПриложения.client_secret,
						ИдентификаторПриложения.redirect_uri,
						КодАвторизации); 
		КонецЕсли;
			
		// Создаем соединение.
		Соединение = НовоеHTTPСоединение(АдресАутентификации, Истина);
		
		// Формируем общие заголовки.
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
		ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
		
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
		
		// Отправляем POST запрос.
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		// Разбираем ответ сервера.
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьОбОшибкеАвторизации(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			Возврат Неопределено;
			
		Иначе
			
			СтруктураМаркеров = ПарсерJSON(ТекущаяСтрока);
			
			Если ЗначениеЗаполнено(СтруктураМаркеров) Тогда
				СохранитьНастройкиАвторизации(Сайт, СтруктураМаркеров, ИмяПользователя, Пароль);
				Если Не Обновление Тогда
					ВпервыеЗагрузитьКлассификаторы(Сайт);
				КонецЕсли;
				Возврат СтруктураМаркеров;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Сайт = Rabota() Тогда
		
		УточнитьИмяПользователяИПарольНаСайт(Сайт, ИмяПользователя, Пароль);
		
		Соединение = HTTPСоединениеRabota();
		Запрос = HTTPЗапросRabota(СтрШаблон("login?mail=%1", ИмяПользователя));
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьОбОшибкеАвторизации(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			Возврат Неопределено;
			
		Иначе
			
			Ключ = ПарсерJSON(ТекущаяСтрока).key;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("mail", ИмяПользователя);
			ПараметрыЗапроса.Вставить("key", Ключ);
			ПараметрыЗапроса.Вставить("raw_password", Пароль);
			
			Запрос = HTTPЗапросRabota("login");
			Запрос.УстановитьТелоИзСтроки(ЗаписьJSON(ПараметрыЗапроса));
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
			Если Ответ.КодСостояния <> 200 Тогда
				
				СообщитьОбОшибкеАвторизации(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
				Возврат Неопределено;
				
			Иначе
				
				СтруктураМаркеров = ПарсерJSON(ТекущаяСтрока);
				
				Если ЗначениеЗаполнено(СтруктураМаркеров) Тогда
					СохранитьНастройкиАвторизации(Сайт, СтруктураМаркеров, ИмяПользователя, Пароль);
					Возврат СтруктураМаркеров;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Сайт = SuperJob() Тогда
		
		ID_Программы		= ID_ПрограммыSuperJob();
		Пароль_Программы	= ПарольПрограммыSuperJob();
		
		УточнитьИмяПользователяИПарольНаСайт(Сайт, ИмяПользователя, Пароль);
		
		Если Обновление Тогда
			
			СтрокаЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"/2.0/oauth2/refresh_token/?refresh_token=%1&client_id=%2&client_secret=%3",
						КодАвторизации,
						ID_Программы, 
						Пароль_Программы);
		Иначе
			СтрокаЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"/2.0/oauth2/password/?login=%1&password=%2&client_id=%3&client_secret=%4",
						ИмяПользователя, 
						Пароль, 
						ID_Программы, 
						Пароль_Программы);
						
		КонецЕсли;
		
		Соединение = HTTPСоединениеSuperJob();
		
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("X-User-Type", " hr_user");
		
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, ЗаголовокHTTP);
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьОбОшибкеАвторизации(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			Возврат Неопределено;
			
		Иначе
			
			СтруктураМаркеров = ПарсерJSON(ТекущаяСтрока);
			
			Если ЗначениеЗаполнено(СтруктураМаркеров) Тогда
				СохранитьНастройкиАвторизации(Сайт, СтруктураМаркеров, ИмяПользователя, Пароль);
				Возврат СтруктураМаркеров;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция МаркерДоступаАктивен(Сайт, ИмяПользователя) Экспорт
	
	МаркерАктивен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь КАК Пользователь,
	|	НастройкиИнтеграцииРекрутинговыхСайтов.МаркерДоступа КАК МаркерДоступа,
	|	НастройкиИнтеграцииРекрутинговыхСайтов.МаркерОбновления КАК МаркерОбновления,
	|	НастройкиИнтеграцииРекрутинговыхСайтов.ДатаОкончанияДействияМаркераДоступа КАК ДатаОкончанияДействияМаркераДоступа,
	|	НастройкиИнтеграцииРекрутинговыхСайтов.ИмяПользователя КАК ИмяПользователя
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииРекрутинговыхСайтов КАК НастройкиИнтеграцииРекрутинговыхСайтов
	|ГДЕ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь = &Пользователь
	|	И НастройкиИнтеграцииРекрутинговыхСайтов.РекрутинговыйСайт = &РекрутинговыйСайт
	|	И НастройкиИнтеграцииРекрутинговыхСайтов.Использовать
	|	И (НастройкиИнтеграцииРекрутинговыхСайтов.ИмяПользователя = &ИмяПользователя
	|			ИЛИ &НеИспользоватьОтборПоИмениПользователя)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("РекрутинговыйСайт", Сайт);
	Запрос.УстановитьПараметр("ИмяПользователя", ИмяПользователя);
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоИмениПользователя", НЕ ЗначениеЗаполнено(ИмяПользователя));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		МаркерДействителен = ЗначениеЗаполнено(Выборка.МаркерДоступа) 
			И Выборка.ДатаОкончанияДействияМаркераДоступа > ТекущаяДатаСеанса();
			
		Если МаркерДействителен Тогда
			
			МаркерАктивен = ПроверитьВалидностьМаркера(Сайт, Выборка.МаркерДоступа);
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.МаркерОбновления) Тогда
			
			СтруктураМаркеров = СтруктураМаркеров(Сайт, Выборка.МаркерОбновления, Истина);
			МаркерАктивен = СтруктураМаркеров <> Неопределено И ЗначениеЗаполнено(СтруктураМаркеров.access_token);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МаркерАктивен;
	
КонецФункции

Функция ВакансииССайта(Сайт) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		Возврат ВакансииССайтаHeadHunter();
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат ВакансииССайтаRabota();
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат ВакансииССайтаSuperJob();
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат ВакансииССайтаZarplata();
	КонецЕсли;
	
КонецФункции

Функция СтруктураДанныхКандидатаССайта(Сайт, ИдентификаторРезюме) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		Возврат СтруктураДанныхКандидатаССайтаHeadHunter(ИдентификаторРезюме);
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат СтруктураДанныхКандидатаССайтаRabota(ИдентификаторРезюме);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат СтруктураДанныхКандидатаССайтаSuperJob(ИдентификаторРезюме);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат СтруктураДанныхКандидатаССайтаZarplata(ИдентификаторРезюме);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьПоискКандидатов(Параметры, АдресРезультата) Экспорт
	
	СтруктураОтбора = Параметры.СтруктураОтбора;
	ИспользуемыеСайты = Параметры.ИспользуемыеСайты;
	ТаблицаНайденныхКандидатов = Параметры.ТаблицаНайденныхКандидатов;
	
	Если ИспользуемыеСайты = Неопределено Тогда
		ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Если Параметры.НомерПорцииHeadHunter = 0 
		И Параметры.НомерПорцииRabota = 0
		И Параметры.НомерПорцииSuperJob = 0
		И Параметры.НомерПорцииZarplata = 0 Тогда
		ТаблицаНайденныхКандидатов.Очистить();
		ПолеСортировки = 0;
	Иначе
		ПолеСортировки = ТаблицаНайденныхКандидатов[ТаблицаНайденныхКандидатов.Количество() - 1].ПолеСортировки + 1;
	КонецЕсли;
	
	ТаблицаНайденныхКандидатовHeadHunter = ТаблицаНайденныхКандидатов.СкопироватьКолонки();
	ТаблицаНайденныхКандидатовRabota = ТаблицаНайденныхКандидатов.СкопироватьКолонки();
	ТаблицаНайденныхКандидатовSuperJob = ТаблицаНайденныхКандидатов.СкопироватьКолонки();
	ТаблицаНайденныхКандидатовZarplata = ТаблицаНайденныхКандидатов.СкопироватьКолонки();
	
	Для Каждого Сайт Из ИспользуемыеСайты Цикл
			
		Если Сайт = HeadHunter() Тогда
			
			ВсегоКандидатовHeadHunter = Параметры.ВсегоКандидатовHeadHunter;
			Если Параметры.ВсегоКандидатовHeadHunter > 0 
				И Параметры.ВсегоКандидатовHeadHunter = Параметры.ЗагруженоКандидатовHeadHunter Тогда
				Продолжить;
			КонецЕсли;
			
			НайтиКандидатовHeadHunter(СтруктураОтбора, ТаблицаНайденныхКандидатовHeadHunter, Параметры.НомерПорцииHeadHunter, ПолеСортировки, ВсегоКандидатовHeadHunter);
			
		ИначеЕсли Сайт = Rabota() Тогда
			
			ВсегоКандидатовRabota = Параметры.ВсегоКандидатовRabota;
			Если Параметры.ВсегоКандидатовRabota > 0 
				И Параметры.ВсегоКандидатовRabota = Параметры.ЗагруженоКандидатовRabota Тогда
				Продолжить;
			КонецЕсли;
			
			НайтиКандидатовRabota(СтруктураОтбора, ТаблицаНайденныхКандидатовRabota, Параметры.НомерПорцииRabota, ПолеСортировки, ВсегоКандидатовRabota);
			
		ИначеЕсли Сайт = SuperJob() Тогда
			
			ВсегоКандидатовSuperJob = Параметры.ВсегоКандидатовSuperJob;
			Если Параметры.ВсегоКандидатовSuperJob > 0 
				И Параметры.ВсегоКандидатовSuperJob = Параметры.ЗагруженоКандидатовSuperJob Тогда
				Продолжить;
			КонецЕсли;
			
			НайтиКандидатовSuperJob(СтруктураОтбора, ТаблицаНайденныхКандидатовSuperJob, Параметры.НомерПорцииSuperJob, ПолеСортировки, ВсегоКандидатовSuperJob);
			
		ИначеЕсли Сайт = Zarplata() Тогда
			
			ВсегоКандидатовZarplata = Параметры.ВсегоКандидатовZarplata;
			Если Параметры.ВсегоКандидатовZarplata > 0 
				И Параметры.ВсегоКандидатовZarplata = Параметры.ЗагруженоКандидатовZarplata Тогда
				Продолжить;
			КонецЕсли;
			
			НайтиКандидатовZarplata(СтруктураОтбора, ТаблицаНайденныхКандидатовZarplata, Параметры.НомерПорцииZarplata, ПолеСортировки, ВсегоКандидатовZarplata);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаНайденныхКандидатовHeadHunter.Количество() > 0
		Или ТаблицаНайденныхКандидатовRabota.Количество() > 0
		Или ТаблицаНайденныхКандидатовSuperJob.Количество() > 0
		Или ТаблицаНайденныхКандидатовZarplata.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицыHeadHunter Из ТаблицаНайденныхКандидатовHeadHunter Цикл
			
			НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыHeadHunter);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыRabota Из ТаблицаНайденныхКандидатовRabota Цикл
			
			НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыRabota);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыSuperJob Из ТаблицаНайденныхКандидатовSuperJob Цикл
			
			НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыSuperJob);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыZarplata Из ТаблицаНайденныхКандидатовZarplata Цикл
			
			НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыZarplata);
			
		КонецЦикла;
		
		ТаблицаНайденныхКандидатов.Сортировать("ПолеСортировки");
		
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаНайденныхКандидатов", ТаблицаНайденныхКандидатов);
		Результат.Вставить("ВсегоКандидатовHeadHunter", ВсегоКандидатовHeadHunter);
		Результат.Вставить("ВсегоКандидатовRabota", ВсегоКандидатовRabota);
		Результат.Вставить("ВсегоКандидатовSuperJob", ВсегоКандидатовSuperJob);
		Результат.Вставить("ВсегоКандидатовZarplata", ВсегоКандидатовZarplata);
		Результат.Вставить("НомерПорцииHeadHunter", ?(ТаблицаНайденныхКандидатовHeadHunter.Количество() > 0, Параметры.НомерПорцииHeadHunter + 1, Параметры.НомерПорцииHeadHunter));
		Результат.Вставить("НомерПорцииRabota", ?(ТаблицаНайденныхКандидатовRabota.Количество() > 0, Параметры.НомерПорцииRabota + 1, Параметры.НомерПорцииRabota));
		Результат.Вставить("НомерПорцииSuperJob", ?(ТаблицаНайденныхКандидатовSuperJob.Количество() > 0, Параметры.НомерПорцииSuperJob + 1, Параметры.НомерПорцииSuperJob));
		Результат.Вставить("НомерПорцииZarplata", ?(ТаблицаНайденныхКандидатовZarplata.Количество() > 0, Параметры.НомерПорцииZarplata + 1, Параметры.НомерПорцииZarplata));
		Результат.Вставить("ЗагруженоКандидатовHeadHunter", ТаблицаНайденныхКандидатовHeadHunter.Количество());
		Результат.Вставить("ЗагруженоКандидатовRabota", ТаблицаНайденныхКандидатовRabota.Количество());
		Результат.Вставить("ЗагруженоКандидатовSuperJob", ТаблицаНайденныхКандидатовSuperJob.Количество());
		Результат.Вставить("ЗагруженоКандидатовZarplata", ТаблицаНайденныхКандидатовZarplata.Количество());
		
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	Иначе
		ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтклики(Вакансия, Сайт) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		ПолучитьОткликиHeadHunter(Вакансия);
	ИначеЕсли Сайт = Rabota() Тогда
		ПолучитьОткликиRabota(Вакансия);
	ИначеЕсли Сайт = SuperJob() Тогда
		ПолучитьОткликиSuperJob(Вакансия);
	ИначеЕсли Сайт = Zarplata() Тогда
		ПолучитьОткликиZarplata(Вакансия);
	КонецЕсли;
	
КонецПроцедуры

Функция СписокЗначенийПоМассивуСтруктур(МассивСтруктур) Экспорт
	
	Список = Новый СписокЗначений;
	
	Для Каждого ЭлементМассива Из МассивСтруктур Цикл
		Список.Добавить(ЭлементМассива.Значение, ЭлементМассива.Представление);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция АвторизацияRabota(ИмяПользователя = Неопределено, Пароль = Неопределено) Экспорт
	
	Возврат СтруктураМаркеров(Rabota(), "", Ложь, ИмяПользователя, Пароль) <> Неопределено;
	
КонецФункции

Функция АвторизацияSuperJob(ИмяПользователя = Неопределено, Пароль = Неопределено) Экспорт
	
	Возврат СтруктураМаркеров(SuperJob(), "", Ложь, ИмяПользователя, Пароль) <> Неопределено;
	
КонецФункции

Функция СписокВыбораПоКлассификатору(Сайт, Путь) Экспорт
	
	Если Сайт = HeadHunter() Тогда
		Возврат СписокВыбораПоКлассификаторуHeadHunter(Путь);
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат СписокВыбораПоКлассификаторуRabota(Путь);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат СписокВыбораПоКлассификаторуSuperJob(Путь);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат СписокВыбораПоКлассификаторуZarplata(Путь);
	КонецЕсли;
	
КонецФункции

Процедура ЗаписьВРегистрДанныеПубликацииВакансий(Вакансии, Вакансия, Сайт, ИдентификаторВакансии) Экспорт
	
	СтруктураВакансииССайта = Неопределено;
	
	Для Каждого ЭлементМассиваВакансий Из Вакансии Цикл
		
		Если Сайт = HeadHunter() Тогда
			Если Формат(ЭлементМассиваВакансий.Получить("id"), "ЧГ=0") = ИдентификаторВакансии Тогда
				СтруктураВакансииССайта = ЭлементМассиваВакансий;
				Прервать;
			КонецЕсли;
		Иначе
			Если Формат(ЭлементМассиваВакансий.id, "ЧГ=0") = ИдентификаторВакансии Тогда
				СтруктураВакансииССайта = ЭлементМассиваВакансий;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураВакансииССайта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = Новый ДеревоЗначений;
	
	Дерево.Колонки.Добавить("Показатель");
	Дерево.Колонки.Добавить("ПубликацияВакансии");
	Дерево.Колонки.Добавить("Путь");
	
	Если Сайт = HeadHunter() Тогда
		ЗаполнитьДеревоВакансииHeadHunter(Вакансия, Дерево, СтруктураВакансииССайта);
	ИначеЕсли Сайт = Rabota() Тогда
		ЗаполнитьДеревоВакансииRabota(Вакансия, Дерево, СтруктураВакансииССайта);
	ИначеЕсли Сайт = SuperJob() Тогда
		ЗаполнитьДеревоВакансииSuperJob(Вакансия, Дерево, СтруктураВакансииССайта);
	ИначеЕсли Сайт = Zarplata() Тогда
		ЗаполнитьДеревоВакансииZarplata(Вакансия, Дерево, СтруктураВакансииССайта);
	КонецЕсли;
	
	ЗаписьВРегистрДанныеПубликации(Вакансия, Сайт, Дерево);
	
КонецПроцедуры

Функция ИспользуемыеСайты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.РекрутинговыйСайт КАК РекрутинговыйСайт,
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь,
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Использовать
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииРекрутинговыхСайтов КАК НастройкиИнтеграцииРекрутинговыхСайтов
	|ГДЕ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь = &Пользователь
	|	И НастройкиИнтеграцииРекрутинговыхСайтов.Использовать
	|
	|УПОРЯДОЧИТЬ ПО
	|	РекрутинговыйСайт
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("РекрутинговыйСайт");
	КонецЕсли;
	
КонецФункции

Функция ОбъединенныйСписокВыбораПоКлассификаторам(СтруктураПутей, ИспользуемыеСайты) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(ИспользуемыеСайты) Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Если ИспользуемыеСайты.Количество() = 1 Тогда
		Если ИспользуемыеСайты[0] = HeadHunter() Тогда
			Возврат СписокВыбораПоКлассификаторуHeadHunter(СтруктураПутей.ПутьHeadHunter);
		ИначеЕсли ИспользуемыеСайты[0] = Rabota() Тогда
			Возврат СписокВыбораПоКлассификаторуRabota(СтруктураПутей.ПутьRabota);
		ИначеЕсли ИспользуемыеСайты[0] = SuperJob() Тогда
			Возврат СписокВыбораПоКлассификаторуSuperJob(СтруктураПутей.ПутьSuperJob);
		ИначеЕсли ИспользуемыеСайты[0] = Zarplata() Тогда
			Возврат СписокВыбораПоКлассификаторуZarplata(СтруктураПутей.ПутьZarplata);
		Иначе
			Возврат СписокВыбора;
		КонецЕсли;
	КонецЕсли;
	
	КлассификаторыОбщие = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыОбщие");
	КлассификаторыСайтов = КлассификаторыСайтов(ИспользуемыеСайты);
	
	Если КлассификаторыСайтов = Неопределено Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Для Каждого ЭлементПоиска Из КлассификаторыОбщие[СтруктураПутей.Путь] Цикл
		
		Идентификаторы = ИдентификаторыЗначенияКлассификаторов(КлассификаторыСайтов, СтруктураПутей, ЭлементПоиска.Значение);
		Если Идентификаторы <> Неопределено Тогда
			СписокВыбора.Добавить(Идентификаторы, ЭлементПоиска.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ЗначениеСвойстваУзла(Узел, ИмяСвойства, ИмяСвойстваВторогоУровня = Неопределено, ИмяСвойстваТретьегоУровня = Неопределено, ЗначениеПоУмолчанию = "") Экспорт
	
	Значение = ЗначениеПоУмолчанию;
	
	Если ТипЗнч(Узел) = Тип("Структура") Тогда
		
		Если Не Узел.Свойство(ИмяСвойства, Значение) Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Если Значение = "null" Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Узел) = Тип("Соответствие") Тогда
		
		Значение = Узел.Получить(ИмяСвойства);
		
		Если Значение = Неопределено Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Если Значение = "null" Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСвойстваВторогоУровня = Неопределено Тогда
		Возврат Значение;
	Иначе
		Возврат ЗначениеСвойстваУзла(Значение, ИмяСвойстваВторогоУровня, ИмяСвойстваТретьегоУровня, Неопределено, ЗначениеПоУмолчанию);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьКомандуПубликацииНаСайте(Форма, Заголовок, СоответствиеКомандИСайтовПромежуточное) Экспорт
	
	ИдентификаторКоманды = ИнтеграцияРекрутинговыхСайтовКлиентСервер.УникальноеИмяРеквизита();
	
	// Добавляем команду
	НоваяКоманда = Форма.Команды.Добавить("ПубликацияНаСайт_" + ИдентификаторКоманды);
	НоваяКоманда.Заголовок	= Заголовок;
	НоваяКоманда.Действие	= "Подключаемый_ОпубликоватьНаСайте";
	
	// Определяем в какое подменю, добавить кнопку
	ГруппаКнопок = Форма.Элементы.Публикации.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаОпубликовать;
	
	// Добавляем кнопку
	Кнопка = Форма.Элементы.Добавить("ПубликацияНаСайт_" + ИдентификаторКоманды, Тип("КнопкаФормы"), ГруппаКнопок); 
	Кнопка.ИмяКоманды	= НоваяКоманда.Имя;
	Кнопка.Заголовок	= Заголовок;
	
	СоответствиеКомандИСайтовПромежуточное.Вставить(НоваяКоманда.Имя, Заголовок);
	
КонецПроцедуры

Процедура СоздатьКомандуЗагрузкиССайта(Форма, Заголовок, СоответствиеКомандИСайтовПромежуточное)
	
	ИдентификаторКоманды = ИнтеграцияРекрутинговыхСайтовКлиентСервер.УникальноеИмяРеквизита();
	
	// Добавляем команду
	НоваяКоманда = Форма.Команды.Добавить("ЗагрузкаССайта_" + ИдентификаторКоманды);
	НоваяКоманда.Заголовок	= Заголовок;
	НоваяКоманда.Действие	= "Подключаемый_КомандаЗагрузитьССайта";
	
	// Определяем в какое подменю, добавить кнопку
	ГруппаКнопок = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ГруппаКнопокДляЗагрузкиССайта(Форма);
	
	// Добавляем кнопку
	Кнопка = Форма.Элементы.Добавить("ЗагрузкаССайта_" + ИдентификаторКоманды, Тип("КнопкаФормы"), ГруппаКнопок); 
	Кнопка.ИмяКоманды	= НоваяКоманда.Имя;
	Кнопка.Заголовок	= Заголовок;
	
	СоответствиеКомандИСайтовПромежуточное.Вставить(НоваяКоманда.Имя, Заголовок);
	
КонецПроцедуры

Функция СтруктураПоля()
	
	СтруктураПоляHeadHunter = Новый Структура;
	
	СтруктураПоляHeadHunter.Вставить("Путь");
	СтруктураПоляHeadHunter.Вставить("ТипJSON");
	СтруктураПоляHeadHunter.Вставить("Описание");
	СтруктураПоляHeadHunter.Вставить("ПодчиненныеЭлементы");
	СтруктураПоляHeadHunter.Вставить("Использование", Истина);
	СтруктураПоляHeadHunter.Вставить("Обязательное", Ложь);
	СтруктураПоляHeadHunter.Вставить("СвязанноеПолеПуть");
	
	Возврат СтруктураПоляHeadHunter;
	
КонецФункции

Функция ПредставлениеПоля(Сайт, Путь) Экспорт
	
	Поля = Новый Массив;
	ПредставлениеПоля = "";
	
	Если Сайт = HeadHunter() Тогда
		Поля = ПоляВакансииHeadHunter();
	ИначеЕсли Сайт = Rabota() Тогда
		Поля = ПоляВакансииRabota();
	ИначеЕсли Сайт = SuperJob() Тогда
		Поля = ПоляВакансииSuperJob();
	КонецЕсли;
	
	Для Каждого Поле Из Поля Цикл
		
		Если Поле.Путь = Путь Тогда
			ПредставлениеПоля = Поле.Описание;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПредставлениеПоля) Тогда
		ПредставлениеПоля = Путь;
	КонецЕсли;
	
	Возврат ПредставлениеПоля;
	
КонецФункции

Функция ПредставлениеСпискаВВидеМассиваСтруктур(Список)
	
	МассивЗначений = Новый Массив;
	
	Для Каждого ЭлементСписка Из Список Цикл
		
		СтруктураЗначений = Новый Структура;
		СтруктураЗначений.Вставить("Значение", ЭлементСписка.Значение);
		СтруктураЗначений.Вставить("Представление", ЭлементСписка.Представление);
		
		МассивЗначений.Добавить(СтруктураЗначений);
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

Процедура ЗаписьВРегистрДанныеПубликации(Вакансия, Сайт, Дерево) Экспорт
	
	ПоляСТекстом = ПоляСТекстом(Сайт);
	ЕстьКолонкаСТекстом = Дерево.Колонки.Найти("ПубликацияВакансииТекст") <> Неопределено;
	
	Для Каждого СтрокаВакансии Из Дерево.Строки Цикл
		
		Если СтрокаВакансии.Показатель <> Вакансия Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Поле Из СтрокаВакансии.Строки Цикл
			
			Если ЗначениеЗаполнено(Поле.ПубликацияВакансии) Тогда
				
				ДанныеПубликацииВакансийНаборЗаписей = РегистрыСведений.ДанныеПубликацииВакансий.СоздатьНаборЗаписей();
				
				ДанныеПубликацииВакансийНаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
				ДанныеПубликацииВакансийНаборЗаписей.Отбор.МестоПубликации.Установить(Сайт);
				ДанныеПубликацииВакансийНаборЗаписей.Отбор.ПолеДанных.Установить(Поле.Путь);
				
				ДанныеПубликацииВакансийНаборЗаписей.Прочитать();
				ДанныеПубликацииВакансийНаборЗаписей.Очистить();
				
				НоваяЗапись = ДанныеПубликацииВакансийНаборЗаписей.Добавить();
				НоваяЗапись.Вакансия = Вакансия;
				НоваяЗапись.МестоПубликации = Сайт;
				НоваяЗапись.ПолеДанных = Поле.Путь;
				
				Если ТипЗнч(Поле.ПубликацияВакансии) = Тип("СписокЗначений") Тогда
					ПолеJSON = ПредставлениеСпискаВВидеМассиваСтруктур(Поле.ПубликацияВакансии);
				Иначе
					ПолеJSON = ?(ЕстьКолонкаСТекстом И ПоляСТекстом.Найти(Поле.Путь) <> Неопределено, Поле.ПубликацияВакансииТекст, Поле.ПубликацияВакансии);
				КонецЕсли;
				
				НоваяЗапись.Значение = ЗаписьJSON(ПолеJSON);
				
				ДанныеПубликацииВакансийНаборЗаписей.Записать();
				
			КонецЕсли;
			
			Для Каждого ПодчиненноеПоле Из Поле.Строки Цикл
				
				Если ЗначениеЗаполнено(ПодчиненноеПоле.ПубликацияВакансии) Тогда
					
					ДанныеПубликацииВакансийНаборЗаписей = РегистрыСведений.ДанныеПубликацииВакансий.СоздатьНаборЗаписей();
					
					ДанныеПубликацииВакансийНаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
					ДанныеПубликацииВакансийНаборЗаписей.Отбор.МестоПубликации.Установить(Сайт);
					ДанныеПубликацииВакансийНаборЗаписей.Отбор.ПолеДанных.Установить(ПодчиненноеПоле.Путь);
					
					ДанныеПубликацииВакансийНаборЗаписей.Прочитать();
					ДанныеПубликацииВакансийНаборЗаписей.Очистить();
					
					НоваяЗапись = ДанныеПубликацииВакансийНаборЗаписей.Добавить();
					НоваяЗапись.Вакансия = Вакансия;
					НоваяЗапись.МестоПубликации = Сайт;
					НоваяЗапись.ПолеДанных = ПодчиненноеПоле.Путь;
					
					Если ТипЗнч(ПодчиненноеПоле.ПубликацияВакансии) = Тип("СписокЗначений") Тогда
						ПолеJSON = ПредставлениеСпискаВВидеМассиваСтруктур(ПодчиненноеПоле.ПубликацияВакансии);
					Иначе
						ПолеJSON = ?(ЕстьКолонкаСТекстом И ПоляСТекстом.Найти(Поле.Путь) <> Неопределено, ПодчиненноеПоле.ПубликацияВакансииТекст, ПодчиненноеПоле.ПубликацияВакансии);
					КонецЕсли;
					
					НоваяЗапись.Значение = ЗаписьJSON(ПолеJSON);
					
					ДанныеПубликацииВакансийНаборЗаписей.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаАвторизацииHeadHunter() Экспорт

	Возврат СтрокаАвторизацииOAuth(ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter());
	
КонецФункции

Функция СтрокаАвторизацииOAuth(Сайт) Экспорт
	
	СтрокаАвторизации = "";
	
	Если Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter() Тогда
		ИдентификаторПриложения = ЗарплатаКадрыРасширенный.ИдентификацияПриложенияДляHeadHunter();
		СтрокаАвторизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1?response_type=code&client_id=%2&redirect_uri=%3",
					ИдентификаторПриложения.auth_uri,
					ИдентификаторПриложения.client_id,
					ИдентификаторПриложения.redirect_uri);
	ИначеЕсли Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.Zarplata() Тогда
		ИдентификаторПриложения = ЗарплатаКадрыРасширенный.ИдентификацияПриложенияДляZarplata();
		СтрокаАвторизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1?response_type=code&client_id=%2&redirect_uri=%3&scope=basic",
					ИдентификаторПриложения.auth_uri,
					ИдентификаторПриложения.client_id,
					ИдентификаторПриложения.redirect_uri);
	КонецЕсли;
	
	Возврат СтрокаАвторизации;
	
КонецФункции

Процедура ЗагрузитьКлассификаторыHeadHunter() 
	
	Если ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыHeadHunter") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сайт = HeadHunter();
	Соединение = HTTPСоединениеHeadHunter();
	Запрос = HTTPЗапросHeadHunter("/dictionaries");
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибкеЗагрузкиКлассификаторов(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
	Иначе
		КлассификаторыHeadHunter = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	Запрос = HTTPЗапросHeadHunter("/specializations");
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		
		Шаблон = НСтр("ru = 'Ошибка загрузки классификатора специализаций с сайта %1 (%2): %3'");
		СообщитьОбОшибке(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		
	Иначе
		СправочникСпециализацийHeadHunter = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	Запрос = HTTPЗапросHeadHunter("/areas");
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		
		Шаблон = НСтр("ru = 'Ошибка загрузки классификатора регионов с сайта %1 (%2): %3'");
		СообщитьОбОшибке(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		
	Иначе
		СправочникРегионовHeadHunter = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	ИдентификаторПользователя = ИдентификаторПользователяИзРегистра(Сайт);
	МаркерДоступа = МаркерДоступа(Сайт);
	
	Если ЗначениеЗаполнено(ИдентификаторПользователя) 
		И ЗначениеЗаполнено(МаркерДоступа) Тогда
		
		// Адреса
		Шаблон = НСтр("ru = 'Ошибка загрузки адресов пользователя с сайта %1 (%2): %3'");
		АдресаПользователя = СправочникHeadHunter(Соединение, "/employers/" + ИдентификаторПользователя + "/addresses", МаркерДоступа, Шаблон);
		
		// Менеджеры
		Шаблон = НСтр("ru = 'Ошибка загрузки менеджеров пользователя с сайта %1 (%2): %3'");
		МенеджерыПользователя = СправочникHeadHunter(Соединение, "/employers/" + ИдентификаторПользователя + "/managers", МаркерДоступа, Шаблон);
		
		// Департаменты
		Запрос = HTTPЗапросHeadHunter("/employers/" + ИдентификаторПользователя + "/departments", МаркерДоступа);
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			Шаблон = НСтр("ru = 'Ошибка загрузки департаментов пользователя с сайта %1 (%2): %3'");
			СообщитьОбОшибке(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			
		Иначе
			ДепартаментыПользователя = ПарсерJSON(ТекущаяСтрока);
		КонецЕсли;
		
	Иначе
		СообщитьПользователю(НСтр("ru = 'Классификаторы пользователя (адреса, менеджеры, департаменты) не загружены.'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлассификаторыHeadHunter) Тогда
		Возврат;
	КонецЕсли;
	
	КлассификаторыHeadHunterНовый = Новый Структура;
	Для Каждого ЭлементСтруктуры Из КлассификаторыHeadHunter Цикл
		НовыйФиксированныйМассив = ОбщегоНазначения.ФиксированныеДанные(ЭлементСтруктуры.Значение);
		КлассификаторыHeadHunterНовый.Вставить(ЭлементСтруктуры.Ключ, НовыйФиксированныйМассив);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СправочникСпециализацийHeadHunter) Тогда
		НовыйФиксированныйМассив = ОбщегоНазначения.ФиксированныеДанные(СправочникСпециализацийHeadHunter);
		КлассификаторыHeadHunterНовый.Вставить("specializations", НовыйФиксированныйМассив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникРегионовHeadHunter) Тогда
		НовыйФиксированныйМассив = ОбщегоНазначения.ФиксированныеДанные(СправочникРегионовHeadHunter);
		КлассификаторыHeadHunterНовый.Вставить("areas", НовыйФиксированныйМассив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресаПользователя) Тогда
		
		НовыйМассив = Новый Массив;
		Для Каждого ЭлементМассива Из АдресаПользователя Цикл
			
			НоваяСтруктура = СтруктураДанных();
			НоваяСтруктура.id = ЭлементМассива.id;
			НоваяСтруктура.name = ?(ЗначениеЗаполнено(ЭлементМассива.city), ЭлементМассива.city, "") 
				+ ?(ЗначениеЗаполнено(ЭлементМассива.street), ", ", "") + ?(ЗначениеЗаполнено(ЭлементМассива.street), ЭлементМассива.street, "") 
				+ ?(ЗначениеЗаполнено(ЭлементМассива.building), ", ", "") + ?(ЗначениеЗаполнено(ЭлементМассива.building), ЭлементМассива.building, ""); 
				
			Если Не ЗначениеЗаполнено(НоваяСтруктура.name) 
				И ЗначениеЗаполнено(ЭлементМассива.raw) Тогда
				
				НоваяСтруктура.name = ЭлементМассива.raw;
			КонецЕсли;
				
			НоваяФиксированнаяСтруктура = Новый ФиксированнаяСтруктура(НоваяСтруктура);
			НовыйМассив.Добавить(НоваяФиксированнаяСтруктура);
			
		КонецЦикла;
		
		НовыйФиксированныйМассив = Новый ФиксированныйМассив(НовыйМассив);
		
		КлассификаторыHeadHunterНовый.Вставить("addresses", НовыйФиксированныйМассив);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(МенеджерыПользователя) Тогда
		НовыйФиксированныйМассив = ОбщегоНазначения.ФиксированныеДанные(МенеджерыПользователя);
		КлассификаторыHeadHunterНовый.Вставить("managers", НовыйФиксированныйМассив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДепартаментыПользователя) Тогда
		НовыйФиксированныйМассив = ОбщегоНазначения.ФиксированныеДанные(ДепартаментыПользователя.items);
		КлассификаторыHeadHunterНовый.Вставить("departments", НовыйФиксированныйМассив);
	КонецЕсли;
	
	Периоды = Новый Массив;
	Периоды.Добавить(СтруктураДанных(0, НСтр("ru = 'За все время'")));
	Периоды.Добавить(СтруктураДанных(1, НСтр("ru = 'За последние 24 часа'")));
	Периоды.Добавить(СтруктураДанных(3, НСтр("ru = 'За последние 3 дня'")));
	Периоды.Добавить(СтруктураДанных(7, НСтр("ru = 'За последнюю неделю'")));
	Периоды.Добавить(СтруктураДанных(14, НСтр("ru = 'За последние 2 недели'")));
	Периоды.Добавить(СтруктураДанных(30, НСтр("ru = 'За последний 1 месяц'")));
	Периоды.Добавить(СтруктураДанных(60, НСтр("ru = 'За последние 2 месяца'")));
	
	КлассификаторыHeadHunterНовый.Вставить("periods", ОбщегоНазначения.ФиксированныеДанные(Периоды));
	
	КлассификаторыHeadHunterФикс = Новый ФиксированнаяСтруктура(КлассификаторыHeadHunterНовый);
	
	ТекущиеПараметры = ИнтеграцияРекрутинговыхСайтовКлиентСервер.СоответствиеПоФиксированномуСоответствию(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	ТекущиеПараметры.Вставить("КлассификаторыHeadHunter", КлассификаторыHeadHunterФикс);
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторыRabota()
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыRabota")) Тогда
		Возврат;
	КонецЕсли;
	
	КлассификаторыRabota = СправочникиWebApi("Rabota");
	
	Если Не ЗначениеЗаполнено(КлассификаторыRabota) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = HTTPСоединениеRabota();
	КлассификаторыRabotaНовый = Новый Структура;
	МаркерДоступа = МаркерДоступаRabota();
	
	Для Каждого КлючИЗначение Из КлассификаторыRabota Цикл
		
		Запрос = HTTPЗапросRabota(КлючИЗначение.Ключ, МаркерДоступа);
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка загрузки классификатора ""%1"" %2: %3'"),
				КлючИЗначение.Значение,
				Ответ.КодСостояния,
				ТекущаяСтрока));
			
		Иначе
			
			ОписаниеЭлементов = ПарсерJSON(ТекущаяСтрока);
			ОписаниеЭлементовФикс = ОбщегоНазначения.ФиксированныеДанные(ОписаниеЭлементов);
			
			Если КлючИЗначение.Ключ = "offer-trades" Тогда
				
				НовоеОписаниеЭлементов = Новый Массив;
				
				Для Каждого Элемент Из ОписаниеЭлементовФикс Цикл
					Если Не Элемент.hidden Тогда
						НовоеОписаниеЭлементов.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				ОписаниеЭлементовФикс = ОбщегоНазначения.ФиксированныеДанные(НовоеОписаниеЭлементов);
				
			КонецЕсли;
			КлассификаторыRabotaНовый.Вставить(СтрЗаменить(КлючИЗначение.Ключ, "-", "_"), ОписаниеЭлементовФикс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВариантыОпытаРаботы = Новый Массив;
	ВариантыОпытаРаботы.Добавить(СтруктураДанных(Неопределено, НСтр("ru = 'Не имеет значения'")));
	ВариантыОпытаРаботы.Добавить(СтруктураДанных(-1, НСтр("ru = 'Без опыта'")));
	ВариантыОпытаРаботы.Добавить(СтруктураДанных(0, НСтр("ru = 'Менее года'")));
	ВариантыОпытаРаботы.Добавить(СтруктураДанных(1, НСтр("ru = 'от 1 года'")));
	
	КолВоЛет = 2;
	Пока КолВоЛет < 11 Цикл
		ВариантыОпытаРаботы.Добавить(СтруктураДанных(КолВоЛет, СтрШаблон(НСтр("ru = 'от %1 лет'"), КолВоЛет)));
		КолВоЛет = КолВоЛет + 1;
	КонецЦикла;
	
	КлассификаторыRabotaНовый.Вставить("experience", ОбщегоНазначения.ФиксированныеДанные(ВариантыОпытаРаботы));
	
	ВариантыПола = Новый Массив;
	ВариантыПола.Добавить(СтруктураДанных(Неопределено, НСтр("ru = 'Не важно'")));
	ВариантыПола.Добавить(СтруктураДанных("female", НСтр("ru = 'Женский'")));
	ВариантыПола.Добавить(СтруктураДанных("male", НСтр("ru = 'Мужской'")));
	
	КлассификаторыRabotaНовый.Вставить("gender", ОбщегоНазначения.ФиксированныеДанные(ВариантыПола));
	
	КатегорииПрав = Новый Массив;
	КатегорииПрав.Добавить(СтруктураДанных("A", "A"));
	КатегорииПрав.Добавить(СтруктураДанных("B", "B"));
	КатегорииПрав.Добавить(СтруктураДанных("C", "C"));
	КатегорииПрав.Добавить(СтруктураДанных("D", "D"));
	КатегорииПрав.Добавить(СтруктураДанных("E", "E"));
	
	КлассификаторыRabotaНовый.Вставить("driving_licence", ОбщегоНазначения.ФиксированныеДанные(КатегорииПрав));
	
	Периоды = Новый Массив;
	Периоды.Добавить(СтруктураДанных(-2005, НСтр("ru = 'За все время'")));
	Периоды.Добавить(СтруктураДанных(1, НСтр("ru = 'За последние 24 часа'")));
	Периоды.Добавить(СтруктураДанных(3, НСтр("ru = 'За последние 3 дня'")));
	Периоды.Добавить(СтруктураДанных(7, НСтр("ru = 'За последнюю неделю'")));
	Периоды.Добавить(СтруктураДанных(14, НСтр("ru = 'За последние 2 недели'")));
	Периоды.Добавить(СтруктураДанных(30, НСтр("ru = 'За последний 1 месяц'")));
	Периоды.Добавить(СтруктураДанных(60, НСтр("ru = 'За последние 2 месяца'")));
	
	КлассификаторыRabotaНовый.Вставить("periods", ОбщегоНазначения.ФиксированныеДанные(Периоды));
	
	КлассификаторыRabotaФикс = Новый ФиксированнаяСтруктура(КлассификаторыRabotaНовый);
	
	ТекущиеПараметры = ИнтеграцияРекрутинговыхСайтовКлиентСервер.СоответствиеПоФиксированномуСоответствию(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	ТекущиеПараметры.Вставить("КлассификаторыRabota", КлассификаторыRabotaФикс);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторыSuperJob() 
	
	Если ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыSuperJob") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сайт = SuperJob();
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob("/2.0/references/");
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибкеЗагрузкиКлассификаторов(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
	Иначе
		КлассификаторыSuperJob = ПарсерJSON(ТекущаяСтрока, Истина);
	КонецЕсли;
	
	Запрос = HTTPЗапросSuperJob("/2.0/regions/combined/");
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		
		Шаблон = НСтр("ru = 'Ошибка загрузки классификатора городов с сайта %1 (%2): %3'");
		СообщитьОбОшибке(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		
	Иначе
		СправочникРегионовSuperJob = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	Запрос = HTTPЗапросSuperJob("/2.0/catalogues/");
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		
		Шаблон = НСтр("ru = 'Ошибка загрузки классификатора сфер деятельности с сайта %1 (%2): %3'");
		СообщитьОбОшибке(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		
	Иначе
		СправочникСферДеятельностиSuperJob = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	МаркерДоступа = МаркерДоступа(Сайт);
	
	Если ЗначениеЗаполнено(МаркерДоступа) Тогда
		
		Запрос = HTTPЗапросSuperJob("/2.0/user/list/", МаркерДоступа);
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			Шаблон = НСтр("ru = 'Ошибка загрузки классификатора пользователей с сайта %1 (%2): %3'");
			СообщитьОбОшибке(Шаблон, Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			
		Иначе
			СправочникПользователейSuperJob = ПарсерJSON(ТекущаяСтрока, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлассификаторыSuperJob) Тогда
		Возврат;
	КонецЕсли;
	
	КлассификаторыSuperJobНовый = Новый Структура;
	Для Каждого ЭлементСтруктуры Из КлассификаторыSuperJob Цикл
		НоваяСтруктура = Новый Структура;
		Для Каждого ЭлементВложеннойСтруктуры Из ЭлементСтруктуры.Значение Цикл
			Если ТипЗнч(ЭлементВложеннойСтруктуры.Значение) = Тип("Строка") Тогда
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементВложеннойСтруктуры.Ключ) Тогда
					НоваяСтруктура.Вставить("Ключ" + ЭлементВложеннойСтруктуры.Ключ, ЭлементВложеннойСтруктуры.Значение);
				Иначе
					НоваяСтруктура.Вставить(ЭлементВложеннойСтруктуры.Ключ, ЭлементВложеннойСтруктуры.Значение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементВложеннойСтруктуры.Значение) = Тип("Структура") Тогда
				НоваяВложеннаяСтруктура = Новый Структура;
				Для Каждого ЭлементВложеннойСтруктурыВторогоУровня Из ЭлементВложеннойСтруктуры.Значение Цикл
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементВложеннойСтруктурыВторогоУровня.Ключ) Тогда
						НоваяВложеннаяСтруктура.Вставить("Ключ" + ЭлементВложеннойСтруктурыВторогоУровня.Ключ, ЭлементВложеннойСтруктурыВторогоУровня.Значение);
					Иначе
						НоваяВложеннаяСтруктура.Вставить(ЭлементВложеннойСтруктурыВторогоУровня.Ключ, ЭлементВложеннойСтруктурыВторогоУровня.Значение);
					КонецЕсли;
				КонецЦикла;
				НоваяВложеннаяСтруктураФикс = Новый ФиксированнаяСтруктура(НоваяВложеннаяСтруктура);
				НоваяСтруктура.Вставить(ЭлементВложеннойСтруктуры.Ключ, НоваяВложеннаяСтруктураФикс);
			КонецЕсли;
		КонецЦикла;
		НоваяСтруктураФикс = Новый ФиксированнаяСтруктура(НоваяСтруктура);
		КлассификаторыSuperJobНовый.Вставить(ЭлементСтруктуры.Ключ, НоваяСтруктураФикс);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СправочникРегионовSuperJob) Тогда
	
		НовыйМассив = Новый Массив;
		
		Для Каждого ЭлементМассива Из СправочникРегионовSuperJob Цикл
			
			НовыйВложенныйМассив = Новый Массив;
			Если ЭлементМассива.Свойство("towns") 
				И ЭлементМассива.towns.Количество() > 0 Тогда
				
				Для Каждого Город Из ЭлементМассива.towns Цикл
					
					НоваяСтруктура = СтруктураДанныхSuperJob();
					ЗаполнитьЗначенияСвойств(НоваяСтруктура, Город);
					
					НоваяФиксированнаяСтруктура = Новый ФиксированнаяСтруктура(НоваяСтруктура);
					Если ЭлементМассива.Свойство("title") Тогда
						НовыйВложенныйМассив.Добавить(НоваяФиксированнаяСтруктура);
					Иначе
						НовыйМассив.Добавить(НоваяФиксированнаяСтруктура);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если ЭлементМассива.Свойство("regions") 
				И ЭлементМассива.regions.Количество() > 0 Тогда
				
				Для Каждого Регион Из ЭлементМассива.regions Цикл
					
					НовыйВложенныйМассивВторогоУровня = Новый Массив;
					Если Регион.Свойство("towns") 
						И Регион.towns.Количество() > 0 Тогда
						
						Для Каждого Город Из Регион.towns Цикл
							
							НоваяСтруктураТретьегоУровня = СтруктураДанныхSuperJob();
							ЗаполнитьЗначенияСвойств(НоваяСтруктураТретьегоУровня, Город);
							
							НоваяФиксированнаяСтруктураТретьегоУровня = Новый ФиксированнаяСтруктура(НоваяСтруктураТретьегоУровня);
							НовыйВложенныйМассивВторогоУровня.Добавить(НоваяФиксированнаяСтруктураТретьегоУровня);
							
						КонецЦикла;
					КонецЕсли;
					
					НовыйВложенныйФиксированныйМассивВторогоУровня = Новый ФиксированныйМассив(НовыйВложенныйМассивВторогоУровня);
					
					НоваяСтруктураВторогоУровня = Новый Структура("id, title, towns");
					ЗаполнитьЗначенияСвойств(НоваяСтруктураВторогоУровня, Регион, "id, title");
					НоваяСтруктураВторогоУровня.towns = НовыйВложенныйФиксированныйМассивВторогоУровня;
					
					НоваяФиксированнаяСтруктураВторогоУровня = Новый ФиксированнаяСтруктура(НоваяСтруктураВторогоУровня);
					НовыйВложенныйМассив.Добавить(НоваяФиксированнаяСтруктураВторогоУровня);
				КонецЦикла;
				
			КонецЕсли;
			
			НовыйВложенныйФиксированныйМассив = Новый ФиксированныйМассив(НовыйВложенныйМассив);
			
			Если ЭлементМассива.Свойство("title") Тогда
				НоваяСтруктура = Новый Структура("id, title, regions");
				ЗаполнитьЗначенияСвойств(НоваяСтруктура, ЭлементМассива, "id, title");
				НоваяСтруктура.regions = НовыйВложенныйФиксированныйМассив;
				
				НоваяФиксированнаяСтруктура = Новый ФиксированнаяСтруктура(НоваяСтруктура);
				НовыйМассив.Добавить(НоваяФиксированнаяСтруктура);
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйФиксированныйМассив = Новый ФиксированныйМассив(НовыйМассив);
		
		КлассификаторыSuperJobНовый.Вставить("towns", НовыйФиксированныйМассив);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникСферДеятельностиSuperJob) Тогда
		
		НовыйМассив = Новый Массив;
		Для Каждого ЭлементМассива Из СправочникСферДеятельностиSuperJob Цикл
			
			НовыйВложенныйМассив = Новый Массив;
			Для Каждого ЭлементВложенногоМассива Из ЭлементМассива.positions Цикл
				ВложеннаяСтруктура = Новый Структура("key, title");
				ЗаполнитьЗначенияСвойств(ВложеннаяСтруктура, ЭлементВложенногоМассива);
				ВложеннаяСтруктураФикс = Новый ФиксированнаяСтруктура(ВложеннаяСтруктура);
				НовыйВложенныйМассив.Добавить(ВложеннаяСтруктураФикс);
			КонецЦикла;
			НовыйВложенныйФиксированныйМассив = Новый ФиксированныйМассив(НовыйВложенныйМассив);
			
			НоваяСтруктура = Новый Структура("key, title, positions");
			ЗаполнитьЗначенияСвойств(НоваяСтруктура, ЭлементМассива, "key, title");
			НоваяСтруктура.positions = НовыйВложенныйФиксированныйМассив;
			
			НоваяФиксированнаяСтруктура = Новый ФиксированнаяСтруктура(НоваяСтруктура);
			НовыйМассив.Добавить(НоваяФиксированнаяСтруктура);
			
		КонецЦикла;
		
		НовыйФиксированныйМассив = Новый ФиксированныйМассив(НовыйМассив);
		
		КлассификаторыSuperJobНовый.Вставить("catalogues", НовыйФиксированныйМассив);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникПользователейSuperJob) Тогда
		
		СтруктураПользователей = Новый Структура;
			
		Для Каждого ЭлементСтруктуры Из СправочникПользователейSuperJob.Получить("objects") Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементСтруктуры.Ключ) Тогда
				СтруктураПользователей.Вставить("Ключ" + ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Получить("firstname") + " " + ЭлементСтруктуры.Значение.Получить("lastname"));	
			Иначе
				СтруктураПользователей.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Получить("firstname") + " " + ЭлементСтруктуры.Значение.Получить("lastname"));	
			КонецЕсли;
		КонецЦикла;
		
		НовыйФиксированнаяСтруктура = Новый ФиксированнаяСтруктура(СтруктураПользователей);
		
		КлассификаторыSuperJobНовый.Вставить("users", НовыйФиксированнаяСтруктура);
		
	КонецЕсли;
	
	resumesubscription_kwc = Новый Структура;
	
	resumesubscription_kwc.Вставить("or", НСтр("ru = 'Хотя бы одно слово'"));
	resumesubscription_kwc.Вставить("and", НСтр("ru = 'Все слова'"));
	resumesubscription_kwc.Вставить("particular", НСтр("ru = 'Точная фраза'"));
	
	КлассификаторыSuperJobНовый.Вставить("resumesubscription_kwc", Новый ФиксированнаяСтруктура(resumesubscription_kwc));
	
	resumesubscription_rws = Новый Структура;
	
	resumesubscription_rws.Вставить("Ключ7",  НСтр("ru = 'По опыту'"));
	resumesubscription_rws.Вставить("Ключ50", НСтр("ru = 'По всему резюме'"));
	resumesubscription_rws.Вставить("Ключ60", НСтр("ru = 'По желаемой должности'"));
	resumesubscription_rws.Вставить("Ключ8",  НСтр("ru = 'По названию организации'"));
	resumesubscription_rws.Вставить("Ключ3",  НСтр("ru = 'По ключевым навыкам'"));
	resumesubscription_rws.Вставить("Ключ6",  НСтр("ru = 'По образованию и курсам'"));
	resumesubscription_rws.Вставить("Ключ2",  НСтр("ru = 'По месту проживания'"));
	
	КлассификаторыSuperJobНовый.Вставить("resumesubscription_rws", Новый ФиксированнаяСтруктура(resumesubscription_rws));
	
	driving_licence = Новый Структура;
	
	driving_licence.Вставить("A", "A");
	driving_licence.Вставить("B", "B");
	driving_licence.Вставить("C", "C");
	driving_licence.Вставить("D", "D");
	driving_licence.Вставить("E", "E");
	
	КлассификаторыSuperJobНовый.Вставить("driving_licence", Новый ФиксированнаяСтруктура(driving_licence));
	
	published = Новый Структура;
	
	published.Вставить("Ключ0", НСтр("ru = 'Закрытый доступ'"));
	published.Вставить("Ключ1", НСтр("ru = 'Открытый доступ'"));
	
	КлассификаторыSuperJobНовый.Вставить("published", Новый ФиксированнаяСтруктура(published));
	
	periods = Новый Структура;
	
	periods.Вставить("Ключ0",  НСтр("ru = 'За все время'"));
	periods.Вставить("Ключ1",  НСтр("ru = 'За последние 24 часа'"));
	periods.Вставить("Ключ3",  НСтр("ru = 'За последние 3 дня'"));
	periods.Вставить("Ключ7",  НСтр("ru = 'За последнюю неделю'"));
	periods.Вставить("Ключ14", НСтр("ru = 'За последние 2 недели'"));
	periods.Вставить("Ключ30", НСтр("ru = 'За последний 1 месяц'"));
	periods.Вставить("Ключ60", НСтр("ru = 'За последние 2 месяца'"));
	
	КлассификаторыSuperJobНовый.Вставить("periods", Новый ФиксированнаяСтруктура(periods));
	
	КлассификаторыSuperJobФикс = Новый ФиксированнаяСтруктура(КлассификаторыSuperJobНовый);
	
	ТекущиеПараметры = ИнтеграцияРекрутинговыхСайтовКлиентСервер.СоответствиеПоФиксированномуСоответствию(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	ТекущиеПараметры.Вставить("КлассификаторыSuperJob", КлассификаторыSuperJobФикс);
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВпервыеЗагрузитьКлассификаторы(Сайт)

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сайт", Сайт);
	ПараметрыПроцедуры.Вставить("ПерваяЗагрузка", Истина);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияРекрутинговыхСайтов.ЗагрузитьКлассификаторыСайта",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторыСайта(Параметры, АдресРезультата) Экспорт
	
	Результат = Ложь;
	
	Сайт = Неопределено;
	Если Не Параметры.Свойство("Сайт", Сайт) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПерваяЗагрузка = Ложь;
	Если Параметры.Свойство("ПерваяЗагрузка") Тогда
		ПерваяЗагрузка = Параметры.ПерваяЗагрузка;
	КонецЕсли;
	
	Если Сайт = Zarplata() Тогда
		ЗагрузитьКлассификаторыZarplata(ПерваяЗагрузка);
	Иначе
		ЗагрузитьКлассификаторы(Сайт);
	КонецЕсли;
	
	Результат = Истина;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ИменаКлассификаторовZarplata()
	
	Наименования = Новый Массив;
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.geo"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.payment_type_alias"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.periods"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.rubrics"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.specialities"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.payment_per_month"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.workingTypes"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.scheduler"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.education_vacancy"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.workLength"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.education_resume"));
	Наименования.Добавить(ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.sex"));
	Возврат Наименования;
	
КонецФункции

Функция ПутиКлассификаторовZarplata()
	
	ВерсияAPIКлассификаторов = "v1";
	ШаблонПутиСловарей = СтрШаблон("/%1/dictionaries/%2", ВерсияAPIКлассификаторов, "%1");
	
	ПутиКлассификаторов = Новый Соответствие;

	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.rubrics");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.specialities");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.payment_per_month");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.workingTypes");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.education_vacancy");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.scheduler");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.workLength");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.education_resume");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	ИмяКлассификатора = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.sex");
	ПутьКлассификатора = СтрШаблон(ШаблонПутиСловарей, Строка(ИмяКлассификатора));
	ПутиКлассификаторов.Вставить(ИмяКлассификатора, ПутьКлассификатора);
	
	Возврат ПутиКлассификаторов;
	
КонецФункции

Процедура ЗагрузитьКлассификаторыZarplata(ПерваяЗагрузка)
	
	Сайт = Zarplata();
	
	ИменаКлассификаторовZarplata = ИменаКлассификаторовZarplata();
	
	Если ПерваяЗагрузка Тогда
		ОбновляемыеКлассификаторы = ИменаКлассификаторовZarplata;
	Иначе
		ОбновляемыеКлассификаторы = РегистрыСведений.КлассификаторыРекрутинговыхСайтов.УстаревшиеКлассификаторы(Сайт, ИменаКлассификаторовZarplata);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбновляемыеКлассификаторы) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаркерДоступа = МаркерДоступаZarplata();
	Соединение = HTTPСоединениеZarplata();
	
	ПутиКлассификаторов = ПутиКлассификаторовZarplata();
	Для Каждого Классификатор Из ОбновляемыеКлассификаторы Цикл
		
		ЗначениеКлассификатора = Неопределено;
		ДатаАктуальности = Неопределено;
		
		Если Классификатор = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.geo") Тогда
			
			ЗначениеКлассификатора = ДеревоГородовZarplata();
		
		ИначеЕсли Классификатор = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.payment_type_alias") Тогда
			
			ЗначениеКлассификатора = Новый Массив;
			ЗначениеКлассификатора.Добавить(Новый Структура("id, title", "range", НСтр("ru = 'диапазон зп'")));
			ЗначениеКлассификатора.Добавить(Новый Структура("id, title", "fixed", НСтр("ru = 'оклад'")));
			ЗначениеКлассификатора.Добавить(Новый Структура("id, title", "fixed_plus_bonus", НСтр("ru = 'оклад плюс проценты'")));
			
			ДатаАктуальности = Дата(3999, 12, 31);
			
		ИначеЕсли Классификатор = ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.periods") Тогда
			
			ЗначениеКлассификатора = Новый Массив;
			ЗначениеКлассификатора.Добавить(СтруктураДанных(0, НСтр("ru = 'За все время'")));
			ЗначениеКлассификатора.Добавить(СтруктураДанных(1, НСтр("ru = 'За последние 24 часа'")));
			ЗначениеКлассификатора.Добавить(СтруктураДанных(3, НСтр("ru = 'За последние 3 дня'")));
			ЗначениеКлассификатора.Добавить(СтруктураДанных(7, НСтр("ru = 'За последнюю неделю'")));
			ЗначениеКлассификатора.Добавить(СтруктураДанных(14, НСтр("ru = 'За последние 2 недели'")));
			ЗначениеКлассификатора.Добавить(СтруктураДанных(30, НСтр("ru = 'За последний 1 месяц'")));
			ЗначениеКлассификатора.Добавить(СтруктураДанных(60, НСтр("ru = 'За последние 2 месяца'")));
			
			ДатаАктуальности = Дата(3999, 12, 31);
			
		Иначе
			
			ПутьКлассификатора = ПутиКлассификаторов[Классификатор];
			Если Не ЗначениеЗаполнено(ПутьКлассификатора) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = HTTPЗапросZarplata(ПутьКлассификатора, МаркерДоступа);
			Ответ = Соединение.Получить(Запрос);
			
			ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
			Если Ответ.КодСостояния <> 200 Тогда
				СообщитьОбОшибкеЗагрузкиКлассификаторов(Сайт, Ответ.КодСостояния,
					ОписаниеОшибкиЗапросаZarplata(ТекущаяСтрока));
				Продолжить;
			Иначе
				КоллекцияКлассификаторов = ЗначениеСвойстваУзла(ПарсерJSON(ТекущаяСтрока), "dictionaries");
				Если Не ЗначениеЗаполнено(КоллекцияКлассификаторов) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеКлассификатора = ЗначениеСвойстваУзла(КоллекцияКлассификаторов[0], "values");
				Если Не ЗначениеЗаполнено(ЗначениеКлассификатора) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗначениеКлассификатора) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.КлассификаторыРекрутинговыхСайтов.ЗаписатьКлассификатор(
			Сайт, Классификатор, ЗначениеКлассификатора, ДатаАктуальности);
		
	КонецЦикла;

КонецПроцедуры

Функция ДеревоГородовZarplata()
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("ИдентификаторДоп", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Число"));
	
	Соединение = HTTPСоединениеZarplata();
	
	Страны = Новый Массив;
	Ресурс = "/v1/geo?level=country";
	ПолучитьВсеСтраницыРесурсаZarplata(Соединение, Ресурс, "geo", Страны);
	Для Каждого Страна Из Страны Цикл
		СтрокаСтрана = Дерево.Строки.Добавить();
		СтрокаСтрана.Идентификатор = Формат(Страна.id, "ЧН=0; ЧГ=0");
		СтрокаСтрана.Значение = Страна.name;
		
		Регионы = Новый Массив;
		Ресурс = "/v1/geo?level=region&parent_id=" + Формат(Страна.id, "ЧН=0; ЧГ=");
		ПолучитьВсеСтраницыРесурсаZarplata(Соединение, Ресурс, "geo", Регионы);
		Для Каждого Регион Из Регионы Цикл
			СтрокаРегион = СтрокаСтрана.Строки.Добавить();
			СтрокаРегион.Идентификатор = Формат(Регион.id, "ЧН=0; ЧГ=0");
			СтрокаРегион.Значение = Регион.name;
			
			Города = Новый Массив;
			Ресурс = "/v1/geo?level=city&parent_id=" + Формат(Регион.id, "ЧН=0; ЧГ=");;
			ПолучитьВсеСтраницыРесурсаZarplata(Соединение, Ресурс, "geo", Города);
			
			Для Каждого Город Из Города Цикл
				СтрокаГород = СтрокаРегион.Строки.Добавить();
				СтрокаГород.Идентификатор = Формат(Город.id, "ЧН=0; ЧГ=0");
				СтрокаГород.Значение = Город.name;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Идентификатор = "1177";
	НоваяСтрока.Значение = НСтр("ru = 'Москва'");
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Идентификатор = "1178";
	НоваяСтрока.Значение = НСтр("ru = 'Санкт-Петербург'");
	
	Возврат Дерево;
	
КонецФункции

Процедура ПолучитьВсеСтраницыРесурсаZarplata(Соединение, Ресурс, ИмяСвойстваРезультата, МассивРезультатов, Сдвиг = 0, МаркерДоступа = "")
	
	Лимит = 100;
	ТекРесурс = Ресурс;
	Если СтрНайти(Ресурс, "?") > 0 Тогда
		ТекРесурс = ТекРесурс + "&";
	Иначе
		ТекРесурс = ТекРесурс + "?";
	КонецЕсли;
	ТекРесурс = ТекРесурс + "limit=" + Формат(Лимит, "ЧН=0; ЧГ=") + "&offset=" + Формат(Сдвиг, "ЧН=0; ЧГ=");
	Запрос = HTTPЗапросZarplata(ТекРесурс, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если Не Ответ.КодСостояния = 200 Тогда
		Шаблон = НСтр("ru = 'Ошибка получения содержимого ресурса %1 %2'");
		Шаблон = СтрШаблон(Шаблон, Ресурс, НСтр("ru = 'с сайта %1 (%2): %3'"));
		СообщитьОбОшибке(Шаблон, Zarplata(), Ответ.КодСостояния, ОписаниеОшибкиЗапросаZarplata(СтрокаОтвета));
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = ПарсерJSON(СтрокаОтвета);
	Если МассивРезультатов.Количество() = 0 Тогда
		МассивРезультатов = СтруктураОтвета[ИмяСвойстваРезультата];
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРезультатов, СтруктураОтвета[ИмяСвойстваРезультата]);
	КонецЕсли;
	
	КоличествоРезультатов = ЗначениеСвойстваУзла(СтруктураОтвета, "metadata", "resultset", "count", Неопределено);
	
	Если КоличествоРезультатов = Неопределено Тогда
		Шаблон = НСтр("ru = 'Ошибка получения содержимого ресурса %1 %2'");
		Шаблон = СтрШаблон(Шаблон, Ресурс, НСтр("ru = 'с сайта %1 (%2): %3'"));
		СообщитьОбОшибке(Шаблон, Zarplata(), Ответ.КодСостояния, СтрокаОтвета);
		Возврат;
	КонецЕсли;
	
	Сдвиг = Сдвиг + Лимит;
	
	Если КоличествоРезультатов <= Сдвиг Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьВсеСтраницыРесурсаZarplata(Соединение, Ресурс, ИмяСвойстваРезультата, МассивРезультатов, Сдвиг);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоСпециализацийHeadHunter(Дерево)
	
	КлассификаторыHeadHunter = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыHeadHunter");
		
	Если КлассификаторыHeadHunter = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Специализации = КлассификаторыHeadHunter.specializations;
	
	Для Каждого Раздел Из Специализации Цикл
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор = Раздел.id;
		НоваяСтрока.Значение = Раздел.name;
		
		Если ЗначениеЗаполнено(Раздел.specializations) 
			И Раздел.specializations.Количество() > 0 Тогда
			
			Для Каждого Специализация Из Раздел.specializations Цикл
				
				НоваяПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				НоваяПодчиненнаяСтрока.Идентификатор = Специализация.id;
				НоваяПодчиненнаяСтрока.Значение = Специализация.name;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРубрикZarplata(Дерево)
	
	Рубрики = РегистрыСведений.КлассификаторыРекрутинговыхСайтов.ЗначениеКлассификатора(Zarplata(),
		ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.rubrics"));
	Если Рубрики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Специальности = РегистрыСведений.КлассификаторыРекрутинговыхСайтов.ЗначениеКлассификатора(Zarplata(),
		ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.specialities"));
	Если Специальности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Раздел Из Рубрики Цикл

		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор = Раздел.id;
		НоваяСтрока.ИдентификаторДоп = Раздел.parent_id;
		НоваяСтрока.Значение = Раздел.title;
		Если Не ЗначениеЗаполнено(Специальности) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Специальность Из Специальности Цикл
			Если Специальность.parent_id = Раздел.id Тогда
				НоваяПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				НоваяПодчиненнаяСтрока.Идентификатор = Специальность.id;
				НоваяПодчиненнаяСтрока.ИдентификаторДоп = Специальность.parent_id;
				НоваяПодчиненнаяСтрока.Значение = Специальность.title;
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", Истина)
	
КонецПроцедуры

Процедура ЗаполнитьДеревоСпециализацийSuperJob(Дерево)
	
	КлассификаторыSuperJob = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыSuperJob");
	
	Если КлассификаторыSuperJob = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СферыДеятельности = КлассификаторыSuperJob.catalogues;
	
	Для Каждого Раздел Из СферыДеятельности Цикл
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор = Раздел.key;
		НоваяСтрока.Значение = Раздел.title;
		
		Если ЗначениеЗаполнено(Раздел.positions) 
			И Раздел.positions.Количество() > 0 Тогда
			
			Для Каждого Специализация Из Раздел.positions Цикл
				
				НоваяПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				НоваяПодчиненнаяСтрока.Идентификатор = Специализация.key;
				НоваяПодчиненнаяСтрока.Значение = Специализация.title;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРегионовОбщее(Дерево)
	
	КлассификаторыОбщие = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыОбщие");
	
	Если КлассификаторыОбщие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегионыГорода = КлассификаторыОбщие.Получить("regions");
	ИдентификаторыСтрокДерева = Новый Соответствие;
	
	ТаблицаРегионыГорода = Новый ТаблицаЗначений;
	ТаблицаРегионыГорода.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаРегионыГорода.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Для Каждого КлючИЗначение Из РегионыГорода Цикл
		НоваяСтрока = ТаблицаРегионыГорода.Добавить();
		НоваяСтрока.Идентификатор = КлючИЗначение.Ключ;
		НоваяСтрока.Значение = КлючИЗначение.Значение;
	КонецЦикла;
	
	ТаблицаРегионыГорода.Сортировать("Идентификатор");
	
	ПерваяСтрока = Истина;
	Для Каждого Строка Из ТаблицаРегионыГорода Цикл
		
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
		Иначе
			
			ИдентификаторРодителя = Лев(Строка.Идентификатор, СтрНайти(Строка.Идентификатор, ".", НаправлениеПоиска.СКонца) - 1);
			СтрокаРодителя = ИдентификаторыСтрокДерева.Получить(ИдентификаторРодителя);
			
			Если СтрокаРодителя = Неопределено Тогда
				СтрокаРодителя = Дерево;
			КонецЕсли;
			
			НоваяСтрока = СтрокаРодителя.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			ИдентификаторыСтрокДерева.Вставить(НоваяСтрока.Идентификатор, НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРегионовHeadHunter(Дерево)
	
	КлассификаторыHeadHunter = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыHeadHunter");
	
	Если КлассификаторыHeadHunter = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Страны = КлассификаторыHeadHunter.areas;
	
	Для Каждого Страна Из Страны Цикл
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор = Страна.id;
		НоваяСтрока.Значение = Страна.name;
		
		Если Страна.areas.Количество() > 0 Тогда 
			
			Для Каждого Регион Из Страна.areas Цикл
				
				НоваяПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				НоваяПодчиненнаяСтрока.Идентификатор = Регион.id;
				НоваяПодчиненнаяСтрока.Значение = УдалитьУточнениеВСкобках(Регион.name);
				
				Если Регион.areas.Количество() > 0 Тогда
					
					Для Каждого Город Из Регион.areas Цикл
						
						НоваяПодчиненнаяСтрокаВторогоУровня = НоваяПодчиненнаяСтрока.Строки.Добавить();
						НоваяПодчиненнаяСтрокаВторогоУровня.Идентификатор = Город.id;
						НоваяПодчиненнаяСтрокаВторогоУровня.Значение = УдалитьУточнениеВСкобках(Город.name);
						
						Для Каждого Район Из Город.areas Цикл
							
							НоваяПодчиненнаяСтрокаТретьегоУровня = НоваяПодчиненнаяСтрокаВторогоУровня.Строки.Добавить();
							НоваяПодчиненнаяСтрокаТретьегоУровня.Идентификатор = Район.id;
							НоваяПодчиненнаяСтрокаТретьегоУровня.Значение = УдалитьУточнениеВСкобках(Район.name);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРегионовZarplata(Дерево)
	
	ЗначениеКлассификатора = РегистрыСведений.КлассификаторыРекрутинговыхСайтов.ЗначениеКлассификатора(Zarplata(),
		ПредопределенноеЗначение("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.geo"));
	Если ЗначениеКлассификатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = ЗначениеКлассификатора;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРубрикRabota(Дерево)
	
	КлассификаторыRabota = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыRabota");
	
	Если КлассификаторыRabota = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Рубрики = КлассификаторыRabota.offer_trades;
	СтрокиДереваПоId = Новый Соответствие;
	
	Для Каждого Рубрика Из Рубрики Цикл
		
		СтрокаРодителя = СтрокиДереваПоId.Получить(Рубрика.parentId);
		
		Если СтрокаРодителя <> Неопределено Тогда
			НоваяСтрока = СтрокаРодителя.Строки.Добавить();
		Иначе
			НоваяСтрока = Дерево.Строки.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Идентификатор = Рубрика.id;
		НоваяСтрока.Значение = Рубрика.name;
		
		СтрокиДереваПоId.Вставить(Рубрика.id, НоваяСтрока);
		
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРегионовRabota(Дерево)
	
	КлассификаторыRabota = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыRabota");
	
	Если КлассификаторыRabota = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Страны = КлассификаторыRabota.countries;
	
	IdsДоступныхСтран = Новый Массив;
	IdsДоступныхСтран.Добавить(1);
	IdsДоступныхСтран.Добавить(5);
	IdsДоступныхСтран.Добавить(2);
	IdsДоступныхСтран.Добавить(6);
	
	IdsСтрокСтран = Новый Соответствие;
	
	Для Каждого Страна Из Страны Цикл
		
		Если IdsДоступныхСтран.Найти(Страна.id) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор = Страна.id;
		НоваяСтрока.Значение = Страна.name;
		
		IdsСтрокСтран.Вставить(Страна.id, НоваяСтрока);
		
	КонецЦикла;
	
	Регионы = КлассификаторыRabota.regions;
	IdsРегионов = Новый Соответствие;
	IdsСтрокРодителей = Новый Соответствие;
	
	Для Каждого Регион Из Регионы Цикл
		IdsРегионов.Вставить(Регион.id, Регион);
	КонецЦикла;
	
	Для Каждого Регион Из Регионы Цикл
		
		Страна = IdsСтрокСтран.Получить(Регион.countryId);
		Если Страна = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Путь = Регион.path;
		
		Если Регион.regionTypeId <> 2 // город
			И Регион.regionTypeId <> 10 // поселок городского типа
			И Регион.regionTypeId <> 13 Тогда // станица
			Продолжить;
		КонецЕсли;
			
		Если Путь.Количество() = 1 Тогда 
			СтрокаРодителя = Страна;
		Иначе
			
			СтрокаРодителя = IdsСтрокРодителей.Получить(Путь[0]);
			
			Если СтрокаРодителя = Неопределено Тогда
				
				СтрокаРегиона = IdsРегионов.Получить(Путь[0]);
				
				СтрокаРодителя = Страна.Строки.Добавить();
				СтрокаРодителя.Идентификатор = СтрокаРегиона.id;
				СтрокаРодителя.Значение = ПолноеНазваниеРегиона(СтрокаРегиона.name, СтрокаРегиона.regionTypeId);
				
				IdsСтрокРодителей.Вставить(СтрокаРегиона.id, СтрокаРодителя);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодителя.Строки.Добавить();
		НоваяСтрока.Идентификатор = Регион.id;
		НоваяСтрока.Значение = ПолноеНазваниеРегиона(Регион.name, Регион.regionTypeId);
		
	КонецЦикла;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Строка.Строки.Сортировать("Значение", Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРегионовSuperJob(Дерево)
	
	КлассификаторыSuperJob = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыSuperJob");
	
	Если КлассификаторыSuperJob = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Страны = КлассификаторыSuperJob.towns;
	
	Для Каждого Страна Из Страны Цикл
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор = Формат(Страна.id, "ЧГ=0");
		НоваяСтрока.Значение = Страна.title;
		
		Если Страна.Свойство("regions") 
			И Страна.regions.Количество() > 0 Тогда 
			
			Для Каждого Регион Из Страна.regions Цикл
				
				НоваяПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				НоваяПодчиненнаяСтрока.Идентификатор = Регион.id;
				НоваяПодчиненнаяСтрока.Значение = Регион.title;
				
				Если Регион.Свойство("towns") 
					И Регион.towns.Количество() > 0 Тогда 
					
					Для Каждого Город Из Регион.towns Цикл
						
						НоваяПодчиненнаяСтрокаВторогоУровня = НоваяПодчиненнаяСтрока.Строки.Добавить();
						НоваяПодчиненнаяСтрокаВторогоУровня.Идентификатор = Формат(Город.id, "ЧГ=0");
						НоваяПодчиненнаяСтрокаВторогоУровня.Значение = Город.title;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОбъединенноеДеревоРегионов(ДеревоОбщее, ИспользуемыеСайты)
	
	Если ИспользуемыеСайты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуемыеСайты.Количество() = 1 Тогда
		Если ИспользуемыеСайты[0] = HeadHunter() Тогда
			ЗаполнитьДеревоРегионовHeadHunter(ДеревоОбщее);
		ИначеЕсли ИспользуемыеСайты[0] = Rabota() Тогда
			ЗаполнитьДеревоРегионовRabota(ДеревоОбщее);
		ИначеЕсли ИспользуемыеСайты[0] = SuperJob() Тогда
			ЗаполнитьДеревоРегионовSuperJob(ДеревоОбщее);
		ИначеЕсли ИспользуемыеСайты[0] = Zarplata() Тогда
			ЗаполнитьДеревоРегионовZarplata(ДеревоОбщее);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КлассификаторыОбщие = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыОбщие");
	КлассификаторыСайтов = КлассификаторыСайтов(ИспользуемыеСайты);
	
	Если КлассификаторыСайтов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревьяПоКлассификаторам = ДеревьяРегионовПоКлассификаторамСайтов(ИспользуемыеСайты, ДеревоОбщее);
	ЗаполнитьДеревоРегионовОбщее(ДеревоОбщее);
	
	ВыбираемыеСтроки = Новый Массив;
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДеревоОбщее.Строки Цикл
		ДополнитьВыбираемыеСтроки(ВыбираемыеСтроки, СтрокаДерева);
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из ВыбираемыеСтроки Цикл
		
		Родитель = СтрокаДерева.Родитель;
		Если ЗначениеЗаполнено(Родитель) Тогда
			ЗначениеРодителя = Родитель.Значение;
		Иначе
			ЗначениеРодителя = "";
		КонецЕсли;
		
		Идентификаторы = ИдентификаторыЗначенияИзДеревьевПоКлассификаторам(ДеревьяПоКлассификаторам, СтрокаДерева.Значение, ЗначениеРодителя);
		
		Если Идентификаторы <> Неопределено Тогда
			СтрокаДерева.ИдентификаторДоп = ОбщегоНазначения.ФиксированныеДанные(Идентификаторы);
		Иначе
			УдаляемыеСтроки.Добавить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из УдаляемыеСтроки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
			СтрокаДерева.Родитель.Строки.Удалить(СтрокаДерева);
		Иначе
			ДеревоОбщее.Строки.Удалить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВыбираемыеСтроки(ВыбираемыеСтроки, ТекущаяСтрока)
	
	Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
		ВыбираемыеСтроки.Добавить(ТекущаяСтрока);
	Иначе
		Для Каждого ПодСтрока Из ТекущаяСтрока.Строки Цикл
			ДополнитьВыбираемыеСтроки(ВыбираемыеСтроки, ПодСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПубликацияВакансии(Сайт, Дерево)
	
	Если Сайт = HeadHunter() Тогда
		Возврат ПубликацияВакансииHeadHunter(Дерево);
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат ПубликацияВакансииRabota(Дерево);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат ПубликацияВакансииSuperJob(Дерево);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат ПубликацияВакансииZarplata(Дерево);
	КонецЕсли;
	
КонецФункции

Функция ПубликацияВакансииHeadHunter(Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПубликацияВакансииHeadHunter(Дерево);
	
КонецФункции

Функция ПубликацияВакансииRabota(Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПубликацияВакансииRabota(Дерево);
	
КонецФункции

Функция ПубликацияВакансииSuperJob(Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПубликацияВакансииSuperJob(Дерево);
	
КонецФункции

Функция ПубликацияВакансииZarplata(Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПубликацияВакансииZarplata(Дерево);
	
КонецФункции

Функция ПовторнаяПубликацияВакансии(ИдентификаторВакансии, Сайт, Дерево, Вакансия)
	
	Если Сайт = Rabota() Тогда
		Возврат ПовторнаяПубликацияВакансииRabota(ИдентификаторВакансии, Дерево, Вакансия);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат ПовторнаяПубликацияВакансииSuperJob(ИдентификаторВакансии, Дерево, Вакансия);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат ПовторнаяПубликацияВакансииZarplata(ИдентификаторВакансии, Дерево, Вакансия);
	Иначе
		
		РезультатДействия = НовыйРезультатДействияСВакансией();
		РезультатДействия.Успешно = Ложь;
		
		Возврат РезультатДействия;
		
	КонецЕсли;
	
КонецФункции

Функция ПовторнаяПубликацияВакансииRabota(ИдентификаторВакансии, Дерево, Вакансия)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПовторнаяПубликацияВакансииRabota(ИдентификаторВакансии, Дерево, Вакансия);
	
КонецФункции

Функция ПовторнаяПубликацияВакансииSuperJob(ИдентификаторВакансии, Дерево, Вакансия)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПовторнаяПубликацияВакансииSuperJob(ИдентификаторВакансии, Дерево, Вакансия);
	
КонецФункции

Функция ПовторнаяПубликацияВакансииZarplata(ИдентификаторВакансии, Дерево, Вакансия)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПовторнаяПубликацияВакансииZarplata(ИдентификаторВакансии, Дерево, Вакансия);
	
КонецФункции

Функция ОбновлениеПубликацииВакансии(ИдентификаторВакансии, Сайт, Дерево)
	
	Если Сайт = HeadHunter() Тогда
		Возврат ОбновлениеВакансииHeadHunter(ИдентификаторВакансии, Дерево);
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат ОбновлениеВакансииRabota(ИдентификаторВакансии, Дерево);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат ОбновлениеВакансииSuperJob(ИдентификаторВакансии, Дерево);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат ОбновлениеВакансииZarplata(ИдентификаторВакансии, Дерево);
	КонецЕсли;
	
КонецФункции

Функция ОбновлениеВакансииHeadHunter(ИдентификаторВакансии, Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ОбновлениеВакансииHeadHunter(ИдентификаторВакансии, Дерево);
	
КонецФункции

Функция ОбновлениеВакансииRabota(ИдентификаторВакансии, Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ОбновлениеВакансииRabota(ИдентификаторВакансии, Дерево);
	
КонецФункции

Функция ОбновлениеВакансииSuperJob(ИдентификаторВакансии, Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ОбновлениеВакансииSuperJob(ИдентификаторВакансии, Дерево);
	
КонецФункции

Функция ОбновлениеВакансииZarplata(ИдентификаторВакансии, Дерево)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ОбновлениеВакансииZarplata(ИдентификаторВакансии, Дерево);
	
КонецФункции

Функция СнятиеПубликацииВакансии(ИдентификаторВакансии, Сайт)
	
	Если Сайт = HeadHunter() Тогда
		Возврат СнятиеВакансииHeadHunter(ИдентификаторВакансии);
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат СнятиеВакансииRabota(ИдентификаторВакансии);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат СнятиеВакансииSuperJob(ИдентификаторВакансии);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат СнятиеВакансииZarplata(ИдентификаторВакансии);
	КонецЕсли;
	
КонецФункции

Функция СнятиеВакансииHeadHunter(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СнятиеВакансииHeadHunter(ИдентификаторВакансии);
	
КонецФункции

Функция СнятиеВакансииRabota(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СнятиеВакансииRabota(ИдентификаторВакансии);
	
КонецФункции

Функция СнятиеВакансииSuperJob(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СнятиеВакансииSuperJob(ИдентификаторВакансии);
	
КонецФункции

Функция СнятиеВакансииZarplata(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СнятиеВакансииZarplata(ИдентификаторВакансии);
	
КонецФункции

Функция СвойстваПубликацииВакансииНаСайте(Сайт, ИдентификаторВакансии)
	
	Если Сайт = HeadHunter() Тогда
		Возврат СвойстваПубликацииВакансииHeadHunter(ИдентификаторВакансии);
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат СвойстваПубликацииВакансииRabota(ИдентификаторВакансии);
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат СвойстваПубликацииВакансииSuperJob(ИдентификаторВакансии);
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат СвойстваПубликацииВакансииZarplata(ИдентификаторВакансии);
	КонецЕсли;
	
КонецФункции

Функция СвойстваПубликацииВакансииHeadHunter(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СвойстваПубликацииВакансииHeadHunter(ИдентификаторВакансии);
	
КонецФункции

Функция СвойстваПубликацииВакансииRabota(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СвойстваПубликацииВакансииRabota(ИдентификаторВакансии);
	
КонецФункции

Функция СвойстваПубликацииВакансииSuperJob(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СвойстваПубликацииВакансииSuperJob(ИдентификаторВакансии);
	
КонецФункции

Функция СвойстваПубликацииВакансииZarplata(ИдентификаторВакансии)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СвойстваПубликацииВакансииZarplata(ИдентификаторВакансии);
	
КонецФункции

Функция ОписаниеПубликацииВакансии(Сайт, Ответ, СообщатьОбОшибке, ПрочитатьВСоответствие = Ложь)
	
	ОписаниеПубликации = Неопределено;
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		Если СообщатьОбОшибке Тогда
			Если Сайт = Zarplata() Тогда
				ТекущаяСтрока = ОписаниеОшибкиЗапросаZarplata(ТекущаяСтрока);
			КонецЕсли;
			СообщитьОбОшибкеПолученияВакансии(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		КонецЕсли;
		
	Иначе
		
		ОписаниеПубликации = ПарсерJSON(ТекущаяСтрока, ПрочитатьВСоответствие);
		
	КонецЕсли;
	
	Возврат ОписаниеПубликации;
	
КонецФункции

Функция ОписаниеПубликацииВакансииHeadHunter(ИдентификаторВакансии, Соединение, МаркерДоступа, СообщатьОбОшибке = Истина) Экспорт
	
	Запрос = HTTPЗапросHeadHunter(СтрШаблон("/vacancies/%1", ИдентификаторВакансии), МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	Возврат ОписаниеПубликацииВакансии(HeadHunter(), Ответ, СообщатьОбОшибке, Истина);
	
КонецФункции

Функция ОписаниеПубликацииВакансииRabota(ИдентификаторВакансии, Соединение, МаркерДоступа, СообщатьОбОшибке = Истина) Экспорт
	
	Запрос = HTTPЗапросRabota(СтрШаблон("vacancies/%1", ИдентификаторВакансии), МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	Возврат ОписаниеПубликацииВакансии(Rabota(), Ответ, СообщатьОбОшибке);
	
КонецФункции

Функция ОписаниеПубликацииВакансииSuperJob(ИдентификаторВакансии, Соединение, МаркерДоступа, СообщатьОбОшибке = Истина) Экспорт
	
	Запрос = HTTPЗапросSuperJob(СтрШаблон("/2.0/vacancies/%1/", ИдентификаторВакансии), МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	Возврат ОписаниеПубликацииВакансии(SuperJob(), Ответ, СообщатьОбОшибке);
	
КонецФункции

Функция ОписаниеПубликацииВакансииZarplata(ИдентификаторВакансии, Соединение, МаркерДоступа, СообщатьОбОшибке = Истина) Экспорт

	Запрос = HTTPЗапросZarplata(СтрШаблон("/v1/vacancies/%1/", ИдентификаторВакансии), МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	Возврат ОписаниеПубликацииВакансии(Zarplata(), Ответ, СообщатьОбОшибке);
	
КонецФункции

Функция JSONОписаниеВакансииHeadHunter(Дерево, Обновление = Ложь) Экспорт
	
	СтрокаJSON = "";
	
	СтруктураОписанияВакансииHeadHunter = СтруктураОписанияВакансииHeadHunter(Дерево, Обновление);
	СтрокаJSON = ЗаписьJSON(СтруктураОписанияВакансииHeadHunter);
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция СтруктураОписанияВакансииHeadHunter(Дерево, Обновление = Ложь)
	
	ПоляВакансии = Новый Структура;
	ПоляСТекстомВHTML = ПоляВакансииСТекстомВHTMLHeadHunter();
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если ТипЗнч(СтрокаДерева.Показатель) = Тип("СправочникСсылка.Вакансии") Тогда
			Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.Строки Цикл
				Если СтрокаДереваПодчиненная.ТипРеквизита = "Строка" Тогда
					Если Обновление 
						И Не СтрокаДереваПодчиненная.СтрокаИзменена Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДереваПодчиненная.ПубликацияВакансии) Тогда
						
						Если ПоляСТекстомВHTML.Найти(СтрокаДереваПодчиненная.Путь) <> Неопределено Тогда
							ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансииТекст;
						Иначе
							ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансии;
						КонецЕсли;
						
						ПоляВакансии.Вставить(СтрокаДереваПодчиненная.Путь, ЗначениеПоля);
						
					КонецЕсли;
					
				ИначеЕсли СтрокаДереваПодчиненная.ТипРеквизита = "Булево" Тогда
					Если Обновление 
						И Не СтрокаДереваПодчиненная.СтрокаИзменена Тогда
						Продолжить;
					КонецЕсли;
					
					ПоляВакансии.Вставить(СтрокаДереваПодчиненная.Путь, СтрокаДереваПодчиненная.ПубликацияВакансии);
					
				ИначеЕсли СтрокаДереваПодчиненная.ТипРеквизита = "Начало объекта" Тогда
					НомерВхожденияТочки = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(СтрокаДереваПодчиненная.Путь, ".");
					Если НомерВхожденияТочки > 0 Тогда
						Если Обновление 
							И Не СтрокаДереваПодчиненная.СтрокаИзменена Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяОбъекта = Лев(СтрокаДереваПодчиненная.Путь, НомерВхожденияТочки - 1);
						РеквизитОбъекта = Сред(СтрокаДереваПодчиненная.Путь, НомерВхожденияТочки + 1, СтрДлина(СтрокаДереваПодчиненная.Путь) - НомерВхожденияТочки);
						
						СтруктураОбъекта = Новый Структура;
						Если ТипЗнч(СтрокаДереваПодчиненная.ПубликацияВакансии) = Тип("СписокЗначений") 
							И СтрокаДереваПодчиненная.ПубликацияВакансии.Количество() = 1 
							И ЗначениеЗаполнено(СтрокаДереваПодчиненная.ПубликацияВакансии[0].Значение) Тогда
							
							СтруктураОбъекта.Вставить(РеквизитОбъекта, СтрокаДереваПодчиненная.ПубликацияВакансии[0].Значение);
							ПоляВакансии.Вставить(ИмяОбъекта, СтруктураОбъекта);
						КонецЕсли;
						
					Иначе
						
						ИмяОбъекта = СтрокаДереваПодчиненная.Путь;
						
						СтруктураОбъекта = Новый Структура;
						ОбъектИзменен = Ложь;
						Для Каждого СтрокаОбъекта Из СтрокаДереваПодчиненная.Строки Цикл
							
							ОбъектИзменен = ОбъектИзменен Или СтрокаОбъекта.СтрокаИзменена;
							
							НомерВхожденияТочки = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(СтрокаОбъекта.Путь, ".");
							Если НомерВхожденияТочки > 0 Тогда
								РеквизитОбъекта = Сред(СтрокаОбъекта.Путь, НомерВхожденияТочки + 1, СтрДлина(СтрокаОбъекта.Путь) - НомерВхожденияТочки);
							Иначе	
								РеквизитОбъекта = СтрокаОбъекта.Путь;
							КонецЕсли;
							
							Если ТипЗнч(СтрокаОбъекта.ПубликацияВакансии) = Тип("СписокЗначений") Тогда 
								Если СтрокаОбъекта.ПубликацияВакансии.Количество() = 1 
									И ЗначениеЗаполнено(СтрокаОбъекта.ПубликацияВакансии[0].Значение) Тогда
									
									Если ТипЗнч(СтрокаОбъекта.ПубликацияВакансии[0].Значение) = Тип("Структура") Тогда
										
										МассивОбъектов = Новый Массив;
										МассивОбъектов.Добавить(СтрокаОбъекта.ПубликацияВакансии[0].Значение);
										СтруктураОбъекта.Вставить(РеквизитОбъекта, МассивОбъектов);
										
									Иначе
										СтруктураОбъекта.Вставить(РеквизитОбъекта, СтрокаОбъекта.ПубликацияВакансии[0].Значение);
									КонецЕсли;
									
								ИначеЕсли  СтрокаОбъекта.ПубликацияВакансии.Количество() > 1 Тогда
									
									МассивОбъектов = Новый Массив;
									Для Каждого ЭлементСписка Из СтрокаОбъекта.ПубликацияВакансии Цикл
										
										Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
											МассивОбъектов.Добавить(ЭлементСписка.Значение);
										КонецЕсли;
										
									КонецЦикла;
									
									СтруктураОбъекта.Вставить(РеквизитОбъекта, МассивОбъектов);
								КонецЕсли;
							Иначе
								СтруктураОбъекта.Вставить(РеквизитОбъекта, СтрокаОбъекта.ПубликацияВакансии);
							КонецЕсли;
							
						КонецЦикла;
						
						Если Обновление 
							И Не ОбъектИзменен Тогда
							Продолжить;
						КонецЕсли;
						
						ПоляВакансии.Вставить(ИмяОбъекта, СтруктураОбъекта);
						
					КонецЕсли;
					
				ИначеЕсли СтрокаДереваПодчиненная.ТипРеквизита = "Начало массива" Тогда
					Если Обновление
						И Не СтрокаДереваПодчиненная.СтрокаИзменена Тогда
						Продолжить;
					КонецЕсли;
					
					МассивЭлементов = Новый Массив;
					НомерВхожденияТочки = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(СтрокаДереваПодчиненная.Путь, ".");
					Если НомерВхожденияТочки > 0 Тогда
						ИмяМассива = Лев(СтрокаДереваПодчиненная.Путь, НомерВхожденияТочки - 1);
						ИмяЭлементаМассива = Сред(СтрокаДереваПодчиненная.Путь, НомерВхожденияТочки + 1, СтрДлина(СтрокаДереваПодчиненная.Путь) - НомерВхожденияТочки);
						
						Если ТипЗнч(СтрокаДереваПодчиненная.ПубликацияВакансии) = Тип("СписокЗначений") 
							И СтрокаДереваПодчиненная.ПубликацияВакансии.Количество() > 0 Тогда
							
							Для Каждого ЭлементСписка Из СтрокаДереваПодчиненная.ПубликацияВакансии Цикл
								Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
									СтруктураЭлементаМассива = Новый Структура;
									СтруктураЭлементаМассива.Вставить(ИмяЭлементаМассива, ЭлементСписка.Значение);
									
									МассивЭлементов.Добавить(СтруктураЭлементаМассива);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						ПоляВакансии.Вставить(ИмяМассива, МассивЭлементов);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Обновление Тогда
				СтруктураИнформацииОРаботодателе = Новый Структура;
				СтруктураИнформацииОРаботодателе.Вставить("id", ИдентификаторПользователяИзРегистра(HeadHunter()));
				ПоляВакансии.Вставить("employer", СтруктураИнформацииОРаботодателе);
			КонецЕсли;
			
			Если Не Обновление Тогда
				СтруктураИнформацииОСайте = Новый Структура;
				СтруктураИнформацииОСайте.Вставить("id", "hh");
				ПоляВакансии.Вставить("site", СтруктураИнформацииОСайте);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоляВакансии;
	
КонецФункции

Функция JSONОписаниеВакансииRabota(Дерево, Обновление = Ложь) Экспорт
	
	СтрокаJSON = "";
	
	СтруктураОписанияВакансииRabota = СтруктураОписанияВакансииRabota(Дерево, Обновление);
	СтрокаJSON = ЗаписьJSON(СтруктураОписанияВакансииRabota);
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция СтруктураОписанияВакансииRabota(Дерево, Обновление = Ложь)
	
	ПоляВакансии = Новый Структура;
	ПоляСТекстомВHTML = ПоляВакансииСТекстомВHTMLRabota();
	КлассификаторыRabota = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыRabota");
	Представительства = КлассификаторыRabota.representations;
	
	Если Обновление Тогда
		ПоляВакансии.Вставить("action", "edit");
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если ТипЗнч(СтрокаДерева.Показатель) <> Тип("СправочникСсылка.Вакансии") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.Строки Цикл
			
			ИмяПоля = СтрокаДереваПодчиненная.Путь;
			ИмяПоля = СтрЗаменить(ИмяПоля, "language", "languages");
			
			Если СтрокаДереваПодчиненная.ТипРеквизита <> "Начало объекта"
				И СтрокаДереваПодчиненная.ПубликацияВакансии = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДереваПодчиненная.ТипРеквизита = "Строка" Тогда
				
				Если ПоляСТекстомВHTML.Найти(ИмяПоля) <> Неопределено Тогда
					ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансииТекст;
				Иначе
					ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансии;
				КонецЕсли;
				
				ПоляВакансии.Вставить(ИмяПоля, ЗначениеПоля);
				
			ИначеЕсли СтрокаДереваПодчиненная.ТипРеквизита = "Булево" 
				Или СтрокаДереваПодчиненная.ТипРеквизита = "Число" Тогда
				
				ПоляВакансии.Вставить(ИмяПоля, СтрокаДереваПодчиненная.ПубликацияВакансии);
				
			ИначеЕсли СтрокаДереваПодчиненная.ТипРеквизита = "Начало объекта" Тогда
				
				СвойстваОбъекта = СтрокаДереваПодчиненная.Строки;
				
				Если ИмяПоля = "additionalInformation" Тогда
					
					Для Каждого Свойство Из СвойстваОбъекта Цикл
						
						ЗначениеСвойства = ЗначениеСвойстваОбъекта(Свойство);
						
						Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
							ИмяСвойства = Сред(Свойство.Путь, СтрДлина(ИмяПоля) + 2);
							ПоляВакансии.Вставить(ИмяСвойства, ЗначениеСвойства);
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли СвойстваОбъекта.Количество() > 0 Тогда
					
					СтруктураСвойств = Новый Структура;
					Для Каждого Свойство Из СвойстваОбъекта Цикл
						
						ЗначениеСвойства = ЗначениеСвойстваОбъекта(Свойство);
						
						Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
							ИмяСвойства = Сред(Свойство.Путь, СтрДлина(ИмяПоля) + 2);
							СтруктураСвойств.Вставить(ИмяСвойства, ЗначениеСвойства);
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЗначениеЗаполнено(СтруктураСвойств) Тогда
						ПоляВакансии.Вставить(ИмяПоля, СтруктураСвойств);
					КонецЕсли;
					
				Иначе
					
					Если ТипЗнч(СтрокаДереваПодчиненная.ПубликацияВакансии) = Тип("СписокЗначений") Тогда 
						ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансии[0].Значение;
					Иначе
						ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансии;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						ПоляВакансии.Вставить(ИмяПоля, ЗначениеПоля);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаДереваПодчиненная.ТипРеквизита = "Начало массива" Тогда
				
				МассивЭлементов = Новый Массив;
				Для Каждого ЭлементСписка Из СтрокаДереваПодчиненная.ПубликацияВакансии Цикл
					
					Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
						
						Если ИмяПоля = "address" Тогда
							
							ВыбранноеЗначение = ЭлементСписка.Значение;
							ДанныеДляПередачи = Новый Структура("name,region,address,comment,metro");
							
							Для Каждого ДанныеПредставительства Из Представительства Цикл
								
								Если ВыбранноеЗначение = ДанныеПредставительства.id Тогда
									
									ЗаполнитьЗначенияСвойств(ДанныеДляПередачи, ДанныеПредставительства, "name, address, comment");
									ДанныеДляПередачи.region = ДанныеПредставительства.region.id;
									
									СтанцииМетро = Новый Массив;
									Для Каждого Метро Из ДанныеПредставительства.metro Цикл
										СтанцииМетро.Добавить(Метро.id);
										ДанныеДляПередачи.metro = СтанцииМетро;
									КонецЦикла;
									
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
								
							ДанныеДляПередачи.Вставить("representation", ВыбранноеЗначение);
							
							МассивЭлементов.Добавить(ДанныеДляПередачи);
							
						ИначеЕсли ИмяПоля = "languages" Тогда
							
							ДанныеДляПередачи = Новый Структура;
							ДанныеДляПередачи.Вставить("offerLanguage", ЭлементСписка.Значение.offerLanguage.id);
							ДанныеДляПередачи.Вставить("offerLanguageLevel", ЭлементСписка.Значение.offerLanguageLevel.id);
							
							МассивЭлементов.Добавить(ДанныеДляПередачи);
							
						Иначе
							МассивЭлементов.Добавить(ЭлементСписка.Значение);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ПоляВакансии.Вставить(ИмяПоля, МассивЭлементов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПоляВакансии;
	
КонецФункции

Функция ОписаниеВакансииДляПубликацииSuperJob(Дерево) Экспорт 
	
	ОписаниеВакансииДляПубликацииSuperJob = "";
	ПоляСМногострочнымВводом = ПоляВакансииСМногострочнымВводомSuperJob();
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
	
		Если ТипЗнч(СтрокаДерева.Показатель) = Тип("СправочникСсылка.Вакансии") Тогда
			Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.Строки Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаДереваПодчиненная.ПубликацияВакансии) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(СтрокаДереваПодчиненная.ПубликацияВакансии) = Тип("Строка") Тогда
					
					Если ПоляСМногострочнымВводом.Найти(ТипЗнч(СтрокаДереваПодчиненная.Путь)) <> Неопределено Тогда
						ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансииТекст;
					Иначе
						ЗначениеПоля = СтрокаДереваПодчиненная.ПубликацияВакансии;
					КонецЕсли;
					
					ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "=" + ЗначениеПоля + "&";
					
				ИначеЕсли ТипЗнч(СтрокаДереваПодчиненная.ПубликацияВакансии) = Тип("Число") Тогда
					ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "=" + Формат(СтрокаДереваПодчиненная.ПубликацияВакансии, "ЧГ=0") + "&";
				ИначеЕсли ТипЗнч(СтрокаДереваПодчиненная.ПубликацияВакансии) = Тип("Булево") Тогда
					ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "=" + ?(СтрокаДереваПодчиненная.ПубликацияВакансии = Истина, 1, 0) + "&";
				ИначеЕсли ТипЗнч(СтрокаДереваПодчиненная.ПубликацияВакансии) = Тип("СписокЗначений") Тогда
					
					Если СтрокаДереваПодчиненная.ТипРеквизита = "Начало объекта" Тогда
						
						ЗначениеОбъекта = СтрокаДереваПодчиненная.ПубликацияВакансии[0].Значение;
						Если ТипЗнч(ЗначениеОбъекта) = Тип("Число") Тогда
							ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "=" + Формат(ЗначениеОбъекта) + "&";
						Иначе
							ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "=" + СтрЗаменить(ЗначениеОбъекта, "Ключ", "") + "&";
						КонецЕсли;
						
					ИначеЕсли СтрокаДереваПодчиненная.ТипРеквизита = "Начало массива" Тогда
						
						Индекс = 0;
						Для Каждого Элемент Из СтрокаДереваПодчиненная.ПубликацияВакансии Цикл
							
							Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
								ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "[" + Индекс + "]" + "=" + СтрЗаменить(Элемент.Значение, "Ключ", "") + "&";				
							ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
								
								Если СтрокаДереваПодчиненная.Путь = "phones" Тогда
									
									Для Каждого ЭлементСтруктуры Из Элемент.Значение Цикл
										ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "[" + Индекс + "]" + "[" + ЭлементСтруктуры.Ключ + "]" + "=" + ЭлементСтруктуры.Значение + "&";					
									КонецЦикла;
									
								ИначеЕсли СтрокаДереваПодчиненная.Путь = "languages" Тогда
									
									Для Каждого ЭлементСтруктуры Из Элемент.Значение Цикл
										ОписаниеВакансииДляПубликацииSuperJob = ОписаниеВакансииДляПубликацииSuperJob + СтрокаДереваПодчиненная.Путь + "[" + Индекс + "]" + "[" + ЭлементСтруктуры.Ключ + "]" + "=" + СтрЗаменить(ЭлементСтруктуры.Значение.id, "Ключ", "") + "&";					
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЕсли;
							
							Индекс = Индекс + 1;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ОписаниеВакансииДляПубликацииSuperJob) Тогда
		ОписаниеВакансииДляПубликацииSuperJob = Лев(ОписаниеВакансииДляПубликацииSuperJob, СтрДлина(ОписаниеВакансииДляПубликацииSuperJob) - 1);
	КонецЕсли;
	
	Возврат ОписаниеВакансииДляПубликацииSuperJob;
	
КонецФункции

Функция JSONОписаниеВакансииZarplata(Дерево, Обновление = Ложь) Экспорт
	
	СтрокаJSON = "";
	
	СтруктураОписанияВакансииZarplata = СтруктураОписанияВакансииZarplata(Дерево, Обновление);
	СтрокаJSON = ЗаписьJSON(СтруктураОписанияВакансииZarplata);
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция СтруктураОписанияВакансииZarplata(Дерево, Обновление = Ложь)
	
	СтруктураВакансии = Новый Структура;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если ТипЗнч(СтрокаДерева.Показатель) = Тип("СправочникСсылка.Вакансии") Тогда
			Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.Строки Цикл
				ДополнитьСтруктуруВакансииПростымОбъектомZarplata(СтруктураВакансии, СтрокаДереваПодчиненная, Обновление);
				ДополнитьСтруктуруВакансииМассивомZarplata(СтруктураВакансии, СтрокаДереваПодчиненная, Обновление);
				ДополнитьСтруктуруВакансииОбъектомZarplata(СтруктураВакансии, СтрокаДереваПодчиненная, Обновление);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВакансии;
	
КонецФункции

Процедура ДополнитьСтруктуруВакансииПростымОбъектомZarplata(СтруктураВакансии, СтрокаДерева, Обновление)
	
	Если Не (СтрокаДерева.ТипРеквизита = "Строка"
		Или СтрокаДерева.ТипРеквизита = "Булево"
		Или СтрокаДерева.ТипРеквизита = "Число") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.ПубликацияВакансии) Тогда
		Возврат;
	КонецЕсли;
	
	Если Обновление И Не СтрокаДерева.СтрокаИзменена Тогда
		Если СтрокаДерева.Путь = "header" Или СтрокаДерева.Путь = "description" Тогда
			Если Не СтрокаДерева.ВакансияВПрограмме = СтрокаДерева.ПубликацияВакансии Тогда
				СтрокаДерева.СтрокаИзменена = Истина;
				Значение = ИнтеграцияРекрутинговыхСайтовРедакция3.РеквизитВакансииСоответствующийПолюПубликации(
					СтрокаДерева.Путь, СтрокаДерева.Родитель.Показатель);
				СтруктураВакансии.Вставить(СтрокаДерева.Путь, Значение);
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаДерева.ТипРеквизита = "Строка" Тогда
		ПоляСТекстомВHTML = ПоляВакансииСТекстомВHTMLZarplata();
		Если ПоляСТекстомВHTML.Найти(СтрокаДерева.Путь) <> Неопределено Тогда
			Значение = СтрокаДерева.ПубликацияВакансииТекст;
		Иначе
			Значение = СтрокаДерева.ПубликацияВакансии;
		КонецЕсли;
	Иначе
		Значение = ?(СтрокаДерева.ТипРеквизита = "Число",
			Формат(СтрокаДерева.ПубликацияВакансии, "ЧН=0; ЧГ=0"),
			СтрокаДерева.ПубликацияВакансии);
	КонецЕсли;
	
	СтруктураВакансии.Вставить(СтрокаДерева.Путь, Значение);

КонецПроцедуры

Процедура ДополнитьСтруктуруВакансииМассивомZarplata(СтруктураВакансии, СтрокаДерева, Обновление)
	
	Если Не СтрокаДерева.ТипРеквизита = "Начало массива" Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаДерева.ПубликацияВакансии) Тогда
		Возврат;
	КонецЕсли;
	
	Если Обновление И Не СтрокаДерева.СтрокаИзменена Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	НомерВхожденияТочки = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(СтрокаДерева.Путь, ".");
	Если НомерВхожденияТочки > 0 Тогда
		ИмяМассива = Лев(СтрокаДерева.Путь, НомерВхожденияТочки - 1);
		ИмяЭлементаМассива = Сред(СтрокаДерева.Путь, НомерВхожденияТочки + 1, СтрДлина(СтрокаДерева.Путь) - НомерВхожденияТочки);
		
		Если Не (ТипЗнч(СтрокаДерева.ПубликацияВакансии) = Тип("СписокЗначений")
			И СтрокаДерева.ПубликацияВакансии.Количество() > 0) Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяМассива = "rubrics" Тогда
			МассивЭлементов = СписокРубрикZarplata(СтрокаДерева.ПубликацияВакансии);
		Иначе
			Для Каждого ЭлементСписка Из СтрокаДерева.ПубликацияВакансии Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
					СтруктураЭлементаМассива = Новый Структура;
					СтруктураЭлементаМассива.Вставить(ИмяЭлементаМассива, ЭлементСписка.Значение);
					МассивЭлементов.Добавить(СтруктураЭлементаМассива);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураВакансии.Вставить(ИмяМассива, МассивЭлементов);
	КонецЕсли;
	
КонецПроцедуры

Функция СписокРубрикZarplata(МассивЭлементов)
	
	Рубрики = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		ИдентификаторРодителя = ЭлементМассива.Значение.ИдентификаторДоп;
		Если Рубрики[ИдентификаторРодителя] = Неопределено Тогда
			Рубрики.Вставить(ИдентификаторРодителя, Новый Массив);
		КонецЕсли;
		Рубрики[ИдентификаторРодителя].Добавить(Новый Структура("id", ЭлементМассива.Значение.ИдентификаторОбщий));
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Для Каждого Рубрика Из Рубрики Цикл
		СтруктураРубрики = Новый Структура;
		СтруктураРубрики.Вставить("id", Рубрика.Ключ);
		СтруктураРубрики.Вставить("specialities", Рубрика.Значение);
		Результат.Добавить(СтруктураРубрики);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСтруктуруВакансииОбъектомZarplata(СтруктураВакансии, СтрокаДерева, Обновление)
	
	Если Не СтрокаДерева.ТипРеквизита = "Начало объекта" Тогда
		Возврат;
	КонецЕсли;
	
	НомерВхожденияТочки = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(СтрокаДерева.Путь, ".");
	СтруктураОбъекта = Новый Структура;
	
	Если НомерВхожденияТочки > 0 Тогда
		Если Обновление И Не СтрокаДерева.СтрокаИзменена Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ТипЗнч(СтрокаДерева.ПубликацияВакансии) = Тип("СписокЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		Если Не СтрокаДерева.ПубликацияВакансии.Количество() = 1 Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеПоля = СтрокаДерева.ПубликацияВакансии[0].Значение;
		
		Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяОбъекта = Лев(СтрокаДерева.Путь, НомерВхожденияТочки - 1);
		РеквизитОбъекта = Сред(СтрокаДерева.Путь, НомерВхожденияТочки + 1, СтрДлина(СтрокаДерева.Путь) - НомерВхожденияТочки);
		
		СтруктураОбъекта.Вставить(РеквизитОбъекта, ЗначениеПоля);
		СтруктураВакансии.Вставить(ИмяОбъекта, СтруктураОбъекта);
		
	Иначе
		
		ИмяОбъекта = СтрокаДерева.Путь;
		ОбъектИзменен = Ложь;
		
		Для Каждого СтрокаОбъекта Из СтрокаДерева.Строки Цикл
			ОбъектИзменен = ОбъектИзменен Или СтрокаОбъекта.СтрокаИзменена;
			НомерВхожденияТочки = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(СтрокаОбъекта.Путь, ".");
			Если НомерВхожденияТочки > 0 Тогда
				РеквизитОбъекта = Сред(СтрокаОбъекта.Путь, НомерВхожденияТочки + 1, СтрДлина(СтрокаОбъекта.Путь) - НомерВхожденияТочки);
			Иначе
				РеквизитОбъекта = СтрокаОбъекта.Путь;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаОбъекта.ПубликацияВакансии) Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеквизитОбъекта = "phones" Тогда
				Телефоны = Новый Массив;
				Для Каждого ЭлементСписка Из СтрокаОбъекта.ПубликацияВакансии Цикл
					СтруктураТелефон = Новый Структура;
					СтруктураТелефон.Вставить("comment", ЭлементСписка.Значение.Комментарий);
					СтруктураТелефон.Вставить("phone",
						ЭлементСписка.Значение.КодСтраны + ЭлементСписка.Значение.КодГорода + ЭлементСписка.Значение.НомерТелефона);
					Телефоны.Добавить(СтруктураТелефон);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Телефоны) Тогда
					СтруктураОбъекта.Вставить(РеквизитОбъекта, Телефоны);
				КонецЕсли;
			ИначеЕсли РеквизитОбъекта = "city" Тогда
				Для Каждого ЭлементСписка Из СтрокаОбъекта.ПубликацияВакансии Цикл
					СтруктураГорода = Новый Структура;
					СтруктураГорода.Вставить("id", ЭлементСписка.Значение);
					СтруктураГорода.Вставить("name", ЭлементСписка.Представление);
					СтруктураОбъекта.Вставить(РеквизитОбъекта, СтруктураГорода);
				КонецЦикла;
			ИначеЕсли ТипЗнч(СтрокаОбъекта.ПубликацияВакансии) = Тип("СписокЗначений") Тогда 
				Если СтрокаОбъекта.ПубликацияВакансии.Количество() = 1 
					И ЗначениеЗаполнено(СтрокаОбъекта.ПубликацияВакансии[0].Значение) Тогда
					
					СтруктураОбъекта.Вставить(РеквизитОбъекта, СтрокаОбъекта.ПубликацияВакансии[0].Значение);
					
				ИначеЕсли СтрокаОбъекта.ПубликацияВакансии.Количество() > 1 Тогда
					
					МассивОбъектов = Новый Массив;
					Для Каждого ЭлементСписка Из СтрокаОбъекта.ПубликацияВакансии Цикл
						
						Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
							МассивОбъектов.Добавить(ЭлементСписка.Значение);
						КонецЕсли;
						
					КонецЦикла;
					
					СтруктураОбъекта.Вставить(РеквизитОбъекта, МассивОбъектов);
				КонецЕсли;
			Иначе
				СтруктураОбъекта.Вставить(РеквизитОбъекта, СтрокаОбъекта.ПубликацияВакансии);
			КонецЕсли;

		КонецЦикла;
		
		Если ИмяОбъекта = "payment_type_alias" Тогда
			ОбъектИзменен = СтрокаДерева.СтрокаИзменена;
			
			Если Не ЗначениеЗаполнено(СтрокаДерева.ПубликацияВакансии) Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураОбъекта = СтрокаДерева.ПубликацияВакансии[0].Значение;
			
		КонецЕсли;
		
		Если ИмяОбъекта = "currency"
			Или ИмяОбъекта = "working_type"
			Или ИмяОбъекта = "schedule"
			Или ИмяОбъекта = "education"
			Или ИмяОбъекта = "experience_length" Тогда
			ОбъектИзменен = СтрокаДерева.СтрокаИзменена;
			
			Если Не ЗначениеЗаполнено(СтрокаДерева.ПубликацияВакансии) Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураОбъекта.Вставить("id", СтрокаДерева.ПубликацияВакансии[0].Значение);
			СтруктураОбъекта.Вставить("title", СтрокаДерева.ПубликацияВакансии[0].Представление);
		КонецЕсли;
		
		Если Обновление И Не ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;

		СтруктураВакансии.Вставить(ИмяОбъекта, СтруктураОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиАвторизации(Сайт, СтруктураМаркеров, ИмяПользователя = Неопределено, Пароль = Неопределено)
	
	МенеджерЗаписи = РегистрыСведений.НастройкиИнтеграцииРекрутинговыхСайтов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.РекрутинговыйСайт = Сайт;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		
		Если Не Сайт = HeadHunter()
			И Не Сайт = Zarplata()
			И Не ЗначениеЗаполнено(ИмяПользователя) 
			И Не ЗначениеЗаполнено(Пароль) Тогда
			Возврат;
		Иначе
			
			МенеджерЗаписи.РекрутинговыйСайт = Сайт;
			МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
			МенеджерЗаписи.ИмяПользователя = ИмяПользователя;
			
			УстановитьПривилегированныйРежим(Истина);
			Если Сайт = Rabota() Тогда
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.ТекущийПользователь(), Пароль, "ПарольRabota");
			ИначеЕсли Сайт = SuperJob() Тогда
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.ТекущийПользователь(), Пароль, "ПарольSuperJob");
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи.Использовать = Истина;

	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		МенеджерЗаписи.ИмяПользователя = ИмяПользователя;
	КонецЕсли;
	
	Если Сайт = Rabota() Тогда
		МенеджерЗаписи.МаркерДоступа = СтруктураМаркеров.sessionId;
		МенеджерЗаписи.ДатаОкончанияДействияМаркераДоступа = ТекущаяДатаСеанса() + 1800;
	Иначе
		МенеджерЗаписи.МаркерДоступа = СтруктураМаркеров.access_token;
		МенеджерЗаписи.МаркерОбновления = СтруктураМаркеров.refresh_token;
		МенеджерЗаписи.ДатаОкончанияДействияМаркераДоступа = ТекущаяДатаСеанса() + СтруктураМаркеров.expires_in;
	КонецЕсли;
	
	Если Сайт = HeadHunter() Тогда
		
		ИнформацияОПользователе = ИнформацияОПользователе(Сайт, МенеджерЗаписи.МаркерДоступа);
		
		Если ЗначениеЗаполнено(ИнформацияОПользователе.ИдентификаторКомпании) Тогда
			МенеджерЗаписи.ИдентификаторПользователя = ИнформацияОПользователе.ИдентификаторКомпании;
			МенеджерЗаписи.ИмяПользователя = ИнформацияОПользователе.ИмяПользователя;
		Иначе
			
			СтруктураМаркеров.access_token = "";
			СтруктураМаркеров.refresh_token = "";
			
			СообщитьОбАвторизацииНеРаботодателя();
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Сайт = Zarplata() Тогда
		
		ИнформацияОПользователе = ИнформацияОПользователе(Сайт, МенеджерЗаписи.МаркерДоступа);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ИнформацияОПользователе);
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ИнформацияОПользователе(Сайт, МаркерДоступа) Экспорт
	
	СтруктураИнформацияОПользователе = СтруктураИнформацияОПользователе();
	Если Сайт = HeadHunter() Тогда
		
		ИнформацияОПользователе = ИнформацияОПользователеHeadHunter(МаркерДоступа);
		Если ЗначениеЗаполнено(ИнформацияОПользователе) Тогда
			
			Если ЗначениеЗаполнено(ИнформацияОПользователе.employer) Тогда
				СтруктураИнформацияОПользователе.ИдентификаторКомпании = ИнформацияОПользователе.employer.id;
				СтруктураИнформацияОПользователе.ИдентификаторПользователя = ИнформацияОПользователе.employer.manager_id;
			КонецЕсли;
			Попытка
				СтруктураИнформацияОПользователе.ИмяПользователя = ИнформацияОПользователе.email;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли Сайт = SuperJob() Тогда
		
		ИнформацияОПользователе = ИнформацияОПользователеSuperJob(МаркерДоступа);
		Если ЗначениеЗаполнено(ИнформацияОПользователе) Тогда
			
			СтруктураИнформацияОПользователе.ИдентификаторКомпании = Формат(ИнформацияОПользователе.id_client, "ЧГ=0");
			СтруктураИнформацияОПользователе.ИдентификаторПользователя = Формат(ИнформацияОПользователе.id, "ЧГ=0");
			
			Для Каждого Тариф Из ИнформацияОПользователе.tariffs Цикл
				
				Если Тариф.is_unlimited Тогда
					СтруктураИнформацияОПользователе.БезлимитныйТариф = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Сайт = Zarplata() Тогда
		
		ИнформацияОПользователе = ИнформацияОПользователеZarplata(МаркерДоступа);
		Если ЗначениеЗаполнено(ИнформацияОПользователе) Тогда
			Попытка
				ИнформацияОПользователе = ИнформацияОПользователе.users[0];
				СтруктураИнформацияОПользователе.ИдентификаторКомпании = Формат(ИнформацияОПользователе.company_id, "ЧГ=0");
				СтруктураИнформацияОПользователе.ИдентификаторПользователя = Формат(ИнформацияОПользователе.id, "ЧГ=0");
				СтруктураИнформацияОПользователе.ИмяПользователя = ИнформацияОПользователе.login;
			Исключение
				СтруктураИнформацияОПользователе = СтруктураИнформацияОПользователе();
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураИнформацияОПользователе;
	
КонецФункции

Функция ИнформацияОПользователеHeadHunter(МаркерДоступа, СообщатьОбОшибке = Истина)
	
	ИнформацияОПользователе = Неопределено;
	
	Соединение = HTTPСоединениеHeadHunter();
	Запрос = HTTPЗапросHeadHunter("/me", МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		ИнформацияОПользователе = ПарсерJSON(ТекущаяСтрока);
	ИначеЕсли СообщатьОбОшибке Тогда
		СообщитьОбОшибкеПолученияДанныхПользователя(HeadHunter(), Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнформацияОПользователе;
	
КонецФункции

Функция ИнформацияОПользователеSuperJob(МаркерДоступа, СообщатьОбОшибке = Истина)
	
	ИнформацияОПользователе = Неопределено;
	
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob("/2.0/user/current/", МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		ИнформацияОПользователе = ПарсерJSON(ТекущаяСтрока);
	ИначеЕсли СообщатьОбОшибке Тогда
		СообщитьОбОшибкеПолученияДанныхПользователя(SuperJob(), Ответ.КодСостояния, ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнформацияОПользователе;
	
КонецФункции

Функция ИнформацияОПользователеZarplata(МаркерДоступа, СообщатьОбОшибке = Истина)
	
	ИнформацияОПользователе = Неопределено;
	
	Соединение = HTTPСоединениеZarplata();
	Запрос = HTTPЗапросZarplata("/v1/users/self", МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		ИнформацияОПользователе = ПарсерJSON(ТекущаяСтрока);
	ИначеЕсли СообщатьОбОшибке Тогда
		СообщитьОбОшибкеПолученияДанныхПользователя(Zarplata(), Ответ.КодСостояния, ОписаниеОшибкиЗапросаZarplata(ТекущаяСтрока));
	КонецЕсли;
	
	Возврат ИнформацияОПользователе;
	
КонецФункции

Функция ИнформацияОбАдресахКомпанииRabota(МаркерДоступа)
	
	ИнформацияОбАдресах = Неопределено;
	
	Соединение = HTTPСоединениеRabota();
	Запрос = HTTPЗапросRabota("representations", МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		ИнформацияОбАдресах = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	Возврат ИнформацияОбАдресах;
	
КонецФункции

Функция ИдентификаторПользователяИзРегистра(Сайт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь,
	|	НастройкиИнтеграцииРекрутинговыхСайтов.ИдентификаторПользователя
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииРекрутинговыхСайтов КАК НастройкиИнтеграцииРекрутинговыхСайтов
	|ГДЕ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь = &Пользователь
	|	И НастройкиИнтеграцииРекрутинговыхСайтов.РекрутинговыйСайт = &РекрутинговыйСайт
	|	И НастройкиИнтеграцииРекрутинговыхСайтов.Использовать";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("РекрутинговыйСайт", Сайт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторПользователя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция МаркерДоступа(Сайт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь,
		|	НастройкиИнтеграцииРекрутинговыхСайтов.МаркерДоступа
		|ИЗ
		|	РегистрСведений.НастройкиИнтеграцииРекрутинговыхСайтов КАК НастройкиИнтеграцииРекрутинговыхСайтов
		|ГДЕ
		|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь = &Пользователь
		|	И НастройкиИнтеграцииРекрутинговыхСайтов.РекрутинговыйСайт = &РекрутинговыйСайт
		|	И НастройкиИнтеграцииРекрутинговыхСайтов.Использовать";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("РекрутинговыйСайт", Сайт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МаркерДоступа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция МаркерДоступаHeadHunter() Экспорт
	
	Возврат МаркерДоступа(HeadHunter());
	
КонецФункции

Функция МаркерДоступаRabota() Экспорт
	
	Возврат МаркерДоступа(Rabota());
	
КонецФункции

Функция МаркерДоступаSuperJob() Экспорт
	
	Возврат МаркерДоступа(SuperJob());
	
КонецФункции

Функция МаркерДоступаZarplata() Экспорт
	
	Возврат МаркерДоступа(Zarplata());
	
КонецФункции

Функция ПроверитьВалидностьМаркера(Сайт, МаркерДоступа)
	
	Если Сайт = HeadHunter() Тогда
		Возврат ЗначениеЗаполнено(ИнформацияОПользователеHeadHunter(МаркерДоступа));
	ИначеЕсли Сайт = Rabota() Тогда
		Возврат ЗначениеЗаполнено(ИнформацияОбАдресахКомпанииRabota(МаркерДоступа));
	ИначеЕсли Сайт = SuperJob() Тогда
		Возврат ЗначениеЗаполнено(ИнформацияОПользователеSuperJob(МаркерДоступа, Ложь));
	ИначеЕсли Сайт = Zarplata() Тогда
		Возврат ЗначениеЗаполнено(ИнформацияОПользователеZarplata(МаркерДоступа, Ложь));
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИдентификаторВакансии(Вакансия, Сайт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликацияВакансий.ИдентификаторВакансии,
	|	ПубликацияВакансий.Вакансия
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|ГДЕ
	|	ПубликацияВакансий.Вакансия = &Вакансия
	|	И ПубликацияВакансий.МестоПубликации = &МестоПубликации";
	
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("МестоПубликации", Сайт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторВакансии;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыАвторизации(Сайт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.ИмяПользователя
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииРекрутинговыхСайтов КАК НастройкиИнтеграцииРекрутинговыхСайтов
	|ГДЕ
	|	НастройкиИнтеграцииРекрутинговыхСайтов.Пользователь = &Пользователь
	|	И НастройкиИнтеграцииРекрутинговыхСайтов.РекрутинговыйСайт = &РекрутинговыйСайт
	|	И НастройкиИнтеграцииРекрутинговыхСайтов.Использовать";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("РекрутинговыйСайт", Сайт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователи.ТекущийПользователь(), "ПарольRabota, ПарольSuperJob");
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыАвторизации = Новый Структура("ИмяПользователя, Пароль", Выборка.ИмяПользователя, "");
		Если Сайт = Rabota() Тогда
			ПараметрыАвторизации.Пароль = Пароли.ПарольRabota;
		ИначеЕсли Сайт = SuperJob() Тогда
			ПараметрыАвторизации.Пароль = Пароли.ПарольSuperJob;
		КонецЕсли;
		
		Возврат ПараметрыАвторизации;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УточнитьИмяПользователяИПарольНаСайт(Сайт, ИмяПользователя, Пароль)
	
	Если Не ЗначениеЗаполнено(ИмяПользователя)
		Или Не ЗначениеЗаполнено(Пароль) Тогда
		
		ПараметрыАвторизации = ПараметрыАвторизации(Сайт);
		
		Если ПараметрыАвторизации = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не указаны параметры доступа на сайт'");
		Иначе
			ИмяПользователя = ПараметрыАвторизации.ИмяПользователя;
			Пароль = ПараметрыАвторизации.Пароль;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВакансииССайтаHeadHunter()
	
	МассивВакансий = Новый Массив;
	МаркерДоступа = МаркерДоступаHeadHunter();
	
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат МассивВакансий;
	КонецЕсли;
	
	ИнформацияОПользователе = ИнформацияОПользователе(HeadHunter(), МаркерДоступа);
	
	ИдентификаторКомпании = ИнформацияОПользователе.ИдентификаторКомпании;
	ИдентификаторПользователя = ИнформацияОПользователе.ИдентификаторПользователя;
	
	Если Не ЗначениеЗаполнено(ИдентификаторКомпании) Или Не ЗначениеЗаполнено(ИдентификаторПользователя) Тогда 
		Возврат МассивВакансий;
	КонецЕсли;
	
	ЗагрузитьКлассификаторыHeadHunter();
	
	Соединение = HTTPСоединениеHeadHunter();
	Запрос = HTTPЗапросHeadHunter("/employers/" + ИдентификаторКомпании + "/vacancies/active?per_page=50&page=0&manager_id=" + ИдентификаторПользователя, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибкеПолученияВакансий(HeadHunter(), Ответ.КодСостояния, ТекущаяСтрока);
	Иначе
		СчитанныеДанные = ПарсерJSON(ТекущаяСтрока, Истина);
		Если СчитанныеДанные.Получить("found") <> Неопределено И СчитанныеДанные.Получить("found") > 0 Тогда
			Вакансии = СчитанныеДанные.Получить("items");
			Для Каждого Вакансия Из Вакансии Цикл
				Описание = ОписаниеПубликацииВакансииHeadHunter(Формат(Вакансия.Получить("id"), "ЧГ=0"), Соединение, МаркерДоступа);
				Если ЗначениеЗаполнено(Описание) Тогда
					МассивВакансий.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивВакансий;
	
КонецФункции

Функция ВакансииССайтаRabota()
	
	МассивВакансий = Новый Массив;
	МаркерДоступа = МаркерДоступаRabota();
	
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат МассивВакансий;
	КонецЕсли;
	
	ЗагрузитьКлассификаторыRabota();
	
	Соединение = HTTPСоединениеRabota();
	
	Запрос = HTTPЗапросRabota("vacancies", МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибкеПолученияВакансий(Rabota(), Ответ.КодСостояния, ТекущаяСтрока);
	Иначе
		
		Вакансии = ПарсерJSON(ТекущаяСтрока);
		Для Каждого Вакансия Из Вакансии Цикл
			
			Описание = ОписаниеПубликацииВакансииRabota(Формат(Вакансия.id, "ЧГ=0"), Соединение, МаркерДоступа);
			Если ЗначениеЗаполнено(Описание) Тогда
				МассивВакансий.Добавить(Описание);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВакансий;
	
КонецФункции

Функция ВакансииССайтаSuperJob()
	
	МассивВакансий = Неопределено;
	МаркерДоступа = МаркерДоступаSuperJob();
	
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат МассивВакансий;
	КонецЕсли;
	
	ИнформацияОПользователе = ИнформацияОПользователе(SuperJob(), МаркерДоступа);
	
	ИдентификаторКомпании  = ИнформацияОПользователе.ИдентификаторКомпании;
	ИдентификаторПользователя = ИнформацияОПользователе.ИдентификаторПользователя;
	
	Если Не ЗначениеЗаполнено(ИдентификаторКомпании) 
		Или Не ЗначениеЗаполнено(ИдентификаторПользователя) Тогда 
		Возврат МассивВакансий;
	КонецЕсли;
	
	ЗагрузитьКлассификаторыSuperJob();
	
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob("/2.0/hr/vacancies/?status=all_not_archive&id_user=" + ИдентификаторПользователя, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибкеПолученияВакансий(SuperJob(), Ответ.КодСостояния, ТекущаяСтрока);
	Иначе
		
		Вакансии = ПарсерJSON(ТекущаяСтрока);
		МассивВакансий = Вакансии.objects;
		
	КонецЕсли;
	
	Возврат МассивВакансий;
	
КонецФункции

Функция ВакансииССайтаZarplata()
	
	МассивВакансий = Новый Массив;
	МаркерДоступа = МаркерДоступаZarplata();
	
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат МассивВакансий;
	КонецЕсли;
	
	ИнформацияОПользователе = ИнформацияОПользователе(Zarplata(), МаркерДоступа);
	
	ИдентификаторКомпании = ИнформацияОПользователе.ИдентификаторКомпании;
	ИдентификаторПользователя = ИнформацияОПользователе.ИдентификаторПользователя;
	
	Если Не ЗначениеЗаполнено(ИдентификаторКомпании) И Не ЗначениеЗаполнено(ИдентификаторПользователя) Тогда 
		Возврат МассивВакансий;
	КонецЕсли;
	
	Соединение = HTTPСоединениеZarplata();
	АдресРесурса = СтрШаблон("/v1/vacancies?company_id=%1&owner_id=%2&state=1", ИдентификаторКомпании, ИдентификаторПользователя);
	ПолучитьВсеСтраницыРесурсаZarplata(Соединение, АдресРесурса, "vacancies", МассивВакансий,, МаркерДоступа);
	
	Возврат МассивВакансий;
	
КонецФункции

Функция КартинкаПоАдресу(АдресКартинки)
	
	СтруктураОтвета = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресКартинки);
	Если СтруктураОтвета.Статус Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураОтвета.Путь);
		Картинка = Новый Картинка(ДвоичныеДанные);
		УдалитьИзВременногоХранилища(СтруктураОтвета.Путь);
	Иначе
		Картинка = Новый Картинка();
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

Функция СтруктураДанныхКандидатаССайтаHeadHunter(ИдентификаторРезюме)
	
	МаркерДоступа = МаркерДоступаHeadHunter();
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сайт = HeadHunter();
	Соединение = HTTPСоединениеHeadHunter();
	Запрос = HTTPЗапросHeadHunter("/resumes/" + ИдентификаторРезюме, МаркерДоступа);
	
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(Сайт, Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	Резюме = ПарсерJSON(ТелоОтветаСтрокой, Истина);
	
	ИнформацияПользователя = ИнформацияОПользователе(Сайт, МаркерДоступа);
	АдресКомментариев = Резюме["owner"]["comments"]["url"];
	КомментарииКандидата = МассивКомментариевКандидатаHeadHunter(АдресКомментариев, ИнформацияПользователя.ИдентификаторКомпании);
	
	Резюме.Вставить("Комментарии", КомментарииКандидата);
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "photo")) Тогда
		Возврат Резюме;
	КонецЕсли;
	
	АдресФото = Резюме.Получить("photo").Получить("medium");
	Резюме.Вставить("Фото", КартинкаПоАдресу(АдресФото));
	
	Возврат Резюме;
	
КонецФункции

Функция СтруктураДанныхКандидатаССайтаRabota(ИдентификаторРезюме)
	
	МаркерДоступа = МаркерДоступаRabota();
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = HTTPСоединениеRabota();
	Запрос = HTTPЗапросRabota(СтрШаблон("search-resumes/%1", ИдентификаторРезюме), МаркерДоступа);
	
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(Rabota(), Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	Резюме = ПарсерJSON(ТелоОтветаСтрокой, Истина);
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "contactEmail"))
		И Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "phones")) Тогда
		
		ТекстОшибки = "";
		ОткрытоеРезюме = ОткрытоеРезюмеRabota(ИдентификаторРезюме, Соединение, МаркерДоступа, ТекстОшибки);
		Резюме = ?(ОткрытоеРезюме <> Неопределено, ОткрытоеРезюме, Резюме);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Резюме.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;

	КомментарииКандидата = МассивКомментариевКандидатаRabota(ИдентификаторРезюме);
	Резюме.Вставить("Комментарии", КомментарииКандидата);
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "photo")) Тогда
		Возврат Резюме;
	КонецЕсли;
	
	АдресФото = Резюме.Получить("photo");
	Резюме.Вставить("Фото", КартинкаПоАдресу(АдресФото));
	
	Возврат Резюме;
	
КонецФункции

Функция СтруктураДанныхКандидатаССайтаSuperJob(ИдентификаторРезюме)
	
	МаркерДоступа = МаркерДоступаSuperJob();
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сайт = SuperJob();
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob("/2.0/resumes/" + ИдентификаторРезюме + "/", МаркерДоступа);
	
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(Сайт, Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	Резюме = ПарсерJSON(ТелоОтветаСтрокой);
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "firstname"))
		Или (Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "phone1"))
			И Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "email"))) Тогда
		
		ИнформацияОПользователе = ИнформацияОПользователе(Сайт, МаркерДоступа);
		Если ИнформацияОПользователе.БезлимитныйТариф Тогда
			ОткрытоеРезюме = ОткрытоеРезюмеSuperJob(ИдентификаторРезюме, Соединение, МаркерДоступа);
			Резюме = ?(ОткрытоеРезюме <> Неопределено, ОткрытоеРезюме, Резюме);
		КонецЕсли;
		
	КонецЕсли;
	
	КомментарииКандидата = МассивКомментариевКандидатаSuperJob(ИдентификаторРезюме);
	Резюме.Вставить("Комментарии", КомментарииКандидата);
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "photo")) Тогда
		Возврат Резюме;
	КонецЕсли;
	
	АдресФото = СтрЗаменить(Резюме.photo, "\", "");
	Резюме.Вставить("Фото", КартинкаПоАдресу(АдресФото));
	
	Возврат Резюме;
	
КонецФункции

Функция СтруктураДанныхКандидатаССайтаZarplata(ИдентификаторРезюме)
	
	МаркерДоступа = МаркерДоступаZarplata();
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сайт = Zarplata();
	Соединение = HTTPСоединениеZarplata();
	Запрос = HTTPЗапросZarplata("/v3/resumes/" + ИдентификаторРезюме, МаркерДоступа);
	
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(Сайт, Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	СтруктураОтвета = ПарсерJSON(ТелоОтветаСтрокой, Истина);
	
	Попытка
		Резюме = СтруктураОтвета["resumes"][0];
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	КомментарииКандидата = МассивКомментариевКандидатаZarplata(ИдентификаторРезюме);
	Резюме.Вставить("Комментарии", КомментарииКандидата);
	
	АдресФото = ЗначениеСвойстваУзла(Резюме, "profile", "photo", "url");
	Если ЗначениеЗаполнено(АдресФото) Тогда
		Резюме.Вставить("Фото", КартинкаПоАдресу(АдресФото));
	КонецЕсли;
	
	Возврат Резюме;
	
КонецФункции

Функция СтруктураОтбораКандидатов() Экспорт
	
	СтруктураОтбораКандидатов = Новый Структура;
	
	СтруктураОтбораКандидатов.Вставить("КлючевоеСлово");
	СтруктураОтбораКандидатов.Вставить("ВозрастОт");
	СтруктураОтбораКандидатов.Вставить("ВозрастДо");
	СтруктураОтбораКандидатов.Вставить("Регион");
	СтруктураОтбораКандидатов.Вставить("УровеньЗарплатыОт");
	СтруктураОтбораКандидатов.Вставить("УровеньЗарплатыДо");
	СтруктураОтбораКандидатов.Вставить("Пол");
	СтруктураОтбораКандидатов.Вставить("УровеньОбразования");
	СтруктураОтбораКандидатов.Вставить("ПериодРазмещения");
	СтруктураОтбораКандидатов.Вставить("ТолькоВНазвании");
	СтруктураОтбораКандидатов.Вставить("СкрыватьРезюмеБезЗарплаты");
	
	Возврат СтруктураОтбораКандидатов;
	
КонецФункции

Функция СтрокаОтбораHeadHunter(СтруктураОтбора, НомерСтраницы)
	
	СтрокаОтбора = "";
	
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = КлючИЗначение.Значение;
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = Значение;
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			Значение = Формат(Значение, "ЧГ=0");
		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
			Значение = Формат(Значение, "ДЛФ=Д");
		ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
			Если КлючИЗначение.Ключ = "ТолькоВНазвании" И Значение Тогда
				СтрокаОтбора = СтрокаОтбора + "text.logic=phrase&text.field=title&text.period=all_time&";
				Продолжить;
			КонецЕсли;
			Если КлючИЗначение.Ключ = "СкрыватьРезюмеБезЗарплаты" И Значение Тогда
				СтрокаОтбора = СтрокаОтбора + "label=only_with_salary&";
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Для Каждого ЭлементСписка Из Значение Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
					Идентификатор = ЭлементСписка.Значение.IDHeadHunter;
				Иначе
					Идентификатор = ЭлементСписка.Значение;
				КонецЕсли;
				СтрокаОтбора = СтрокаОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИHeadHunter().Получить(КлючИЗначение.Ключ), Строка(Идентификатор));
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаОтбора = СтрокаОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИHeadHunter().Получить(КлючИЗначение.Ключ), Значение);
		
	КонецЦикла;
	
	СтрокаОтбора = СтрокаОтбора + "order_by=relevance&per_page=50&page=" + НомерСтраницы;
	
	Возврат СтрокаОтбора;
	
КонецФункции

Функция СтрокаОтбораRabota(СтруктураОтбора, НомерСтраницы)
	
	СтрокаОтбора = "qot[]=1&";
	
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = КлючИЗначение.Значение;
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = КодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL);
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			Значение = Формат(Значение, "ЧГ=0");
		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
			Значение = Формат(Значение, "ДЛФ=Д");
		ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
			
			Если КлючИЗначение.Ключ = "ТолькоВНазвании" Тогда
				СтрокаОтбора = СтрШаблон("%1qsa[0][]=%2&", СтрокаОтбора, ?(Значение, 2, 1));
			ИначеЕсли КлючИЗначение.Ключ = "СкрыватьРезюмеБезЗарплаты" И Значение Тогда
				СтрокаОтбора = СтрШаблон("%1cs=%2&",  СтрокаОтбора, "t");
			КонецЕсли;
			
			Продолжить;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Для Каждого ЭлементСписка Из Значение Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
					Идентификатор = ЭлементСписка.Значение.IDRabota;
				Иначе
					Идентификатор = ЭлементСписка.Значение;
				КонецЕсли;
				СтрокаОтбора = СтрокаОтбора + СтрШаблон("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИRabota().Получить(КлючИЗначение.Ключ), Строка(Идентификатор));
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаОтбора = СтрокаОтбора + СтрШаблон("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИRabota().Получить(КлючИЗначение.Ключ), Значение);
		
	КонецЦикла;
	
	СтрокаОтбора = СтрокаОтбора + "sm=2&pp=50&start=" + НомерСтраницы * 50;
	
	Возврат СтрокаОтбора;
	
КонецФункции

Функция СтрокаОтбораSuperJob(СтруктураОтбора, НомерСтраницы)
	
	СтрокаОтбора = "";
	
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = КлючИЗначение.Значение;
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = Значение;
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			Значение = Формат(Значение, "ЧГ=0");
		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
			Значение = Формат(Значение, "ДЛФ=Д");
		ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
			Если КлючИЗначение.Ключ = "ТолькоВНазвании" И Значение Тогда
				СтрокаОтбора = СтрокаОтбора + "keywords[0][keys]=" + СтруктураОтбора.КлючевоеСлово + "&keywords[0][skwc]=and&keywords[0][srws]=60&";
				Продолжить;
			КонецЕсли;
			Если КлючИЗначение.Ключ = "СкрыватьРезюмеБезЗарплаты" И Значение Тогда
				СтрокаОтбора = СтрокаОтбора + "payment_no_agreement=1&";
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Если КлючИЗначение.Ключ = "Регион" Тогда
				Индекс = 0;
				
				Для Каждого ЭлементСписка Из Значение Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
						Идентификатор = ЭлементСписка.Значение.IDSuperJob;
					Иначе
						Идентификатор = ЭлементСписка.Значение;
					КонецЕсли;
					СтрокаОтбора = СтрокаОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИSuperJob().Получить(КлючИЗначение.Ключ) + "[" + Индекс + "]", Формат(Идентификатор, "ЧГ=0"));
					Индекс = Индекс + 1;
				КонецЦикла;
				
			Иначе
				
				Для Каждого ЭлементСписка Из Значение Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
						Идентификатор = ЭлементСписка.Значение.IDSuperJob;
					Иначе
						Идентификатор = ЭлементСписка.Значение;
					КонецЕсли;
					СтрокаОтбора = СтрокаОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИSuperJob().Получить(КлючИЗначение.Ключ), СтрЗаменить(Строка(Идентификатор), "Ключ", ""));
				КонецЦикла;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "КлючевоеСлово" Тогда
			Если Не СтруктураОтбора.ТолькоВНазвании Тогда
				СтрокаОтбора = СтрокаОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИSuperJob().Получить(КлючИЗначение.Ключ), СтрЗаменить(Значение, "Ключ", ""));
			КонецЕсли;
		Иначе
			СтрокаОтбора = СтрокаОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2&", СоответствиеПолейПоискаКандидатовПрограммыИSuperJob().Получить(КлючИЗначение.Ключ), СтрЗаменить(Значение, "Ключ", ""));
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаОтбора = СтрокаОтбора + "order_field=rank&count=50&page=" + НомерСтраницы;
	
	Возврат СтрокаОтбора;
	
КонецФункции

Функция СтрокаОтбораZarplata(СтруктураОтбора, НомерСтраницы)
	
	СтрокаОтбора = "limit=100&offset=" + НомерСтраницы * 100;
	
	СоответствиеПолей = СоответствиеПолейПоискаКандидатовПрограммыИZarplata();
	
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		
		ИмяПараметра = СоответствиеПолей.Получить(КлючИЗначение.Ключ);
		
		Если Не ЗначениеЗаполнено(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеПоля = КлючИЗначение.Значение;

		Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "КлючевоеСлово" Тогда
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, " ", "+");
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			ЗначениеПоля = Формат(ЗначениеПоля, "ЧН=0; ЧГ=0");
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
			ЗначениеПоля = Формат(ЗначениеПоля, "ДЛФ=Д");
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Булево") Тогда
			Если КлючИЗначение.Ключ = "ТолькоВНазвании" Тогда
				ЗначениеПоля = Формат(ЗначениеПоля, "БЛ=fullthrottle; БИ=simple")
			Иначе
				ЗначениеПоля = Формат(ЗначениеПоля, "БЛ=false; БИ=true");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("СписокЗначений") Тогда
			Если КлючИЗначение.Ключ = "Регион" Или КлючИЗначение.Ключ = "УровеньОбразования" Тогда
				Индекс = 0;
				Для Каждого ЭлементСписка Из ЗначениеПоля Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
						Если ЭлементСписка.Значение.Свойство("IDZarplata") Тогда
							Идентификатор = ЭлементСписка.Значение.IDZarplata;
						ИначеЕсли ЭлементСписка.Значение.Свойство("ИдентификаторОбщий") Тогда
							Идентификатор = ЭлементСписка.Значение.ИдентификаторОбщий;
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Идентификатор = ЭлементСписка.Значение;
					КонецЕсли;
					СтрокаОтбора = СтрокаОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"&%1=%2", ИмяПараметра + "[" + Индекс + "]", Формат(Идентификатор, "ЧГ=0"));
					Индекс = Индекс + 1;
				КонецЦикла;
				
				Продолжить;
			Иначе
				ЗначениеПоля = ЗначениеПоля[0];
				Если ТипЗнч(ЗначениеПоля.Значение) = Тип("Структура") Тогда
					Если ЗначениеПоля.Значение.Свойство("IDZarplata") Тогда
						ЗначениеПоля = ЗначениеПоля.Значение.IDZarplata;
					ИначеЕсли ЗначениеПоля.Значение.Свойство("ИдентификаторОбщий") Тогда
						ЗначениеПоля = ЗначениеПоля.Значение.ИдентификаторОбщий;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					ЗначениеПоля = ЗначениеПоля.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОтбора = СтрокаОтбора
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("&%1=%2", ИмяПараметра, ЗначениеПоля);
		
	КонецЦикла;
	
	Возврат СтрокаОтбора;
	
КонецФункции

Процедура ПолучитьОткликиHeadHunter(Вакансия)
	
	Сайт = HeadHunter();
	ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		СообщитьОбОтсутствииПубликации(Сайт);
		Возврат;
	КонецЕсли;
	
	МаркерДоступа = МаркерДоступа(Сайт);
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = HTTPСоединениеHeadHunter();
	Запрос = HTTPЗапросHeadHunter("/negotiations/?per_page=50&page=0&vacancy_id=" + ИдентификаторВакансии, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		
		СообщитьОбОшибкеПолученияОткликов(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		Возврат;
		
	Иначе
		КоллекцииОткликов = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	МаксимальныйНомерОтклика = МаксимальныйНомерОтклика(Вакансия);
	ЗагруженныеОткликиВакансии = ЗагруженныеОткликиВакансии(Вакансия);
	
	НаборЗаписейОтклики = РегистрыСведений.ОткликиКандидатов.СоздатьНаборЗаписей();
	НаборЗаписейОтклики.Отбор.Вакансия.Установить(Вакансия);
	НаборЗаписейОтклики.Прочитать();
	
	Для Каждого КоллекцияОткликов Из КоллекцииОткликов.states Цикл
		
		Соединение = HTTPСоединениеHeadHunter();
		Запрос = HTTPЗапросHeadHunter("/negotiations/" + КоллекцияОткликов.id + "?vacancy_id=" + ИдентификаторВакансии, МаркерДоступа);
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьОбОшибкеПолученияРезюме(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			Возврат;
			
		Иначе
			
			Отклики = ПарсерJSON(ТекущаяСтрока, Истина);
			
			Для Каждого Отклик Из Отклики.Получить("items") Цикл
				
				Если Отклик = Неопределено 
					Или Отклик = "null" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Отклик, "resume")) Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторРезюме = ЗначениеСвойстваУзла(Отклик, "resume", "id");
				Если ЗагруженныеОткликиВакансии.Найти(ИдентификаторРезюме) = Неопределено Тогда
					
					НоваяЗапись = НаборЗаписейОтклики.Добавить();
					НоваяЗапись.Вакансия = Вакансия;
					НоваяЗапись.НомерОтклика = МаксимальныйНомерОтклика + 1;
					НоваяЗапись.Фамилия = ЗначениеСвойстваУзла(Отклик, "resume", "last_name");
					НоваяЗапись.Имя = ЗначениеСвойстваУзла(Отклик, "resume", "first_name");
					НоваяЗапись.Отчество = ЗначениеСвойстваУзла(Отклик, "resume", "middle_name");
					НоваяЗапись.Источник = Сайт;
					НоваяЗапись.ДатаОтклика = Дата(СтрЗаменить(Лев(ЗначениеСвойстваУзла(Отклик, "updated_at"), 10), "-", ""));
					НоваяЗапись.ИдентификаторРезюме = ИдентификаторРезюме;
					НоваяЗапись.Адрес = ЗначениеСвойстваУзла(Отклик, "resume", "area", "name");
					НоваяЗапись.АдресРезюме = ЗначениеСвойстваУзла(Отклик, "resume", "alternate_url");
					
					Если ЗначениеСвойстваУзла(Отклик, "resume", "can_view_full_info") = Истина Тогда
						
						Запрос = HTTPЗапросHeadHunter("/resumes/" + ИдентификаторРезюме, МаркерДоступа);
						Ответ = Соединение.Получить(Запрос);
						
						ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
						Если Ответ.КодСостояния = 200 Тогда
							
							Резюме = ПарсерJSON(ТекущаяСтрока, Истина);
							
							КонтактнаяИнформация = Новый Массив;
							ЗаполнитьМассивКонтактнойИнформацииHeadHunter(Резюме, КонтактнаяИнформация);
							
							Для Каждого КонтактнаяИнформацияСтрока Из КонтактнаяИнформация Цикл
								
								Если КонтактнаяИнформацияСтрока.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица") Тогда
									НоваяЗапись.Телефон = КонтактнаяИнформацияСтрока.Представление;
								КонецЕсли;
								
								Если КонтактнаяИнформацияСтрока.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица") Тогда
									НоваяЗапись.EMail = КонтактнаяИнформацияСтрока.Представление;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Запрос = HTTPЗапросHeadHunter("/negotiations/" + ЗначениеСвойстваУзла(Отклик, "id") + "/messages?with_text_only=true", МаркерДоступа);
					Ответ = Соединение.Получить(Запрос);
					
					ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
					Если Ответ.КодСостояния = 200 Тогда
						
						Сообщения = ПарсерJSON(ТекущаяСтрока, Истина);
						Для Каждого Сообщение Из Сообщения.Получить("items") Цикл
							
							Если ЗначениеСвойстваУзла(Сообщение, "author", "participant_type") = "applicant" Тогда
								
								НоваяЗапись.Сообщение = УдалитьЛишнееИзСтроки(ЗначениеСвойстваУзла(Сообщение, "text"));
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					МаксимальныйНомерОтклика = МаксимальныйНомерОтклика + 1;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если НаборЗаписейОтклики.Модифицированность() Тогда
		НаборЗаписейОтклики.Записать();
	Иначе
		СообщитьОбОтсутствииОткликов(Сайт);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОткликиRabota(Вакансия)
	
	Сайт = Rabota();
	ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		СообщитьОбОтсутствииПубликации(Сайт);
		Возврат;
	КонецЕсли;
	
	МаркерДоступа = МаркерДоступа(Сайт);
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = HTTPСоединениеRabota();
	Запрос = HTTPЗапросRabota(СтрШаблон("responses/vacancy/%1?period=365", ИдентификаторВакансии), МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		
		СообщитьОбОшибкеПолученияОткликов(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		Возврат;
		
	Иначе
		КоллекцияОткликов = ПарсерJSON(ТекущаяСтрока);
	КонецЕсли;
	
	МаксимальныйНомерОтклика = МаксимальныйНомерОтклика(Вакансия);
	ЗагруженныеОткликиВакансии = ЗагруженныеОткликиВакансии(Вакансия);
	
	НаборЗаписейОтклики = РегистрыСведений.ОткликиКандидатов.СоздатьНаборЗаписей();
	НаборЗаписейОтклики.Отбор.Вакансия.Установить(Вакансия);
	НаборЗаписейОтклики.Прочитать();
	
	Для Каждого Отклик Из КоллекцияОткликов Цикл
		
		Если Формат(Отклик.vacancy.id,"ЧГ=") <> ИдентификаторВакансии Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Отклик.resume) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = HTTPЗапросRabota(СтрШаблон("search-resumes/%1", Формат(Отклик.resume.id,"ЧГ=")), МаркерДоступа);
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьОбОшибкеПолученияРезюме(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			Возврат;
			
		Иначе
			
			ОписаниеРезюме = ПарсерJSON(ТекущаяСтрока);
			ИдентификаторРезюме = Формат(ОписаниеРезюме.id, "ЧГ=");
			
			Если ЗагруженныеОткликиВакансии.Найти(ИдентификаторРезюме) = Неопределено Тогда
				
				НоваяЗапись = НаборЗаписейОтклики.Добавить();
				НоваяЗапись.Вакансия = Вакансия;
				НоваяЗапись.НомерОтклика = МаксимальныйНомерОтклика + 1;
				НоваяЗапись.Имя = ЗначениеСвойстваУзла(ОписаниеРезюме, "personName");
				НоваяЗапись.Фамилия = ЗначениеСвойстваУзла(ОписаниеРезюме, "surname");
				НоваяЗапись.Отчество = ЗначениеСвойстваУзла(ОписаниеРезюме, "secondName");
				НоваяЗапись.Источник = Сайт;
				НоваяЗапись.ИдентификаторРезюме = ИдентификаторРезюме;
				НоваяЗапись.EMail = ЗначениеСвойстваУзла(ОписаниеРезюме, "contactEmail");
				
				Если ЗначениеЗаполнено(ОписаниеРезюме.birthDate) Тогда
					НоваяЗапись.ДатаРождения = Дата(СтрЗаменить(Лев(ОписаниеРезюме.birthDate, 10), "-", ""));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеРезюме.phones) Тогда
					Контакт = ОписаниеРезюме.phones[0];
					НоваяЗапись.Телефон = СтрШаблон("%1 (%2) %3", Контакт.countryCode, Контакт.Code, Контакт.Number);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеРезюме.region) Тогда
					НоваяЗапись.Адрес = ОписаниеРезюме.city.name;
				КонецЕсли;
				
				// Получим текст сопроводительного письма
				Запрос = HTTPЗапросRabota(СтрШаблон("/responses/%1/messages", Формат(Отклик.id,"ЧГ=")), МаркерДоступа);
				Ответ = Соединение.Получить(Запрос);
				
				ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния = 200 Тогда
					
					СообщенияПоОтклику = ПарсерJSON(ТекущаяСтрока);
					Если ЗначениеЗаполнено(СообщенияПоОтклику) И Не СообщенияПоОтклику[0].fromEmployer Тогда
						НоваяЗапись.Сообщение = СообщенияПоОтклику[0].text;
						НоваяЗапись.ДатаОтклика = Дата(СтрЗаменить(Лев(СообщенияПоОтклику[0].date, 10), "-", ""));
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаОтклика) Тогда
					НоваяЗапись.ДатаОтклика = Дата(СтрЗаменить(Лев(Отклик.lastModified, 10), "-", ""));
				КонецЕсли;
				
				НоваяЗапись.Рассмотрено = (Отклик.status.id > 0);
				НоваяЗапись.АдресРезюме = Отклик.resume.link;
				МаксимальныйНомерОтклика = МаксимальныйНомерОтклика + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если НаборЗаписейОтклики.Модифицированность() Тогда
		НаборЗаписейОтклики.Записать();
	Иначе
		СообщитьОбОтсутствииОткликов(Сайт);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОткликиSuperJob(Вакансия)
	
	Сайт = SuperJob();
	ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		СообщитьОбОтсутствииПубликации(Сайт);
		Возврат;
	КонецЕсли;
	
	МаркерДоступа = МаркерДоступа(Сайт);
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйНомерОтклика = МаксимальныйНомерОтклика(Вакансия);
	ЗагруженныеОткликиВакансии = ЗагруженныеОткликиВакансии(Вакансия);
	
	НаборЗаписейОтклики = РегистрыСведений.ОткликиКандидатов.СоздатьНаборЗаписей();
	НаборЗаписейОтклики.Отбор.Вакансия.Установить(Вакансия);
	НаборЗаписейОтклики.Прочитать();
	
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob("/2.0/resumes/received/" + ИдентификаторВакансии + "/", МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();

	Если Ответ.КодСостояния <> 200 Тогда
		
		СообщитьОбОшибкеПолученияОткликов(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
		Возврат;
		
	Иначе
		
		Отклики = ПарсерJSON(ТекущаяСтрока);
		
	КонецЕсли;
	
	Для Каждого Отклик Из Отклики.objects Цикл
		
		Если Отклик = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторРезюме = Формат(ЗначениеСвойстваУзла(Отклик, "resume", "id"), "ЧГ=0");
		Если ЗагруженныеОткликиВакансии.Найти(ИдентификаторРезюме) = Неопределено Тогда
			
			НоваяЗапись = НаборЗаписейОтклики.Добавить();
			НоваяЗапись.Вакансия = Вакансия;
			НоваяЗапись.НомерОтклика = МаксимальныйНомерОтклика + 1;
			НоваяЗапись.Фамилия = ЗначениеСвойстваУзла(Отклик, "resume", "lastname");
			НоваяЗапись.Имя = ЗначениеСвойстваУзла(Отклик, "resume", "firstname");
			НоваяЗапись.Отчество = ЗначениеСвойстваУзла(Отклик, "resume", "middlename");
			НоваяЗапись.Источник = Сайт;
			НоваяЗапись.ДатаОтклика = Дата(1970, 1, 1) + Отклик.events[0].date_event;
			НоваяЗапись.ИдентификаторРезюме = ИдентификаторРезюме;
			Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(Отклик, "resume", "birthyear")) 
				И ЗначениеЗаполнено(ЗначениеСвойстваУзла(Отклик, "resume", "birthmonth")) 
				И ЗначениеЗаполнено(ЗначениеСвойстваУзла(Отклик, "resume", "birthday")) Тогда
				
				НоваяЗапись.ДатаРождения = Дата(ЗначениеСвойстваУзла(Отклик, "resume", "birthyear"), ЗначениеСвойстваУзла(Отклик, "resume", "birthmonth"), ЗначениеСвойстваУзла(Отклик, "resume", "birthday"));
			КонецЕсли;
			НоваяЗапись.Адрес = ЗначениеСвойстваУзла(Отклик, "resume", "town", "title");
			НоваяЗапись.Телефон = ЗначениеСвойстваУзла(Отклик, "resume", "phone1");
			НоваяЗапись.EMail = ЗначениеСвойстваУзла(Отклик, "resume", "email");
			НоваяЗапись.АдресРезюме = СтрЗаменить(ЗначениеСвойстваУзла(Отклик, "resume", "link"), "\", "");
			
			СопроводительноеПисьмо = ЗначениеСвойстваУзла(Отклик, "cover_letter");
			Если ТипЗнч(СопроводительноеПисьмо) = Тип("Массив") 
				И ЗначениеЗаполнено(СопроводительноеПисьмо) Тогда
				НоваяЗапись.Сообщение = УдалитьЛишнееИзСтроки(СопроводительноеПисьмо[0]);
			КонецЕсли;
			
			МаксимальныйНомерОтклика = МаксимальныйНомерОтклика + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписейОтклики.Модифицированность() Тогда
		НаборЗаписейОтклики.Записать();
	Иначе
		СообщитьОбОтсутствииОткликов(Сайт);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОткликиZarplata(Вакансия)
	
	Сайт = Zarplata();
	ИдентификаторВакансии = ИдентификаторВакансии(Вакансия, Сайт);
	
	Если Не ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		СообщитьОбОтсутствииПубликации(Сайт);
		Возврат;
	КонецЕсли;
	
	МаркерДоступа = МаркерДоступа(Сайт);
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = HTTPСоединениеZarplata();
	
	Попытка
		КоллекцияОткликов = Новый Массив;
		ПолучитьВсеСтраницыРесурсаZarplata(Соединение, "/v1/replies", "replies", КоллекцияОткликов,, МаркерДоступа);
	Исключение
		Возврат;
	КонецПопытки;
	
	МаксимальныйНомерОтклика = МаксимальныйНомерОтклика(Вакансия);
	ЗагруженныеОткликиВакансии = ЗагруженныеОткликиВакансии(Вакансия);
	
	НаборЗаписейОтклики = РегистрыСведений.ОткликиКандидатов.СоздатьНаборЗаписей();
	НаборЗаписейОтклики.Отбор.Вакансия.Установить(Вакансия);
	НаборЗаписейОтклики.Прочитать();
	
	Для Каждого Отклик Из КоллекцияОткликов Цикл
		
		ВакансияОтклика = Формат(ЗначениеСвойстваУзла(Отклик, "entity_id"), "ЧН=; ЧГ=0");
		Если Не ВакансияОтклика = ИдентификаторВакансии Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторРезюме = ЗначениеСвойстваУзла(Отклик, "resume", "id");
		Если Не ЗначениеЗаполнено(ИдентификаторРезюме) Тогда
			СообщитьОбОшибкеПолученияРезюме(Сайт, 0, НСтр("ru = 'Не найдено резюме по идентификатору'"));
			Продолжить;
		КонецЕсли;
		
		ИдентификаторРезюме = Формат(ИдентификаторРезюме, "ЧГ=0");
		
		Запрос = HTTPЗапросZarplata(СтрШаблон("/v3/resumes/%1", ИдентификаторРезюме), МаркерДоступа);
		Ответ = Соединение.Получить(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщитьОбОшибкеПолученияРезюме(Сайт, Ответ.КодСостояния, ТекущаяСтрока);
			Возврат;
			
		Иначе
			СтруктураОтвета = ПарсерJSON(ТекущаяСтрока);
			Попытка
				ОписаниеРезюме = СтруктураОтвета.resumes[0];
			Исключение
				СообщитьОбОшибкеПолученияРезюме(Сайт, 0, НСтр("ru = 'Не найдено резюме по идентификатору'"));
				Продолжить;
			КонецПопытки;
			
			Если Не ЗагруженныеОткликиВакансии.Найти(ИдентификаторРезюме) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписейОтклики.Добавить();
			НоваяЗапись.Вакансия = Вакансия;
			НоваяЗапись.НомерОтклика = МаксимальныйНомерОтклика + 1;
			НоваяЗапись.Имя = ЗначениеСвойстваУзла(ОписаниеРезюме, "profile", "name", "first_name");
			НоваяЗапись.Фамилия = ЗначениеСвойстваУзла(ОписаниеРезюме, "profile", "name", "last_name");
			НоваяЗапись.Отчество = ЗначениеСвойстваУзла(ОписаниеРезюме, "profile", "name", "patronymic_name");
			НоваяЗапись.Источник = Сайт;
			НоваяЗапись.ИдентификаторРезюме = ИдентификаторРезюме;
			НоваяЗапись.EMail = ЗначениеСвойстваУзла(ОписаниеРезюме, "profile", "contact", "email");
			
			ДатаРождения = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(ОписаниеРезюме, "profile", "personal", "birthday"), Ложь);
			Если ЗначениеЗаполнено(ДатаРождения) Тогда
				НоваяЗапись.ДатаРождения = ДатаРождения;
			КонецЕсли;
			НоваяЗапись.Адрес = ЗначениеСвойстваУзла(ОписаниеРезюме, "profile", "personal", "city");
			Телефон = ЗначениеСвойстваУзла(ОписаниеРезюме, "profile", "contact", "phone");
			НоваяЗапись.Телефон = ЗначениеСвойстваУзла(Телефон, "format");
			НоваяЗапись.АдресРезюме = "https://hr.zarplata.ru/resumes/" + ИдентификаторРезюме;
			
			НоваяЗапись.Сообщение = ЗначениеСвойстваУзла(Отклик, "message");
			НоваяЗапись.ДатаОтклика = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(Отклик, "add_date"));
			НоваяЗапись.Рассмотрено = ЗначениеСвойстваУзла(Отклик, "is_read");
			МаксимальныйНомерОтклика = МаксимальныйНомерОтклика + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписейОтклики.Модифицированность() Тогда
		НаборЗаписейОтклики.Записать();
	Иначе
		СообщитьОбОтсутствииОткликов(Сайт);
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальныйНомерОтклика(Вакансия) 
	Возврат РегистрыСведений.ОткликиКандидатов.НомерПоследнегоОтклика(Вакансия); 
КонецФункции

Функция ЗагруженныеОткликиВакансии(Вакансия)
	
	МассивЗагруженныхОткликов = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОткликиКандидатов.Вакансия,
	|	ОткликиКандидатов.ИдентификаторРезюме
	|ИЗ
	|	РегистрСведений.ОткликиКандидатов КАК ОткликиКандидатов
	|ГДЕ
	|	ОткликиКандидатов.Вакансия = &Вакансия";
	
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	
	МассивЗагруженныхОткликов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторРезюме");
	
	Возврат МассивЗагруженныхОткликов;
	
КонецФункции

Функция СписокВыбораПоКлассификаторуHeadHunter(Путь)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	КлассификаторыHeadHunter = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыHeadHunter");
	Если КлассификаторыHeadHunter = Неопределено Или Не КлассификаторыHeadHunter.Свойство(Путь) Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	МассивДанных = КлассификаторыHeadHunter[Путь];
	Если Путь = "currency" Тогда
		Для Каждого ЭлементМассива Из МассивДанных Цикл
			Если Не ЭлементМассива.in_use Тогда
				Продолжить;
			КонецЕсли;
			СписокВыбора.Добавить(ЭлементМассива.code, ЭлементМассива.abbr);
		КонецЦикла;
	Иначе
		Для Каждого ЭлементМассива Из МассивДанных Цикл
			СписокВыбора.Добавить(ЭлементМассива.id, ЭлементМассива.name);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокВыбора;

КонецФункции

Функция СписокВыбораПоКлассификаторуRabota(Путь)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	КлассификаторыRabota = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыRabota");
	Если КлассификаторыRabota = Неопределено Или Не КлассификаторыRabota.Свойство(Путь) Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	МассивДанных = КлассификаторыRabota[Путь];
	
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		СписокВыбора.Добавить(ЭлементМассива.id, ЭлементМассива.name);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция СписокВыбораПоКлассификаторуSuperJob(Путь)  
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	КлассификаторыSuperJob = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыSuperJob");
	Если КлассификаторыSuperJob = Неопределено Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	СтруктураДанных = КлассификаторыSuperJob[Путь];
	Для Каждого ЭлементСтруктурыДанных Из СтруктураДанных Цикл
		Если ЭлементСтруктурыДанных.Значение = "Не имеет значения" Тогда
			Продолжить;
		КонецЕсли;
		СписокВыбора.Добавить(ЭлементСтруктурыДанных.Ключ, ЭлементСтруктурыДанных.Значение);
	КонецЦикла;
		
	Возврат СписокВыбора;

КонецФункции

Функция СписокВыбораПоКлассификаторуZarplata(Путь)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	ЗначениеКлассификатора = РегистрыСведений.КлассификаторыРекрутинговыхСайтов.ЗначениеКлассификатора(Zarplata(),
		ПредопределенноеЗначение(СтрШаблон("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.%1", Путь)));
	Если ЗначениеКлассификатора = Неопределено Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из ЗначениеКлассификатора Цикл
		Если Путь = "sex" Тогда
			СписокВыбора.Добавить(ЭлементМассива.alias, ЭлементМассива.title);
		ИначеЕсли ЭлементМассива.Свойство("name") Тогда
			СписокВыбора.Добавить(ЭлементМассива.id, ЭлементМассива.name);
		Иначе
			СписокВыбора.Добавить(ЭлементМассива.id, ЭлементМассива.title);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбора;
	
	
КонецФункции

Функция СтруктураИнформацияОПользователе()
	
	СтруктураИнформацияОПользователе = Новый Структура;
	
	СтруктураИнформацияОПользователе.Вставить("ИдентификаторКомпании", "");
	СтруктураИнформацияОПользователе.Вставить("ИдентификаторПользователя", "");
	СтруктураИнформацияОПользователе.Вставить("БезлимитныйТариф", Ложь);
	СтруктураИнформацияОПользователе.Вставить("ИмяПользователя", "");
	
	Возврат СтруктураИнформацияОПользователе;
	
КонецФункции

Процедура ЗаполнитьДеревоВакансииHeadHunter(Вакансия, Дерево, СтруктураВакансииССайта)
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Показатель = Вакансия;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "address")) Тогда 
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "address.id";
		СписокАдрес = Новый СписокЗначений;
		ПредставлениеАдреса = "";
		СправочникАдресов = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыHeadHunter").addresses;
		Для Каждого ЭлементСправочникаАдресов Из СправочникАдресов Цикл
			Если ЭлементСправочникаАдресов.id = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "address", "id") Тогда
				ПредставлениеАдреса = ЭлементСправочникаАдресов.name;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СписокАдрес.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "address", "id"), ПредставлениеАдреса);
		НовоеПоле.ПубликацияВакансии = СписокАдрес;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "area")) Тогда
		
		СписокРегион = Новый СписокЗначений;
		СписокРегион.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "area", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "area", "name"));
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "area.id";
		НовоеПоле.ПубликацияВакансии = СписокРегион;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "description")) Тогда
		
		Описание = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "description");
		Описание = СтрЗаменить(Описание, "</ul> <strong>", "</ul><br /> <strong>");
		Описание = СтрЗаменить(Описание, "</li> <li>", "</li><li>");
		Описание = СтрЗаменить(Описание, "</li> </ul>", "</li></ul>");
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "description";
		НовоеПоле.ПубликацияВакансии = Описание;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "name")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "name";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "name");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "response_letter_required")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "response_letter_required";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "response_letter_required") = "true"
			Или ЗначениеСвойстваУзла(СтруктураВакансииССайта, "response_letter_required") = Истина;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "salary.to";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary", "to");
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "salary.from";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary", "from");
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "salary.currency";
		СписокВалюта = Новый СписокЗначений;
		ПредставлениеВалюты = "";
		СправочникВалют = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыHeadHunter").currency;
		Для Каждого ЭлементСправочникаВалют Из СправочникВалют Цикл
			Если ЭлементСправочникаВалют.code = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary", "currency") Тогда
				ПредставлениеВалюты = ЭлементСправочникаВалют.abbr;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СписокВалюта.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary", "currency"), ПредставлениеВалюты);
		НовоеПоле.ПубликацияВакансии = СписокВалюта;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "type")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "type.id";
		СписокТип = Новый СписокЗначений;
		СписокТип.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "type", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "type", "name"));
		НовоеПоле.ПубликацияВакансии = СписокТип;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоВакансииRabota(Вакансия, Дерево, СтруктураВакансииССайта)
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Показатель = Вакансия;
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "name";
	НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "name");
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "isStudyCourse")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "isStudyCourse";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "isStudyCourse");
	КонецЕсли;
	
	Профессии = Новый СписокЗначений;
	Для Каждого Профессия Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "offerTrades") Цикл
		Профессии.Добавить(Профессия.id, Профессия.name);
	КонецЦикла;
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "offerTrades";
	НовоеПоле.ПубликацияВакансии = Профессии;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salaryFrom")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "salaryFrom";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salaryFrom");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salaryTo")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "salaryTo";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salaryTo");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "agreementSalary")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "agreementSalary";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "agreementSalary");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "noSalary")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "noSalary";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "noSalary");
	КонецЕсли;
	
	Валюты = Новый СписокЗначений;
	Валюты.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "currency", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "currency", "name"));
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "currency";
	НовоеПоле.ПубликацияВакансии = Валюты;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "isNonresident")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "isNonresident";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "isNonresident");
	КонецЕсли;
	
	Регионы = Новый СписокЗначений;
	Для Каждого Регион Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "region") Цикл
		Регионы.Добавить(Регион.id, Регион.name);
	КонецЦикла;
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "region";
	НовоеПоле.ПубликацияВакансии = Регионы;
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "description";
	НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "description");
	
	Графики = Новый СписокЗначений;
	Графики.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "operatingSchedule", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "operatingSchedule", "name"));
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "operatingSchedule";
	НовоеПоле.ПубликацияВакансии = Графики;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "operatingScheduleComment")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "operatingScheduleComment";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "operatingScheduleComment");
	КонецЕсли;
	
	ИдентификаторОпытаРаботы = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "experienceYearCount");
	Если ТипЗнч(ИдентификаторОпытаРаботы) = Тип("Число") Тогда
		
		ВариантыОпытаРаботы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыRabota").experience;
		
		СведенияОбОпыте = Новый СписокЗначений;
		СведенияОбОпыте.Добавить(ИдентификаторОпытаРаботы, ПредставлениеДанныхПоИдентификатору(ВариантыОпытаРаботы, ИдентификаторОпытаРаботы));
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "experienceYearCount";
		НовоеПоле.ПубликацияВакансии = СведенияОбОпыте;
		
	КонецЕсли;
	
	Образование = Новый СписокЗначений;
	Образование.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education", "name"));
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "education";
		НовоеПоле.ПубликацияВакансии = Образование;
	КонецЕсли;
	
	ИдентификаторПола = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "gender");
	ВариантыПола = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыRabota").gender;
	
	СведенияОПоле = Новый СписокЗначений;
	СведенияОПоле.Добавить(ИдентификаторПола, ПредставлениеДанныхПоИдентификатору(ВариантыПола, ИдентификаторПола));
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "gender";
	НовоеПоле.ПубликацияВакансии = СведенияОПоле;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "ageFrom")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "ageFrom";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "ageFrom");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "ageTo")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "ageTo";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "ageTo");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contactFio")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "contactFio";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contactFio");
	КонецЕсли;
	
	НовоеПоле = НоваяСтрока.Строки.Добавить();
	НовоеПоле.Путь = "contactEmail";
	НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contactEmail");
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "wantResponseByMail")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "wantResponseByMail";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "wantResponseByMail");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "address")) Тогда
		
		Адреса = Новый СписокЗначений;
		Для Каждого Адрес Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "address") Цикл
			
			Если ЗначениеЗаполнено(Адрес.representation) Тогда 
				Адреса.Добавить(Адрес.representation, Адрес.name);
			КонецЕсли;
			
		КонецЦикла;
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "address";
		НовоеПоле.ПубликацияВакансии = Адреса;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "phones")) Тогда
		
		Телефоны = Новый СписокЗначений;
		Для Каждого Телефон Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "phones") Цикл
			
			ДанныеТелефона = Новый Структура("countryCode,code,number,comment");
			ЗаполнитьЗначенияСвойств(ДанныеТелефона, Телефон);
			
			Если ЗначениеЗаполнено(Телефон.comment) Тогда
				Представление = СтрШаблон("%1 (%2) %3 (%4)", Телефон.countryCode, Телефон.code, Телефон.number, Телефон.comment);
			Иначе
				Представление = СтрШаблон("%1 (%2) %3", Телефон.countryCode, Телефон.code, Телефон.number);
			КонецЕсли;
			Телефоны.Добавить(ДанныеТелефона, Представление);
			
		КонецЦикла;
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "phones";
		НовоеПоле.ПубликацияВакансии = Телефоны;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "language")) Тогда
		
		ЗнанияЯзыков = Новый СписокЗначений;
		
		Для Каждого ЗнаниеЯзыка Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "language") Цикл
			
			СтруктураДанных = Новый Структура("offerLanguage, offerLanguageLevel");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ЗнаниеЯзыка);
			
			Представление= СтрШаблон("%1 (%2)", ЗнаниеЯзыка.offerLanguage.name, ЗнаниеЯзыка.offerLanguageLevel.name);
			ЗнанияЯзыков.Добавить(СтруктураДанных, Представление);
			
		КонецЦикла;
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "language";
		НовоеПоле.ПубликацияВакансии = ЗнанияЯзыков;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "additionalInformation")) Тогда
		
		Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "additionalInformation", "auto")) Тогда
			
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "additionalInformation.auto";
			НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "additionalInformation", "auto");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "additionalInformation", "drivingLicense")) Тогда
			
			КатегорииПрав = Новый СписокЗначений;
			
			Для Каждого КатегорияПрав Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "additionalInformation", "drivingLicense") Цикл
				КатегорииПрав.Добавить(КатегорияПрав, КатегорияПрав);
			КонецЦикла;
			
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "additionalInformation.drivingLicense";
			НовоеПоле.ПубликацияВакансии = КатегорииПрав;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоВакансииSuperJob(Вакансия, Дерево, СтруктураВакансииССайта)
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Показатель = Вакансия;

	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "address")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "address";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "address");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "age_from")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "age_from";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "age_from");
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "age_to")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "age_to";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "age_to");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "anonymous")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "anonymous";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "anonymous") = "true"
			Или ЗначениеСвойстваУзла(СтруктураВакансииССайта, "anonymous") = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "candidat")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "candidat";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "candidat");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "compensation")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "compensation";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "compensation");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "contact";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "email")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "email";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "email");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "extend_vac")) Тогда
    	НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "extend_vac";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "extend_vac") = "true"
			Или ЗначениеСвойстваУзла(СтруктураВакансииССайта, "extend_vac") = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "firm_name")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "firm_name";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "firm_name");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "firm_activity")) Тогда
   		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "firm_activity";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "firm_activity");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "moveable")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "moveable";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "moveable") = "true"
			Или ЗначениеСвойстваУзла(СтруктураВакансииССайта, "moveable") = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_from")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "payment_from";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_from");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_to")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "payment_to";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_to");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "profession")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "profession";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "profession");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "refresh_vac")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "refresh_vac";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "refresh_vac") = "true"
			Или ЗначениеСвойстваУзла(СтруктураВакансииССайта, "refresh_vac") = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_keywords"))  Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "resumesubscription_keywords";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_keywords");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_status")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "resumesubscription_status";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_status") <> "0";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "work")) Тогда 
	 	НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "work";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "work");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "code")) Тогда 
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "code";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "code");
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "children")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "children";
		Список = Новый СписокЗначений;
		Список.Добавить("Ключ" + ЗначениеСвойстваУзла(СтруктураВакансииССайта, "children", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "children", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "education";
		Список = Новый СписокЗначений;
		Список.Добавить("Ключ" + ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "experience")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "experience";
		Список = Новый СписокЗначений;
		Список.Добавить("Ключ" + ЗначениеСвойстваУзла(СтруктураВакансииССайта, "experience", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "experience", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "gender")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "gender";
		Список = Новый СписокЗначений;
		Список.Добавить("Ключ" + ЗначениеСвойстваУзла(СтруктураВакансииССайта, "gender", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "gender", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "maritalstatus")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "maritalstatus";
		Список = Новый СписокЗначений;
		Список.Добавить("Ключ" + ЗначениеСвойстваУзла(СтруктураВакансииССайта, "maritalstatus", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "maritalstatus", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "place_of_work")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "place_of_work";
		Список = Новый СписокЗначений;
		Список.Добавить("Ключ" + ЗначениеСвойстваУзла(СтруктураВакансииССайта, "place_of_work", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "place_of_work", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "type_of_work")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "type_of_work";
		Список = Новый СписокЗначений;
		Список.Добавить("Ключ" + ЗначениеСвойстваУзла(СтруктураВакансииССайта, "type_of_work", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "type_of_work", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "town")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "town";
		Список = Новый СписокЗначений;
		Список.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "town", "id"), ЗначениеСвойстваУзла(СтруктураВакансииССайта, "town", "title"));
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "catalogues")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "catalogues";
		Список = Новый СписокЗначений;
		
		Для Каждого СфераДеятельности Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "catalogues") Цикл
			Если СфераДеятельности.Свойство("positions") 
				И ТипЗнч(СфераДеятельности.positions) = Тип("Массив") Тогда
				
				Для Каждого Специализация Из СфераДеятельности.positions Цикл
					Список.Добавить(Формат(Специализация.key, "ЧГ=0"), Специализация.title);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
			
		НовоеПоле.ПубликацияВакансии = Список;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "driving_licence")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "driving_licence";
		Список = Новый СписокЗначений;
		
		Для Каждого Категория Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "driving_licence") Цикл
			Если Категория = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Список.Добавить(Категория, Категория);
		КонецЦикла;
		
		Если Список.Количество() > 0 Тогда
			НовоеПоле.ПубликацияВакансии = Список;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "languages")) Тогда
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "languages";
		Список = Новый СписокЗначений;
		
		Для Каждого ВложенныйМассив Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "languages") Цикл
			
			Если ВложенныйМассив = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для Каждого ЭлементМассива Из ВложенныйМассив Цикл
				
				Если ЭлементМассива = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Индекс = 0 Тогда
					
					СтруктураЯзыка = Новый Структура;
					СтруктураЯзыка.Вставить("id", "Ключ" + ЭлементМассива.id);
					СтруктураЯзыка.Вставить("title", ЭлементМассива.title);
					
				КонецЕсли;
				
				Если Индекс = 1 Тогда
			
					СтруктураУровня = Новый Структура;
					СтруктураУровня.Вставить("id", "Ключ" + ЭлементМассива.id);
					СтруктураУровня.Вставить("title", ЭлементМассива.title);
					
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			СтруктураУровняЯзыков = Новый Структура;
			СтруктураУровняЯзыков.Вставить("id_language", СтруктураЯзыка);
			СтруктураУровняЯзыков.Вставить("level", СтруктураУровня);
			
			Список.Добавить(СтруктураУровняЯзыков, СтруктураУровняЯзыков.id_language.title + " (" + СтруктураУровняЯзыков.level.title + ")");
			
		КонецЦикла;
		
		НовоеПоле.ПубликацияВакансии = Список;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "id_user")) Тогда
		
		Список = Новый СписокЗначений;
		ПредставлениеПользователя = "";
		СправочникПользователи = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыSuperJob").users;
		Для Каждого ЭлементСправочникаПользователи Из СправочникПользователи Цикл
			Если ЭлементСправочникаПользователи.Ключ = "Ключ" + Формат(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "id_user"), "ЧГ=0") Тогда
				ПредставлениеПользователя = ЭлементСправочникаПользователи.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ПредставлениеПользователя) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "id_user";
			Список.Добавить("Ключ" + Формат(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "id_user"), "ЧГ=0"), ПредставлениеПользователя);
			НовоеПоле.ПубликацияВакансии = Список;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_kwc")) Тогда 
		
		Список = Новый СписокЗначений;
		Представление = "";
		Справочник = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыSuperJob").resumesubscription_kwc;
		Для Каждого ЭлементСправочника Из Справочник Цикл
			Если ЭлементСправочника.Ключ = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_kwc") Тогда
				Представление = ЭлементСправочника.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(Представление) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "resumesubscription_kwc";
			Список.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_kwc"), Представление);
			НовоеПоле.ПубликацияВакансии = Список;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_rws")) Тогда 
	
		Список = Новый СписокЗначений;
		Представление = "";
		Справочник = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КлассификаторыSuperJob").resumesubscription_rws;
		Для Каждого ЭлементСправочника Из Справочник Цикл
			Если ЭлементСправочника.Ключ = "Ключ" + Формат(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_rws"), "ЧГ=0") Тогда
				Представление = ЭлементСправочника.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(Представление) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "resumesubscription_rws";
			Список.Добавить("Ключ" + Формат(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "resumesubscription_rws"), "ЧГ=0"), Представление);
			НовоеПоле.ПубликацияВакансии = Список;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоВакансииZarplata(Вакансия, Дерево, СтруктураВакансииССайта)
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Показатель = Вакансия;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "header")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "header";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "header");
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "description")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "description";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "description");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "rubrics")) Тогда
		
		Список = Новый СписокЗначений;

		Для Каждого Рубрика Из ЗначениеСвойстваУзла(СтруктураВакансииССайта, "rubrics") Цикл
			Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(Рубрика, "specialities")) Тогда
				Для Каждого Специализация Из ЗначениеСвойстваУзла(Рубрика, "specialities") Цикл
					ЗначениеСпециализации = Новый Структура("ИдентификаторДоп, ИдентификаторОбщий");
					ЗначениеСпециализации.ИдентификаторДоп = Рубрика.id;
					ЗначениеСпециализации.ИдентификаторОбщий = Специализация.id;
					Список.Добавить(ЗначениеСпециализации, Специализация.title);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Список) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "rubrics.id";
			НовоеПоле.ПубликацияВакансии = Список;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_type_alias")) Тогда
		
		Список = Новый СписокЗначений;
		
		Если ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_type_alias") = "range" Тогда
			Список.Добавить("range", НСтр("ru = 'диапазон зп'"));
		ИначеЕсли ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_type_alias") = "fixed" Тогда
			Список.Добавить("fixed", НСтр("ru = 'оклад'"));
		ИначеЕсли ЗначениеСвойстваУзла(СтруктураВакансииССайта, "payment_type_alias") = "fixed_plus_bonus" Тогда
			Список.Добавить("fixed_plus_bonus", НСтр("ru = 'оклад плюс проценты'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Список) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "payment_type_alias";
			НовоеПоле.ПубликацияВакансии = Список;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary_min")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "salary_min";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary_min");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary_max")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "salary_max";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "salary_max");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_salary_gross")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "is_salary_gross";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_salary_gross");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "name")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "contact.name";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "name");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "email")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "contact.email";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "email");
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "url")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "contact.url";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "url");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "city")) Тогда
		
		Список = Новый СписокЗначений;
		Список.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "city", "id"),
			ЗначениеСвойстваУзла(СтруктураВакансииССайта, "contact", "city", "title"));
			
		Если ЗначениеЗаполнено(Список) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "contact.city";
			НовоеПоле.ПубликацияВакансии = Список;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "working_type")) Тогда
		
		Список = Новый СписокЗначений;
		Список.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "working_type", "id"),
			ЗначениеСвойстваУзла(СтруктураВакансииССайта, "working_type", "title"));
			
		Если ЗначениеЗаполнено(Список) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "working_type";
			НовоеПоле.ПубликацияВакансии = Список
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "schedule")) Тогда
		
		Список = Новый СписокЗначений;
		Список.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "schedule", "id"),
			ЗначениеСвойстваУзла(СтруктураВакансииССайта, "schedule", "title"));
			
		Если ЗначениеЗаполнено(Список) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "schedule";
			НовоеПоле.ПубликацияВакансии = Список
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education")) Тогда
		
		Список = Новый СписокЗначений;
		Список.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education", "id"),
			ЗначениеСвойстваУзла(СтруктураВакансииССайта, "education", "title"));
			
		Если ЗначениеЗаполнено(Список) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "education";
			НовоеПоле.ПубликацияВакансии = Список
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "experience_length")) Тогда
		
		Список = Новый СписокЗначений;
		Список.Добавить(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "experience_length", "id"),
			ЗначениеСвойстваУзла(СтруктураВакансииССайта, "experience_length", "title"));
			
		Если ЗначениеЗаполнено(Список) Тогда
			НовоеПоле = НоваяСтрока.Строки.Добавить();
			НовоеПоле.Путь = "experience_length";
			НовоеПоле.ПубликацияВакансии = Список
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_available_for_invalids")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "is_available_for_invalids";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_available_for_invalids");
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_available_for_students")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "is_available_for_students";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_available_for_students");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_available_for_pensioners")) Тогда
		
		НовоеПоле = НоваяСтрока.Строки.Добавить();
		НовоеПоле.Путь = "is_available_for_pensioners";
		НовоеПоле.ПубликацияВакансии = ЗначениеСвойстваУзла(СтруктураВакансииССайта, "is_available_for_pensioners");
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураДанныхКандидатаHeadHunter(СтруктураРезюме)
	
	СтруктураДанныхКандидата = Справочники[ИнтеграцияРекрутинговыхСайтовКлиентСервер.ИмяСправочникаКандидатов()].СтруктураДанныхКандидата();
	
	ДатаРождения = ЗначениеСвойстваУзла(СтруктураРезюме, "birth_date");
	СтруктураДанныхКандидата.ДатаРождения = ?(ЗначениеЗаполнено(ДатаРождения), Дата(СтрЗаменить(ДатаРождения, "-", "")), Дата(1, 1, 1));
	
	МассивГражданство = Новый Массив;
	Для Каждого Гражданство Из ЗначениеСвойстваУзла(СтруктураРезюме, "citizenship") Цикл
		СтруктураГражданство = Новый Структура("Страна, Дата");
		СтруктураГражданство.Страна = ЗначениеСвойстваУзла(Гражданство, "name");
		МассивГражданство.Добавить(СтруктураГражданство);
	КонецЦикла;
	СтруктураДанныхКандидата.Гражданство = МассивГражданство;
	
	МассивКонтактнаяИнформация = Новый Массив;
	ЗаполнитьМассивКонтактнойИнформацииHeadHunter(СтруктураРезюме, МассивКонтактнаяИнформация);
	
	СтруктураДанныхКандидата.Вставить("КонтактнаяИнформация", МассивКонтактнаяИнформация);
	
	МассивОбразование = Новый Массив;
	ЗаполнитьМассивОбразованиеHeadHunter(СтруктураРезюме, МассивОбразование);
	
	СтруктураДанныхКандидата.Вставить("Образование", МассивОбразование);
	
	МассивТрудоваяДеятельность = Новый Массив;
	Для Каждого ТрудоваяДеятельность Из ЗначениеСвойстваУзла(СтруктураРезюме, "experience") Цикл
		
		Если ТрудоваяДеятельность = Неопределено 
			Или ТрудоваяДеятельность = "null" Тогда
			
			Продолжить;
		КонецЕсли;
		
		СтруктураТрудоваяДеятельность = СтруктураТрудоваяДеятельность();
		СтруктураТрудоваяДеятельность.Организация = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "company");
		СтруктураТрудоваяДеятельность.ДатаНачала = МесяцСтрокойВДату(ЗначениеСвойстваУзла(ТрудоваяДеятельность, "start"));
		СтруктураТрудоваяДеятельность.ДатаОкончания = МесяцСтрокойВДату(ЗначениеСвойстваУзла(ТрудоваяДеятельность, "end"));
		СтруктураТрудоваяДеятельность.Должность = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "position"); 
		СтруктураТрудоваяДеятельность.Обязанности = УдалитьЛишнееИзСтроки(ЗначениеСвойстваУзла(ТрудоваяДеятельность, "description"));
		СфераДеятельностиКомпании = "";
		Для Каждого СфераДеятельности Из ЗначениеСвойстваУзла(ТрудоваяДеятельность, "industries") Цикл
			Если СфераДеятельности = Неопределено 
				Или СфераДеятельности = "null" Тогда
				Продолжить;
			КонецЕсли;
			СфераДеятельностиКомпании = СфераДеятельностиКомпании + ?(ЗначениеЗаполнено(СфераДеятельностиКомпании), ", ", "") + ЗначениеСвойстваУзла(СфераДеятельности, "name");	
		КонецЦикла;
		СтруктураТрудоваяДеятельность.СфераДеятельностиКомпании = СфераДеятельностиКомпании;	
		
		МассивТрудоваяДеятельность.Добавить(СтруктураТрудоваяДеятельность);			
		
	КонецЦикла;
	СтруктураДанныхКандидата.Вставить("ТрудоваяДеятельность", МассивТрудоваяДеятельность);
	
	СтруктураДанныхКандидата.Вставить("Фамилия", ЗначениеСвойстваУзла(СтруктураРезюме, "last_name"));
	СтруктураДанныхКандидата.Вставить("Имя", ЗначениеСвойстваУзла(СтруктураРезюме, "first_name"));
	СтруктураДанныхКандидата.Вставить("Отчество", ЗначениеСвойстваУзла(СтруктураРезюме, "middle_name"));
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "gender")) Тогда

		Если ЗначениеСвойстваУзла(СтруктураРезюме, "gender", "id") = "male" Тогда
			СтруктураДанныхКандидата.Вставить("Пол", ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол());
		ИначеЕсли ЗначениеСвойстваУзла(СтруктураРезюме, "gender", "id") = "female" Тогда
			СтруктураДанныхКандидата.Вставить("Пол", ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол());
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "salary")) Тогда
		СтруктураДанныхКандидата.Вставить("ОжидаемыйДоход", ЗначениеСвойстваУзла(СтруктураРезюме, "salary", "amount"));
	КонецЕсли;
	
	МассивЗнаниеЯзыков = Новый Массив;
	Для Каждого ЗнаниеЯзыка Из ЗначениеСвойстваУзла(СтруктураРезюме, "language") Цикл
		
		СтруктураЗнаниеЯзыков = СтруктураЗнаниеЯзыков();
		СтруктураЗнаниеЯзыков.Язык = ЗначениеСвойстваУзла(ЗнаниеЯзыка, "name");
		СтруктураЗнаниеЯзыков.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыкаПоИдентификаторуHeadHunter(ЗначениеСвойстваУзла(ЗнаниеЯзыка, "level", "id"));
		
		МассивЗнаниеЯзыков.Добавить(СтруктураЗнаниеЯзыков);
		
	КонецЦикла;
	СтруктураДанныхКандидата.Вставить("ЗнаниеЯзыков", МассивЗнаниеЯзыков);
	
	СтруктураДанныхКандидата.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	СтруктураДанныхКандидата.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
	СтруктураДанныхКандидата.Вставить("ДатаОткрытия", ТекущаяДатаСеанса());
	СтруктураДанныхКандидата.Вставить("ИсточникИнформации", HeadHunter());
	СтруктураДанныхКандидата.Вставить("АдресРезюме", ЗначениеСвойстваУзла(СтруктураРезюме, "alternate_url"));
	СтруктураДанныхКандидата.Вставить("Фото", ЗначениеСвойстваУзла(СтруктураРезюме, "Фото"));
	
	СтруктураДанныхКандидата.Вставить("Комментарии", СтруктураРезюме["Комментарии"]);
	
	СтрокаОСебе = ЗначениеСвойстваУзла(СтруктураРезюме, "skills");
	Если ЗначениеЗаполнено(СтрокаОСебе) Тогда
		ЗаменитьУпрСимволы(СтрокаОСебе);
		СтруктураДанныхКандидата.Вставить("ОСебе", СтрокаОСебе);
	КонецЕсли;
	
	Возврат СтруктураДанныхКандидата;
	
КонецФункции

Процедура ЗаменитьУпрСимволы(СтрокаТекста)
	
	СтрокаТекста = СтрЗаменить(СтрокаТекста, "\r", Символы.ВК);
	СтрокаТекста = СтрЗаменить(СтрокаТекста, "\n", Символы.ПС);
	СтрокаТекста = СтрЗаменить(СтрокаТекста, "\t", Символы.Таб);
	
КонецПроцедуры

Функция СтруктураДанныхКандидатаRabota(СтруктураРезюме)
	
	СтруктураДанныхКандидата = Справочники[ИнтеграцияРекрутинговыхСайтовКлиентСервер.ИмяСправочникаКандидатов()].СтруктураДанныхКандидата();
	
	СтруктураДанныхКандидата.Фамилия = ЗначениеСвойстваУзла(СтруктураРезюме, "surname");
	СтруктураДанныхКандидата.Имя = ЗначениеСвойстваУзла(СтруктураРезюме, "personName");
	СтруктураДанныхКандидата.Отчество = ЗначениеСвойстваУзла(СтруктураРезюме, "secondName");
	
	СтруктураДанныхКандидата.ДатаРождения = ПрочитатьДатуJSON(ЗначениеСвойстваУзла(СтруктураРезюме, "birthDate"), ФорматДатыJSON.ISO);
	
	МассивКонтактнаяИнформация = Новый Массив;
	ЗаполнитьМассивКонтактнойИнформацииRabota(СтруктураРезюме, МассивКонтактнаяИнформация);
	СтруктураДанныхКандидата.Вставить("КонтактнаяИнформация", МассивКонтактнаяИнформация);
	
	МассивГражданство = Новый Массив;
	МассивСостояниеВБраке = Новый Массив;
	Женат = Ложь;
	
	Для Каждого ДопИнформация Из ЗначениеСвойстваУзла(СтруктураРезюме, "additional") Цикл
		
		Страна = ЗначениеСвойстваУзла(ДопИнформация, "citizenship", "name");
		Если ЗначениеЗаполнено(Страна) Тогда
			МассивГражданство.Добавить(Новый Структура("Страна, Дата", Страна));
		КонецЕсли;
		
		Женат = ЗначениеСвойстваУзла(ДопИнформация, "isMarried");
		
		СтрокаОСебе = ЗначениеСвойстваУзла(ДопИнформация, "comment");
		Если ЗначениеЗаполнено(СтрокаОСебе) Тогда
			ЗаменитьУпрСимволы(СтрокаОСебе);
			СтруктураДанныхКандидата.Вставить("ОСебе", СтрокаОСебе);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСостояниеВБраке.Добавить(Новый Структура("СостояниеВБраке, Дата",
		?(ЗначениеЗаполнено(Женат) И Женат, НСтр("ru = 'Женат'"), НСтр("ru = 'Не женат'"))));
	
	СтруктураДанныхКандидата.СостояниеВБраке = МассивСостояниеВБраке;
	СтруктураДанныхКандидата.Гражданство = МассивГражданство;
	
	МассивОбразование = Новый Массив;
	ЗаполнитьМассивОбразованиеRabota(СтруктураРезюме, МассивОбразование);
	СтруктураДанныхКандидата.Вставить("Образование", МассивОбразование);
	
	МассивТрудоваяДеятельность = Новый Массив;
	Для Каждого ТрудоваяДеятельность Из ЗначениеСвойстваУзла(СтруктураРезюме, "experience") Цикл
		
		Если Не ЗначениеЗаполнено(ТрудоваяДеятельность) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТрудоваяДеятельность = СтруктураТрудоваяДеятельность();
		СтруктураТрудоваяДеятельность.Организация = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "name");
		
		ДатаНачала = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "dateFrom");
		ДатаНачала = ?(ЗначениеЗаполнено(ДатаНачала), ПрочитатьДатуJSON(ЗначениеСвойстваУзла(ТрудоваяДеятельность, "dateFrom"), ФорматДатыJSON.ISO), Дата(1,1,1));
		
		ДатаОкончания = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "dateTo");
		ДатаОкончания = ?(ЗначениеЗаполнено(ДатаОкончания), ПрочитатьДатуJSON(ЗначениеСвойстваУзла(ТрудоваяДеятельность, "dateTo"), ФорматДатыJSON.ISO), Дата(1,1,1));
		
		СтруктураТрудоваяДеятельность.ДатаНачала = ДатаНачала;
		СтруктураТрудоваяДеятельность.ДатаОкончания = ДатаОкончания;
		
		СтруктураТрудоваяДеятельность.Должность = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "position"); 
		СтруктураТрудоваяДеятельность.Обязанности = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "comment");
		
		СфераДеятельностиКомпании = "";
		Для Каждого СфераДеятельности Из ЗначениеСвойстваУзла(ТрудоваяДеятельность, "branch") Цикл
			Если ЗначениеЗаполнено(СфераДеятельности) Тогда
				СфераДеятельностиКомпании = СфераДеятельностиКомпании + ?(ЗначениеЗаполнено(СфераДеятельностиКомпании), ", ", "") + ЗначениеСвойстваУзла(СфераДеятельности, "name");
			КонецЕсли;
		КонецЦикла;
		СтруктураТрудоваяДеятельность.СфераДеятельностиКомпании = СфераДеятельностиКомпании;
		
		МассивТрудоваяДеятельность.Добавить(СтруктураТрудоваяДеятельность);
		
	КонецЦикла;
	
	СтруктураДанныхКандидата.Вставить("ТрудоваяДеятельность", МассивТрудоваяДеятельность);
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "gender")) Тогда
		
		Если ЗначениеСвойстваУзла(СтруктураРезюме, "gender") = "male" Тогда
			СтруктураДанныхКандидата.Вставить("Пол", ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол());
		Иначе
			СтруктураДанныхКандидата.Вставить("Пол", ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол());
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "salaryFrom")) Тогда
		СтруктураДанныхКандидата.Вставить("ОжидаемыйДоход", ЗначениеСвойстваУзла(СтруктураРезюме, "salaryFrom"));
	КонецЕсли;
	
	МассивЗнаниеЯзыков = Новый Массив;
	Для Каждого ЗнаниеЯзыка Из ЗначениеСвойстваУзла(СтруктураРезюме, "language") Цикл
		
		СтруктураЗнаниеЯзыков = СтруктураЗнаниеЯзыков();
		СтруктураЗнаниеЯзыков.Язык = ЗначениеСвойстваУзла(ЗнаниеЯзыка, "name");
		СтруктураЗнаниеЯзыков.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыкаПоИдентификаторуRabota(ЗначениеСвойстваУзла(ЗнаниеЯзыка, "offerLanguageLevel"));
		
		МассивЗнаниеЯзыков.Добавить(СтруктураЗнаниеЯзыков);
		
	КонецЦикла;
	
	СтруктураДанныхКандидата.Вставить("ЗнаниеЯзыков", МассивЗнаниеЯзыков);
	
	СтруктураДанныхКандидата.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	СтруктураДанныхКандидата.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
	СтруктураДанныхКандидата.Вставить("ДатаОткрытия", ПрочитатьДатуJSON(ЗначениеСвойстваУзла(СтруктураРезюме, "publishDate"), ФорматДатыJSON.ISO));
	СтруктураДанныхКандидата.Вставить("ИсточникИнформации", Rabota());
	СтруктураДанныхКандидата.Вставить("АдресРезюме", ЗначениеСвойстваУзла(СтруктураРезюме, "link"));
	СтруктураДанныхКандидата.Вставить("Фото", ЗначениеСвойстваУзла(СтруктураРезюме, "Фото"));
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "ТекстОшибки")) Тогда
		СообщитьПользователю(ЗначениеСвойстваУзла(СтруктураРезюме, "ТекстОшибки"));
	КонецЕсли;

	Возврат СтруктураДанныхКандидата;
	
КонецФункции

Функция СтруктураДанныхКандидатаSuperJob(СтруктураРезюме)
	
	СтруктураДанныхКандидата = Справочники[ИнтеграцияРекрутинговыхСайтовКлиентСервер.ИмяСправочникаКандидатов()].СтруктураДанныхКандидата();
	
	СтруктураДанныхКандидата.Фамилия = ЗначениеСвойстваУзла(СтруктураРезюме, "lastname");
	СтруктураДанныхКандидата.Имя = ЗначениеСвойстваУзла(СтруктураРезюме, "firstname");
	СтруктураДанныхКандидата.Отчество = ЗначениеСвойстваУзла(СтруктураРезюме, "middlename");
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "birthyear")) 
		И ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "birthmonth")) 
		И ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "birthday")) Тогда
		
		СтруктураДанныхКандидата.ДатаРождения = Дата(ЗначениеСвойстваУзла(СтруктураРезюме, "birthyear"), ЗначениеСвойстваУзла(СтруктураРезюме, "birthmonth"), ЗначениеСвойстваУзла(СтруктураРезюме, "birthday"));
	КонецЕсли;
		
	Если Не СтруктураРезюме.agreement Тогда
		СтруктураДанныхКандидата.Вставить("ОжидаемыйДоход", ЗначениеСвойстваУзла(СтруктураРезюме, "payment"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "gender")) Тогда
		Если Строка(ЗначениеСвойстваУзла(СтруктураРезюме, "gender", "id")) = "2" Тогда
			СтруктураДанныхКандидата.Вставить("Пол", ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол());
		ИначеЕсли Строка(ЗначениеСвойстваУзла(СтруктураРезюме, "gender", "id")) = "3" Тогда
			СтруктураДанныхКандидата.Вставить("Пол", ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол());
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "citizenship")) Тогда
		МассивГражданство = Новый Массив;
		СтруктураГражданство = Новый Структура("Страна, Дата");
		СтруктураГражданство.Страна = ЗначениеСвойстваУзла(СтруктураРезюме, "citizenship", "title");
		МассивГражданство.Добавить(СтруктураГражданство);
		СтруктураДанныхКандидата.Гражданство = МассивГражданство;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(СтруктураРезюме, "maritalstatus")) Тогда
		МассивСостояниеВБраке = Новый Массив;
		СтруктураСостояниеВБраке = Новый Структура("СостояниеВБраке, Дата");
		СтруктураСостояниеВБраке.СостояниеВБраке = ЗначениеСвойстваУзла(СтруктураРезюме, "maritalstatus", "title");
		МассивСостояниеВБраке.Добавить(СтруктураСостояниеВБраке);
		СтруктураДанныхКандидата.СостояниеВБраке = МассивСостояниеВБраке;
	КонецЕсли;
	
	МассивОбразование = Новый Массив;
	ЗаполнитьМассивОбразованиеSuperJob(СтруктураРезюме, МассивОбразование);
	
	СтруктураДанныхКандидата.Вставить("Образование", МассивОбразование);
	
	МассивТрудоваяДеятельность = Новый Массив;
	Для Каждого ТрудоваяДеятельность Из ЗначениеСвойстваУзла(СтруктураРезюме, "work_history") Цикл
		
		Если ТрудоваяДеятельность = Неопределено 
			Или ТрудоваяДеятельность = "null" Тогда
			
			Продолжить;
		КонецЕсли;
		
		СтруктураТрудоваяДеятельность = СтруктураТрудоваяДеятельность();
		СтруктураТрудоваяДеятельность.Организация = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "name");
		СтруктураТрудоваяДеятельность.Должность = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "profession");    
		
		ГодНачала = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "yearbeg");
		МесяцНачала = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "monthbeg");
		МесяцНачалаСтрокой = ?(ЗначениеЗаполнено(ГодНачала), Формат(ГодНачала, "ЧГ=0"), "0001") + ?(ЗначениеЗаполнено(МесяцНачала), ?(Число(МесяцНачала) < 10, "0" + МесяцНачала, МесяцНачала), "01") + "01";
		
		СтруктураТрудоваяДеятельность.ДатаНачала = МесяцСтрокойВДату(МесяцНачалаСтрокой);
		
		ГодОкончания = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "yearend");
		МесяцОкончания = ЗначениеСвойстваУзла(ТрудоваяДеятельность, "monthend");
		МесяцОкончанияСтрокой = ?(ЗначениеЗаполнено(ГодОкончания), Формат(ГодОкончания, "ЧГ=0"), "0001") + ?(ЗначениеЗаполнено(МесяцОкончания), ?(Число(МесяцОкончания) < 10, "0" + МесяцОкончания, МесяцОкончания), "01") + "01";
		
		СтруктураТрудоваяДеятельность.ДатаОкончания = МесяцСтрокойВДату(МесяцОкончанияСтрокой);
		
		СтруктураТрудоваяДеятельность.Обязанности = УдалитьЛишнееИзСтроки(ЗначениеСвойстваУзла(ТрудоваяДеятельность, "work"));
		СтруктураТрудоваяДеятельность.СфераДеятельностиКомпании = "";
		
		МассивТрудоваяДеятельность.Добавить(СтруктураТрудоваяДеятельность);
		
	КонецЦикла;
	СтруктураДанныхКандидата.Вставить("ТрудоваяДеятельность", МассивТрудоваяДеятельность);
	
	МассивКонтактнаяИнформация = Новый Массив;
	ЗаполнитьМассивКонтактнойИнформацииSuperJob(СтруктураРезюме, МассивКонтактнаяИнформация);
	
	СтруктураДанныхКандидата.Вставить("КонтактнаяИнформация", МассивКонтактнаяИнформация);
	
	МассивЗнаниеЯзыков = Новый Массив;
	Если СтруктураРезюме.Свойство("languages") Тогда
		Для Каждого ЗнаниеЯзыка Из ЗначениеСвойстваУзла(СтруктураРезюме, "languages") Цикл
			
			Если Не ЗначениеЗаполнено(ЗнаниеЯзыка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗнаниеЯзыка.Количество() = 2 Тогда
				СтруктураЗнаниеЯзыков = СтруктураЗнаниеЯзыков();
				СтруктураЗнаниеЯзыков.Язык = ЗнаниеЯзыка[0].title;
				СтруктураЗнаниеЯзыков.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыкаПоИдентификаторуSuperJob(ЗнаниеЯзыка[1].id);
				МассивЗнаниеЯзыков.Добавить(СтруктураЗнаниеЯзыков);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	СтруктураДанныхКандидата.Вставить("ЗнаниеЯзыков", МассивЗнаниеЯзыков);
	
	СтруктураДанныхКандидата.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	СтруктураДанныхКандидата.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
	СтруктураДанныхКандидата.Вставить("ИсточникИнформации", SuperJob());
	СтруктураДанныхКандидата.Вставить("АдресРезюме", СтрЗаменить(ЗначениеСвойстваУзла(СтруктураРезюме, "link"), "\", ""));
	СтруктураДанныхКандидата.Вставить("ДатаОткрытия", ТекущаяДатаСеанса());
	
	Если СтруктураРезюме.Свойство("Фото") Тогда
		СтруктураДанныхКандидата.Вставить("Фото", ЗначениеСвойстваУзла(СтруктураРезюме, "Фото"));
	КонецЕсли;
	
	СтруктураДанныхКандидата.Вставить("Комментарии", СтруктураРезюме["Комментарии"]);
	
	СтрокаОСебе = ЗначениеСвойстваУзла(СтруктураРезюме, "achievements");
	Если ЗначениеЗаполнено(СтрокаОСебе) Тогда
		ЗаменитьУпрСимволы(СтрокаОСебе);
		СтруктураДанныхКандидата.Вставить("ОСебе", СтрокаОСебе);
	КонецЕсли;
	
	Возврат СтруктураДанныхКандидата;
	
КонецФункции

Функция СтруктураДанныхКандидатаZarplata(СтруктураРезюме)
	
	СтруктураДанныхКандидата = Справочники[ИнтеграцияРекрутинговыхСайтовКлиентСервер.ИмяСправочникаКандидатов()].СтруктураДанныхКандидата();
	
	СтруктураДанныхКандидата.Вставить("ИсточникИнформации", Zarplata());
	
	СтруктураДанныхКандидата.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	СтруктураДанныхКандидата.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
	СтруктураДанныхКандидата.Вставить("ДатаОткрытия", ТекущаяДатаСеанса());

	// Адрес резюме
	ИдентификаторРезюме = ЗначениеСвойстваУзла(СтруктураРезюме, "id",,, Неопределено);
	Если Не ИдентификаторРезюме = Неопределено Тогда
		ИдентификаторРезюме = "https://hr.zarplata.ru/resumes/" + Формат(ИдентификаторРезюме, "ЧГ=0");
		СтруктураДанныхКандидата.Вставить("АдресРезюме", ИдентификаторРезюме);
	КонецЕсли;
	
	// ФИО
	СтруктураИмени = ЗначениеСвойстваУзла(СтруктураРезюме, "profile", "name",, Неопределено);
	Если Не СтруктураИмени = Неопределено Тогда
		СтруктураДанныхКандидата.Фамилия = ЗначениеСвойстваУзла(СтруктураИмени, "last_name");
		СтруктураДанныхКандидата.Имя = ЗначениеСвойстваУзла(СтруктураИмени, "first_name");
		СтруктураДанныхКандидата.Отчество = ЗначениеСвойстваУзла(СтруктураИмени, "patronymic_name");
	КонецЕсли;
	
	// Ожидаемый доход
	СтруктураДанныхКандидата.ОжидаемыйДоход = ЗначениеСвойстваУзла(СтруктураРезюме, "salary",,, Неопределено);
	
	// Пол
	Пол = ЗначениеСвойстваУзла(СтруктураРезюме, "profile", "personal", "gender", Неопределено);
	Если Не Пол = Неопределено Тогда
		Если Пол = "male" Тогда
			СтруктураДанныхКандидата.Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол();
		ИначеЕсли Пол = "female" Тогда
			СтруктураДанныхКандидата.Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол();
		КонецЕсли;
	КонецЕсли;
	
	// Дата рождения
	ДатаРождения = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(СтруктураРезюме, "profile", "personal", "birthday"), Ложь);
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		СтруктураДанныхКандидата.ДатаРождения = ДатаРождения;
	КонецЕсли;
	
	// Гражданство
	Гражданство = ЗначениеСвойстваУзла(СтруктураРезюме, "profile", "personal", "citizenship", Неопределено);
	Если Не Гражданство = Неопределено Тогда
		СтруктураДанныхКандидата.Гражданство = Новый Массив;
		СтруктураГражданство = Новый Структура("Страна, Дата");
		СтруктураГражданство.Страна = Гражданство["title"];
		СтруктураДанныхКандидата.Гражданство.Добавить(СтруктураГражданство);
	КонецЕсли;
	
	// Контактная информация
	МассивКонтактнаяИнформация = Новый Массив;
	ЗаполнитьМассивКонтактнойИнформацииZarplata(СтруктураРезюме, МассивКонтактнаяИнформация);
	СтруктураДанныхКандидата.Вставить("КонтактнаяИнформация", МассивКонтактнаяИнформация);
	
	// Образование
	МассивОбразование = Новый Массив;
	ЗаполнитьМассивОбразованиеZarplata(СтруктураРезюме, МассивОбразование);
	СтруктураДанныхКандидата.Вставить("Образование", МассивОбразование);

	// Состояние в браке
	СемейноеПоложение = ЗначениеСвойстваУзла(СтруктураРезюме, "profile", "personal", "marital_status");
	Если ЗначениеЗаполнено(СемейноеПоложение) И ЗначениеЗаполнено(Пол) Тогда
		Если СемейноеПоложение = "married" Тогда
			СемейноеПоложение = НСтр("ru = 'Женат'");
		ИначеЕсли СемейноеПоложение = "single" Тогда
			СемейноеПоложение = НСтр("ru = 'Не женат'");
		Иначе
			СемейноеПоложение = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(СемейноеПоложение) Тогда
			СтруктураДанныхКандидата.СостояниеВБраке = Новый Массив;
			СтруктураДанныхКандидата.СостояниеВБраке.Добавить(Новый Структура("СостояниеВБраке", СемейноеПоложение));
		КонецЕсли;
	КонецЕсли;
	
	// Трудовая деятельность
	МассивТрудоваяДеятельность = Новый Массив;
	МестаРаботы = ЗначениеСвойстваУзла(СтруктураРезюме, "jobs");
	Для Каждого МестоРаботы Из МестаРаботы Цикл
		СтруктураТрудоваяДеятельность = СтруктураТрудоваяДеятельность();
		СтруктураТрудоваяДеятельность.Организация = ЗначениеСвойстваУзла(МестоРаботы, "company", "title");
		ДатаНачала = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(МестоРаботы, "date", "from"), Ложь);
		ДатаОкончания = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(МестоРаботы, "date", "to"), Ложь);
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			СтруктураТрудоваяДеятельность.ДатаНачала = ДатаНачала;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			СтруктураТрудоваяДеятельность.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
		СтруктураТрудоваяДеятельность.Должность = ЗначениеСвойстваУзла(МестоРаботы, "position");
		СтруктураТрудоваяДеятельность.Обязанности = ЗначениеСвойстваУзла(МестоРаботы, "description");
		СфераДеятельностиКомпании = "";
		Рубрики = ЗначениеСвойстваУзла(МестоРаботы, "company", "rubrics");
		Если ЗначениеЗаполнено(Рубрики) Тогда
			Для Каждого Рубрика Из Рубрики Цикл
				СфераДеятельностиКомпании = СфераДеятельностиКомпании
					+ ?(ЗначениеЗаполнено(СфераДеятельностиКомпании), ", ", "") + ЗначениеСвойстваУзла(Рубрика, "title");
			КонецЦикла;
		КонецЕсли;
		СтруктураТрудоваяДеятельность.СфераДеятельностиКомпании = СфераДеятельностиКомпании;
		МассивТрудоваяДеятельность.Добавить(СтруктураТрудоваяДеятельность);
	КонецЦикла;
	СтруктураДанныхКандидата.Вставить("ТрудоваяДеятельность", МассивТрудоваяДеятельность);
	
	// О себе
	СтрокаОСебе = ЗначениеСвойстваУзла(СтруктураРезюме, "about");
	Если ЗначениеЗаполнено(СтрокаОСебе) Тогда
		ЗаменитьУпрСимволы(СтрокаОСебе);
		СтруктураДанныхКандидата.Вставить("ОСебе", СтрокаОСебе);
	КонецЕсли;
	
	// Фото
	СтруктураДанныхКандидата.Вставить("Фото", ЗначениеСвойстваУзла(СтруктураРезюме, "Фото"));
	
	Возврат СтруктураДанныхКандидата;
	
КонецФункции

Функция СтепеньЗнанияЯзыкаПоИдентификаторуHeadHunter(Идентификатор)
	
	СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.ПустаяСсылка();
	Код = Неопределено;
	
	Если Идентификатор = "basic" Тогда // базовые знания
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("1");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("01");
		КонецЕсли;
		Код = "1";
	ИначеЕсли Идентификатор = "can_read" Тогда // читаю профессиональную литературу
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("1");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("01");
		КонецЕсли;
		Код = "1";
	ИначеЕсли Идентификатор = "can_pass_interview" Тогда  // могу проходить интервью
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("2");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("02");
		КонецЕсли;
		Код = "2";
	ИначеЕсли Идентификатор = "fluent" Тогда // свободно владею
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("3");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("03");
		КонецЕсли;
		Код = "3";
	ИначеЕсли Идентификатор = "native" Тогда // родной
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("3");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("03");
		КонецЕсли;
		Код = "3";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка)
		И Код <> Неопределено Тогда
		
		СтепеньЗнанияЯзыка = НоваяСтепеньЗнанияЯзыка(Код);
	КонецЕсли;
	
	Возврат СтепеньЗнанияЯзыка;
	
КонецФункции

Функция СтепеньЗнанияЯзыкаПоИдентификаторуRabota(Идентификатор)
	
	СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.ПустаяСсылка();
	
	Если Идентификатор = 1 Тогда // начальный
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("1");
	ИначеЕсли Идентификатор = 2
		Или Идентификатор = 3 Тогда // средний или продвинутый
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("2");
	Иначе
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("3");
	КонецЕсли;
	
	Возврат СтепеньЗнанияЯзыка;
	
КонецФункции

Функция СтепеньЗнанияЯзыкаПоИдентификаторуSuperJob(Идентификатор) 
	
	СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.ПустаяСсылка();
	Код = Неопределено;
	
	Если Строка(Идентификатор) = "3" Тогда // базовый
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("1");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("01");
		КонецЕсли;
		Код = "1";
	ИначеЕсли Строка(Идентификатор) = "5" Тогда // технический
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("1");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("01");
		КонецЕсли;
		Код = "1";
	ИначеЕсли Строка(Идентификатор) = "7" Тогда // разговорный
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("2");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("02");
		КонецЕсли;
		Код = "2";
	ИначеЕсли Строка(Идентификатор) = "9" Тогда // свободно владею	
		СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("3");
		Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) Тогда
			СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду("03");
		КонецЕсли;
		Код = "3";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтепеньЗнанияЯзыка) 
		И Код <> Неопределено Тогда
		
		СтепеньЗнанияЯзыка = НоваяСтепеньЗнанияЯзыка(Код);
	КонецЕсли;
	
	Возврат СтепеньЗнанияЯзыка;
	
КонецФункции

Функция ЭлементКлассификатораHeadHunter(КлассификаторHeadHunter, Представление)
	
	ЭлементСправочника = Неопределено;
	ЗначениеПоиска = НРег(Представление);
	
	СоответствиеЗамены = Новый Соответствие;
	СоответствиеЗамены.Вставить("среднее", "среднее общее");
	СоответствиеЗамены.Вставить("среднее специальное", "среднее профессиональное");
	СоответствиеЗамены.Вставить("неоконченное высшее", "неполное высшее");
	СоответствиеЗамены.Вставить("доктор наук", "докторантура");
	СоответствиеЗамены.Вставить("кандидат наук", "аспирантура");
	
	Для Каждого ЭлементHeadHunter Из КлассификаторHeadHunter Цикл
		
		ЗначениеСравнения = НРег(СокрЛП(ЭлементHeadHunter.name));
		
		ЗначениеЗамены = СоответствиеЗамены.Получить(ЗначениеСравнения);
		Если ЗначениеЗаполнено(ЗначениеЗамены) Тогда
			ЗначениеСравнения = ЗначениеЗамены;
		КонецЕсли;
		
		Если ЗначениеСравнения = ЗначениеПоиска Тогда
			ЭлементСправочника = ЭлементHeadHunter;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементСправочника;
	
КонецФункции

Функция ЭлементКлассификатораRabota(КлассификаторRabota, Представление)
	
	ЭлементСправочника = Неопределено;
	ЗначениеПоиска = НРег(Представление);
	
	СоответствиеЗамены = Новый Соответствие;
	СоответствиеЗамены.Вставить("среднее", "среднее общее");
	
	Для Каждого ЭлементRabota Из КлассификаторRabota Цикл
		
		ЗначениеСравнения = НРег(СокрЛП(ЭлементRabota.name));
		
		ЗначениеЗамены = СоответствиеЗамены.Получить(ЗначениеСравнения);
		Если ЗначениеЗаполнено(ЗначениеЗамены) Тогда
			ЗначениеСравнения = ЗначениеЗамены;
		КонецЕсли;
		
		Если ЗначениеСравнения = ЗначениеПоиска Тогда
			ЭлементСправочника = ЭлементRabota;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементСправочника;
	
КонецФункции

Функция ЭлементКлассификатораSuperJob(КлассификаторSuperJob, Представление)
	
	ЭлементСправочника = Неопределено;
	ЗначениеПоиска = НРег(Представление);
	
	СоответствиеЗамены = Новый Соответствие;
	СоответствиеЗамены.Вставить("среднее", "среднее общее");
	СоответствиеЗамены.Вставить("среднее специальное", "среднее профессиональное");
	
	Для Каждого ЭлементSuperJob Из КлассификаторSuperJob Цикл
		
		ЗначениеСравнения = НРег(СокрЛП(ЭлементSuperJob.Значение));
		
		ЗначениеЗамены = СоответствиеЗамены.Получить(ЗначениеСравнения);
		Если ЗначениеЗаполнено(ЗначениеЗамены) Тогда
			ЗначениеСравнения = ЗначениеЗамены;
		КонецЕсли;
		
		Если ЗначениеСравнения = ЗначениеПоиска Тогда
			ЭлементСправочника = ЭлементSuperJob;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементСправочника;
	
КонецФункции

Функция ЭлементКлассификатораZarplata(КлассификаторZarplata, Представление)
	
	ЭлементСправочника = Неопределено;
	ЗначениеПоиска = НРег(Представление);
	
	СоответствиеЗамены = Новый Соответствие;
	СоответствиеЗамены.Вставить("среднее", "среднее общее");
	
	Классификатор = ПредопределенноеЗначение(СтрШаблон("Перечисление.ИменаКлассификаторовРекрутинговыхСайтов.%1", КлассификаторZarplata));
	
	ЗначениеКлассификатора = РегистрыСведений.КлассификаторыРекрутинговыхСайтов.ЗначениеКлассификатора(Zarplata(), Классификатор);
	
	Для Каждого ЭлементКлассификатора Из ЗначениеКлассификатора Цикл
		Если ЭлементКлассификатора.Свойство("name") Тогда
			ЗначениеСравнения = НРег(СокрЛП(ЭлементКлассификатора.name));
		Иначе
			ЗначениеСравнения = НРег(СокрЛП(ЭлементКлассификатора.title));
		КонецЕсли;
		
		ЗначениеЗамены = СоответствиеЗамены.Получить(ЗначениеСравнения);
		Если ЗначениеЗаполнено(ЗначениеЗамены) Тогда
			ЗначениеСравнения = ЗначениеЗамены;
		КонецЕсли;
		
		Если ЗначениеСравнения = ЗначениеПоиска Тогда
			ЭлементСправочника = ЭлементКлассификатора;
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЭлементСправочника;
	
КонецФункции

Функция СтрокаДереваПоКлассификатору(СтрокиДереваПоКлассификатору, Значение, Знач ЗначениеРодителя, ЗаменяемыеЗначения)
	
	СтрокаДерева = Неопределено;
	СтрокиДерева = СтрокиДереваПоКлассификатору.НайтиСтроки(Новый Структура("Значение", Значение), Истина);
	
	Если ЗначениеЗаполнено(СтрокиДерева) Тогда
		
		Если СтрокиДерева.Количество() = 1 Тогда
			СтрокаДерева = СтрокиДерева[0];
		Иначе
			
			Для Каждого Строка Из СтрокиДерева Цикл
				
				ЗначениеРодителяИзКлассификатора = ?(ЗначениеЗаполнено(Строка.Родитель), Строка.Родитель.Значение, "");
				
				ЗначениеЗамены = ЗаменяемыеЗначения.Получить(ЗначениеРодителяИзКлассификатора);
				Если ЗначениеЗаполнено(ЗначениеЗамены) Тогда
					ЗначениеРодителяИзКлассификатора = ЗначениеЗамены;
				КонецЕсли;
				
				Если ЗначениеРодителяИзКлассификатора = ЗначениеРодителя Тогда
					СтрокаДерева = Строка;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции

Функция СтрокаДереваHeadHunter(СтрокиДереваHeadHunter, Значение, ЗначениеРодителя)
	
	ЗаменяемыеЗначения = Новый Соответствие;
	ЗаменяемыеЗначения.Вставить("Удмуртская Республика", "Республика Удмуртия");
	ЗаменяемыеЗначения.Вставить("Чувашская Республика", "Чувашская республика");
	ЗаменяемыеЗначения.Вставить("Карачаево-Черкесская Республика", "Карачаево-Черкесская республика");
	ЗаменяемыеЗначения.Вставить("Балахт","Балахта");
	
	Возврат СтрокаДереваПоКлассификатору(СтрокиДереваHeadHunter, Значение, ЗначениеРодителя, ЗаменяемыеЗначения);
	
КонецФункции

Функция СтрокаДереваRabota(СтрокиДереваRabota, Значение, ЗначениеРодителя)
	
	ЗаменяемыеЗначения = Новый Соответствие;
	ЗаменяемыеЗначения.Вставить("Еврейская автономная область", "Еврейская АО");
	ЗаменяемыеЗначения.Вставить("Чувашия / Чувашская республика", "Чувашская республика");
	ЗаменяемыеЗначения.Вставить("Ханты-Мансийский Автономный округ - Югра АО", "Ханты-Мансийский АО - Югра");
	ЗаменяемыеЗначения.Вставить("Республика Чеченская", "Чеченская республика");
	ЗаменяемыеЗначения.Вставить("Республика Саха /Якутия/", "Республика Саха");
	ЗаменяемыеЗначения.Вставить("Республика Карачаево-Черкессия","Карачаево-Черкесская республика");
	ЗаменяемыеЗначения.Вставить("Республика Кабардино-Балкария", "Кабардино-Балкарская республика");
	
	ЗначениеЗамены = ЗаменяемыеЗначения.Получить(Значение);
	Если ЗначениеЗаполнено(ЗначениеЗамены) Тогда
		Значение = ЗначениеЗамены;
	КонецЕсли;
	
	Возврат СтрокаДереваПоКлассификатору(СтрокиДереваRabota, Значение, ЗначениеРодителя, ЗаменяемыеЗначения);
	
КонецФункции

Функция СтрокаДереваSuperJob(СтрокиДереваSuperJob, Значение, ЗначениеРодителя)
	
	// АПК:163-выкл. Имена собственные
	
	ЗаменяемыеЗначения = Новый Соответствие;
	ЗаменяемыеЗначения.Вставить("Цели́нное", "Целинное");
	ЗаменяемыеЗначения.Вставить("Костерёво", "Костерево");
	ЗаменяемыеЗначения.Вставить("Еврейская автономная область", "Еврейская АО");
	ЗаменяемыеЗначения.Вставить("Улеты", "Улёты");
	ЗаменяемыеЗначения.Вставить("Берёзовский", "Березовский");
	ЗаменяемыеЗначения.Вставить("Брюховецкая", "Брюховецкая станица");
	ЗаменяемыеЗначения.Вставить("Динская", "Динская станица");
	ЗаменяемыеЗначения.Вставить("Крыловская", "Крыловская станица");
	ЗаменяемыеЗначения.Вставить("Кущевская", "Кущевская станица");
	ЗаменяемыеЗначения.Вставить("Ленинградская", "Ленинградская станица");
	ЗаменяемыеЗначения.Вставить("Северская", "Северская станица");
	ЗаменяемыеЗначения.Вставить("поселок имени Карла Либкнехта", "Посёлок имени Карла Либкнехта");
	ЗаменяемыеЗначения.Вставить("имени Свердлова", "пгт имени Свердлова");
	ЗаменяемыеЗначения.Вставить("Лев Толстой", "поселок Лев Толстой");
	ЗаменяемыеЗначения.Вставить("Белоозерский", "Белоозёрский");
	ЗаменяемыеЗначения.Вставить("Володарское", "Володарского");
	ЗаменяемыеЗначения.Вставить("Воскресенское", "Воскресенск");
	ЗаменяемыеЗначения.Вставить("Милютинское сельское поселение", "Милютинская");
	ЗаменяемыеЗначения.Вставить("Шахтёрск", "Шахтерск");
	ЗаменяемыеЗначения.Вставить("Берёзовский", "Березовский");
	ЗаменяемыеЗначения.Вставить("Озёрный", "Озерный");
	ЗаменяемыеЗначения.Вставить("Богашёв", "Богашёво");
	ЗаменяемыеЗначения.Вставить("Тёплое", "Теплое");
	ЗаменяемыеЗначения.Вставить("Тюменская область, включая Ханты-Мансийский АО и Ямало-Ненецкий АО", "Тюменская область");
	ЗаменяемыеЗначения.Вставить("Дебёсы", "Дебесы");
	ЗаменяемыеЗначения.Вставить("Чукотский автономный округ", "Чукотский АО");
	ЗаменяемыеЗначения.Вставить("Белёв", "Белев");
	ЗаменяемыеЗначения.Вставить("Щёкино", "Щекино");
	
	// АПК:163-вкл.
	
	ЗначениеЗамены = ЗаменяемыеЗначения.Получить(Значение);
	Если ЗначениеЗаполнено(ЗначениеЗамены) Тогда
		Значение = ЗначениеЗамены;
	КонецЕсли;
	
	Возврат СтрокаДереваПоКлассификатору(СтрокиДереваSuperJob, Значение, ЗначениеРодителя, ЗаменяемыеЗначения);
	
КонецФункции

Функция СтрокаДереваZarplata(СтрокиДереваZarplata, Значение, ЗначениеРодителя)
	
	ЗаменяемыеЗначения = Новый Соответствие;
	
	Возврат СтрокаДереваПоКлассификатору(СтрокиДереваZarplata, Значение, ЗначениеРодителя, ЗаменяемыеЗначения);
	
КонецФункции

Процедура НайтиКандидатовHeadHunter(СтруктураОтбора, ТаблицаНайденныхКандидатов, НомерСтраницы, Знач ПолеСортировки, ВсегоКандидатов)
	
	МаркерДоступа = МаркерДоступаHeadHunter();
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтбора = СтрокаОтбораHeadHunter(СтруктураОтбора, НомерСтраницы);
	
	Соединение = HTTPСоединениеHeadHunter();
	Запрос = HTTPЗапросHeadHunter("/resumes/?" + СтрокаОтбора, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение ТекстОшибкиПоискаРезюме(HeadHunter(), Ответ.КодСостояния, ТекущаяСтрока);
	Иначе
		
		РезультатПоискаРезюме = ПарсерJSON(ТекущаяСтрока, Истина);
		
		Если РезультатПоискаРезюме.Получить("items") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВсегоКандидатов = РезультатПоискаРезюме.Получить("found");
		ВсегоКандидатов = Мин(Число(ВсегоКандидатов), 2000);
		
		ДозаполнитьТаблицуРезюмеHeadHunter(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиКандидатовRabota(СтруктураОтбора, ТаблицаНайденныхКандидатов, НомерСтраницы, Знач ПолеСортировки, ВсегоКандидатов)
	
	МаркерДоступа = МаркерДоступаRabota();
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтбора = СтрокаОтбораRabota(СтруктураОтбора, НомерСтраницы);
	
	Соединение = HTTPСоединениеRabota();
	Запрос = HTTPЗапросRabota("search-resumes/?" + СтрокаОтбора, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение ТекстОшибкиПоискаРезюме(Rabota(), Ответ.КодСостояния, ТекущаяСтрока)
		
	Иначе
		
		РезультатПоискаРезюме = ПарсерJSON(ТекущаяСтрока);
		
		Если РезультатПоискаРезюме.data = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВсегоКандидатов = РезультатПоискаРезюме.count;
		ВсегоКандидатов = Мин(Число(ВсегоКандидатов), 2000);
		
		ДозаполнитьТаблицуРезюмеRabota(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиКандидатовSuperJob(СтруктураОтбора, ТаблицаНайденныхКандидатов, НомерСтраницы, Знач ПолеСортировки, ВсегоКандидатов)
	
	МаркерДоступа = МаркерДоступа(SuperJob());
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтбора = СтрокаОтбораSuperJob(СтруктураОтбора, НомерСтраницы);
	
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob("/2.0/resumes/resumes/?" + СтрокаОтбора, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение ТекстОшибкиПоискаРезюме(SuperJob(), Ответ.КодСостояния, ТекущаяСтрока)
	Иначе
		
		РезультатПоискаРезюме = ПарсерJSON(ТекущаяСтрока);
		
		Если РезультатПоискаРезюме.objects = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатПоискаРезюме.Свойство("total") 
			И Число(РезультатПоискаРезюме.total) > 0 Тогда
		
			ВсегоКандидатов = РезультатПоискаРезюме.total;
		Иначе
			ВсегоКандидатов = 0;
		КонецЕсли;
		
		ВсегоКандидатов = Мин(Число(ВсегоКандидатов), 500);
		
		ДозаполнитьТаблицуРезюмеSuperJob(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки, Соединение, МаркерДоступа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиКандидатовZarplata(СтруктураОтбора, ТаблицаНайденныхКандидатов, НомерСтраницы, Знач ПолеСортировки, ВсегоКандидатов)
	
	МаркерДоступа = МаркерДоступа(Zarplata());
	Если Не ЗначениеЗаполнено(МаркерДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтбора = СтрокаОтбораZarplata(СтруктураОтбора, НомерСтраницы);
	
	Соединение = HTTPСоединениеZarplata();
	Запрос = HTTPЗапросZarplata("/v3/resumes?" + СтрокаОтбора, МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение ТекстОшибкиПоискаРезюме(Zarplata(), Ответ.КодСостояния, ТекущаяСтрока)
	Иначе
		
		РезультатПоискаРезюме = ПарсерJSON(ТекущаяСтрока);
		
		Если РезультатПоискаРезюме.resumes = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВсегоКандидатов = ЗначениеСвойстваУзла(РезультатПоискаРезюме, "metadata", "resultset", "count", 0);
		
		ВсегоКандидатов = Мин(Число(ВсегоКандидатов), 500);
		
		ДозаполнитьТаблицуРезюмеZarplata(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьТаблицуРезюмеHeadHunter(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки)
	
	Для Каждого Резюме Из РезультатПоискаРезюме.Получить("items") Цикл
		
		Если Резюме = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
		ФИО = "" + ЗначениеСвойстваУзла(Резюме, "last_name") + " " + ЗначениеСвойстваУзла(Резюме, "first_name") + " " + ЗначениеСвойстваУзла(Резюме, "middle_name");
		НоваяСтрока.НазваниеРезюме = ЗначениеСвойстваУзла(Резюме, "title");
		НоваяСтрока.ФИО = ?(ЗначениеЗаполнено(ФИО), ФИО, "-");
		НоваяСтрока.Регион = ЗначениеСвойстваУзла(Резюме, "area", "name", , "-");
		НоваяСтрока.ГдеНайден = HeadHunter();
		НоваяСтрока.УровеньЗарплаты = "" + ЗначениеСвойстваУзла(Резюме, "salary", "amount") + " " + ЗначениеСвойстваУзла(Резюме, "salary", "currency");
		Если Не ЗначениеЗаполнено(НоваяСтрока.УровеньЗарплаты) Тогда
			НоваяСтрока.УровеньЗарплаты = "-";
		КонецЕсли;
		Возраст = ЗначениеСвойстваУзла(Резюме, "age");
		Если ЗначениеЗаполнено(Возраст) Тогда
			НоваяСтрока.Возраст = Число(Возраст);
		Иначе
			НоваяСтрока.Возраст = "-";
		КонецЕсли;
		НоваяСтрока.ИдентификаторРезюме = ЗначениеСвойстваУзла(Резюме, "id");
		Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "created_at")) Тогда 
			НоваяСтрока.ДатаРазмещения = ДатаПоСтроке(ЗначениеСвойстваУзла(Резюме, "created_at"));
		ИначеЕсли ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "updated_at")) Тогда
			НоваяСтрока.ДатаРазмещения = ДатаПоСтроке(ЗначениеСвойстваУзла(Резюме, "updated_at"));;
		КонецЕсли;
		НоваяСтрока.СсылкаНаРезюме = ЗначениеСвойстваУзла(Резюме, "alternate_url");
		МестаРаботы = ЗначениеСвойстваУзла(Резюме, "experience");
		Если ЗначениеЗаполнено(МестаРаботы) 
			И МестаРаботы.Количество() > 0 Тогда
			ПоследнееМестоРаботы = МестаРаботы[0];
			Если ПоследнееМестоРаботы = Неопределено 
				Или ПоследнееМестоРаботы = "null" Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока.ПоследнееМестоРаботы = "" + ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "company") + ", " + ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "position") + " " + НСтр("ru = 'с'") + " " + Формат(Дата(СтрЗаменить(ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "start"), "-", "")), "ДЛФ=Д") + " " + НСтр("ru = 'по'") + " " + ?(ЗначениеЗаполнено(ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "end")), Формат(Дата(СтрЗаменить(ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "end"), "-", "")), "ДЛФ=Д"), НСтр("ru = 'настоящее время'"));
		КонецЕсли;
		
		Пол = "-";
		Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "gender")) Тогда
			Пол = "-";
		ИначеЕсли ЗначениеСвойстваУзла(Резюме, "gender", "id") = "male" Тогда
			Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол();
		ИначеЕсли ЗначениеСвойстваУзла(Резюме, "gender", "id") = "female" Тогда
			Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол();
		КонецЕсли;
		
		НоваяСтрока.Пол = Пол; 
		НоваяСтрока.ПолеСортировки = ПолеСортировки;
		
		ПолеСортировки = ПолеСортировки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьТаблицуРезюмеRabota(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки)
	
	Для Каждого Резюме Из РезультатПоискаРезюме.data Цикл
		
		НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
		
		ФИО = СтрШаблон("%1 %2 %3", ЗначениеСвойстваУзла(Резюме, "surname"), ЗначениеСвойстваУзла(Резюме, "personName"), ЗначениеСвойстваУзла(Резюме, "secondName"));
		УровеньЗарплаты = ЗначениеСвойстваУзла(Резюме, "salaryFrom");
		Возраст = ЗначениеСвойстваУзла(Резюме, "age");
		
		НоваяСтрока.НазваниеРезюме = ЗначениеСвойстваУзла(Резюме, "name");
		НоваяСтрока.ФИО = ?(ЗначениеЗаполнено(ФИО), СокрЛП(ФИО), "-");
		НоваяСтрока.Регион = ЗначениеСвойстваУзла(Резюме, "region", "name");
		НоваяСтрока.ГдеНайден = Rabota();
		НоваяСтрока.УровеньЗарплаты = ?(ЗначениеЗаполнено(УровеньЗарплаты), СтрШаблон("%1 %2", УровеньЗарплаты, ЗначениеСвойстваУзла(Резюме, "currency", "name")), "-");
		НоваяСтрока.Возраст = ?(ЗначениеЗаполнено(Возраст), Возраст, "-");
		НоваяСтрока.ИдентификаторРезюме = Формат(ЗначениеСвойстваУзла(Резюме, "id"), "ЧГ=0");
		Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "publishDate")) Тогда
			НоваяСтрока.ДатаРазмещения = ПрочитатьДатуJSON(ЗначениеСвойстваУзла(Резюме, "publishDate"), ФорматДатыJSON.ISO);
		ИначеЕсли ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "modifiedDate")) Тогда
			НоваяСтрока.ДатаРазмещения = ПрочитатьДатуJSON(ЗначениеСвойстваУзла(Резюме, "modifiedDate"), ФорматДатыJSON.ISO);
		КонецЕсли;
		НоваяСтрока.СсылкаНаРезюме = ЗначениеСвойстваУзла(Резюме, "link");
		
		ПоследнееМестоРаботы = ЗначениеСвойстваУзла(Резюме, "lastExperience");
		Если ЗначениеЗаполнено(ПоследнееМестоРаботы) Тогда 
			
			Организация =  ПодставитьСпецСимволы(ПоследнееМестоРаботы.organizationName);
			Должность = ПоследнееМестоРаботы.positionName;
			ДатаНачала = Формат(ПрочитатьДатуJSON(ПоследнееМестоРаботы.dateStart, ФорматДатыJSON.ISO), "ДЛФ=Д");
			ДатаОкончания = ?(ПоследнееМестоРаботы.dateEnd = "по наст. время", НСтр("ru = 'по настоящее время'"), Формат(ПрочитатьДатуJSON(ПоследнееМестоРаботы.dateEnd, ФорматДатыJSON.ISO), "ДЛФ=Д"));
			
			НоваяСтрока.ПоследнееМестоРаботы = СтрШаблон("%1, %2 с %3 %4", Организация, Должность, ДатаНачала, ДатаОкончания);
			
		КонецЕсли;
		
		НоваяСтрока.Пол = ?(Резюме.isMale,  ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол(), ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол());
		НоваяСтрока.ПолеСортировки = ПолеСортировки;
		
		ПолеСортировки = ПолеСортировки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьТаблицуРезюмеSuperJob(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки, Соединение, МаркерДоступа)
	
	ИнформацияОПользователе = ИнформацияОПользователе(SuperJob(), МаркерДоступа);
	
	Для Каждого Резюме Из РезультатПоискаРезюме.objects Цикл
		
		Если Резюме = Неопределено 
			Или ТипЗнч(Резюме) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
		НоваяСтрока.ИдентификаторРезюме = Формат(ЗначениеСвойстваУзла(Резюме, "id"), "ЧГ=0");
		
		Если Не ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "firstname")) 
			И ИнформацияОПользователе.БезлимитныйТариф Тогда
			
			ОткрытоеРезюме = ОткрытоеРезюмеSuperJob(НоваяСтрока.ИдентификаторРезюме, Соединение, МаркерДоступа);
			Резюме = ?(ОткрытоеРезюме <> Неопределено, ОткрытоеРезюме, Резюме);
			
		КонецЕсли;
		
		ФИО = "" + ЗначениеСвойстваУзла(Резюме, "lastname") + " " + ЗначениеСвойстваУзла(Резюме, "firstname") + " " + ЗначениеСвойстваУзла(Резюме, "middlename");
		
		НоваяСтрока.ФИО = ?(ЗначениеЗаполнено(ФИО), СокрЛП(ФИО), "-");
		НоваяСтрока.НазваниеРезюме = ЗначениеСвойстваУзла(Резюме, "profession");
		НоваяСтрока.Регион = ЗначениеСвойстваУзла(Резюме, "town", "title", , "-");
		НоваяСтрока.ГдеНайден = SuperJob();
		НоваяСтрока.УровеньЗарплаты = "" + ЗначениеСвойстваУзла(Резюме, "payment") + " " + ЗначениеСвойстваУзла(Резюме, "currency");
		Если Не ЗначениеЗаполнено(НоваяСтрока.УровеньЗарплаты) Тогда
			НоваяСтрока.УровеньЗарплаты = "-";
		КонецЕсли;
		Возраст = ЗначениеСвойстваУзла(Резюме, "age");
		Если ЗначениеЗаполнено(Возраст) Тогда
			НоваяСтрока.Возраст = Число(Возраст);
		Иначе
			НоваяСтрока.Возраст = "-";
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "date_published")) Тогда
			НоваяСтрока.ДатаРазмещения = Дата(1970, 1, 1) + ЗначениеСвойстваУзла(Резюме, "date_published");
		ИначеЕсли ЗначениеЗаполнено(ЗначениеСвойстваУзла(Резюме, "date_last_modified")) Тогда
			НоваяСтрока.ДатаРазмещения = Дата(1970, 1, 1) + ЗначениеСвойстваУзла(Резюме, "date_last_modified");
		КонецЕсли;
		НоваяСтрока.СсылкаНаРезюме = СтрЗаменить(ЗначениеСвойстваУзла(Резюме, "link"), "\", "");
		МестаРаботы = ЗначениеСвойстваУзла(Резюме, "work_history");
		Если ЗначениеЗаполнено(МестаРаботы) 
			И МестаРаботы.Количество() > 0 Тогда
			ПоследнееМестоРаботы = МестаРаботы[0];
			
			Если ПоследнееМестоРаботы = Неопределено 
				Или ПоследнееМестоРаботы = "null" Тогда
				Продолжить;
			КонецЕсли;
			
			ГодНачала = ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "yearbeg");
			МесяцНачала = ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "monthbeg");
			ДатаНачала = "" + ?(ЗначениеЗаполнено(ГодНачала), Формат(ГодНачала, "ЧГ=0"), "0001") + ?(ЗначениеЗаполнено(МесяцНачала), ?(Число(МесяцНачала) < 10, "0" + МесяцНачала, МесяцНачала), "01") + "01";
			
			ГодОкончания = ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "yearend");
			МесяцОкончания = ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "monthend");
			ДатаОкончания = "" + ?(ЗначениеЗаполнено(ГодОкончания), Формат(ГодОкончания, "ЧГ=0"), "0001") + ?(ЗначениеЗаполнено(МесяцОкончания), ?(Число(МесяцОкончания) < 10, "0" + МесяцОкончания, МесяцОкончания), "01") + "01";
			
			Если ЗначениеЗаполнено(ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "name"))
				И ЗначениеЗаполнено(ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "profession")) Тогда
				НоваяСтрока.ПоследнееМестоРаботы = ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "name") + ", " + ЗначениеСвойстваУзла(ПоследнееМестоРаботы, "profession") + " " + НСтр("ru = 'с'") + " " + Формат(Дата(ДатаНачала), "ДЛФ=Д") + " " + НСтр("ru = 'по'") + " " + ?(ЗначениеЗаполнено(Дата(ДатаОкончания)), Формат(Дата(ДатаОкончания), "ДЛФ=Д"), НСтр("ru = 'настоящее время'"));
			КонецЕсли;
		КонецЕсли;
		
		Пол = "-";
		Если Строка(ЗначениеСвойстваУзла(Резюме, "gender", "id")) = "2" Тогда
			Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол();
		ИначеЕсли Строка(ЗначениеСвойстваУзла(Резюме, "gender", "id")) = "3" Тогда
			Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол();
		КонецЕсли;
		
		НоваяСтрока.Пол = Пол;
		НоваяСтрока.ПолеСортировки = ПолеСортировки;
		
		ПолеСортировки = ПолеСортировки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьТаблицуРезюмеZarplata(ТаблицаНайденныхКандидатов, РезультатПоискаРезюме, ПолеСортировки)
	
	Для Каждого Резюме Из РезультатПоискаРезюме.resumes Цикл
		
		НоваяСтрока = ТаблицаНайденныхКандидатов.Добавить();
		НоваяСтрока.НазваниеРезюме = Резюме.position;
		НоваяСтрока.ФИО = ЗначениеСвойстваУзла(Резюме, "profile", "name", "full_name");
		ГородКандидата = ЗначениеСвойстваУзла(Резюме, "profile", "personal", "city");
		Если ЗначениеЗаполнено(ГородКандидата) Тогда
			НоваяСтрока.Регион = ГородКандидата.title;
		КонецЕсли;
		НоваяСтрока.ГдеНайден = Zarplata();
		НоваяСтрока.УровеньЗарплаты = ЗначениеСвойстваУзла(Резюме, "salary",,, 0);
		
		ДатаРождения = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(Резюме, "profile", "personal", "birthday"), Ложь);
		Если ЗначениеЗаполнено(ДатаРождения) Тогда
			НоваяСтрока.Возраст = ФизическиеЛицаЗарплатаКадрыКлиентСервер.Возраст(ДатаРождения, ТекущаяДатаСеанса());
		КонецЕсли;
		
		НоваяСтрока.ИдентификаторРезюме = Формат(ЗначениеСвойстваУзла(Резюме, "id"), "ЧГ=");
		Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРезюме) Тогда
			НоваяСтрока.СсылкаНаРезюме = "https://hr.zarplata.ru/resumes/" + НоваяСтрока.ИдентификаторРезюме;
		КонецЕсли;
		
		ДатаОбновления = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(Резюме, "updated_at"), Ложь);
		ДатаСоздания = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(Резюме, "created_at"), Ложь);
		
		Если ЗначениеЗаполнено(ДатаОбновления) Тогда
			НоваяСтрока.ДатаРазмещения = ДатаОбновления;
		ИначеЕсли ЗначениеЗаполнено(ДатаСоздания) Тогда
			НоваяСтрока.ДатаРазмещения = ДатаСоздания;
		КонецЕсли;
		
		Пол = ЗначениеСвойстваУзла(Резюме, "profile", "personal", "gender");
		Если Пол = "male" Тогда
			НоваяСтрока.Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.МужскойПол();
		ИначеЕсли Пол = "female" Тогда
			НоваяСтрока.Пол = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ЖенскийПол();
		Иначе
			НоваяСтрока.Пол = "-";
		КонецЕсли;
		
		НоваяСтрока.ПоследнееМестоРаботы = ПоследнееМестоРаботыСтрокойZarplata(Резюме);
		
		НоваяСтрока.ПолеСортировки = ПолеСортировки;
		ПолеСортировки = ПолеСортировки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоследнееМестоРаботыСтрокойZarplata(Резюме)
	
	Результат = "";
	МестаРаботы = ЗначениеСвойстваУзла(Резюме, "jobs");
	Если Не ЗначениеЗаполнено(МестаРаботы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПоследнееМесто = МестаРаботы[0];
	
	ШаблонРезультата = НСтр("ru = '%1, %2 с %3 по %4'");
	ДатаНачала = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(ПоследнееМесто, "date", "from"), Ложь);
	ДатаОкончания = ДатаПоСтрокеZarplata(ЗначениеСвойстваУзла(ПоследнееМесто, "date", "to"), Ложь);
	
	Результат = СтрШаблон(ШаблонРезультата,
		ЗначениеСвойстваУзла(ПоследнееМесто, "company", "title"),
		ЗначениеСвойстваУзла(ПоследнееМесто, "position"),
		?(ЗначениеЗаполнено(ДатаНачала), Формат(ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'")), ""),
		?(ЗначениеЗаполнено(ДатаОкончания), Формат(ДатаОкончания, НСтр("ru = 'ДФ=dd.MM.yyyy'")), НСтр("ru = 'настоящее время'")));
	
	Возврат Результат;
	
КонецФункции

Функция ДатаПоСтроке(ДатаСтрока)
	Возврат Дата(СтрЗаменить(Лев(ДатаСтрока, 10), "-", ""));
КонецФункции

Функция СтруктураДанных(id = Неопределено, name = Неопределено);
	Возврат Новый Структура("id, name", id, name);
КонецФункции

Функция СтруктураДанныхSuperJob()
	Возврат Новый Структура("id, title");
КонецФункции

Функция СтруктураТрудоваяДеятельность()
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СтруктураТрудоваяДеятельность();
	
КонецФункции

Функция СтруктураЗнаниеЯзыков()
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.СтруктураЗнаниеЯзыков();
	
КонецФункции

Функция HTTPСоединениеHeadHunter() Экспорт
	
	Возврат НовоеHTTPСоединение(АдресЗапросаHeadHunter(), Истина);
	
КонецФункции

Функция HTTPСоединениеRabota() Экспорт
	
	Возврат НовоеHTTPСоединение(АдресЗапросаRabota(), Истина);
	
КонецФункции

Функция HTTPСоединениеSuperJob() Экспорт
	
	Возврат НовоеHTTPСоединение(АдресЗапросаSuperJob(), Истина);
	
КонецФункции

Функция HTTPСоединениеZarplata() Экспорт
	
	Возврат НовоеHTTPСоединение(АдресЗапросаZarplata(), Истина);
	
КонецФункции

Функция НовоеHTTPСоединение(Адрес, Защищенное = Ложь)
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http://" + Адрес);
	ТаймаутСоединения = 10;
	
	Если Защищенное Тогда
		
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
		Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, ТаймаутСоединения, ЗащищенноеСоединение);
		
	Иначе
		Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, ТаймаутСоединения);
	КонецЕсли;
	
	Возврат Соединение;
	
КонецФункции

Функция HTTPЗапросHeadHunter(ТекстЗапроса, МаркерДоступа = "") Экспорт
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
	
	Если ЗначениеЗаполнено(МаркерДоступа) Тогда
		ЗаголовокHTTP.Вставить("Authorization", "Bearer " + МаркерДоступа);
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса, ЗаголовокHTTP);
	
	Возврат Запрос;
	
КонецФункции

Функция ОбъектJSONСправочникаHeadHunter(Соединение, ТекстЗапроса, МаркерДоступа, ШаблонОшибки)
	
	Результат = Неопределено;
	Запрос = HTTPЗапросHeadHunter(ТекстЗапроса, МаркерДоступа);
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(HeadHunter(), Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке(), Ложь);
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибке(ШаблонОшибки, HeadHunter(), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПарсерJSON(Ответ.ПолучитьТелоКакСтроку());
	Возврат Результат;
	
КонецФункции

Функция СправочникHeadHunter(Соединение, ТекстЗапроса, МаркерДоступа, ШаблонОшибки)
	
	ШаблонСтрокиПараметров = "page=%1&per_page=20";
	Если СтрНайти(ТекстЗапроса, "?") > 0 Тогда
		ШаблонСтрокиПараметров = "&" + ШаблонСтрокиПараметров;
	Иначе
		ШаблонСтрокиПараметров = "?" + ШаблонСтрокиПараметров;
	КонецЕсли;
	
	Результат = Неопределено;
	ОбъектJSON = ОбъектJSONСправочникаHeadHunter(Соединение, ТекстЗапроса + СтрШаблон(ШаблонСтрокиПараметров, 0), МаркерДоступа, ШаблонОшибки);
	Если ОбъектJSON = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = ОбъектJSON.items;
	
	Если ОбъектJSON.Свойство("pages") Тогда
		КоличествоСтраниц = ОбъектJSON.pages - 1;
		Для НомерСтраницы = 1 По КоличествоСтраниц Цикл
			ОбъектJSON = ОбъектJSONСправочникаHeadHunter(Соединение, ТекстЗапроса + СтрШаблон(ШаблонСтрокиПараметров, НомерСтраницы), МаркерДоступа, ШаблонОшибки);
			Если ОбъектJSON = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ОбъектJSON.items);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция HTTPЗапросRabota(ТекстЗапроса, МаркерДоступа = "") Экспорт
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	Если ЗначениеЗаполнено(МаркерДоступа) Тогда
		ЗаголовокHTTP.Вставить("X-Authorization", МаркерДоступа);
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(СтрШаблон("/v2/%1", ТекстЗапроса), ЗаголовокHTTP);
	
	Возврат Запрос;
	
КонецФункции

Функция HTTPЗапросSuperJob(ТекстЗапроса, МаркерДоступа = "") Экспорт
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("X-Api-App-Id", ПарольПрограммыSuperJob());
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	Если ЗначениеЗаполнено(МаркерДоступа) Тогда
		ЗаголовокHTTP.Вставить("Authorization", "Bearer " + МаркерДоступа);
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса, ЗаголовокHTTP);
	
	Возврат Запрос;
	
КонецФункции

Функция HTTPЗапросZarplata(ТекстЗапроса, МаркерДоступа = "") Экспорт
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
	
	Если ЗначениеЗаполнено(МаркерДоступа) Тогда
		ЗаголовокHTTP.Вставить("Authorization", "token " + МаркерДоступа);
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса, ЗаголовокHTTP);
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьЗапросКРекрутинговомуСайту(Сайт, Соединение, Запрос)
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(Соединение.Сервер);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Результат диагностики:
			           |%2'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			РезультатДиагностики.ОписаниеОшибки);
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение ТекстОшибкиПоОписанию(Сайт, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Процедура ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке, ПоказыватьСообщения = Истина)
	
	ИмяСобытия = НСтр("ru = 'Обращение к рекрутинговому сайту'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Если Не ПоказыватьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при обращении к рекрутинговому сайту. Обратитесь к администратору.
			       |Техническая информация:
			       |%1'"), 
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция АдресЗапросаHeadHunter()
	Возврат "api.hh.ru";
КонецФункции

Функция АдресЗапросаRabota()
	Возврат "api-rest.rabota.ru"; // Тестовый: "apisandbox.rabota.ru"
КонецФункции

Функция АдресЗапросаSuperJob()
	Возврат "api.superjob.ru";
КонецФункции

Функция АдресЗапросаZarplata()
	Возврат "api.zp.ru";
КонецФункции

Функция АдресаРекрутинговыхСайтов()
	
	АдресаСайтов = Новый Соответствие;
	АдресаСайтов.Вставить(HeadHunter(), АдресЗапросаHeadHunter());
	АдресаСайтов.Вставить(Rabota(), АдресЗапросаRabota());
	АдресаСайтов.Вставить(SuperJob(), АдресЗапросаSuperJob());
	
	Возврат АдресаСайтов;
	
КонецФункции

Функция ID_ПрограммыSuperJob()
	Возврат "281";	
КонецФункции

Функция ПарольПрограммыSuperJob()
	Возврат "v1.h002a1c6e8b6cd8456fa1db3922371bc1025a152965d380b4a97304e42cf37eba4ad90f7b.f3523790948436b2d9d94e9d09955cf01468db5e";
КонецФункции

Функция ДатаПоСтрокеHeadHunter(СтрокаJSON)
	
	Возврат Дата(СтрЗаменить(Лев(СтрокаJSON, 10), "-", "") + СтрЗаменить(Сред(СтрокаJSON, 12, 8), ":", ""));
	
КонецФункции

Функция ДатаПоСтрокеSuperJob(СтрокаJSON)
	
	Возврат Дата(1970, 1, 1) + Число(СтрокаJSON);
	
КонецФункции

Функция ЗначениеСвойстваОбъекта(Свойство)
	
	Если ТипЗнч(Свойство.ПубликацияВакансии) = Тип("СписокЗначений") Тогда
		
		МассивЭлементов = Новый Массив;
		Для Каждого ЭлементСписка Из Свойство.ПубликацияВакансии Цикл
			Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
				МассивЭлементов.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ЗначениеСвойства = МассивЭлементов;
		
	Иначе
		ЗначениеСвойства = Свойство.ПубликацияВакансии;
	КонецЕсли;
	
	Возврат ЗначениеСвойства;
	
КонецФункции

#Область КомментарииКандидатов

Процедура ЗагрузитьКомментарииКандидата(Кандидат) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиИнтеграцииРекрутинговыхСайтов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Кандидат", Кандидат);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПубликации.МестоПубликации,
		|	НастройкиИнтеграции.ИдентификаторПользователя,
		|	ДанныеПубликации.ПолеДанных КАК ИмяПоля,
		|	ДанныеПубликации.Значение КАК СодержимоеПоля
		|ИЗ
		|	РегистрСведений.ДанныеПубликацииРезюме КАК ДанныеПубликации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИнтеграцииРекрутинговыхСайтов КАК НастройкиИнтеграции
		|		ПО ДанныеПубликации.МестоПубликации = НастройкиИнтеграции.РекрутинговыйСайт
		|			И (ДанныеПубликации.Кандидат = &Кандидат)
		|			И (НастройкиИнтеграции.Пользователь = &Пользователь)
		|			И (НастройкиИнтеграции.Использовать = ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРезюме = РезультатЗапроса.Выгрузить();
	ЗагрузитьКомментарииКандидатаHeadHunter(Кандидат, ДанныеРезюме);
	ЗагрузитьКомментарииКандидатаRabota(Кандидат, ДанныеРезюме);
	ЗагрузитьКомментарииКандидатаSuperJob(Кандидат, ДанныеРезюме);
	
КонецПроцедуры

Процедура ЗагрузитьКомментарииКандидатаHeadHunter(Кандидат, ДанныеРезюме)
	
	МестоПубликации = HeadHunter();
	
	ОтборСтрок = Новый Структура(
		"МестоПубликации, 
		|ИмяПоля");
	ОтборСтрок.МестоПубликации = МестоПубликации;
	ОтборСтрок.ИмяПоля = "owner";
	
	НайденныеСтроки = ДанныеРезюме.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МаркерДоступаАктивен(МестоПубликации, "") Тогда
		Возврат;
	КонецЕсли;
	
	СодержимоеПоляOwner = НайденныеСтроки[0].СодержимоеПоля;
	ИдентификаторКомпании = НайденныеСтроки[0].ИдентификаторПользователя;
	
	ПакетOwner = ПарсерJSON(СодержимоеПоляOwner);
	АдресКомментариев = ПакетOwner["comments"]["url"];
	
	Комментарии = КомментарииКандидатаHeadHunter(АдресКомментариев, ИдентификаторКомпании);
	
	ЗаписатьТаблицуКомментариевКандидата(Комментарии, Кандидат, МестоПубликации);
	
КонецПроцедуры

Процедура ЗагрузитьКомментарииКандидатаRabota(Кандидат, ДанныеРезюме)
	
	МестоПубликации = Rabota();
	
	ОтборСтрок = Новый Структура(
		"МестоПубликации, 
		|ИмяПоля");
	ОтборСтрок.МестоПубликации = МестоПубликации;
	ОтборСтрок.ИмяПоля = "id";
	
	НайденныеСтроки = ДанныеРезюме.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МаркерДоступаАктивен(МестоПубликации, "") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРезюме = НайденныеСтроки[0].СодержимоеПоля;
	
	Комментарии = КомментарииКандидатаRabota(ИдентификаторРезюме, Кандидат);
	
	ЗаписатьТаблицуКомментариевКандидата(Комментарии, Кандидат, МестоПубликации);
	
КонецПроцедуры

Процедура ЗагрузитьКомментарииКандидатаSuperJob(Кандидат, ДанныеРезюме)
	
	МестоПубликации = SuperJob();
	
	ОтборСтрок = Новый Структура(
		"МестоПубликации, 
		|ИмяПоля");
	ОтборСтрок.МестоПубликации = МестоПубликации;
	ОтборСтрок.ИмяПоля = "id";
	
	НайденныеСтроки = ДанныеРезюме.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МаркерДоступаАктивен(МестоПубликации, "") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРезюме = НайденныеСтроки[0].СодержимоеПоля;
	
	Комментарии = КомментарииКандидатаSuperJob(ИдентификаторРезюме, Кандидат);
	
	ЗаписатьТаблицуКомментариевКандидата(Комментарии, Кандидат, МестоПубликации);
	
КонецПроцедуры

Процедура ЗаписатьТаблицуКомментариевКандидата(Комментарии, Кандидат, МестоПубликации)
	
	НаборЗаписей = РегистрыСведений.КомментарииКандидатов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Кандидат.Установить(Кандидат);
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Удалим комментарии с идентификаторами, которых более нет на сайте.
	УдаляемыеСтроки = Новый Массив;
	ОтборСтрок = Новый Структура("Идентификатор");
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		Если СтрокаНабора.МестоПубликации <> МестоПубликации Тогда
			Продолжить;
		КонецЕсли;
		ОтборСтрок.Идентификатор = СтрокаНабора.Идентификатор;
		НайденныеСтроки = Комментарии.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаНабора);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		НаборЗаписей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	// Добавляем новые комментарии, изменяем существующие.
	ОтборСтрок = Новый Структура("МестоПубликации");
	ОтборСтрок.МестоПубликации = МестоПубликации;
	Для Каждого Строка Из Комментарии Цикл
		Если Не ЗначениеЗаполнено(Строка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНабора = СтрокаКомментарияИзНабораПоИдентификатору(НаборЗаписей, Строка.Идентификатор, ОтборСтрок);
		Если СтрокаНабора = Неопределено Тогда
			СтрокаНабора = НаборЗаписей.Добавить();
			СтрокаНабора.Кандидат = Кандидат;
			СтрокаНабора.МестоПубликации = МестоПубликации;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Строка);
		СтрокаНабора.Доступность = Перечисления.ДоступностьКомментарияКандидата.Общедоступный;
		Если Строка.ТолькоДляАвтора Тогда
			СтрокаНабора.Доступность = Перечисления.ДоступностьКомментарияКандидата.ТолькоДляАвтора;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция КомментарииКандидатаHeadHunter(АдресКомментариев, ИдентификаторКомпании, Кандидат = Неопределено)
	
	ЧастиАдреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(АдресКомментариев);
	ИдентификаторРезюме = ЧастиАдреса[ЧастиАдреса.ВГраница()];
	
	Комментарии = ТаблицаКомментарииКандидатов();
	
	МестоПубликации = HeadHunter();
	
	АдресЗапроса = АдресЗапросаHeadHunter();
	МаркерДоступа = МаркерДоступа(МестоПубликации);
	ТекстЗапроса = "/applicant_comments/" + ИдентификаторРезюме;
	
	Соединение = HTTPСоединениеHeadHunter();
	Запрос = HTTPЗапросHeadHunter(ТекстЗапроса, МаркерДоступа);
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(МестоПубликации, Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке(), Ложь);
		Возврат Комментарии;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	КоллекцияКомментариев = ПарсерJSON(ТелоОтветаСтрокой);
	
	Для Каждого ОписаниеКомментария Из КоллекцияКомментариев["items"] Цикл
		НоваяСтрока = Комментарии.Добавить();
		НоваяСтрока.Период = ДатаПоСтрокеHeadHunter(ОписаниеКомментария["created_at"]);
		Если ОписаниеКомментария["access_type"]["id"] = "owner" Тогда
			НоваяСтрока.ТолькоДляАвтора = Истина;
		КонецЕсли;
		НоваяСтрока.Идентификатор = ОписаниеКомментария["id"];
		НоваяСтрока.Комментарий = ОписаниеКомментария["text"];
		НоваяСтрока.Автор = ОписаниеКомментария["author"]["full_name"];
		НоваяСтрока.ПринадлежитАвторизованномуПользователю = ОписаниеКомментария["is_mine"];
		НоваяСтрока.МестоПубликации = МестоПубликации;
	КонецЦикла;
	
	Если Не ЕстьИзмененияКомментариев(Кандидат, МестоПубликации, Комментарии) Тогда
		Возврат Комментарии;
	КонецЕсли;
	
	ПодобратьПользователейПоАвторамКомментариевHeadHunter(Комментарии, Соединение, МаркерДоступа, ИдентификаторКомпании);
	
	Возврат Комментарии;
	
КонецФункции

Функция МассивКомментариевКандидатаHeadHunter(АдресКомментариев, ИдентификаторКомпании, Кандидат = Неопределено)
	
	КомментарииТаблица = КомментарииКандидатаHeadHunter(АдресКомментариев, ИдентификаторКомпании, Кандидат);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(КомментарииТаблица);
	
КонецФункции

Функция КомментарииКандидатаRabota(ИдентификаторРезюме, Кандидат = Неопределено)
	
	Комментарии = ТаблицаКомментарииКандидатов();
	МестоПубликации = Rabota();
	МаркерДоступа = МаркерДоступа(МестоПубликации);
	
	Соединение = HTTPСоединениеRabota();
	Запрос = HTTPЗапросRabota(СтрШаблон("search-resumes/%1/comments", ИдентификаторРезюме), МаркерДоступа);
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(МестоПубликации, Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке(), Ложь);
		Возврат Комментарии;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	КоллекцияКомментариев = ПарсерJSON(ТелоОтветаСтрокой);
	ПочтаАвторов = Новый Соответствие;
	
	Для Каждого ОписаниеКомментария Из КоллекцияКомментариев Цикл
		
		ОписаниеАвтора = ОписаниеКомментария.person;
		
		НоваяСтрока = Комментарии.Добавить();
		НоваяСтрока.Период = ПрочитатьДатуJSON(ОписаниеКомментария.created, ФорматДатыJSON.ISO);
		НоваяСтрока.Идентификатор = Формат(ОписаниеКомментария.id, "ЧГ=");
		
		НоваяСтрока.Комментарий = ОписаниеКомментария.text;
		НоваяСтрока.Автор = СокрП(СтрШаблон("%1 %2 %3", ОписаниеАвтора.surname, ОписаниеАвтора.name, ОписаниеАвтора.secondName));
		НоваяСтрока.ТолькоДляАвтора = ОписаниеКомментария.forMe;
		
		Если ПочтаАвторов.Получить(НоваяСтрока.Автор) = Неопределено Тогда
			ПочтаАвторов.Вставить(НоваяСтрока.Автор, ОписаниеАвтора.email[0]);
		КонецЕсли;
		
		НоваяСтрока.МестоПубликации = МестоПубликации;
		
	КонецЦикла;
	
	Если Не ЕстьИзмененияКомментариев(Кандидат, МестоПубликации, Комментарии) Тогда
		Возврат Комментарии;
	КонецЕсли;
	
	ПодобратьПользователейПоАвторамКомментариевRabota(Комментарии, ПочтаАвторов);
	
	Возврат Комментарии;
	
КонецФункции

Функция МассивКомментариевКандидатаRabota(ИдентификаторРезюме, Кандидат = Неопределено)
	
	КомментарииТаблица = КомментарииКандидатаRabota(ИдентификаторРезюме, Кандидат);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(КомментарииТаблица);
	
КонецФункции

Функция КомментарииКандидатаSuperJob(ИдентификаторРезюме, Кандидат = Неопределено)
	
	Комментарии = ТаблицаКомментарииКандидатов();
	
	МестоПубликации = SuperJob();
	
	АдресЗапроса = АдресЗапросаSuperJob();
	МаркерДоступа = МаркерДоступа(МестоПубликации);
	ТекстЗапроса = "/2.0/hr/resumes/" + ИдентификаторРезюме + "/comments/";
	
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob(ТекстЗапроса, МаркерДоступа);
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(МестоПубликации, Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке(), Ложь);
		Возврат Комментарии;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	КоллекцияКомментариев = ПарсерJSON(ТелоОтветаСтрокой);
	
	Если КоллекцияКомментариев["objects"] = Неопределено Тогда
		Возврат Комментарии;
	КонецЕсли;
	
	Для Каждого ОписаниеКомментария Из КоллекцияКомментариев["objects"] Цикл
		НоваяСтрока = Комментарии.Добавить();
		НоваяСтрока.Период = МестноеВремя(ДатаПоСтрокеSuperJob(ОписаниеКомментария["date"]), ЧасовойПояс());
		НоваяСтрока.Идентификатор = Формат(ОписаниеКомментария["id"], "ЧГ=");
		НоваяСтрока.Комментарий = ОписаниеКомментария["text"];
		НоваяСтрока.Автор = ОписаниеКомментария["author"];
		Если Не ЗначениеЗаполнено(ОписаниеКомментария["author"]) Тогда
			НоваяСтрока.ПринадлежитАвторизованномуПользователю = Истина;
		КонецЕсли;
		НоваяСтрока.МестоПубликации = МестоПубликации;
	КонецЦикла;
	
	Если Не ЕстьИзмененияКомментариев(Кандидат, МестоПубликации, Комментарии) Тогда
		Возврат Комментарии;
	КонецЕсли;
	
	ПодобратьПользователейПоАвторамКомментариевSuperJob(Комментарии, Соединение, МаркерДоступа);
	
	Возврат Комментарии;
	
КонецФункции

Функция МассивКомментариевКандидатаSuperJob(ИдентификаторРезюме, Кандидат = Неопределено)
	
	КомментарииТаблица = КомментарииКандидатаSuperJob(ИдентификаторРезюме, Кандидат);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(КомментарииТаблица);
	
КонецФункции

Функция КомментарииКандидатаZarplata(ИдентификаторРезюме, Кандидат)

	Комментарии = ТаблицаКомментарииКандидатов();
	МестоПубликации = Zarplata();
	МаркерДоступа = МаркерДоступа(МестоПубликации);
	ТекстЗапроса = "/v1/resumes/" + ИдентификаторРезюме + "/comments";
	
	Соединение = HTTPСоединениеZarplata();
	Запрос = HTTPЗапросZarplata(ТекстЗапроса, МаркерДоступа);
	
	Попытка
		КоллекцияКомментариев = Новый Массив;
		ПолучитьВсеСтраницыРесурсаZarplata(Соединение, ТекстЗапроса, "entity_comments", КоллекцияКомментариев,, МаркерДоступа);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке(), Ложь);
		Возврат Комментарии;
	КонецПопытки;
	
	Для Каждого ОписаниеКомментария Из КоллекцияКомментариев Цикл
		НоваяСтрока = Комментарии.Добавить();
		НоваяСтрока.Период = МестноеВремя(ДатаПоСтрокеZarplata(ОписаниеКомментария["add_date"]), ЧасовойПояс());
		НоваяСтрока.Идентификатор = ОписаниеКомментария["id"];
		НоваяСтрока.Комментарий = ОписаниеКомментария["comment"];
		НоваяСтрока.Автор = ОписаниеКомментария["user_id"];
		Если Не ЗначениеЗаполнено(НоваяСтрока.Автор) Тогда
			НоваяСтрока.ПринадлежитАвторизованномуПользователю = Истина;
		КонецЕсли;
		НоваяСтрока.МестоПубликации = МестоПубликации;
	КонецЦикла;
	
	Если Не ЕстьИзмененияКомментариев(Кандидат, МестоПубликации, Комментарии) Тогда
		Возврат Комментарии;
	КонецЕсли;
	
	ПодобратьПользователейПоАвторамКомментариевZarplata(Комментарии, Соединение, МаркерДоступа);
	
	Возврат Комментарии;
	
КонецФункции

Функция ДатаПоСтрокеZarplata(Знач СтрокаJSON, ДатаВремя = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДатаВремя Тогда
		СтрокаJSON = Лев(СтрокаJSON,19);
		СтрокаJSON = СтрЗаменить(СтрокаJSON, "-", "");
		СтрокаJSON = СтрЗаменить(СтрокаJSON, "T", "");
		СтрокаJSON = СтрЗаменить(СтрокаJSON, ":", "");
		СтрокаJSON = СтрЗаменить(СтрокаJSON, " ", "");
	Иначе
		СтрокаJSON = Лев(СтрЗаменить(СтрокаJSON, "-", ""), 8);
	КонецЕсли;
	
	Возврат Дата(СтрокаJSON);
	
КонецФункции

Функция МассивКомментариевКандидатаZarplata(ИдентификаторРезюме, Кандидат = Неопределено)
	
	КомментарииТаблица = КомментарииКандидатаZarplata(ИдентификаторРезюме, Кандидат);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(КомментарииТаблица);
	
КонецФункции

Функция ЕстьИзмененияКомментариев(Кандидат, МестоПубликации, Комментарии)
	
	Если Комментарии.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Кандидат) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидат", Кандидат);
	Запрос.УстановитьПараметр("МестоПубликации", МестоПубликации);
	Запрос.УстановитьПараметр("Идентификаторы", Комментарии.ВыгрузитьКолонку("Идентификатор"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомментарииКандидатов.Период КАК Период,
	|	КомментарииКандидатов.Кандидат КАК Кандидат,
	|	КомментарииКандидатов.Пользователь КАК Пользователь,
	|	КомментарииКандидатов.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА КомментарииКандидатов.Доступность = ЗНАЧЕНИЕ(Перечисление.ДоступностьКомментарияКандидата.ТолькоДляАвтора)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоДляАвтора,
	|	КомментарииКандидатов.МестоПубликации КАК МестоПубликации,
	|	КомментарииКандидатов.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.КомментарииКандидатов КАК КомментарииКандидатов
	|ГДЕ
	|	КомментарииКандидатов.Кандидат = &Кандидат
	|	И КомментарииКандидатов.МестоПубликации = &МестоПубликации
	|	И КомментарииКандидатов.Идентификатор В(&Идентификаторы)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Есть новые комментарии.
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем содержимое.
	ОтборСтрок = Новый Структура("Идентификатор");
	ЗагруженныеКомментарии = РезультатЗапроса.Выгрузить();
	Для Каждого Строка Из Комментарии Цикл
		ОтборСтрок.Идентификатор = Строка.Идентификатор;
		НайденныеСтроки = ЗагруженныеКомментарии.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Есть отсутствующие комментарии.
			Возврат Истина;
		КонецЕсли;
		// Есть различающиеся комментарии.
		НайденнаяСтрока = НайденныеСтроки[0];
		Если Строка.Комментарий <> НайденнаяСтрока.Комментарий Тогда
			Возврат Истина;
		КонецЕсли;
		Если Строка.ТолькоДляАвтора <> НайденнаяСтрока.ТолькоДляАвтора Тогда
			Возврат Истина;
		КонецЕсли;
		Если Строка.Период <> НайденнаяСтрока.Период Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПодобратьПользователейПоАвторамКомментариевHeadHunter(Комментарии, Соединение, МаркерДоступа, ИдентификаторКомпании)
	
	ОтборСтрок = Новый Структура("ПринадлежитАвторизованномуПользователю");
	ОтборСтрок.ПринадлежитАвторизованномуПользователю = Ложь;
	
	НайденныеСтроки = Комментарии.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Все комментарии принадлежат текущему пользователю.
		Комментарии.ЗаполнитьЗначения(Пользователи.АвторизованныйПользователь(), "Пользователь");
		Возврат;
	КонецЕсли;
	
	АвторыКомментариев = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Автор", Истина);
	
	Шаблон = НСтр("ru = 'Ошибка загрузки менеджеров пользователя с сайта %1 (%2): %3'");
	МенеджерыПользователя = СправочникHeadHunter(Соединение, "/employers/" + ИдентификаторКомпании + "/managers", МаркерДоступа, Шаблон);
	
	АдресаАвторов = ТаблицаАдресаАвторов();
	Если ЗначениеЗаполнено(МенеджерыПользователя) Тогда
		Для Каждого ОписаниеМенеджера Из МенеджерыПользователя Цикл
			Если АвторыКомментариев.Найти(ОписаниеМенеджера["name"]) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = АдресаАвторов.Добавить();
			НоваяСтрока.ИмяАвтора = ОписаниеМенеджера["name"];
			НоваяСтрока.АдресПочты = ОписаниеМенеджера["email"];
		КонецЦикла;
	КонецЕсли;
	
	ПользователиПоАвторам = ПользователиПоАвторам(АдресаАвторов);
	
	Для Каждого Строка Из Комментарии Цикл
		Если Строка.ПринадлежитАвторизованномуПользователю = Истина Тогда
			Строка.Пользователь = Пользователи.АвторизованныйПользователь();
			Продолжить;
		КонецЕсли;
		Пользователь = ПользователиПоАвторам[Строка.Автор];
		Если Пользователь <> Неопределено Тогда
			Строка.Пользователь = Пользователь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьПользователейПоАвторамКомментариевRabota(Комментарии, ПочтаАвторов)
	
	ОтборСтрок = Новый Структура("ПринадлежитАвторизованномуПользователю");
	ОтборСтрок.ПринадлежитАвторизованномуПользователю = Ложь;
	
	НайденныеСтроки = Комментарии.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Все комментарии принадлежат текущему пользователю.
		Комментарии.ЗаполнитьЗначения(Пользователи.АвторизованныйПользователь(), "Пользователь");
		Возврат;
	КонецЕсли;
	
	АдресаАвторов = ТаблицаАдресаАвторов();
	Для Каждого АвторИПочта Из ПочтаАвторов Цикл
		НоваяСтрока = АдресаАвторов.Добавить();
		НоваяСтрока.ИмяАвтора = АвторИПочта.Ключ;
		НоваяСтрока.АдресПочты = АвторИПочта.Значение;
	КонецЦикла;
	
	ПользователиПоАвторам = ПользователиПоАвторам(АдресаАвторов);
	
	Для Каждого Строка Из Комментарии Цикл
		
		Если Строка.ПринадлежитАвторизованномуПользователю Тогда
			Строка.Пользователь = Пользователи.АвторизованныйПользователь();
			Продолжить;
		КонецЕсли;
		
		Пользователь = ПользователиПоАвторам[Строка.Автор];
		Если Пользователь <> Неопределено Тогда
			Строка.Пользователь = Пользователь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьПользователейПоАвторамКомментариевSuperJob(Комментарии, Соединение, МаркерДоступа)
	
	ОтборСтрок = Новый Структура("ПринадлежитАвторизованномуПользователю");
	ОтборСтрок.ПринадлежитАвторизованномуПользователю = Ложь;
	
	НайденныеСтроки = Комментарии.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Все комментарии принадлежат текущему пользователю.
		Комментарии.ЗаполнитьЗначения(Пользователи.АвторизованныйПользователь(), "Пользователь");
		Возврат;
	КонецЕсли;
	
	АвторыКомментариев = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Автор", Истина);
	
	Соединение = HTTPСоединениеSuperJob();
	Запрос = HTTPЗапросSuperJob("/2.0/user/list/", МаркерДоступа);
	Попытка
		Ответ = ВыполнитьЗапросКРекрутинговомуСайту(SuperJob(), Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке(), Ложь);
		Возврат;
	КонецПопытки;
	
	ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
	ОтветЗапроса = ПарсерJSON(ТелоОтветаСтрокой, Истина);
	
	АдресаАвторов = ТаблицаАдресаАвторов();
	Для Каждого КлючИЗначение Из ОтветЗапроса["objects"] Цикл
		ОписаниеМенеджера = КлючИЗначение.Значение;
		ИмяАвтора = ОписаниеМенеджера["firstname"] + " " + ОписаниеМенеджера["lastname"];
		Если АвторыКомментариев.Найти(ИмяАвтора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = АдресаАвторов.Добавить();
		НоваяСтрока.ИмяАвтора = ИмяАвтора;
		НоваяСтрока.АдресПочты = ОписаниеМенеджера["email"];
	КонецЦикла;
	
	ПользователиПоАвторам = ПользователиПоАвторам(АдресаАвторов);
	
	Для Каждого Строка Из Комментарии Цикл
		Если Строка.ПринадлежитАвторизованномуПользователю = Истина Тогда
			Строка.Пользователь = Пользователи.АвторизованныйПользователь();
			Продолжить;
		КонецЕсли;
		Пользователь = ПользователиПоАвторам[Строка.Автор];
		Если Пользователь <> Неопределено Тогда
			Строка.Пользователь = Пользователь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьПользователейПоАвторамКомментариевZarplata(Комментарии, Соединение, МаркерДоступа)
	
	ОтборСтрок = Новый Структура("ПринадлежитАвторизованномуПользователю");
	ОтборСтрок.ПринадлежитАвторизованномуПользователю = Ложь;
	
	НайденныеСтроки = Комментарии.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Все комментарии принадлежат текущему пользователю.
		Комментарии.ЗаполнитьЗначения(Пользователи.АвторизованныйПользователь(), "Пользователь");
		Возврат;
	КонецЕсли;
	
	АвторыКомментариев = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Автор", Истина);
	Соединение = HTTPСоединениеZarplata();
	
	АдресаАвторов = ТаблицаАдресаАвторов();
	
	Для Каждого ИдентификаторАвтора Из АвторыКомментариев Цикл
		Запрос = HTTPЗапросSuperJob("/v1/users/" + ИдентификаторАвтора, МаркерДоступа);
		Попытка
			Ответ = ВыполнитьЗапросКРекрутинговомуСайту(Zarplata(), Соединение, Запрос);
		Исключение
			ЗарегистрироватьОшибкуОбращенияКРекрутинговомуСайту(ИнформацияОбОшибке(), Ложь);
			Возврат;
		КонецПопытки;
		
		ТелоОтветаСтрокой = Ответ.ПолучитьТелоКакСтроку();
		ОтветЗапроса = ПарсерJSON(ТелоОтветаСтрокой, Истина);
		
		ОписаниеМенеджера = ОтветЗапроса["users"][0];
		
		НоваяСтрока = АдресаАвторов.Добавить();
		НоваяСтрока.ИмяАвтора = ОписаниеМенеджера["name"];
		НоваяСтрока.АдресПочты = ОписаниеМенеджера["email"];
	КонецЦикла;
	
	ПользователиПоАвторам = ПользователиПоАвторам(АдресаАвторов);
	
	Для Каждого Строка Из Комментарии Цикл
		Если Строка.ПринадлежитАвторизованномуПользователю = Истина Тогда
			Строка.Пользователь = Пользователи.АвторизованныйПользователь();
			Продолжить;
		КонецЕсли;
		Пользователь = ПользователиПоАвторам[Строка.Автор];
		Если Пользователь <> Неопределено Тогда
			Строка.Пользователь = Пользователь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПользователиПоАвторам(АдресаАвторов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АдресаАвторов", АдресаАвторов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресаАвторов.ИмяАвтора,
		|	АдресаАвторов.АдресПочты
		|ПОМЕСТИТЬ ВТАдресаАвторов
		|ИЗ
		|	&АдресаАвторов КАК АдресаАвторов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаАвторов.ИмяАвтора,
		|	АдресаАвторов.АдресПочты,
		|	Пользователи.Ссылка КАК Пользователь
		|ПОМЕСТИТЬ ВТПользователиПоАвторам
		|ИЗ
		|	ВТАдресаАвторов КАК АдресаАвторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактыФизическихЛиц
		|		ПО (КонтактыФизическихЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И АдресаАвторов.АдресПочты = КонтактыФизическихЛиц.Представление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.ФизическоеЛицо = КонтактыФизическихЛиц.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АдресаАвторов.ИмяАвтора,
		|	АдресаАвторов.АдресПочты,
		|	КонтактыПользователей.Ссылка
		|ИЗ
		|	ВТАдресаАвторов КАК АдресаАвторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
		|		ПО (КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И АдресаАвторов.АдресПочты = КонтактыПользователей.Представление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиПоАвторам.ИмяАвтора,
		|	ПользователиПоАвторам.АдресПочты,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользователиПоАвторам.Пользователь) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоПользователей
		|ИЗ
		|	ВТПользователиПоАвторам КАК ПользователиПоАвторам
		|
		|СГРУППИРОВАТЬ ПО
		|	ПользователиПоАвторам.ИмяАвтора,
		|	ПользователиПоАвторам.АдресПочты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиПоАвторам.ИмяАвтора,
		|	ПользователиПоАвторам.АдресПочты,
		|	ПользователиПоАвторам.Пользователь
		|ИЗ
		|	ВТПользователиПоАвторам КАК ПользователиПоАвторам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПользователей КАК КоличествоПользователей
		|		ПО (КоличествоПользователей.ИмяАвтора = ПользователиПоАвторам.ИмяАвтора)
		|			И (КоличествоПользователей.АдресПочты = ПользователиПоАвторам.АдресПочты)
		|			И (КоличествоПользователей.Количество = 1)";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПользователиПоАвторам = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПользователиПоАвторам.Вставить(Выборка.ИмяАвтора, Выборка.Пользователь);
	КонецЦикла;
	
	Возврат ПользователиПоАвторам;
	
КонецФункции

Функция ТаблицаАдресаАвторов()
	
	АдресаАвторов = Новый ТаблицаЗначений;
	АдресаАвторов.Колонки.Добавить("ИмяАвтора", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500)));
	АдресаАвторов.Колонки.Добавить("АдресПочты", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500)));
	
	Возврат АдресаАвторов;
	
КонецФункции

Функция ТаблицаКомментарииКандидатов()
	
	Комментарии = Новый ТаблицаЗначений;
	Комментарии.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Комментарии.Колонки.Добавить("ТолькоДляАвтора", Новый ОписаниеТипов("Булево"));
	Комментарии.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Комментарии.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	Комментарии.Колонки.Добавить("Автор", Новый ОписаниеТипов("Строка"));
	Комментарии.Колонки.Добавить("ПринадлежитАвторизованномуПользователю", Новый ОписаниеТипов("Булево"));
	Комментарии.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Комментарии.Колонки.Добавить("МестоПубликации", Новый ОписаниеТипов("СправочникСсылка.ИсточникиИнформацииОКандидатах"));
	
	Возврат Комментарии;
	
КонецФункции

Функция СтрокаКомментарияИзНабораПоИдентификатору(НаборЗаписей, Идентификатор, Отбор = Неопределено)
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		Если СтрокаНабора.Идентификатор = Идентификатор Тогда
			Если Отбор = Неопределено Тогда
				Возврат СтрокаНабора;
			КонецЕсли;
			Для Каждого КлючИЗначение Из Отбор Цикл
				Если СтрокаНабора[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЦикла;
			Возврат СтрокаНабора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

Функция СправочникиWebAPI(ПсевдонимWebAPI)
	
	СправочникиWebAPI = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ПсевдонимWebAPI) Тогда
		
		ТабличныйДокумент = Обработки.ПубликацияВакансийНаРекрутинговыхСайтах.ПолучитьМакет("Классификаторы");
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ТабличныйДокумент.ПолучитьТекст());
		
		Чтение.Прочитать();
		Псевдоним = "";
		
		Пока Псевдоним <> ПсевдонимWebAPI Цикл
			
			Если ПустаяСтрока(Псевдоним) Тогда
				Чтение.Прочитать();
			Иначе
				Чтение.Пропустить();
			КонецЕсли;
			Псевдоним = Чтение.ПолучитьАтрибут("Alias");
			
		КонецЦикла;
		
		Пока Чтение.Прочитать() Цикл
			
			Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента 
				И Чтение.Имя = "Dictionaries" Тогда
				Прервать;
			КонецЕсли;
			
			Если Чтение.Имя = "Dictionary" Тогда
				
				Ключ = Чтение.ПолучитьАтрибут("ID");
				Представление = Чтение.ПолучитьАтрибут("Name");
				
				СправочникиWebAPI.Вставить(Ключ, Представление);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Чтение.Закрыть();
		
	КонецЕсли;
	
	Возврат СправочникиWebAPI;
	
КонецФункции

Функция УдалитьУточнениеВСкобках(Знач ОбрабатываемаяСтрока)
	
	НомерСимвола = СтрНайти(ОбрабатываемаяСтрока, "(");
	Если НомерСимвола <> 0 Тогда
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 0, НомерСимвола - 2);
	КонецЕсли;
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Функция ПредставлениеДанныхПоИдентификатору(МассивДанных, Идентификатор, ПолеИдентификатор = "id", ПолеПредставление = "name")
	
	Представление = Неопределено;
	
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		Если СтруктураДанных[ПолеИдентификатор] = Идентификатор Тогда
			Представление = СтруктураДанных[ПолеПредставление];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

Функция ИдентификаторыЗначенияКлассификаторов(КлассификаторыСайтов, СтруктураПутей, Значение)
	
	Идентификаторы = Новый Структура;
	
	Для Каждого КлючИЗначение Из КлассификаторыСайтов Цикл
		
		Если КлючИЗначение.Ключ = HeadHunter() Тогда
			Элемент = ЭлементКлассификатораHeadHunter(КлючИЗначение.Значение[СтруктураПутей.ПутьHeadHunter], Значение);
		ИначеЕсли КлючИЗначение.Ключ = Rabota() Тогда
			Элемент = ЭлементКлассификатораRabota(КлючИЗначение.Значение[СтруктураПутей.ПутьRabota], Значение);
		ИначеЕсли КлючИЗначение.Ключ = SuperJob() Тогда
			Элемент = ЭлементКлассификатораSuperJob(КлючИЗначение.Значение[СтруктураПутей.ПутьSuperJob], Значение);
		ИначеЕсли КлючИЗначение.Ключ = Zarplata() Тогда
			Элемент = ЭлементКлассификатораZarplata(СтруктураПутей.ПутьZarplata, Значение);
		КонецЕсли;
		
		Если Элемент = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = HeadHunter() Тогда
			Идентификаторы.Вставить("IDHeadHunter", Элемент.id);
		ИначеЕсли КлючИЗначение.Ключ = Rabota() Тогда
			Идентификаторы.Вставить("IDRabota", Элемент.id);
		ИначеЕсли КлючИЗначение.Ключ = SuperJob() Тогда
			Идентификаторы.Вставить("IDSuperJob", Элемент.Ключ);
		ИначеЕсли КлючИЗначение.Ключ = Zarplata() Тогда
			Если СтруктураПутей.ПутьZarplata = "sex" Тогда
				Идентификаторы.Вставить("IDZarplata", Элемент.alias);
			Иначе
				Идентификаторы.Вставить("IDZarplata", Элемент.id);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ИдентификаторыЗначенияИзДеревьевПоКлассификаторам(ДеревьяПоКлассификаторам, Значение, ЗначениеРодителя)
	
	Идентификаторы = Новый Структура;
	
	Для Каждого КлючИЗначение Из ДеревьяПоКлассификаторам Цикл
		
		Дерево = ДеревьяПоКлассификаторам.Получить(КлючИЗначение.Ключ);
		
		Если КлючИЗначение.Ключ = HeadHunter() Тогда
			СтрокаДерева = СтрокаДереваHeadHunter(Дерево.Строки, Значение, ЗначениеРодителя);
			ИмяКлючаИдентификатора = "IDHeadHunter";
		ИначеЕсли КлючИЗначение.Ключ = Rabota() Тогда
			СтрокаДерева = СтрокаДереваRabota(Дерево.Строки, Значение, ЗначениеРодителя);
			ИмяКлючаИдентификатора = "IDRabota";
		ИначеЕсли КлючИЗначение.Ключ = SuperJob() Тогда
			СтрокаДерева = СтрокаДереваSuperJob(Дерево.Строки, Значение, ЗначениеРодителя);
			ИмяКлючаИдентификатора = "IDSuperJob";
		ИначеЕсли КлючИЗначение.Ключ = Zarplata() Тогда
			СтрокаДерева = СтрокаДереваZarplata(Дерево.Строки, Значение, ЗначениеРодителя);
			ИмяКлючаИдентификатора = "IDZarplata";
		КонецЕсли;
		
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Идентификаторы.Вставить(ИмяКлючаИдентификатора, СтрокаДерева.Идентификатор);
		
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

Функция КлассификаторыСайтов(ИспользуемыеСайты)
	
	КлассификаторыСайтов = Новый Соответствие;
	
	Для Каждого Сайт Из ИспользуемыеСайты Цикл
		
		Если Сайт = HeadHunter() Тогда
			ИмяНабора = "КлассификаторыHeadHunter";
		ИначеЕсли Сайт = Rabota() Тогда
			ИмяНабора = "КлассификаторыRabota";
		ИначеЕсли Сайт = SuperJob() Тогда
			ИмяНабора = "КлассификаторыSuperJob";
		КонецЕсли;
		
		НаборКлассификаторовСайта = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(ИмяНабора);
		
		Если НаборКлассификаторовСайта = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			КлассификаторыСайтов.Вставить(Сайт, НаборКлассификаторовСайта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КлассификаторыСайтов;
	
КонецФункции

Функция ДеревьяРегионовПоКлассификаторамСайтов(ИспользуемыеСайты, ШаблонСтруктурыДерева)
	
	Деревья = Новый Соответствие;
	
	Для Каждого Сайт Из ИспользуемыеСайты Цикл
		
		ДеревоПоКлассификатору = ШаблонСтруктурыДерева.Скопировать();
		
		Если Сайт = HeadHunter() Тогда
			ЗаполнитьДеревоРегионовHeadHunter(ДеревоПоКлассификатору);
		ИначеЕсли Сайт = Rabota() Тогда
			ЗаполнитьДеревоРегионовRabota(ДеревоПоКлассификатору);
		ИначеЕсли Сайт = SuperJob() Тогда
			ЗаполнитьДеревоРегионовSuperJob(ДеревоПоКлассификатору);
		ИначеЕсли Сайт = Zarplata() Тогда
			ЗаполнитьДеревоРегионовZarplata(ДеревоПоКлассификатору);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДеревоПоКлассификатору) Тогда
			Деревья.Вставить(Сайт, ДеревоПоКлассификатору);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Деревья;
	
КонецФункции

Функция ПодставитьСпецСимволы(Знач Текст)
	
	Текст = СтрЗаменить(Текст, "&amp;", "&");
	Текст = СтрЗаменить(Текст, "&quot;", """");
	Текст = СтрЗаменить(Текст, "&#8470;", "№");
	Текст = СтрЗаменить(Текст, "&sbquo;", ",");
	Текст = СтрЗаменить(Текст, "&raquo;", "»");
	Текст = СтрЗаменить(Текст, "&laquo;", "«");
	Текст = СтрЗаменить(Текст, "&ndash;", Символ(45));
	Текст = СтрЗаменить(Текст, "&mdash;", Символ(150));
	Текст = СтрЗаменить(Текст, "&bull;", "•");
	Текст = СтрЗаменить(Текст, "&nbsp;", " ");
	
	Возврат Текст;
	
КонецФункции

Функция ЗагружаемыеРеквизитыВакансии(Сайт) Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ЗагружаемыеРеквизитыВакансии(Сайт);
	
КонецФункции

Функция УдалитьЛишнееИзСтроки(Знач ИсходнаяСтрока)
	
	СтрокаРезультата = СтрЗаменить(ИсходнаяСтрока, "\r", "");
	СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "\t", Символы.Таб);
	СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "\v", "");
	
	Возврат СтрокаРезультата;
	
КонецФункции

Функция ОткрытоеРезюмеRabota(ИдентификаторРезюме, Соединение, МаркерДоступа, ТекстОшибки = "")
	
	Резюме = Неопределено;
	
	Запрос = HTTPЗапросRabota(СтрШаблон("search-resumes/open-contacts/%1", ИдентификаторРезюме), МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки("{}");
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		РезультатЗапроса = ПарсерJSON(ТекущаяСтрока);
		
		Если РезультатЗапроса.code = 1 Тогда
			
			Запрос = HTTPЗапросRabota(СтрШаблон("search-resumes/%1", ИдентификаторРезюме), МаркерДоступа);
			Ответ = Соединение.Получить(Запрос);
					
			ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
			Резюме = ПарсерJSON(ТекущаяСтрока, Истина);
			
		Иначе
			
			Если РезультатЗапроса.code = 0 Тогда
				ОписаниеОшибки = НСтр("ru = 'соискатель скрыл свои контакты. С ним можно связаться через почту сайта.'");
			ИначеЕсли РезультатЗапроса.code = 4 Тогда
				ОписаниеОшибки = НСтр("ru = 'использованы все лимиты по открытию контактов.'");
			ИначеЕсли РезультатЗапроса.code = 5 Тогда
				ОписаниеОшибки = НСтр("ru = 'контактные данные не доступны.'");
			ИначеЕсли РезультатЗапроса.code = 11 Тогда
				ОписаниеОшибки = НСтр("ru = 'необходимо активировать доступ к контактам в регионе размещения резюме.'");
			Иначе
				ОписаниеОшибки = РезультатЗапроса.description;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибкиОткрытияКонтактов(ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Резюме;
	
КонецФункции

Функция ОткрытоеРезюмеSuperJob(ИдентификаторРезюме, Соединение, МаркерДоступа)
	
	Резюме = Неопределено;
	
	Запрос = HTTPЗапросSuperJob(СтрШаблон("/2.0/hr/resumes/%1/open/", ИдентификаторРезюме), МаркерДоступа);
	Ответ = Соединение.Получить(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		
		РезультатЗапроса = ПарсерJSON(ТекущаяСтрока);
		Если РезультатЗапроса.status Тогда
			Резюме = РезультатЗапроса.resume;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Резюме;
	
КонецФункции

Функция ЕстьДоступКРекрутинговымСайтам()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюРекрутинговыхСайтов") 
		И ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ПараметрыДоступаКРекрутинговымСайтам);
	
КонецФункции

Функция ПарсерJSON(ТекущаяСтрока, ПрочитатьВСоответствие = Ложь) Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ПарсерJSON(ТекущаяСтрока, ПрочитатьВСоответствие);
	
КонецФункции

Функция ЗаписьJSON(Данные) Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаписьJSON(Данные);
	
КонецФункции

Функция ТипЗначенияJSONСтрока()
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ТипЗначенияJSONСтрока();
	
КонецФункции

Функция ТипЗначенияJSONЧисло()
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ТипЗначенияJSONЧисло();
	
КонецФункции

Функция ТипЗначенияJSONНачалоМассива() Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ТипЗначенияJSONНачалоМассива();
	
КонецФункции

Функция ТипЗначенияJSONНачалоОбъекта() Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ТипЗначенияJSONНачалоОбъекта();
	
КонецФункции

Функция ТипЗначенияJSONБулево()
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ТипЗначенияJSONБулево();
	
КонецФункции

Процедура ЗаполнитьМассивКонтактнойИнформацииHeadHunter(СтруктураРезюме, МассивКонтактнаяИнформация)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивКонтактнойИнформацииHeadHunter(СтруктураРезюме, МассивКонтактнаяИнформация);
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииRabota(СтруктураРезюме, МассивКонтактнаяИнформация)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивКонтактнойИнформацииRabota(СтруктураРезюме, МассивКонтактнаяИнформация);
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииSuperJob(СтруктураРезюме, МассивКонтактнаяИнформация)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивКонтактнойИнформацииSuperJob(СтруктураРезюме, МассивКонтактнаяИнформация);
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииZarplata(СтруктураРезюме, МассивКонтактнаяИнформация)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивКонтактнойИнформацииZarplata(СтруктураРезюме, МассивКонтактнаяИнформация);
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеHeadHunter(СтруктураРезюме, МассивОбразование)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивОбразованиеHeadHunter(СтруктураРезюме, МассивОбразование);
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеRabota(СтруктураРезюме, МассивОбразование)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивОбразованиеRabota(СтруктураРезюме, МассивОбразование)
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеSuperJob(СтруктураРезюме, МассивОбразование)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивОбразованиеSuperJob(СтруктураРезюме, МассивОбразование);
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеZarplata(СтруктураРезюме, МассивОбразование)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.ЗаполнитьМассивОбразованиеZarplata(СтруктураРезюме, МассивОбразование);
	
КонецПроцедуры

Функция НайтиКандидатов(ПараметрыПроцедуры, УникальныйИдентификатор, АдресХранилища) Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.НайтиКандидатов(ПараметрыПроцедуры, УникальныйИдентификатор, АдресХранилища);
	
КонецФункции

Функция РеквизитВакансииСоответствующийПолюПубликации(Путь, Вакансия) Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.РеквизитВакансииСоответствующийПолюПубликации(Путь, Вакансия);
	
КонецФункции

Функция ОпубликованныеВакансииСИдентификаторами(Сайт) Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ОпубликованныеВакансииСИдентификаторами(Сайт);
	
КонецФункции

Функция ЗначениеРеквизитаПубликацииПоУмолчанию(Сайт, Вакансия, Реквизит) Экспорт
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ЗначениеРеквизитаПубликацииПоУмолчанию(Сайт, Вакансия, Реквизит);
	
КонецФункции

Функция НоваяСтепеньЗнанияЯзыка(Код)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.НоваяСтепеньЗнанияЯзыка(Код);
	
КонецФункции

Функция КонстантаИспользоватьИнтеграциюРекрутинговыхСайтов()
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.КонстантаИспользоватьИнтеграциюРекрутинговыхСайтов();
	
КонецФункции

Функция МесяцСтрокойВДату(Знач Значение)
	
	Результат = СтрЗаменить(Значение, "-", "");
	Результат = СтрЗаменить(Результат, " ", "");
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	
	Возврат ?(ЗначениеЗаполнено(Результат), Дата(Результат), Дата(1, 1, 1));
	
КонецФункции

#Область АдресаПубликации

Функция АдресВакансииHeadHunter(Идентификатор) Экспорт
	Возврат СтрШаблон("https://hh.ru/vacancy/%1", Идентификатор);
КонецФункции

Функция АдресВакансииRabota(Идентификатор) Экспорт
	Возврат СтрШаблон("https://www.rabota.ru/vacancy/%1/", Идентификатор);
КонецФункции

Функция АдресВакансииSuperJob(Идентификатор) Экспорт
	Возврат СтрШаблон("https://www.superjob.ru/vakansii/vacancy-%1.html", Идентификатор);
КонецФункции

Функция АдресВакансииZarplata(Идентификатор)
	Возврат СтрШаблон("https://hr.zarplata.ru/vacancies/%1", Идентификатор);
КонецФункции

#КонецОбласти

#Область ВидыПолей

Функция ВидыПолей(Сайт, ОбновлениеПубликации = Ложь) Экспорт
	
	ВидыПолей = НовыеВидыПолей();
	
	Если Сайт = HeadHunter() Тогда
		
		ВидыПолей.СМножественнымВыборомИзДерева = ПоляВакансииСМножественнымВыборомИзДереваHeadHunter();
		ВидыПолей.СОдиночнымВыборомИзДерева = ПоляВакансииСОдиночнымВыборомИзДереваHeadHunter();
		ВидыПолей.СОдиночнымВыборомИзСписка = ПоляВакансииСОдиночнымВыборомИзСпискаHeadHunter();
		ВидыПолей.НедоступныеДляРедактирования = ПоляВакансииНедоступныеДляРедактированияHeadHunter();
		ВидыПолей.СоСпискомБезКлассификатора = ПоляВакансииСоСпискомБезКлассификатораHeadHunter();
		ВидыПолей.СоСпециальнойФормойРедактированияСписка = ПоляВакансииСоСпециальнойФормойРедактированияСпискаHeadHunter();
		ВидыПолей.СТекстомВHTML = ПоляВакансииСТекстомВHTMLHeadHunter();
		
	ИначеЕсли Сайт = Rabota() Тогда
		
		ВидыПолей.СОдиночнымВыборомИзСписка = ПоляВакансииСОдиночнымВыборомИзСпискаRabota();
		ВидыПолей.СМножественнымВыборомИзСписка = ПоляВакансииСМножественнымВыборомИзСпискаRabota();
		ВидыПолей.СМножественнымВыборомИзДерева = ПоляВакансииСМножественнымВыборомИзДереваRabota();
		ВидыПолей.НедоступныеДляРедактирования = ПоляВакансииНедоступныеДляРедактированияRabota(ОбновлениеПубликации);
		ВидыПолей.СоСпециальнойФормойРедактированияСписка = ПоляВакансииСоСпециальнойФормойРедактированияСпискаRabota();
		ВидыПолей.СТекстомВHTML = ПоляВакансииСТекстомВHTMLRabota();
		
	ИначеЕсли Сайт = SuperJob() Тогда
		
		ВидыПолей.СОдиночнымВыборомИзСписка = ПоляВакансииСОдиночнымВыборомИзСпискаSuperJob();
		ВидыПолей.СМножественнымВыборомИзСписка = ПоляВакансииСМножественнымВыборомИзСпискаSuperJob();
		ВидыПолей.СМножественнымВыборомИзДерева = ПоляВакансииСМножественнымВыборомИзДереваSuperJob();
		ВидыПолей.СОдиночнымВыборомИзДерева = ПоляВакансииСОдиночнымВыборомИзДереваSuperJob();
		ВидыПолей.СоСпециальнойФормойРедактированияСписка = ПоляВакансииСоСпециальнойФормойРедактированияСпискаSuperJob();
		ВидыПолей.СМногострочнымВводом = ПоляВакансииСМногострочнымВводомSuperJob();
		
	ИначеЕсли Сайт = Zarplata() Тогда
		
		ВидыПолей.НедоступныеДляРедактирования = ПоляВакансииНедоступныеДляРедактированияZarplata();
		ВидыПолей.СОдиночнымВыборомИзСписка = ПоляВакансииСОдиночнымВыборомИзСпискаZarplata();
		ВидыПолей.СМножественнымВыборомИзДерева = ПоляВакансииСМножественнымВыборомИзДереваZarplata();
		ВидыПолей.СоСпециальнойФормойРедактированияСписка = ПоляВакансииСоСпециальнойФормойРедактированияСпискаZarplata();
		ВидыПолей.СОдиночнымВыборомИзДерева = ПоляВакансииСОдиночнымВыборомИзДереваZarplata();
		ВидыПолей.СТекстомВHTML = ПоляВакансииСТекстомВHTMLZarplata();
		
	КонецЕсли;
	
	Возврат ВидыПолей;
	
КонецФункции

Функция НовыеВидыПолей()

	ВидыПолей = Новый Структура(
		"СМножественнымВыборомИзСписка,
		|СОдиночнымВыборомИзСписка,
		|СоСпискомБезКлассификатора,
		|СоСпециальнойФормойРедактированияСписка,
		|СМножественнымВыборомИзДерева,
		|СОдиночнымВыборомИзДерева,
		|НедоступныеДляРедактирования,
		|СТекстомВHTML,
		|СМногострочнымВводом");

	Возврат ВидыПолей;

КонецФункции

Функция ПоляСТекстом(Сайт)
	
	ПоляСТекстом = Новый Массив;
	ВидыПолей = ВидыПолей(Сайт);
	
	ПоляСМногострочнымВводом = ВидыПолей.СМногострочнымВводом;
	ПоляСТекстомВHTML = ВидыПолей.СТекстомВHTML;
	
	Если ЗначениеЗаполнено(ПоляСМногострочнымВводом) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляСТекстом, ПоляСМногострочнымВводом);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляСТекстомВHTML) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляСТекстом, ПоляСТекстомВHTML);
	КонецЕсли;
	
	Возврат ПоляСТекстом;
	
КонецФункции

#Область ПоляВакансии

#Область ПоляВакансииHeadHunter

Функция ПоляВакансииСМножественнымВыборомИзДереваHeadHunter()
	
	Поля = Новый Массив;
	Поля.Добавить("specializations.id");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСОдиночнымВыборомИзДереваHeadHunter()
	
	Поля = Новый Массив;
	Поля.Добавить("area.id");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСоСпискомБезКлассификатораHeadHunter()
	
	Поля = Новый Массив;
	Поля.Добавить("key_skills.name");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСОдиночнымВыборомИзСпискаHeadHunter()
	
	Поля = Новый Массив;
	Поля.Добавить("type.id");
	Поля.Добавить("billing_type.id");
	Поля.Добавить("site.id");
	Поля.Добавить("salary.currency");
	Поля.Добавить("experience.id");
	Поля.Добавить("schedule.id");
	Поля.Добавить("address.id");
	Поля.Добавить("manager.id");
	Поля.Добавить("department.id");
	Поля.Добавить("employment.id");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииНедоступныеДляРедактированияHeadHunter()
	
	Поля = Новый Массив;
	Поля.Добавить("salary");
	Поля.Добавить("address");
	Поля.Добавить("contacts"); 
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСТекстомВHTMLHeadHunter()
	
	Поля = Новый Массив;
	Поля.Добавить("description");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

#КонецОбласти

#Область ПоляВакансииRabota

Функция ПоляВакансииСОдиночнымВыборомИзСпискаRabota()
	
	Поля = Новый Массив;
	Поля.Добавить("currency");
	Поля.Добавить("operatingSchedule");
	Поля.Добавить("experienceYearCount");
	Поля.Добавить("education");
	Поля.Добавить("gender");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСМножественнымВыборомИзДереваRabota()
	
	Поля = Новый Массив;
	Поля.Добавить("offerTrades");
	Поля.Добавить("region");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСоСпециальнойФормойРедактированияСпискаRabota()
	
	Поля = Новый Массив;
	Поля.Добавить("phones");
	Поля.Добавить("language");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСМножественнымВыборомИзСпискаRabota()
	
	Поля = Новый Массив;
	Поля.Добавить("address");
	Поля.Добавить("additionalInformation.drivingLicense");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииНедоступныеДляРедактированияRabota(ОбновлениеПубликации = Ложь)
	
	Поля = Новый Массив;
	Поля.Добавить("additionalInformation");
	
	Если ОбновлениеПубликации Тогда
		Поля.Добавить("name");
		Поля.Добавить("region");
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСТекстомВHTMLRabota()
	
	Поля = Новый Массив;
	Поля.Добавить("description");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

#КонецОбласти

#Область ПоляВакансииSuperJob

Функция ПоляВакансииСОдиночнымВыборомИзСпискаSuperJob()
	
	Поля = Новый Массив;
	Поля.Добавить("type_of_work");
	Поля.Добавить("place_of_work");
	Поля.Добавить("education");
	Поля.Добавить("experience");
	Поля.Добавить("maritalstatus");
	Поля.Добавить("children");
	Поля.Добавить("id_language");
	Поля.Добавить("level");
	Поля.Добавить("gender");
	Поля.Добавить("id_user");
	Поля.Добавить("resumesubscription_kwc");
	Поля.Добавить("resumesubscription_rws");
	Поля.Добавить("published");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСоСпециальнойФормойРедактированияСпискаHeadHunter()
	
	Поля = Новый Массив;
	Поля.Добавить("contacts.phones");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСМножественнымВыборомИзДереваSuperJob()
	
	Поля = Новый Массив;
	Поля.Добавить("catalogues");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСОдиночнымВыборомИзДереваSuperJob()
	
	Поля = Новый Массив;
	Поля.Добавить("town");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСоСпециальнойФормойРедактированияСпискаSuperJob()
	
	Поля = Новый Массив;
	Поля.Добавить("phones");
	Поля.Добавить("languages");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСМногострочнымВводомSuperJob()
	
	Поля = Новый Массив;
	Поля.Добавить("work");
	Поля.Добавить("compensation");
	Поля.Добавить("candidat");
	Поля.Добавить("firm_activity");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСМножественнымВыборомИзСпискаSuperJob()
	
	Поля = Новый Массив;
	Поля.Добавить("driving_licence");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

#КонецОбласти

#Область ПоляВакансииZarplata

Функция ПоляВакансииНедоступныеДляРедактированияZarplata()
	
	Поля = Новый Массив;
	Поля.Добавить("contact");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСМножественнымВыборомИзДереваZarplata()
	
	Поля = Новый Массив;
	Поля.Добавить("rubrics.id");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСОдиночнымВыборомИзДереваZarplata()
	
	Поля = Новый Массив;
	Поля.Добавить("contact.city");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСОдиночнымВыборомИзСпискаZarplata()
	
	Поля = Новый Массив;
	Поля.Добавить("payment_type_alias");
	Поля.Добавить("currency");
	Поля.Добавить("working_type");
	Поля.Добавить("schedule");
	Поля.Добавить("education");
	Поля.Добавить("experience_length");

	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСоСпециальнойФормойРедактированияСпискаZarplata()
	
	Поля = Новый Массив;
	Поля.Добавить("contact.phones");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

Функция ПоляВакансииСТекстомВHTMLZarplata()
	
	Поля = Новый Массив;
	Поля.Добавить("description");
	
	Возврат Новый ФиксированныйМассив(Поля);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПоляКандидата

Функция СоответствиеПолейПоискаКандидатовПрограммыИHeadHunter()
	
	СоответствиеПолейПоиска = Новый Соответствие;
	
	СоответствиеПолейПоиска.Вставить("КлючевоеСлово", "text");
	СоответствиеПолейПоиска.Вставить("ВозрастОт", "age_from");
	СоответствиеПолейПоиска.Вставить("ВозрастДо", "age_to");
	СоответствиеПолейПоиска.Вставить("Регион", "area");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыОт", "salary_from");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыДо", "salary_to");
	СоответствиеПолейПоиска.Вставить("Пол", "gender");
	СоответствиеПолейПоиска.Вставить("УровеньОбразования", "education_level");
	СоответствиеПолейПоиска.Вставить("ПериодРазмещения", "period");
	
	Возврат СоответствиеПолейПоиска;
	
КонецФункции

Функция СоответствиеПолейПоискаКандидатовПрограммыИRabota()
	
	СоответствиеПолейПоиска = Новый Соответствие;
	
	СоответствиеПолейПоиска.Вставить("КлючевоеСлово", "qk[]");
	СоответствиеПолейПоиска.Вставить("ВозрастОт", "af");
	СоответствиеПолейПоиска.Вставить("ВозрастДо", "at");
	СоответствиеПолейПоиска.Вставить("Регион", "krl[]");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыОт", "sf");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыДо", "st");
	СоответствиеПолейПоиска.Вставить("Пол", "sex");
	СоответствиеПолейПоиска.Вставить("УровеньОбразования", "e[]");
	СоответствиеПолейПоиска.Вставить("ПериодРазмещения", "p");
	
	Возврат СоответствиеПолейПоиска;
	
КонецФункции

Функция СоответствиеПолейПоискаКандидатовПрограммыИSuperJob()
	
	СоответствиеПолейПоиска = Новый Соответствие;
	
	СоответствиеПолейПоиска.Вставить("КлючевоеСлово", "keyword");
	СоответствиеПолейПоиска.Вставить("ВозрастОт", "age_from");
	СоответствиеПолейПоиска.Вставить("ВозрастДо", "age_to");
	СоответствиеПолейПоиска.Вставить("Регион", "t");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыОт", "payment_from");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыДо", "payment_to");
	СоответствиеПолейПоиска.Вставить("Пол", "gender");
	СоответствиеПолейПоиска.Вставить("УровеньОбразования", "education");
	СоответствиеПолейПоиска.Вставить("ПериодРазмещения", "period");
	
	Возврат СоответствиеПолейПоиска;
	
КонецФункции

Функция СоответствиеПолейПоискаКандидатовПрограммыИZarplata()
	
	СоответствиеПолейПоиска = Новый Соответствие;
	
	СоответствиеПолейПоиска.Вставить("КлючевоеСлово", "q");
	СоответствиеПолейПоиска.Вставить("ВозрастОт", "age_min");
	СоответствиеПолейПоиска.Вставить("ВозрастДо", "age_max");
	СоответствиеПолейПоиска.Вставить("Регион", "geo_id");
	СоответствиеПолейПоиска.Вставить("СкрыватьРезюмеБезЗарплаты", "is_notempty_salary");
	СоответствиеПолейПоиска.Вставить("ТолькоВНазвании", "search_type");
	СоответствиеПолейПоиска.Вставить("Пол", "sex");
	СоответствиеПолейПоиска.Вставить("УровеньОбразования", "education_id");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыОт", "salary[from]");
	СоответствиеПолейПоиска.Вставить("УровеньЗарплатыДо", "salary[to]");
	
	Возврат СоответствиеПолейПоиска;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Сайты

Функция HeadHunter()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter();
	
КонецФункции

Функция Rabota()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.Rabota();
	
КонецФункции

Функция SuperJob()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob();
	
КонецФункции

Функция Zarplata()
	
	Возврат ИнтеграцияРекрутинговыхСайтовКлиентСервер.Zarplata();
	
КонецФункции

#Область Rabota

Функция IdТипаРегионаКрай()
	Возврат 3;
КонецФункции

Функция IdТипаРегионаОбласть()
	Возврат 4;
КонецФункции

Функция IdТипаРегионаРеспублика()
	Возврат 5;
КонецФункции

Функция IdТипаРегионаАвтономныйОкруг()
	Возврат 6;
КонецФункции

Функция IdТипаРегионаРеспубликаОсобая()
	Возврат 8;
КонецФункции

Функция IdТипаРегионаАвтономнаяОбласть()
	Возврат 9;
КонецФункции

Функция ПолноеНазваниеРегиона(Знач НазваниеРегиона, IdТипаРегиона)
	
	ПолноеНазвание = УдалитьУточнениеВСкобках(НазваниеРегиона);
	
	Если IdТипаРегиона = IdТипаРегионаКрай() Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 край'"), ПолноеНазвание);
	ИначеЕсли IdТипаРегиона = IdТипаРегионаОбласть() Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 область'"), ПолноеНазвание);
	ИначеЕсли IdТипаРегиона = IdТипаРегионаРеспублика() Тогда
		Возврат СтрШаблон(НСтр("ru = 'Республика %1'"), ПолноеНазвание);
	ИначеЕсли IdТипаРегиона = IdТипаРегионаАвтономныйОкруг() Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 АО'"), ПолноеНазвание);
	ИначеЕсли IdТипаРегиона = IdТипаРегионаРеспубликаОсобая() Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 республика'"), ПолноеНазвание);
	ИначеЕсли IdТипаРегиона = IdТипаРегионаАвтономнаяОбласть() Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 автономная область'"), ПолноеНазвание);
	КонецЕсли;
	
	Возврат ПолноеНазвание;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СообщенияОбОшибках

Функция ОписаниеОшибкиЗапросаZarplata(СтрокаОтвета) Экспорт
	
	ОписаниеОшибки = "";
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвета);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Попытка
		Ошибки = Результат["errors"];
		Для Каждого Ошибка Из Ошибки Цикл
			ОписаниеОшибки = ОписаниеОшибки + ?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "") + Ошибка["message"];
		КонецЦикла;
	Исключение
		ОписаниеОшибки = СтрокаОтвета;
	КонецПопытки;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Процедура СообщитьОбАвторизацииНеРаботодателя()
	
	СообщитьПользователю(НСтр("ru = 'Ошибка авторизации: пользователь не является работодателем.'"));
	
КонецПроцедуры

Процедура СообщитьОбОтсутствииПубликации(Сайт)
	
	СообщитьПользователю(НСтр("ru = 'Вакансия не опубликована на сайте'") + " " + Сайт);
	
КонецПроцедуры

Процедура СообщитьОбОтсутствииОткликов(Сайт)
	
	СообщитьПользователю(НСтр("ru = 'Не найдено откликов для загрузки на сайте'") + " " + Сайт);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеАвторизации(Сайт, КодСостояния, ОписаниеОшибки)
	
	СообщитьОбОшибке(НСтр("ru = 'Ошибка авторизации на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеПолученияВакансии(Сайт, КодСостояния, ОписаниеОшибки)
	
	СообщитьОбОшибке(НСтр("ru = 'Ошибка получения вакансии на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеПолученияВакансий(Сайт, КодСостояния, ОписаниеОшибки)
	
	СообщитьОбОшибке(НСтр("ru = 'Ошибка получения вакансий на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеПолученияДанныхПользователя(Сайт, КодСостояния, ОписаниеОшибки)
	
	СообщитьОбОшибке(НСтр("ru = 'Ошибка подтверждения пользователя на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеПолученияОткликов(Сайт, КодСостояния, ОписаниеОшибки)
	
	СообщитьОбОшибке(НСтр("ru = 'Ошибка получения откликов с сайта %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеПолученияРезюме(Сайт, КодСостояния, ОписаниеОшибки)
	
	СообщитьОбОшибке(НСтр("ru = 'Ошибка получения резюме на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеЗагрузкиКлассификаторов(Сайт, КодСостояния, ОписаниеОшибки)
	
	СообщитьОбОшибке(НСтр("ru = 'Ошибка загрузки классификаторов с сайта %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьОбОшибке(Шаблон, Сайт, КодСостояния, Знач ОписаниеОшибки)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.СообщитьОбОшибке(Шаблон, Сайт, КодСостояния, ОписаниеОшибки);
	
КонецПроцедуры

Процедура СообщитьПользователю(ТекстСообщения)
	
	ИнтеграцияРекрутинговыхСайтовВнутренний.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция ТекстОшибкиОткрытияКонтактов(ОписаниеОшибки)
	
	Возврат СтрШаблон(НСтр("ru = 'Ошибка открытия контактов: %1'"), ОписаниеОшибки);
	
КонецФункции

Функция ТекстОшибкиПоОписанию(Сайт, КодСостояния, ОписаниеОшибки)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ТекстОшибкиПоОписанию(Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

Функция ТекстОшибкиПоискаРезюме(Сайт, КодСостояния, ОписаниеОшибки)
	
	Возврат ТекстОшибки(НСтр("ru = 'Ошибка поиска резюме на сайте %1 (%2): %3'"), Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

Функция ТекстОшибки(Шаблон, Сайт, КодСостояния, ОписаниеОшибки)
	
	Возврат ИнтеграцияРекрутинговыхСайтовВнутренний.ТекстОшибки(Шаблон, Сайт, КодСостояния, ОписаниеОшибки);
	
КонецФункции

#КонецОбласти

#КонецОбласти
