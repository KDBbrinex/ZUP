#Область СлужебныйПрограммныйИнтерфейс

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	СписокОбъектов.Добавить(Документы.ОтзывСогласияНаУведомлениеОбЭЛН);
	СписокОбъектов.Добавить(Документы.СогласиеНаУведомлениеОбЭЛН);
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c89ccf93-44cb-11ea-80d5-4cedfb43b11a", Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "48bc606b-8a2a-11ea-80e1-4cedfb43b11a", Метаданные.Документы.ОтзывСогласияНаУведомлениеОбЭЛН);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	Обработчики.Добавить(СЭДОФСС);
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ДоступенОбменЧерезСЭДО() Тогда
		Возврат; // Нет прав или отключена ФО.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	ПравоИзмененияПодписок = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПодпискиНаУведомленияОбЭЛН);
	Если ПравоИзмененияПодписок Тогда
		КоличествоТребованийПоОтключению = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ТребованияПоОтключениюПодписокНаЭЛН().Количество();
		КоличествоТребованийПоВключению  = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ТребованияПоВключениюПодписокНаЭЛН().Количество();
	КонецЕсли;
	
	ПредставлениеКоманды = Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Команды.СообщенияФССОбИзмененииЭЛН.Представление();
	КоличествоОжидающихПолучения = РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.КоличествоОжидающихПолучения();
	
	Для Каждого Раздел Из Разделы Цикл
		
		Если ПравоИзмененияПодписок Тогда
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "ОтключениеПодпискиСЭДОФСС" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
			Дело.ЕстьДела       = (КоличествоТребованийПоОтключению > 0);
			Дело.Важное         = Истина;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Отключить подписку на уведомления об ЭЛН'");
			Дело.Количество     = КоличествоТребованийПоОтключению;
			Дело.Подсказка      = НСтр("ru = 'При увольнении или отзыве согласий сотрудников необходимо отключить подписку на уведомления ФСС об изменении состояний ЭЛН.'");
			Дело.ПараметрыФормы = Новый Структура("ВключитьПодписку, ЗаполнитьПоДаннымУчета, КлючУникальности", Ложь, Истина, "1");
			Дело.Форма          = "РегистрСведений.СогласияНаУведомленияОбЭЛН.Форма.ИзменениеСоставаПодписок";
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "ВключениеПодпискиСЭДОФСС" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
			Дело.ЕстьДела       = (КоличествоТребованийПоВключению > 0);
			Дело.Важное         = Ложь;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Включить подписку на уведомления об ЭЛН'");
			Дело.Количество     = КоличествоТребованийПоВключению;
			Дело.Подсказка      = НСтр("ru = 'После подписания согласия можно включить подписку на уведомления ФСС об изменении состояний ЭЛН.'");
			Дело.ПараметрыФормы = Новый Структура("ВключитьПодписку, ЗаполнитьПоДаннымУчета, КлючУникальности", Истина, Истина, "2");
			Дело.Форма          = "РегистрСведений.СогласияНаУведомленияОбЭЛН.Форма.ИзменениеСоставаПодписок";
		КонецЕсли;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ПолучениеСообщенийСЭДОФСС" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (КоличествоОжидающихПолучения > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = Раздел;
		Дело.Представление  = ПредставлениеКоманды;
		Дело.Количество     = КоличествоОжидающихПолучения;
		Дело.Подсказка      = НСтр("ru = 'Можно получить новые сообщения ФСС об изменении состояний ЭЛН.'");
		Дело.ПараметрыФормы = Новый Структура;
		Дело.Форма          = "РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Форма.ФормаСписка";
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Организация, Уведомления, ОбработанныеУведомления) Экспорт
	
	Для Каждого Уведомление Из Уведомления Цикл
		Если Число(Уведомление.Тип) = 5 Тогда
			// Сообщение об изменении состояния ЭЛН.
			РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ПриЗагрузкеУведомленияОНовомСообщении(
				Организация,
				Уведомление.Идентификатор);
			ОбработанныеУведомления.Добавить(Уведомление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
Процедура ПослеРасшифровкиСообщенияСЭДО(Организация, Сообщение, Результат) Экспорт
	
	Если Число(Сообщение.Тип) = 5 Тогда
		// Сообщение об изменении состояния ЭЛН.
		РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ПослеРасшифровкиСообщенияОбИзмененииСостоянияЭЛН(
			Организация,
			Сообщение.Идентификатор,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли Число(Сообщение.Тип) = 13 Тогда
		// Сообщение о подписке страхователя на уведомления из изменении состояний ЭЛН.
		РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.ПослеРасшифровкиСообщенияОбИзмененииПодписки(
			Организация,
			Сообщение.Идентификатор,
			Сообщение.ТекстСообщения,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН, Истина);
	Списки.Вставить(Метаданные.Документы.ОтзывСогласияНаУведомлениеОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиСЭДОФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПодпискиНаУведомленияОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СогласияНаУведомленияОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН, Истина);
	Списки.Вставить(Метаданные.Справочники.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Чтение.ГруппыФизическихЛиц
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Чтение.Организации
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Изменение.ГруппыФизическихЛиц
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Изменение.Организации
	|Документ.СогласиеНаУведомлениеОбЭЛН.Чтение.ГруппыФизическихЛиц
	|Документ.СогласиеНаУведомлениеОбЭЛН.Чтение.Организации
	|Документ.СогласиеНаУведомлениеОбЭЛН.Изменение.ГруппыФизическихЛиц
	|Документ.СогласиеНаУведомлениеОбЭЛН.Изменение.Организации
	|РегистрСведений.НастройкиСЭДОФСС.Чтение.Организации
	|РегистрСведений.НастройкиСЭДОФСС.Изменение.Организации
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Чтение.Организации
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Изменение.Организации
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Чтение.Организации
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Изменение.Организации
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Чтение.Организации
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Изменение.Организации
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.Организации
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ОтзывСогласияНаУведомлениеОбЭЛН.ПолноеИмя(),
		"Дата",
		"ОбработкаПерсональныхДанных");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН.ПолноеИмя(),
		"Дата",
		"ОбработкаПерсональныхДанных");
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.СогласиеНаУведомлениеОбЭЛН";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "ФИОСотрудника,АдресСотрудника,ПаспортСотрудника,Дата,СотрудникПодписалСогласие";
	НовыеСведения.ОбластьДанных   = "ОбработкаПерсональныхДанных";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.СогласияНаУведомленияОбЭЛН";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Подписано,ДатаСогласия,ДатаОтзываСогласия,Состояние,ОснованиеОтзываСогласия";
	НовыеСведения.ОбластьДанных   = "ОбработкаПерсональныхДанных";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.ПодпискиНаУведомленияОбЭЛН";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Действует,ДатаОтправки,БудетДействовать";
	НовыеСведения.ОбластьДанных   = "ОбработкаПерсональныхДанных";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН";
	НовыеСведения.ПоляРегистрации = "СНИЛС,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "НомерЛН,СостояниеЭЛН";
	НовыеСведения.ОбластьДанных   = "СостояниеЗдоровья";
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаЭЛН

// Обновляет видимость группы и надписи, напоминающей пользователю о необходимости отключения подписки на ЭЛН.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма с группой "ГруппаНапоминаниеОбОтключенииПодпискиНаЭЛН".
//   ПараметрыОбновленияФормы - Структура - Данные формы.
//   ПараметрыПособий - Структура - Кэш формы в части пособий.
//
Процедура ОбновитьНапоминаниеОбОтключенииПодписокНаЭЛН(Форма, ПараметрыОбновленияФормы, ПараметрыПособий) Экспорт
	Группа = Форма.Элементы.Найти("ГруппаНапоминаниеОбОтключенииПодпискиНаЭЛН");
	Если Группа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ПараметрыПособий.Свойство("ДоступенОбменЧерезСЭДО") Тогда
		ПараметрыПособий.Вставить("ДоступенОбменЧерезСЭДО", ДоступенОбменЧерезСЭДО());
	КонецЕсли;
	Если Не ПараметрыПособий.ДоступенОбменЧерезСЭДО Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбновленияФормы.Организация <> Неопределено
		И ПараметрыОбновленияФормы.Сотрудники <> Неопределено
		И ПараметрыОбновленияФормы.ДатаУвольнения <> Неопределено Тогда
		
		ОбновитьНапоминаниеВУвольнении(Форма, Группа, ПараметрыОбновленияФормы);
		
	Иначе
		
		ОбновитьОбщееНапоминание(Форма, Группа, ПараметрыПособий);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументБольничныйЛист

Процедура ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ) Экспорт
	
	Попытка
		РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные(
			БольничныйОбъект.Организация,
			БольничныйОбъект.НомерЛисткаНетрудоспособности);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при обновлении вторичных данных: %1: %2'"), Кратко, Подробно);
		ЗарплатаКадрыОтображениеОшибок.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ФизическоеЛицоСотрудника(Сотрудник) Экспорт
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо", Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЕстьПравоОбмена() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЖурналЗапросовКСерверамФСС)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН);
КонецФункции

#Область ОбновлениеФорм

// Продолжение процедуры ОбновитьНапоминаниеОбОтключенииПодписокНаЭЛН для форм документов Увольнение и УвольнениеСписком.
Процедура ОбновитьНапоминаниеВУвольнении(Форма, Группа, ПараметрыОбновленияФормы)
	СотрудникиСДействующейПодпиской = РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.СотрудникиСДействующейПодпиской(
		ПараметрыОбновленияФормы.Организация,
		ПараметрыОбновленияФормы.Сотрудники);
	Если СотрудникиСДействующейПодпиской.Количество() = 0 Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Надпись = НадписьНапоминанияОбОтключенииПодпискиНаЭЛН(Форма, Группа);
	Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ЭлементыПособийОбработкаНавигационнойСсылки");
	Надпись.Заголовок = ЗаголовокНадписиОНеобходимостиОтключенияПодписки(
		СотрудникиСДействующейПодпиской,
		"1",
		Формат(ПараметрыОбновленияФормы.ДатаУвольнения + 86400, "ДЛФ=D"),
		Ложь);
КонецПроцедуры

// Продолжение процедуры ОбновитьНапоминаниеОбОтключенииПодписокНаЭЛН для прочих форм.
Процедура ОбновитьОбщееНапоминание(Форма, Группа, ПараметрыПособий)
	ПодпискиТребующиеОтключения = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ТребованияПоОтключениюПодписокНаЭЛН();
	КоличествоСотрудников = ПодпискиТребующиеОтключения.Количество();
	Если КоличествоСотрудников = 0 Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Надпись = НадписьНапоминанияОбОтключенииПодпискиНаЭЛН(Форма, Группа);
	
	НесколькоОрганизаций = Неопределено;
	Если Не ПараметрыПособий.Свойство("ИспользоватьНесколькоОрганизаций", НесколькоОрганизаций) Тогда
		НесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыРасширенная");
		ПараметрыПособий.Вставить("ИспользоватьНесколькоОрганизаций", НесколькоОрганизаций);
	КонецЕсли;
	
	Команда = Метаданные.РегистрыСведений.СогласияНаУведомленияОбЭЛН.Команды.ОтключениеЛишнихПодписокНаУведомленияОбЭЛН;
	Надпись.Заголовок = ЗаголовокНадписиОНеобходимостиОтключенияПодписки(
		ПодпискиТребующиеОтключения,
		"e1cib/command/" + Команда.ПолноеИмя(),
		Неопределено,
		НесколькоОрганизаций);
КонецПроцедуры

// Формирует форматированную строку для заголовка декорации о необходимости отключения подписки.
Функция ЗаголовокНадписиОНеобходимостиОтключенияПодписки(ТаблицаСотрудников, НавигационнаяСсылка, ДоКакого, ДобавлятьОрганизацию)
	КоличествоСотрудников = ТаблицаСотрудников.Количество();
	
	Если КоличествоСотрудников = 1 Тогда
		КоличествоОрганизаций = 1;
		ЧтоСделать = СтрШаблон(
			НСтр("ru = 'отключить подписку на уведомления ФСС об изменении состояний ЭЛН %1'"),
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(ТаблицаСотрудников[0].Сотрудник),
				2));
	Иначе
		ТаблицаСотрудников.Свернуть("Организация");
		КоличествоОрганизаций = ТаблицаСотрудников.Количество();
		ЧтоСделать = СтрШаблон(
			НСтр("ru = 'отключить подписки на уведомления ФСС об изменении состояний ЭЛН %1 сотрудников'"),
			Формат(КоличествоСотрудников, "ЧГ="));
	КонецЕсли;
	
	Если КоличествоОрганизаций = 1 Тогда
		Если ЗначениеЗаполнено(ДоКакого) Тогда
			Шаблон = СтрШаблон(
				НСтр("ru = 'До <b>%1</b> необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'"),
				ДоКакого);
		ИначеЕсли ДобавлятьОрганизацию Тогда
			Шаблон = СтрШаблон(
				НСтр("ru = '%1 необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'"),
				Строка(ТаблицаСотрудников[0].Организация));
		Иначе
			Шаблон = НСтр("ru = 'Необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'");
		КонецЕсли;
	Иначе
		Шаблон = СтрШаблон(
			НСтр("ru = '%1 организациям необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'"),
			Строка(КоличествоОрганизаций));
	КонецЕсли;
	
	Шаблон = СтрЗаменить(Шаблон, "[НавигационнаяСсылка]", НавигационнаяСсылка);
	Шаблон = СтрЗаменить(Шаблон, "[ЧтоСделать]", ЧтоСделать);
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(Шаблон);
КонецФункции

// Осуществляет начальную настройку элементов в группе и поиск надписи.
Функция НадписьНапоминанияОбОтключенииПодпискиНаЭЛН(Форма, Группа)
	Группа.Видимость = Истина;
	
	Если Группа.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Группа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		Группа.Заголовок = НСтр("ru = 'Напоминание об отключении подписки на ЭЛН'");
		
		Картинка = Форма.Элементы.Добавить("КартинкаНапоминаниеОбОтключенииПодпискиНаЭЛН", Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.Предупреждение;
		
		Надпись = Форма.Элементы.Добавить("НадписьНапоминаниеОбОтключенииПодпискиНаЭЛН", Тип("ДекорацияФормы"), Группа);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.АвтоМаксимальнаяШирина = Ложь;
	Иначе
		Надпись = Форма.Элементы.НадписьНапоминаниеОбОтключенииПодпискиНаЭЛН;
	КонецЕсли;
	
	Возврат Надпись;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбновитьСведенияОСогласияхНаУведомленияОбЭЛНПриЗаписиУвольнений(Документ, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Документ) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.Увольнение") Тогда
		МассивСотрудников = Новый Массив;
		МассивСотрудников.Добавить(Документ.Сотрудник);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.УвольнениеСписком") Тогда
		МассивСотрудников = Документ.Сотрудники.ВыгрузитьКолонку("Сотрудник");
	Иначе
		Возврат;
	КонецЕсли;
	ПредставлениеОперации = НСтр("ru = 'Обновление сведений о согласиях на уведомления об ЭЛН'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация", Документ.Организация);
	ПараметрыПроцедуры.Вставить("МассивСотрудников", МассивСотрудников);
	ПараметрыПроцедуры.Вставить("Ссылка", Документ.Ссылка);
	ПараметрыПроцедуры.Вставить("ВерсияДанных", Документ.ВерсияДанных);
	ПараметрыПроцедуры.Вставить("ПредставлениеОперации", ПредставлениеОперации);
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = ПредставлениеОперации;
	ПараметрыЗапуска.ЗапуститьВФоне = Истина;
	ДлительныеОперации.ВыполнитьВФоне(
		"СЭДОФСС.ОбновитьСведенияОСогласииВФоне",
		ПараметрыПроцедуры,
		ПараметрыЗапуска);
КонецПроцедуры

Процедура ОбновитьСведенияОСогласииВФоне(Параметры, АдресХранилища) Экспорт
	ДождалисьОкончанияЗаписи = ДождатьсяОкончанияЗаписиОбъекта(
		Параметры.Ссылка,
		Параметры.ВерсияДанных,
		Параметры.ПредставлениеОперации);
	Если Не ДождалисьОкончанияЗаписи Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.СогласияНаУведомленияОбЭЛН.ОбновитьСведенияОСогласии(
		Параметры.Организация,
		Параметры.МассивСотрудников);
КонецПроцедуры

Функция ДождатьсяОкончанияЗаписиОбъекта(Ссылка, ВерсияДанных, ПредставлениеОперации)
	Если ВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВерсияДанных") Тогда
		Возврат Истина; // Объект записан.
	КонецЕсли;
	
	ОбъектМетаданных = Ссылка.Метаданные();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурнала(),
		УровеньЖурналаРегистрации.Примечание,
		ОбъектМетаданных,
		Ссылка,
		СтрШаблон(НСтр("ru = '%1: Ожидание записи объекта: Начало'"), ПредставлениеОперации));
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		ОтменитьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(
			НСтр("ru = '%1: Не удалось дождаться записи объекта по причине: %2'"),
			ПредставлениеОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Ошибка,
			ОбъектМетаданных,
			Ссылка,
			ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурнала(),
		УровеньЖурналаРегистрации.Примечание,
		ОбъектМетаданных,
		Ссылка,
		СтрШаблон(НСтр("ru = '%1: Ожидание записи объекта: Завершение'"), ПредставлениеОперации));
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

Функция ИмяСобытияЖурнала() Экспорт
	Возврат НСтр("ru = 'Обмен с ФСС.СЭДО'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

Функция ЕстьПравоПросмотраЖурнала() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналРегистрации);
КонецФункции

#КонецОбласти

Функция ВключенОбменЧерезСЭДО()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСЭДОФСС");
КонецФункции

Функция ДоступенОбменЧерезСЭДО() Экспорт
	Возврат ВключенОбменЧерезСЭДО()
		И Пользователи.РолиДоступны("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами", , Ложь)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН);
КонецФункции

Функция ИзменитьПометкуУдаления(МассивСсылок, ПометкаУдаления) Экспорт
	Измененные = Новый Массив;
	
	Право = ?(ПометкаУдаления, "ИнтерактивнаяПометкаУдаления", "ИнтерактивноеСнятиеПометкиУдаления");
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Заблокированные = Новый Массив;
		Для Каждого Ссылка Из МассивСсылок Цикл
			ОбъектМетаданных = Ссылка.Метаданные();
			Если Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			ЭлементБлокировки = Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Заблокированные.Добавить(Ссылка);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		Для Каждого Ссылка Из Заблокированные Цикл
			ИзменяемыйОбъект = Ссылка.ПолучитьОбъект();
			Если ИзменяемыйОбъект = Неопределено
				Или ИзменяемыйОбъект.ПометкаУдаления = ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ИзменяемыйОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			Измененные.Добавить(Ссылка);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Измененные;
КонецФункции

#КонецОбласти
