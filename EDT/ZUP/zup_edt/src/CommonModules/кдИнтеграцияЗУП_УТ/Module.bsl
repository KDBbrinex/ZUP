//{[+](фрагмент ДОБАВЛЕН), Нигматуллин Искандер Динарович 28.05.2020 12:10:34 ИТ0002452
Функция СоздатьЗРДС(Документ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущееСостояниеДокумента = ПолучитьТекущееСостояниеДокумента(Документ);
	Если НЕ ТекущееСостояниеДокумента.Действует Тогда
	
		МенеджерЗаписи = РегистрыСведений.кдИнтеграцияЗУП_УТ.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Документ = Документ;
		МенеджерЗаписи.Наименование = "" + ТипЗнч(Документ);
		МенеджерЗаписи.Действует = Истина;
		МенеджерЗаписи.ДатаДокумента = Документ.Дата;
		МенеджерЗаписи.Номер = Документ.Номер;
		МенеджерЗаписи.АвторОтправки = Пользователи.ТекущийПользователь();
		МенеджерЗаписи.Этап = ТекущееСостояниеДокумента.Этап + 1;
		МенеджерЗаписи.Версия = ТекущееСостояниеДокумента.Версия + 1;


		
		
		УзелУТ = ПланыОбмена.ИнтеграцияЗУП_УТ.НайтиПоКоду("УТ");
		ПланыОбмена.ЗарегистрироватьИзменения(УзелУТ, Документ);
		
		МенеджерЗаписи.Обработан = Истина;
		МенеджерЗаписи.Записать();
		
		ТекНаборЗаписей = РегистрыСведений.кдИнтеграцияЗУП_УТ.СоздатьНаборЗаписей();
		ТекНаборЗаписей.Отбор.Документ.Установить(Документ);
		ТекНаборЗаписей.Отбор.Период.Установить(МенеджерЗаписи.Период);
		ТекНаборЗаписей.Прочитать();
						
		ПланыОбмена.ЗарегистрироватьИзменения(УзелУТ, ТекНаборЗаписей);
		
		Возврат Истина;

	Иначе
		ОбщегоНазначения.СообщитьПользователю("По данному документу уже имеется ЗРДС, чтобы отправить документ повторно, сначала нужно его отозвать");
		
		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ОтозватьЗРДС(Документ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущееСостояниеДокумента = ПолучитьТекущееСостояниеДокумента(Документ);
	
	//{[+](фрагмент ДОБАВЛЕН), Нигматуллин Искандер Динарович 28.05.2020 12:22:38 ИТ0002452
	Если ТекущееСостояниеДокумента.ТекущийСтатус = Перечисления.кдСтатусДокумента.Согласован Тогда
		ОбщегоНазначения.СообщитьПользователю("Документ в 1С УТ уже утвержден, для отмены его обработки свяжитесь с исполнителем по документу");
		Возврат Ложь;
	КонецЕсли;
	//}Нигматуллин Искандер Динарович 28.05.2020 12:22:44 //ИТ0002452
	
	Если ТекущееСостояниеДокумента.Действует И ТекущееСостояниеДокумента.Этап > 0 Тогда
	
		МенеджерЗаписи = РегистрыСведений.кдИнтеграцияЗУП_УТ.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Документ = Документ;
		МенеджерЗаписи.Наименование = "" + ТипЗнч(Документ);
		МенеджерЗаписи.Действует = Истина;
		МенеджерЗаписи.ДатаДокумента = Документ.Дата;
		МенеджерЗаписи.Номер = Документ.Номер;
		МенеджерЗаписи.АвторОтправки = Пользователи.ТекущийПользователь();
		МенеджерЗаписи.Этап = 0;
		МенеджерЗаписи.Версия = ТекущееСостояниеДокумента.Версия;

	
		УзелУТ = ПланыОбмена.ИнтеграцияЗУП_УТ.НайтиПоКоду("УТ");
				
		МенеджерЗаписи.Обработан = Истина;
		МенеджерЗаписи.Записать();
		
		ТекНаборЗаписей = РегистрыСведений.кдИнтеграцияЗУП_УТ.СоздатьНаборЗаписей();
		ТекНаборЗаписей.Отбор.Документ.Установить(Документ);
		ТекНаборЗаписей.Отбор.Период.Установить(МенеджерЗаписи.Период);
		ТекНаборЗаписей.Прочитать();
						
		ПланыОбмена.ЗарегистрироватьИзменения(УзелУТ, ТекНаборЗаписей);
		
		Возврат Истина;

	Иначе
		ОбщегоНазначения.СообщитьПользователю("Документ уже отозван, дождитесь обработки отзыва документа");
		
		Возврат Ложь;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции


Функция ПолучитьТекущееСостояниеДокумента(Документ) Экспорт
	Результат = Новый Структура("Действует,Обработан,Ошибка, Этап, Версия, РезультатБП, Документ, Период, ТекущийСтатус, ЕстьЗапись", Ложь,Ложь,Ложь, 0,0, Неопределено, Документ, ТекущаяДатаСеанса(), Перечисления.кдСтатусДокумента.Черновик, Ложь);
	
	Срез = РегистрыСведений.кдИнтеграцияЗУП_УТ.СрезПоследних(, Новый Структура("Документ", Документ));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кдИнтеграцияЗУП_УТСрезПоследних.Действует КАК Действует,
	|	кдИнтеграцияЗУП_УТСрезПоследних.Обработан КАК Обработан,
	|	кдИнтеграцияЗУП_УТСрезПоследних.Ошибка КАК Ошибка,
	|	кдИнтеграцияЗУП_УТСрезПоследних.Этап КАК Этап,
	|	кдИнтеграцияЗУП_УТСрезПоследних.Версия КАК Версия,
	|	кдИнтеграцияЗУП_УТСрезПоследних.Документ КАК Документ,
	|	кдИнтеграцияЗУП_УТСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(кдРезультатыИнтеграцииЗУП_УТСрезПоследних.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.кдСтатусДокумента.Черновик)) КАК ТекущийСтатус,
	|	ЕСТЬNULL(кдРезультатыИнтеграцииЗУП_УТСрезПоследних.Ошибка, ЛОЖЬ) КАК ОшибкаУТ,
	|	кдРезультатыИнтеграцииЗУП_УТСрезПоследних.ОписаниеОшибки КАК ОписаниеОшибкиУТ,
	|	кдРезультатыИнтеграцииЗУП_УТСрезПоследних.РезультатБП КАК РезультатБП,
	|	1 КАК ЕстьЗапись
	|ИЗ
	|	РегистрСведений.кдИнтеграцияЗУП_УТ.СрезПоследних(, Документ = &Документ) КАК кдИнтеграцияЗУП_УТСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кдРезультатыИнтеграцииЗУП_УТ.СрезПоследних(, Документ = &Документ) КАК кдРезультатыИнтеграцииЗУП_УТСрезПоследних
	|		ПО кдИнтеграцияЗУП_УТСрезПоследних.Документ = кдРезультатыИнтеграцииЗУП_УТСрезПоследних.Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса);
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Функция ОбновлениеВизуальногоСтатуса(Документ) Экспорт
	ТекСтатус = ПолучитьТекущееСостояниеДокумента(Документ);
	Если Текстатус.Действует И ТекСтатус.ТекущийСтатус = Перечисления.кдСтатусДокумента.НаСогласовании Тогда
		Результат = БиблиотекаКартинок.ЦветСиний;
	ИначеЕсли Текстатус.Действует И ТекСтатус.ТекущийСтатус = Перечисления.кдСтатусДокумента.Согласован Тогда
		Результат = БиблиотекаКартинок.ЦветЗеленый;
	ИначеЕсли Текстатус.Действует И ТекСтатус.ТекущийСтатус = Перечисления.кдСтатусДокумента.Отклонен Тогда
		Результат = БиблиотекаКартинок.ЦветКрасный;
	ИначеЕсли Текстатус.Действует И ТекСтатус.Этап > 0 Тогда
		Результат = БиблиотекаКартинок.ЦветОранжевый; 
	ИначеЕсли ТекСтатус.ТекущийСтатус  = Перечисления.кдСтатусДокумента.Отозван ИЛИ НЕ ТекСтатус.ЕстьЗапись ИЛИ ТекСтатус.Этап = 0 Тогда
		Результат = БиблиотекаКартинок.ЦветПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//}Нигматуллин Искандер Динарович 28.05.2020 12:10:40 //ИТ0002452

//Начало: Романовский, 30.06.2020, ИТ0002855
Процедура кдОбменУТЗУППередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью(
		"ИнтеграцияЗУП_УТ", Источник, Отказ);	
	
КонецПроцедуры

Процедура кдОбменУТЗУППередЗаписьюРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра(
		"ИнтеграцияЗУП_УТ", Источник, Отказ, Замещение);
		
КонецПроцедуры

Процедура кдОбменУТЗУППередУдалениемПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением(
		"ИнтеграцияЗУП_УТ", Источник, Отказ);
		
КонецПроцедуры
//Конец: Романовский, 30.06.2020, ИТ0002855