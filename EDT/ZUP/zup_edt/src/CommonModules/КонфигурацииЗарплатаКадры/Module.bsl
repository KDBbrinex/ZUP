////////////////////////////////////////////////////////////////////////////////
// Подсистема "КонфигурацииЗарплатаКадры".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	ПоднятьВерсию(ОбщиеПараметры.МинимальнаяВерсияПлатформы, "8.3.14.1976");
	
	ТекущаяВерсияПлатформы = ВерсияПлатформы();
	Если ВерсияЧислом(ТекущаяВерсияПлатформы) >= ВерсияЧислом("8.3.15") Тогда
		ПоднятьВерсию(ОбщиеПараметры.РекомендуемаяВерсияПлатформы, "8.3.15.1747");
	Иначе
		ПоднятьВерсию(ОбщиеПараметры.РекомендуемаяВерсияПлатформы, "8.3.14.1976");
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	Проверка = Проверки.Найти("СтандартныеПодсистемы.ПроверкаНезаполненныхОбязательныхРеквизитов", "Идентификатор");
	Если Проверка <> Неопределено Тогда
		Проверки.Удалить(Проверка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИБ

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.10.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("348217de-98c7-11e9-80cd-4cedfb43b11a");
	Обработчик.Процедура       = "КонфигурацииЗарплатаКадры.ОбновитьРасписаниеОбменаСКонтролирующимиОрганамиПриОбновлении";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление расписания обмена с контролирующими органами.'");
	
КонецПроцедуры

// Обработчик обновления на 3.1.10.103.
Процедура ОбновитьРасписаниеОбменаСКонтролирующимиОрганамиПриОбновлении(ПараметрыОбновления = Неопределено) Экспорт
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиОбновлениеИнформационнойБазы.ВключитьАвтоматическийОбменСКонтролирующимиОрганамиПриОбновлении();
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Возвращает модуль, реализующий базовый контракт служебного программного интерфейса.
Функция Модуль() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
	Иначе
		Возврат КонфигурацииЗарплатаКадры;
	КонецЕсли;
КонецФункции

#Область БазовыйКонтракт

// Возвращает идентификатор интернет-поддержки подсистемы ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры.
//
// Возвращаемое значение:
//   Строка - Пустая строка.
//
Функция ИдентификаторИнтернетПоддержки() Экспорт
	Возврат "";
КонецФункции

#КонецОбласти

#Область ЗарплатаКадрыПереопределяемый

// См. ЗарплатаКадрыПереопределяемый.ПриОпределенииИмениКлиентскогоПриложения.
Процедура ПриОпределенииИмениКлиентскогоПриложения(ИмяПриложения, СтандартнаяОбработка) Экспорт
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторИнтернетПоддержки = Модуль().ИдентификаторИнтернетПоддержки();
	Если ЗначениеЗаполнено(ИдентификаторИнтернетПоддержки) Тогда
		ИмяПриложения = ИмяПриложения + " " + ИдентификаторИнтернетПоддержки + " " + Метаданные.Версия;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// См. ПодпискаНаСобытие.ОбновитьРасписаниеОбменаСКонтролирующимиОрганами (СправочникОбъект.Организации.ПриЗаписи).
Процедура ОбновитьРасписаниеОбменаСКонтролирующимиОрганами(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПриЗаписиОрганизации(Источник, Отказ);
КонецПроцедуры

// См. ПодпискаНаСобытие.НеИспользоватьНесколькоОрганизацийПриЗаписи (КонстантаМенеджерЗначения.НеИспользоватьНесколькоОрганизаций.ПриЗаписи).
Процедура НеИспользоватьНесколькоОрганизацийПриЗаписи(Источник, Отказ) Экспорт
	
	РазрешеноДобавлениеОрганизации = Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	Константы.РазрешитьДобавлениеОрганизацииЗарплатаКадры.Установить(Источник.Значение И РазрешеноДобавлениеОрганизации);
	
КонецПроцедуры

#КонецОбласти

// Возвращает текущую версию платформы.
Функция ВерсияПлатформы()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ВерсияПриложения;
КонецФункции

// Поднимает версию до целевой в случае, если версия меньше целевой.
Процедура ПоднятьВерсию(Версия, ЦелеваяВерсия)
	Если ВерсияЧислом(Версия) < ВерсияЧислом(ЦелеваяВерсия) Тогда
		Версия = ЦелеваяВерсия;
	КонецЕсли;
КонецПроцедуры

// Преобразует строковое представление версии в числовое.
Функция ВерсияЧислом(СтрокаВерсии, КоличествоРазрядов = 4, МножительРазрядов = 10000)
	Результат = 0;
	Фрагменты = СтрРазделить(СтрокаВерсии, ".");
	Разряд = 0;
	Для Каждого ФрагментВерсии Из Фрагменты Цикл
		Результат = Результат * МножительРазрядов + Число(ФрагментВерсии);
		Разряд = Разряд + 1;
	КонецЦикла;
	Если Разряд <> КоличествоРазрядов Тогда
		Результат = Результат / Pow(МножительРазрядов, Разряд - КоличествоРазрядов);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура УстановитьФункциональнуюОпциюРазрешитьДобавлениеОрганизацииЗарплатаКадры() Экспорт
	
	РазрешеноДобавлениеОрганизации = Константы.НеИспользоватьНесколькоОрганизаций.Получить() И Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	Константы.РазрешитьДобавлениеОрганизацииЗарплатаКадры.Установить(РазрешеноДобавлениеОрганизации);	
	
КонецПроцедуры

#КонецОбласти
