Функция ПолучитьНастройкиИнтеграции(ВебСервис) Экспорт
	ИмяБазы = ПолучитьИмяТекущейБазы(); 
	Если НРег(ВебСервис) = "crmexchange" Тогда
		Если НРег(ИмяБазы) <> "zup3" Тогда
			НастрИнтеграции = Справочники.кдНастройкиИнтеграции.НайтиПоКоду("COPY_crm.brinex");
		Иначе
			НастрИнтеграции = Справочники.кдНастройкиИнтеграции.НайтиПоКоду("REAL_crm.brinex");
		КонецЕсли;
	ИначеЕсли НРег(ВебСервис) = "wsbrinex" Тогда
		Если НРег(ИмяБазы) <> "zup3" Тогда
			НастрИнтеграции = Справочники.кдНастройкиИнтеграции.НайтиПоКоду("COPY_WSBrinex");
		Иначе
			НастрИнтеграции = Справочники.кдНастройкиИнтеграции.НайтиПоКоду("REAL_WSBrinex");
		КонецЕсли;

	Иначе
		НастрИнтеграции = Неопределено;
	КонецЕсли;
	
	Возврат НастрИнтеграции;
	
КонецФункции


Функция ПолучитьПрокси(ВебСервис = Неопределено) Экспорт
	
	НастрИнтеграции = ПолучитьНастройкиИнтеграции(ВебСервис);
	
	Если НЕ НастрИнтеграции = Справочники.кдНастройкиИнтеграции.ПустаяСсылка() Тогда
		НастройкиИнтеграцииОбъект = НастрИнтеграции.ПолучитьОбъект();
		Пассворд = НастройкиИнтеграцииОбъект.ПолучитьПароль();
		НастройкиИнтеграцииОбъект = Неопределено;
		Определения = Новый WSОпределения(НастрИнтеграции.ПутьОпределенияВебСервиса, НастрИнтеграции.Пользователь, Пассворд);
		Прокси = Новый WSПрокси(Определения, НастрИнтеграции.URIПространстваИменСервиса, НастрИнтеграции.ИмяСервиса, НастрИнтеграции.ИмяТочкиПодключения);
		Прокси.Пользователь = НастрИнтеграции.Пользователь;
		Прокси.Пароль = Пассворд;
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПолучитьИмяТекущейБазы() Экспорт
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(),";");
	Поз = Найти(МассивСтрок[1],"""");
	
	Возврат   ?(Поз=0,"",Сред(МассивСтрок[1],Поз+1,СтрДлина(МассивСтрок[1])-Поз-1));
	
КонецФункции


//Процедура кдЗагрузитьБитыеСсылки() Экспорт
//	
//	КС = Новый КвалификаторыСтроки(150);
//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Строка"));
//	ОписаниеТиповС150 = Новый ОписаниеТипов(Массив,,,,КС);
//	
//	КС = Новый КвалификаторыСтроки(36);
//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Строка"));
//	ОписаниеТиповС36 = Новый ОписаниеТипов(Массив,,,,КС);
//	
//	ТаблицаКПолучению = Новый ТаблицаЗначений;
//	ТаблицаКПолучению.Колонки.Добавить("УИД", ОписаниеТиповС36);
//	ТаблицаКПолучению.Колонки.Добавить("ТипДанных_ДО", ОписаниеТиповС150);
//	ТаблицаКПолучению.Колонки.Добавить("ТипДанных_УТ", ОписаниеТиповС150);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	Очередь.СсылкаНаОбъект КАК СсылкаНаОбъект
//	|ИЗ
//	|	РегистрСведений.кдОчередьНаПроверкуБитыхСсылок КАК Очередь";
//	Результат= Запрос.Выполнить();
//	Если Не Результат.Пустой() Тогда
//		Выборка = Результат.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			ТЗБитыхСсылок = ПолучитьБитыеСсылкиОбъекта(Выборка.СсылкаНаОбъект);	
//			
//			Если ТЗБитыхСсылок.Количество() > 0 Тогда
//				
//				Для Каждого Стр Из ТЗБитыхСсылок Цикл
//					НовСтр = ТаблицаКПолучению.Добавить();
//					НовСтр.УИД = Стр.УИД;
//					НовСтр.ТипДанных_ДО = Стр.ТипДанных;
//					НовСтр.ТипДанных_УТ = ПолучитьСоответвиеТипаУТДО(Стр.ТипДанных);
//				КонецЦикла;
//				
//			Иначе
//				
//				НаборЗ = РегистрыСведений.кдОчередьНаПроверкуБитыхСсылок.СоздатьНаборЗаписей();
//				НаборЗ.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект);
//				НаборЗ.Записать(Истина);
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если ТаблицаКПолучению.Количество() > 0 Тогда
//		
//		ТаблицаКПолучению.Свернуть("ТипДанных_ДО, ТипДанных_УТ, УИД");
//		
//		Прокси = кдОбменыДанными.ПолучитьПрокси();
//		Парам = СериализаторXDTO.ЗаписатьXDTO(ТаблицаКПолучению);
//		Ответ = Прокси.ЗарегистрироватьНаВыгрузку(Парам, "кдОбменУТДокументооборот", "ДО");
//		
//		Если Ответ = "ОК" Тогда
//			Выборка.Сбросить();	
//			Пока Выборка.Следующий() Цикл
//				НаборЗ = РегистрыСведений.кдОчередьНаПроверкуБитыхСсылок.СоздатьНаборЗаписей();
//				НаборЗ.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект);
//				НаборЗ.Записать(Истина);
//			КонецЦикла;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

////Начало: 29.07.19, КаримовАИ, интеграци УТ10 и ДО
////Возвращает таблицу с битыми ссылками объекта
//Функция ПолучитьБитыеСсылкиОбъекта(СсылкаНаОбъект) Экспорт
//	
//	КС = Новый КвалификаторыСтроки(150);
//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Строка"));
//	ОписаниеТиповС150 = Новый ОписаниеТипов(Массив,,,,КС);
//	
//	КС = Новый КвалификаторыСтроки(36);
//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Строка"));
//	ОписаниеТиповС36 = Новый ОписаниеТипов(Массив,,,,КС);
//	
//	ТЧДанные = Новый ТаблицаЗначений;
//	ТЧДанные.Колонки.Добавить("УИД", ОписаниеТиповС36);
//	ТЧДанные.Колонки.Добавить("ТипДанных", ОписаниеТиповС150);
//	ТЧДанные.Колонки.Добавить("ТаблицаИсточник", ОписаниеТиповС150);
//	ТЧДанные.Колонки.Добавить("Объект", ОписаниеТиповС150);
//	ТЧДанные.Колонки.Добавить("ОбъектИсточник", ОписаниеТиповС150);
//	
//	
//	ОбъектМетаданных = СсылкаНаОбъект.Метаданные();
//	ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
//	Свойства = ОбъектМетаданных.Реквизиты;
//	
//	Если СтрНайти(ИмяТаблицы, "Справочник") > 0 Тогда
//		Владелец = СсылкаНаОбъект.Владелец;
//		Если ЗначениеЗаполнено(Владелец) Тогда
//			ТекстЗапроса = "";
//			ДобавитьВЗапросОбъект(ТекстЗапроса, ОбъектМетаданных, ИмяТаблицы, "Владелец", ТипЗнч(Владелец));
//			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
//				ВывестиДанные(ТекстЗапроса, ТЧДанные, СсылкаНаОбъект);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	АнализСвойствОбъекта(ОбъектМетаданных, Свойства, ИмяТаблицы, ТЧДанные, СсылкаНаОбъект);
//	
//	Для Каждого ТабЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
//		АнализСвойствОбъекта(ОбъектМетаданных, ТабЧасть.Реквизиты, ИмяТаблицы + "." + ТабЧасть.Имя, ТЧДанные, СсылкаНаОбъект)
//	КонецЦикла;
//	
//	Возврат ТЧДанные
//	
//КонецФункции

//Процедура АнализСвойствОбъекта(ОбъектМетаданных, Свойства, ИмяТаблицы, ТЧДанные, СсылкаНаОбъект) 
//	
//	Для Каждого Реквизит Из Свойства Цикл
//		
//		Для Каждого моТип Из Реквизит.Тип.Типы() Цикл
//			ТекстЗапроса = "";
//			МетаданныеТипа = Метаданные.НайтиПоТипу(моТип);
//			Если МетаданныеТипа <> Неопределено И Не Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
//				ДобавитьВЗапросОбъект(ТекстЗапроса, ОбъектМетаданных, ИмяТаблицы, Реквизит.Имя, моТип);
//			КонецЕсли;
//			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
//				ВывестиДанные(ТекстЗапроса, ТЧДанные, СсылкаНаОбъект);
//			КонецЕсли;
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ДобавитьВЗапросОбъект(ТекстЗапроса, ОбъектМетаданных, ИмяТаблицы, ИмяРеквизита, ТипРеквизита)
//	
//	Текст = "ВЫБРАТЬ Об." + ИмяРеквизита + " КАК Объект, 
//	|	""" + ИмяТаблицы + "." + ИмяРеквизита + """ КАК ТаблицаИсточник, 
//	|	Об.Ссылка КАК ОбъектИсточник,
//	| 	" + ДобавитьОписаниеТипа(ИмяРеквизита, ТипРеквизита) + " 
//	|ИЗ 
//	|	" + ИмяТаблицы + " КАК Об
//	|ГДЕ " + ДобавитьУсловия(ИмяРеквизита, ТипРеквизита) + " И Об.Ссылка = &Ссылка";
//	ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + Текст;
//	
//КонецПроцедуры

//Функция ДобавитьУсловия(ИмяРеквизита, ТипРеквизита)
//	
//	мдОбъекта = Метаданные.НайтиПоТипу(ТипРеквизита);
//	ИмяТаблицы = мдОбъекта.ПолноеИмя();
//	ПроверкаНаПустыеЗначения = " Об." + ИмяРеквизита + " ССЫЛКА " + ИмяТаблицы;
//	ПроверкаНаПустыеЗначения = ПроверкаНаПустыеЗначения + " И ВЫРАЗИТЬ(Об." + ИмяРеквизита + " КАК " + ИмяТаблицы + ").Ссылка есть null";
//	Если Не Метаданные.Перечисления.Содержит(мдОбъекта) Тогда
//		ПроверкаНаПустыеЗначения = ПроверкаНаПустыеЗначения + " И Об." + ИмяРеквизита + " <> Значение(" + ИмяТаблицы + ".ПустаяСсылка)";
//	КонецЕсли;
//	Возврат ПроверкаНаПустыеЗначения;
//	
//КонецФункции

//Функция ДобавитьОписаниеТипа(ИмяРеквизита, ТипРеквизита)
//	
//	ОбъектТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
//	ИмяТаблицы = ОбъектТипа.ПолноеИмя();
//	ОписаниеТипа = """" + ИмяТаблицы + """ КАК ТипДанных";	
//	Возврат ОписаниеТипа;
//	
//КонецФункции

//Процедура ВывестиДанные(ТекстЗапроса, ТЧДанные, СсылкаНаОбъект)
//	
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
//	Попытка 
//		РезультатЗапроса = Запрос.Выполнить();
//		Если Не РезультатЗапроса.Пустой() Тогда
//			ТЗ = РезультатЗапроса.Выгрузить();
//			Для Каждого Стр Из ТЗ Цикл
//				
//				Строка = ТЧДанные.Добавить();
//				ЗаполнитьЗначенияСвойств(Строка, Стр);
//				Строка.УИД = Стр.Объект.уникальныйидентификатор();
//				
//			КонецЦикла;
//		КонецЕсли;
//	Исключение
//		Сообщить(ИнформацияОбОшибке().Описание + " " + ИнформацияОбОшибке().Причина);
//	КонецПопытки;
//	
//КонецПроцедуры
////Конец: 29.07.19, КаримовАИ, интеграци УТ10 и КА

//Функция ПолучитьСоответвиеТипаУТДО(ТипДанных_ДО) Экспорт
//	
//	Ответ = ТипДанных_ДО;
//	
//	//Если наименования метаданных баз отличаются тут можно задать соответствия
//	
//	//Справочники
//	Если ТипДанных_ДО = "Справочник.кдДоговорыКонтрагентов" Тогда
//		Ответ = "Справочник.ДоговорыКонтрагентов";
//	ИначеЕсли ТипДанных_ДО = "Документ.кдБонусыРасчетПокупателям" Тогда
//		Ответ = "Документ.БонусыРасчетПокупателям";
//	ИначеЕсли ТипДанных_ДО = "Документ.кдБонусыПокупателяЗаявка" Тогда
//		Ответ = "Документ.БонусыПокупателяЗаявка";
//	ИначеЕсли ТипДанных_ДО = "Справочник.кдПроекты" Тогда
//		Ответ = "Справочник.Проекты";
//	ИначеЕсли ТипДанных_ДО = "Справочник.кдБонусыТарифы" Тогда
//		Ответ = "Справочник.БонусыТарифы";
//	ИначеЕсли ТипДанных_ДО = "Справочник.кдВодители" Тогда
//		Ответ = "Справочник.Водители";
//	ИначеЕсли ТипДанных_ДО = "Справочник.кдТранспорт" Тогда
//		Ответ = "Справочник.Транспорт";
//	
//		//ИначеЕсли ТипДанных_ДО = "Справочник.Организации" Тогда
//		//	Ответ = "Справочник.Организации";
//	КонецЕсли;
//	
//	
//	//Справочники
//	//Если ТипДанных_ДО = "СправочникСсылка.Контрагенты" Тогда
//	//	Ответ = "СправочникСсылка.Контрагенты";
//	//ИначеЕсли ТипДанных_ДО = "СправочникСсылка.Организации" Тогда
//	//	Ответ = "СправочникСсылка.Организации";
//	//КонецЕсли;
//	
//	Возврат Ответ
//	
//КонецФункции

//Функция ПолучитьИсториюВзаиморасчетов(UID_UT, ИНН, КПП) Экспорт
//	Прокси = кдОбменыДанными.ПолучитьПрокси();
//	Ответ = Прокси.ПолучитьДанныеПоКонтрагенту(UID_UT, ИНН, КПП);
//	Возврат СериализаторXDTO.ПрочитатьXDTO(Ответ);
//КонецФункции

//Функция ЗарегистрироватьНаВыгрузку(ТаблицаКПолучению) Экспорт
//	Прокси = кдОбменыДанными.ПолучитьПрокси();
//	Парам = СериализаторXDTO.ЗаписатьXDTO(ТаблицаКПолучению);
//	Ответ = Прокси.ЗарегистрироватьНаВыгрузку(Парам, "кдОбменУТДокументооборот", "ДО");
//КонецФункции

//Функция СоздатьКонтрагентаПриСогласовании(Предмет) Экспорт
//	РезультатЗаписи = Истина;
//	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
//		Если Предмет.ВидДокумента.ЯвляетсяДоговором Тогда
//			
//			кдДоговор = Предмет.кдДоговор;
//			
//			Прокси = кдОбменыДанными.ПолучитьПрокси();
//			Результат = Прокси.ПолучитьСписокКонтрагентовПоИНН(кдДоговор.кдИНН, "кдОбменУТДокументооборот", "ДО");
//			Итог = СериализаторXDTO.ПрочитатьXDTO(Результат);
//			
//			НайденныеСтроки = Новый Массив;
//			
//			Если Итог.Количество() > 0 Тогда
//				ОтборПоКПП = Новый Структура;
//				ОтборПоКПП.Вставить("КПП", кдДоговор.кдКПП);
//				НайденныеСтроки = Итог.НайтиСтроки(ОтборПоКПП);
//				Если НайденныеСтроки.Количество() > 0 Тогда
//					Если ЗначениеЗаполнено(НайденныеСтроки[0].УИД_ка) Тогда
//						
//						РезультатЗаписи = ВыполнитьЕслиСопоставлен(НайденныеСтроки[0].УИД_ка, кдДоговор, Предмет);
//						
//					ИначеЕсли ЗначениеЗаполнено(НайденныеСтроки[0].УИД_ут) Тогда
//						УникИдентификатор = Новый УникальныйИдентификатор(НайденныеСтроки[0].УИД_ут);
//						СсылкаУИД = Справочники.Контрагенты.ПолучитьСсылку(УникИдентификатор);
//						Если НЕ ЗначениеЗаполнено(СсылкаУИД.Код) Тогда
//						
//							РезультатЗаписи = ВыполнитьЕслиНЕСопоставлен(НайденныеСтроки[0], кдДоговор, Предмет);
//							
//						Иначе
//							
//							РезультатЗаписи = ВыполнитьЕслиСопоставлен(НайденныеСтроки[0].УИД_ут, кдДоговор, Предмет);
//						КонецЕсли;
//						
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//			Если Итог.Количество() = 0 ИЛИ НайденныеСтроки.Количество() = 0 Тогда
//				
//				ЭтоЮридическоеЛицо = (кдДоговор.кдЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
//				
//				Если ЭтоЮридическоеЛицо Тогда
//					РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(кдДоговор.кдИНН);
//				Иначе
//					РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(кдДоговор.кдИНН);
//				КонецЕсли;
//				
//				РезультатЗаписи = ЗаписатьДанныеИзИФНС(РеквизитыКонтрагента, кдДоговор, Предмет);
//			КонецЕсли;
//			
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат РезультатЗаписи;
//	
//КонецФункции

//Функция ЗаписатьДанныеИзИФНС(ДанныеКонтрагента, кдДоговор, Предмет)
//	УстановитьПривилегированныйРежим(Истина);
//	Итог = Истина;
//	Результат = Неопределено;
//	Если ДанныеКонтрагента.ОписаниеОшибки = Неопределено Тогда
//		
//		
//		
//		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
//		НовыйКонтрагент.ИНН = ДанныеКонтрагента.ИНН;
//		НовыйКонтрагент.КПП = ДанныеКонтрагента.КПП;
//		НовыйКонтрагент.Наименование	= ДанныеКонтрагента.Наименование;
//		НовыйКонтрагент.НаименованиеПолное	= ДанныеКонтрагента.НаименованиеПолное;
//		НовыйКонтрагент.РегистрационныйНомер = ДанныеКонтрагента.РегистрационныйНомер;
//		
//		
//		Если НЕ ДанныеКонтрагента.Телефон = Неопределено Тогда
//			НоваяСтрока = НовыйКонтрагент.КонтактнаяИнформация.Добавить();
//			НоваяСтрока.ЗначенияПолей = ДанныеКонтрагента.Телефон.КонтактнаяИнформация;
//			НоваяСтрока.НомерТелефона = ДанныеКонтрагента.Телефон.Представление;
//			НоваяСтрока.Представление = ДанныеКонтрагента.Телефон.Представление;
//		КонецЕсли;
//		
//		Если НЕ ДанныеКонтрагента.ЮридическийАдрес = Неопределено Тогда
//			НоваяСтрока = НовыйКонтрагент.КонтактнаяИнформация.Добавить();
//			НоваяСтрока.ЗначенияПолей = ДанныеКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
//			НоваяСтрока.Представление = ДанныеКонтрагента.ЮридическийАдрес.Представление;
//		КонецЕсли;
//		
//		Попытка
//			СтруктураНовогоОбъекта = СериализаторXDTO.ЗаписатьXDTO(ДанныеКонтрагента);
//			Прокси = кдОбменыДанными.ПолучитьПрокси();
//			Результат = Прокси.СоздатьКонтрагентаУТ(СтруктураНовогоОбъекта);

//			Если НЕ Результат = Неопределено Тогда
//				НачатьТранзакцию();
//				НовыйКонтрагент.UID_УТ = Результат;
//				НовыйКонтрагент.Записать();
//				Итог = Ложь;
//				ЗафиксироватьТранзакцию();
//			Иначе
//				ОтменитьТранзакцию();
//				Итог = Истина;
//			КонецЕсли;
//		Исключение
//			Возврат Итог;
//		КонецПопытки;
//		
//	Иначе
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДанныеКонтрагента.ОписаниеОшибки);
//		Возврат Итог;
//	КонецЕсли;
//	
//	Если НЕ Итог Тогда
//		Попытка
//				
//			ДоговорОбъект = Предмет.ПолучитьОбъект();
//			ДоговорОбъект.Контрагент = НовыйКонтрагент.Ссылка;
//			ДоговорОбъект.Записать();
//			
//			кдДоговорОбъект = кдДоговор.ПолучитьОбъект();
//			кдДоговорОбъект.Владелец = НовыйКонтрагент.Ссылка;
//			кдДоговорОбъект.Записать();
//		Исключение
//			Итог = Истина;
//		КонецПопытки;	
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат Итог;

//	
//КонецФункции


//Функция ВыполнитьЕслиНЕСопоставлен(Ответ, кдДоговор, Предмет)
//	Итог = Истина;
//	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
//	НовыйИдентификатор = Новый УникальныйИдентификатор(Ответ.УИД_ут);
//	СсылкаНового = Справочники.Контрагенты.ПолучитьСсылку(НовыйИдентификатор);
//	НовыйКонтрагент.УстановитьСсылкуНового(СсылкаНового);
//	НовыйКонтрагент.UID_УТ = Ответ.УИД_ут;
//	НовыйКонтрагент.ИНН = Ответ.ИНН;
//	НовыйКонтрагент.КПП = Ответ.КПП;
//	НовыйКонтрагент.Наименование = Ответ.Наименование;
//	НовыйКонтрагент.НаименованиеПолное = Ответ.НаименованиеПолное;
//	НовыйКонтрагент.Код = Ответ.Код;
//	Если Ответ.Юрлицо Тогда
//		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
//	Иначе
//		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
//	КонецЕсли;
//	
//	КС = Новый КвалификаторыСтроки(150);
//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Строка"));
//	ОписаниеТиповС150 = Новый ОписаниеТипов(Массив,,,,КС);
//	
//	КС = Новый КвалификаторыСтроки(36);
//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Строка"));
//	ОписаниеТиповС36 = Новый ОписаниеТипов(Массив,,,,КС);
//	
//	ТаблицаКПолученю = Новый ТаблицаЗначений;
//	ТаблицаКПолученю.Колонки.Добавить("УИД", ОписаниеТиповС36);
//	ТаблицаКПолученю.Колонки.Добавить("ТипДанных_ДО", ОписаниеТиповС150);
//	ТаблицаКПолученю.Колонки.Добавить("ТипДанных_УТ", ОписаниеТиповС150);
//	
//	НовыйЭлемент = ТаблицаКПолученю.Добавить();
//	НовыйЭлемент.УИД = Ответ.УИД_ут;
//	НовыйЭлемент.ТипДанных_ДО = "СправочникСсылка.Контрагент";
//	НовыйЭлемент.ТипДанных_ДО = "СправочникСсылка.Контрагент";
//	
//	Попытка
//		НачатьТранзакцию();
//		кдОбменыДанными.ЗарегистрироватьНаВыгрузку(ТаблицаКПолученю);
//		НовыйКонтрагент.Записать();
//		
//		кдКонтрагент = НовыйКонтрагент.Ссылка;
//		
//		СтруктураЗаписи = Новый Структура;
//		СтруктураЗаписи.Вставить("Владелец", кдКонтрагент);
//		СтруктураЗаписи.Вставить("кдИНН", кдКонтрагент.ИНН);
//		СтруктураЗаписи.Вставить("кдКПП", кдКонтрагент.КПП);
//		СтруктураЗаписи.Вставить("кдНаименованиеКонтрагента", кдКонтрагент.Наименование);
//		СтруктураЗаписи.Вставить("кдНаименованиеПолное", кдКонтрагент.НаименованиеПолное);
//		СтруктураЗаписи.Вставить("кдЮрФизЛицо", кдКонтрагент.ЮрФизЛицо);
//		СтруктураЗаписи.Вставить("кдНомерСчета", Ответ.НомерСчета);
//		СтруктураЗаписи.Вставить("кдБАНК", Справочники.КлассификаторБанковРФ.НайтиПоКоду(Ответ.БИКБанка));
//		
//		
//		кдДоговорОбъект = кдДоговор.ПолучитьОбъект();
//		ЗаполнитьЗначенияСвойств(кдДоговорОбъект, СтруктураЗаписи, "Владелец, кдНомерСчета, кдБАНК, кдИНН, кдКПП, кдНаименованиеКонтрагента, кдНаименованиеПолное, кдЮрФизЛицо");
//		кдДоговорОбъект.Записать();
//		ПредметОбъект = Предмет.ПолучитьОбъект();
//		ПредметОбъект.Контрагент = кдКонтрагент;
//		ПредметОбъект.Записать();
//		
//		ЗафиксироватьТранзакцию();
//		Итог = Ложь;
//		
//	Исключение
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не могу создать нового контрагента из базы 1С УТ, обратитесь в ИТ-Хелп. Информация об объекте ИНН: " + Ответ.ИНН + "УИД Нового: " + Ответ.УИД_ут);
//		Возврат Итог;
//	КонецПопытки;
//	
//	Возврат Итог;	
//	
//КонецФункции

//&НаСервере
//Функция ВыполнитьЕслиСопоставлен(УИД_ка, кдДоговор, Предмет)
//	УстановитьПривилегированныйРежим(Истина);
//	Итог = Истина;
//	УИДСсылки = Новый УникальныйИдентификатор(УИД_ка);
//	кдКонтрагент = Справочники.Контрагенты.ПолучитьСсылку(УИДСсылки);
//	кдОсновнойБСКонтрагента = кдКонтрагент.ОсновнойБанковскийСчет;
//	
//	СтруктураЗаписи = Новый Структура;
//	СтруктураЗаписи.Вставить("Владелец", кдКонтрагент);
//	СтруктураЗаписи.Вставить("кдНомерСчета", "");
//	СтруктураЗаписи.Вставить("кдБАНК", Неопределено);

//	
//	
//	Если ЗначениеЗаполнено(кдОсновнойБСКонтрагента) Тогда
//		СтруктураЗаписи.Вставить("кдНомерСчета", кдОсновнойБСКонтрагента.НомерСчета);
//		СтруктураЗаписи.Вставить("кдБАНК", кдОсновнойБСКонтрагента.Банк);
//	Иначе
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	БанковскиеСчета.Ссылка КАК БанковскийСчет
//		|ИЗ
//		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
//		|ГДЕ
//		|	БанковскиеСчета.Владелец = &Владелец";
//		Запрос.УстановитьПараметр("Владелец", кдКонтрагент);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			СтруктураЗаписи.Вставить("кдНомерСчета", Выборка.БанковскийСчет.НомерСчета);
//			СтруктураЗаписи.Вставить("кдБАНК", Выборка.БанковскийСчет.Банк);
//		КонецЕсли;
//	КонецЕсли;
//	
//	СтруктураЗаписи.Вставить("кдИНН", кдКонтрагент.ИНН);
//	СтруктураЗаписи.Вставить("кдКПП", кдКонтрагент.КПП);
//	СтруктураЗаписи.Вставить("кдНаименованиеКонтрагента", кдКонтрагент.Наименование);
//	СтруктураЗаписи.Вставить("кдНаименованиеПолное", кдКонтрагент.НаименованиеПолное);
//	СтруктураЗаписи.Вставить("кдЮрФизЛицо", кдКонтрагент.ЮрФизЛицо);
//	Попытка
//		НачатьТранзакцию();
//		кдДоговорОбъект = кдДоговор.ПолучитьОбъект();
//		ЗаполнитьЗначенияСвойств(кдДоговорОбъект, СтруктураЗаписи, "Владелец, кдИНН, кдКПП, кдНаименованиеКонтрагента, кдНаименованиеПолное, кдЮрФизЛицо, кдНомерСчета, кдБАНК");
//		кдДоговорОбъект.Владелец = СтруктураЗаписи.Владелец;
//		кдДоговорОбъект.Записать();
//		ПредметОбъект = Предмет.ПолучитьОбъект();
//		ПредметОбъект.Контрагент = кдКонтрагент;
//		ПредметОбъект.Записать();
//		ЗафиксироватьТранзакцию();
//		Итог = Ложь;
//	Исключение
//		Сообщить(ОписаниеОшибки());
//		Итог = Истина;
//	КонецПопытки;
//	УстановитьПривилегированныйРежим(Ложь);
//	Возврат Итог;
//КонецФункции

//Процедура СозданиеНовыхКонтрагентов() Экспорт      //Создание контрагентов после согласования договора
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	кдНовыеКонтрагенты.кдПредмет
//	|ИЗ
//	|	РегистрСведений.кдНовыеКонтрагенты КАК кдНовыеКонтрагенты
//	|ГДЕ
//	|	кдНовыеКонтрагенты.Счетчик < 4";
//	РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	
//	
//	
//	Пока РезультатЗапроса.Следующий() Цикл
//		Результат = кдОбменыДанными.СоздатьКонтрагентаПриСогласовании(РезультатЗапроса.кдПредмет);
//		МенеджерЗаписи = РегистрыСведений.кдНовыеКонтрагенты.СоздатьМенеджерЗаписи();
//		МенеджерЗаписи.кдПредмет = РезультатЗапроса.кдПредмет;
//		МенеджерЗаписи.Прочитать();
//		Если МенеджерЗаписи.Выбран() Тогда
//			Если Результат Тогда
//				МенеджерЗаписи.Счетчик = МенеджерЗаписи.Счетчик + 1;
//				МенеджерЗаписи.Записать();
//			Иначе
//				МенеджерЗаписи.Удалить();
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	

//КонецПроцедуры

////Начало: Тронин А.А., Заявка №ХХХ, 13.04.2020, Описание
//Функция ВыполнитьЗапросВСлужебномМодуле(ТекстЗапроса, ПараметрыЗапроса) Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = ТекстЗапроса;
//	
//	Для Каждого Стр Из ПараметрыЗапроса Цикл
//		Запрос.УстановитьПараметр(Стр.Ключ,Стр.Значение);
//	КонецЦикла;
//	
//	Возврат Запрос.Выполнить().Выгрузить();
//	
//КонецФункции
////Конец: Тронин А.А., Заявка №ХХХ, 13.04.2020, Описание

Функция ВыполнитьЗапросЧерезВебСервис(СтруктураПараметров) Экспорт 
	
	Прокси = ПолучитьПрокси("WSBrinex");
	
	ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.УстановитьСтроку();
    СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураПараметров);
	
	Настройки = ЗаписьXML.Закрыть();
	Сериализатор = Новый СериализаторXDTO(Прокси.ФабрикаXDTO);
	СтруктураXDTO = Сериализатор.ЗаписатьXDTO(Настройки);
	
	ДокументXDTO = Прокси.ВыполнениеЗапроса(СтруктураXDTO);  
	Таблица = Сериализатор.ПрочитатьXDTO(ДокументXDTO);

	Возврат Таблица;
	
КонецФункции

Функция СоздатьДокПерераспределениеЗатрат(СтруктураПараметров) Экспорт 
	
	
	
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку();
	//СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураПараметров);
	//
	//Настройки = ЗаписьXML.Закрыть();
	//Сериализатор = Новый СериализаторXDTO(Прокси.ФабрикаXDTO);
	//СтруктураXDTO = Сериализатор.ЗаписатьXDTO(Настройки);
	
	СтруктураНовогоОбъекта = СериализаторXDTO.ЗаписатьXDTO(СтруктураПараметров);
	
	Прокси = ПолучитьПрокси("CRMexchange");
	
	Результат = Прокси.СоздатьДокПерераспределениеЗатрат(СтруктураНовогоОбъекта); //ДокументXDTO 
	//Результат = Сериализатор.ПрочитатьXDTO(ДокументXDTO);

	Возврат Результат;
	
КонецФункции

