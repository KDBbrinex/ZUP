
#Область СлужебныйПрограммныйИнтерфейс

#Область ЗащитаПерсональныхДанных

// Вызывается при получении формой данных объекта. Дополняет состав элементов формы надписью о статусе согласия 
// на обработку персональных данных субъекта и декорацией отсутствия согласия. Формирует текст надписи.
//
// Параметры:
//	Форма				- ФормаКлиентскогоПриложения - форма, связанная с субъектом.
//	ТекущийОбъект		- СправочникОбъект - объект, который будет прочитан.
//	ИмяКлючевогоПоля	- Строка - "Ссылка" или заданное имя реквизита, содержащего ссылку на субъект.
//
Процедура ФормаСубъектаПриПолученииДанныхНаСервере(Форма, ТекущийОбъект, ИмяКлючевогоПоля = "Ссылка") Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСкрытиеПерсональныхДанныхСубъектов") Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаСведения = Элементы.Найти("ГруппаСведенияОСогласииНаОбработкуПДн");
	Если ГруппаСведения = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.ФизическиеЛица) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Найти("ДекорацияПредупреждениеОбОтсутствииСогласия") = НеОпределено Тогда
		
		Элемент = Элементы.Добавить("ДекорацияПредупреждениеОбОтсутствииСогласия", Тип("ДекорацияФормы"), ГруппаСведения);
		Элемент.Заголовок = НСтр("ru = 'Предупреждение об отсутствии согласия'");
		Элемент.Вид = ВидДекорацииФормы.Картинка;
		Элемент.Картинка = БиблиотекаКартинок.Предупреждение;
		Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	КонецЕсли;
	
	Если Элементы.Найти("СообщениеОСогласииНаОбработкуПДн") = НеОпределено Тогда
		
		Элемент = Элементы.Вставить("СообщениеОСогласииНаОбработкуПДн", Тип("ДекорацияФормы"), ГруппаСведения);
		Элемент.Заголовок = Новый ФорматированнаяСтрока("");
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_СообщениеОСогласииОбработкаНавигационнойСсылки");
		
	КонецЕсли;
	
	ЭлементНадписи = Элементы.Найти("СообщениеОСогласииНаОбработкуПДн");
	ЭлементДекорации = Элементы.ДекорацияПредупреждениеОбОтсутствииСогласия;
	
	Субъект = ТекущийОбъект[ИмяКлючевогоПоля];
	ГруппаСведения.Видимость = ОбщегоНазначения.СсылкаСуществует(Субъект);
	
	СтатусСогласия = СтатусСогласияНаОбработкуПДнСубъекта(Субъект);
	
	ЭлементДекорации.Видимость = СтатусСогласия.Требуется;
	ЭлементНадписи.Заголовок = СтатусСогласия.Описание;
	
КонецПроцедуры

// В форме списка заполняет колонку с картинкой, сигнализирующей об отсутствии требуемого согласия 
// на обработку персональных данных кандидата.
// Вызывается из события ПриПолученииДанныхНаСервере формы списка.
//
// Параметры:
//	Настройки			- НастройкиКомпоновкиДанных - содержит копию полных настроек динамического списка.
//	Строки				- СтрокиДинамическогоСписка - коллекция содержит данные и оформление всех строк,
//							получаемых в списке, кроме строк группировок.
//	ИмяКлючевогоПоля	- Строка - "Ссылка" или заданное имя колонки, содержащей ссылку на субъект.
//
Процедура СписокСубъектовПриПолученииДанныхНаСервере(Настройки, Строки, ИмяКлючевогоПоля = "Ссылка") Экспорт
	
	Перем ТекущаяДата;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСкрытиеПерсональныхДанныхКандидатов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Настройки.ДополнительныеСвойства.Свойство("ТекущаяДата", ТекущаяДата) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДнейДоСкрытия = Константы.ДнейДоСкрытияПерсональныхДанныхСубъектов.Получить();
	
	Субъекты = Новый Массив;
	СубъектыПоКлючу = Новый Соответствие;
	СтрокиСубъектов = Новый Соответствие;
	
	СубъектыПоКлючу = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Строки.ПолучитьКлючи(), ИмяКлючевогоПоля);
	
	Для Каждого Строка Из Строки Цикл
		
		Если ИмяКлючевогоПоля = "Ссылка" Тогда
			Субъект = Строка.Ключ;
		Иначе
			Субъект = СубъектыПоКлючу.Получить(Строка.Ключ);
		КонецЕсли;
		
		Субъекты.Добавить(Субъект);
		СтрокиСубъектов.Вставить(Субъект, Строка);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСубъектыДляСкрытияПерсональныхДанных(Истина) + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Субъекты.Субъект КАК Субъект
	|ИЗ
	|	ВТСубъектыДляСкрытия КАК Субъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПДн
	|		ПО СубъектыДляСкрытияПДн.Субъект = Субъекты.Субъект
	|ГДЕ
	|	Субъекты.Субъект В(&Субъекты)
	|	И СубъектыДляСкрытияПДн.Субъект ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СубъектыДляСкрытияПДн.Субъект
	|ИЗ
	|	РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПДн
	|ГДЕ
	|	СубъектыДляСкрытияПДн.Субъект В(&Субъекты)
	|	И СубъектыДляСкрытияПДн.ДатаСкрытия > &ПустаяДата
	|	И СубъектыДляСкрытияПДн.ДатаСкрытия <= &РасчетнаяДата
	|	И СубъектыДляСкрытияПДн.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСубъектовДляСкрытия.ГотовКСкрытию)";
	
	Запрос.УстановитьПараметр("Субъекты", Субъекты);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("РасчетнаяДата", ТекущаяДата + ДнейДоСкрытия * 86400);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаСписка = СтрокиСубъектов.Получить(Выборка.Субъект).Значение;
		СтрокаСписка.Данные["ОтсутствуетСогласие"] = 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ФизическиеЛицаФормаЭлементаПриСозданииНаСервере(Форма, ГруппаКоманд) Экспорт

	Если Не ИспользоватьКандидатов() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКомандуДобавленияНовогоКандидата(Форма, ГруппаКоманд);	
	
КонецПроцедуры

Процедура ПриНастройкеОтбораИсторииВзаимоотношенийФизическогоЛица(Форма, ПереключательОтбора) Экспорт 

	Если Не ИспользоватьКандидатов() Тогда
		Возврат;
	КонецЕсли;

	ПереключательОтбора.СписокВыбора.Добавить(3, НСтр("ru = 'Кандидаты'"));

КонецПроцедуры

// Добавляет команды в подменю "Оформить документ" для справочника "Сотрудники".
// См. СотрудникиФормыРасширенный.ОписаниеМенюВводаНаОсновании.
// 
// Параметры:
// 	ОписаниеМеню
//
Процедура ДобавитьПодменюПодбораПерсонала(ОписаниеМеню) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.Вакансии) Тогда
		Возврат;
	КонецЕсли;
	
	ПунктыМеню = Новый Массив;
	ПунктыМеню.Добавить("Справочники.Вакансии");

	Представления = Новый Соответствие;
	Представления.Вставить("Справочники.Вакансии", НСтр("ru = 'Открыть вакансию'"));

	РазделМеню = СотрудникиФормы.РазделМеню(НСтр("ru = 'Подбор персонала'"), ПунктыМеню, , Представления); 

	ОписаниеМеню.Пункты.Добавить(РазделМеню);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереФормыСотрудника(Форма, ФизическоеЛицо, Позиция) Экспорт

	Если Не ИспользоватьКандидатов() Тогда
		Возврат;
	КонецЕсли;
	
	Кандидат = ПодборПерсонала.КандидатСотрудника(ФизическоеЛицо, Позиция);
	
	Если Кандидат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГиперссылкаКандидата = Форма.Элементы.Добавить("Кнопка", Тип("КнопкаФормы"), Форма.Элементы.ГруппаПодборПерсонала);
	ГиперссылкаКандидата.Вид = ВидКнопкиФормы.Гиперссылка;
	
	Команда = Форма.Команды.Добавить("ОткрытьКандидатаСотрудника");
	Команда.Заголовок = НСтр("ru = 'Открыть кандидата сотрудника'");
	Команда.Подсказка = НСтр("ru = 'Перейти к кандидату'");
	Команда.Действие = "Подключаемый_ОткрытьКандидатаСотрудника";
	
	ГиперссылкаКандидата.ИмяКоманды = "ОткрытьКандидатаСотрудника";
	ГиперссылкаКандидата.Заголовок = НСтр("ru = 'О кандидате'");
	
	КандидатРеквизитФормы = Новый РеквизитФормы("КандидатСсылка", Новый ОписаниеТипов("СправочникСсылка.Кандидаты"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(КандидатРеквизитФормы);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Форма.КандидатСсылка = Кандидат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("ИспользоватьПодборПерсонала", Форма.ИспользоватьПодборПерсонала);
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("ИспользоватьПодборПерсонала") Тогда
		Форма["ИспользоватьПодборПерсонала"] = СохраненныеНастройки["ИспользоватьПодборПерсонала"];
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьПодборПерсонала = Константы.ИспользоватьПодборПерсонала.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

Функция СтатусСогласияНаОбработкуПДнСубъекта(Субъект)
	
	СтатусСогласия = Новый Структура("Требуется,Описание", Ложь);
	
	НастройкиСубъектов = ЗащитаПерсональныхДанных.ПрочитатьНастройкиСкрытияСубъектов(Субъект);
	НастройкиСубъекта = НастройкиСубъектов.Получить(Субъект);
	
	Если ЗначениеЗаполнено(НастройкиСубъекта) Тогда
		
		Если НастройкиСубъекта.Состояние = Перечисления.СостоянияСубъектовДляСкрытия.ГотовКСкрытию Тогда
			
			Если Не ЗначениеЗаполнено(НастройкиСубъекта.ДатаСкрытия) Тогда
				СтатусСогласия.Описание = ТекстСообщенияБессрочногоСогласия(НастройкиСубъекта.Основание);
			ИначеЕсли ЗначениеЗаполнено(НастройкиСубъекта.Основание) Тогда
				
				Если ТипЗнч(НастройкиСубъекта.Основание) = Тип("ДокументСсылка.СогласиеНаОбработкуПерсональныхДанных") Тогда
					СтатусСогласия.Описание = ТекстСообщенияДействующегоСогласия(НастройкиСубъекта.Основание);
				Иначе
					СтатусСогласия.Описание = ТекстСообщенияОтзываемогоСогласия(НастройкиСубъекта.Основание);
					СтатусСогласия.Требуется = Истина;
				КонецЕсли;
				
			Иначе
				СтатусСогласия.Описание = ТекстСообщенияОтсутствующегоСогласия();
				СтатусСогласия.Требуется = Истина;
			КонецЕсли;
			
		ИначеЕсли НастройкиСубъекта.Состояние = Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеВыполнено Тогда
			СтатусСогласия.Описание = ТекстСообщенияСкрытогоСубъекта(НастройкиСубъекта.ДатаСкрытия);
		КонецЕсли;
		
	Иначе
		
		СтатусСогласия.Описание = ТекстСообщенияОтсутствующегоСогласия();
		СтатусСогласия.Требуется = Истина;
		
	КонецЕсли;
	
	Возврат СтатусСогласия;
	
КонецФункции

Функция ГиперСсылкаСогласие(Согласие)
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'согласие на обработку ПДн'"), , , , ПолучитьНавигационнуюСсылку(Согласие));
	
КонецФункции

Функция ГиперСсылкаОтзывСогласия(ОтзывСогласия)
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'отзывается'"), , , , ПолучитьНавигационнуюСсылку(ОтзывСогласия));
	
КонецФункции

Функция ГиперСсылкаУничтожениеПДн()
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'уничтожить персональные данные'"), , , , "УничтожениеПДн");
	
КонецФункции

Функция ГиперСсылкаНовоеСогласие()
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'ввести новое согласие'"), , , , "НовоеСогласие");
	
КонецФункции

Процедура ДобавитьЧастиУничтоженияПНдВводаСогласия(ЧастиСообщения)
	
	ЧастиСообщения.Добавить(ГиперСсылкаУничтожениеПДн());
	ЧастиСообщения.Добавить(" " + НСтр("ru='или'") + " ");
	ЧастиСообщения.Добавить(ГиперСсылкаНовоеСогласие());
	ЧастиСообщения.Добавить(НСтр("ru='.'"));
	
КонецПроцедуры

Функция ТекстСообщенияДействующегоСогласия(Согласие)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Согласие, "ДатаПолучения,СрокДействия");
	
	ДатаПолучения = ЗначенияРеквизитов.ДатаПолучения;
	СрокДействия = ЗначенияРеквизитов.СрокДействия;
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru='У субъекта %1 было получено'"), Формат(ДатаПолучения, "ДЛФ=D")) + " ");
	ЧастиСообщения.Добавить(ГиперСсылкаСогласие(Согласие));
	
	Если СрокДействия > ТекущаяДатаСеанса() Тогда
		ЧастиСообщения.Добавить(" " + СтрШаблон(НСтр("ru=', которое действует до %1.'"), Формат(СрокДействия, "ДЛФ=D")));
	Иначе
		
		ЧастиСообщения.Добавить(" " + СтрШаблон(НСтр("ru=', которое действовало до %1. Можно'") + " ", Формат(СрокДействия, "ДЛФ=D")));
		ДобавитьЧастиУничтоженияПНдВводаСогласия(ЧастиСообщения);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

Функция ТекстСообщенияБессрочногоСогласия(Согласие)
	
	ДатаПолучения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Согласие, "ДатаПолучения");
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru='У субъекта %1 было получено'"), Формат(ДатаПолучения, "ДЛФ=D")) + " ");
	ЧастиСообщения.Добавить(ГиперСсылкаСогласие(Согласие));
	ЧастиСообщения.Добавить(" " + НСтр("ru=', которое действует бессрочно.'"));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

Функция ТекстСообщенияОтсутствующегоСогласия()
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(НСтр("ru='У субъекта не было получено согласие на обработку ПДн. Можно'") + " ");
	
	ДобавитьЧастиУничтоженияПНдВводаСогласия(ЧастиСообщения);
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

Функция ТекстСообщенияОтзываемогоСогласия(ОтзывСогласия)
	
	ДатаОтзыва = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтзывСогласия, "ДатаОтзыва");
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(НСтр("ru='Согласие на обработку ПДн'") + " ");
	ЧастиСообщения.Добавить(ГиперСсылкаОтзывСогласия(ОтзывСогласия));
	ЧастиСообщения.Добавить(" " + СтрШаблон(НСтр("ru='%1. Можно'"), Формат(ДатаОтзыва, "ДЛФ=D")) + " ");
	
	ДобавитьЧастиУничтоженияПНдВводаСогласия(ЧастиСообщения);
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

Функция ТекстСообщенияСкрытогоСубъекта(ДатаСкрытия)
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru='Персональные данные субъекта уничтожены %1.'"), Формат(ДатаСкрытия, "ДЛФ=D")) + " ");
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru='Истек срок согласия на обработку ПДн или согласие не было получено.'")));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

Функция ТекстЗапросаСубъектыДляСкрытияПерсональныхДанных(ВоВременнуюТаблицу = Ложь)
	
	ТекстЗапроса = "";
	ОсновнаяТаблица = Истина;
	МетаданныеПоТипамСубъекта = ЗащитаПерсональныхДанныхПовтИсп.МетаданныеПоТипамСубъекта();
	
	Для Каждого ТипСубъектаИМетаданные Из МетаданныеПоТипамСубъекта Цикл
		
		МетаданныеСубъекта = ТипСубъектаИМетаданные.Значение;
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),"", " ОБЪЕДИНИТЬ ВСЕ") + "
		|
		|ВЫБРАТЬ
		|	СправочникСубъекта.Ссылка КАК Субъект
		|[ПомещениеВоВременнуюТаблицу]
		|ИЗ
		|	Справочник." + МетаданныеСубъекта.Имя + " КАК СправочникСубъекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПерсональныхДанных 
		|		ПО СправочникСубъекта.Ссылка = СубъектыДляСкрытияПерсональныхДанных.Субъект
		|ГДЕ
		|	СубъектыДляСкрытияПерсональныхДанных.Субъект ЕСТЬ NULL";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПомещениеВоВременнуюТаблицу]",
			?(ВоВременнуюТаблицу И ОсновнаяТаблица, "ПОМЕСТИТЬ ВТСубъектыДляСкрытия", ""));
		
		ОсновнаяТаблица = Ложь;
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура УстановитьВидимостьЭлементаФормы(Элемент) Экспорт
	
	ИнтеграцияРекрутинговыхСайтов.УстановитьВидимостьЭлементаФормы(Элемент);
	
КонецПроцедуры

Функция СостояниеКандидатаЭтапСсылкаПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки) Экспорт

	СтрокаИдентификатора = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Этап_", "");
	Если СтрокаИдентификатора = "ПустаяСсылка" Тогда
		Возврат Справочники.ЭтапыРаботыСКандидатами.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Справочники.ЭтапыРаботыСКандидатами.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификатора));
	
КонецФункции

Процедура СоздатьКомандуДобавленияНовогоКандидата(Форма, ГруппаКоманд)

	Гиперссылка = Форма.Элементы.Добавить("Кнопка", Тип("КнопкаФормы"), ГруппаКоманд);
	Гиперссылка.Вид = ВидКнопкиФормы.Гиперссылка;
	
	Команда = Форма.Команды.Добавить(ПодборПерсоналаКлиентСервер.ИмяКомандыНовыйКандидатВФормеФизическиеЛица());
	Команда.Заголовок = НСтр("ru = 'Новый кандидат'");
	Команда.Подсказка = НСтр("ru = 'Зарегистрировать обращение этого человека на вакансию'");
	Команда.Действие = "Подключаемый_ПодборПерсонала";
	
	Гиперссылка.ИмяКоманды = "НовыйКандидат";
	Гиперссылка.Заголовок = НСтр("ru = 'Новый кандидат'");
	
КонецПроцедуры		

Функция ИспользоватьКандидатов()
	Возврат Справочники.Кандидаты.ИспользоватьКандидатов();
КонецФункции

#КонецОбласти