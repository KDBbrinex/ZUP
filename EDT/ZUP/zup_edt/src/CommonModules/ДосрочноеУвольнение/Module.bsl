
#Область СлужебныеПроцедурыИФункции

Процедура УвольнениеДополнитьФорму(Форма, ОтложенноеИзменение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтложенноеИзменение Тогда
		ДобавлятьЭлементыФормы = Ложь;
		ДобавлятьРеквизитыФормы = Истина;
	Иначе
		ДобавлятьЭлементыФормы = Истина;
		ДобавлятьРеквизитыФормы = Ложь;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя", Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РассчитатьДнейЧасовКомпенсацииЗаНеотработанноеВремя", Новый ОписаниеТипов("Булево")));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		КомпенсацияПриУвольненииГруппа = Форма.Элементы.Найти("КомпенсацияПриУвольненииГруппа");
		
		ИмяЭлементаВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = "ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении";
		ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = Форма.Элементы.Найти(ИмяЭлементаВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении);
		Если ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = Неопределено Тогда
			
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = Форма.Элементы.Добавить(
				ИмяЭлементаВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппа);
			
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.ПутьКДанным = "Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении";
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольненииПриИзменении");
			
		КонецЕсли;
		
		ИмяЭлементаКомпенсацияПриУвольненииГруппаГоризонтальная = "КомпенсацияПриУвольненииГруппаГоризонтальная";
		КомпенсацияПриУвольненииГруппаГоризонтальная = Форма.Элементы.Найти(ИмяЭлементаКомпенсацияПриУвольненииГруппаГоризонтальная);
		Если КомпенсацияПриУвольненииГруппаГоризонтальная = Неопределено Тогда
			
			КомпенсацияПриУвольненииГруппаГоризонтальная = Форма.Элементы.Добавить(
				ИмяЭлементаКомпенсацияПриУвольненииГруппаГоризонтальная, Тип("ГруппаФормы"), КомпенсацияПриУвольненииГруппа);
			
			КомпенсацияПриУвольненииГруппаГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			КомпенсацияПриУвольненииГруппаГоризонтальная.ОтображатьЗаголовок = Ложь;
			КомпенсацияПриУвольненииГруппаГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
			ИмяЭлементаДатаУведомленияОбУвольнении = "ДатаУведомленияОбУвольнении";
			ДатаУведомленияОбУвольнении = Форма.Элементы.Добавить(ИмяЭлементаДатаУведомленияОбУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			ДатаУведомленияОбУвольнении.Вид = ВидПоляФормы.ПолеВвода;
			ДатаУведомленияОбУвольнении.Заголовок = НСтр("ru='Дата уведомления'");
			ДатаУведомленияОбУвольнении.ПутьКДанным = "Объект.ДатаУведомленияОбУвольнении";
			ДатаУведомленияОбУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_ДатаУведомленияОбУвольнении");
			
			ИмяЭлементаДатаУведомленияОбУвольнении = "КоличествоДнейЧасовКомпенсацииПриУвольнении";
			КоличествоДнейЧасовКомпенсацииПриУвольнении = Форма.Элементы.Добавить(ИмяЭлементаДатаУведомленияОбУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			КоличествоДнейЧасовКомпенсацииПриУвольнении.Вид = ВидПоляФормы.ПолеВвода;
			КоличествоДнейЧасовКомпенсацииПриУвольнении.КнопкаРегулирования = Истина;
			КоличествоДнейЧасовКомпенсацииПриУвольнении.Заголовок = НСтр("ru='Компенсировать'");
			КоличествоДнейЧасовКомпенсацииПриУвольнении.ПутьКДанным = "Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении";
			КоличествоДнейЧасовКомпенсацииПриУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_КоличествоДнейЧасовКомпенсацииПриУвольнении");
			
			ИмяЭлементаНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = "НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя";
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = Форма.Элементы.Добавить(ИмяЭлементаНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.Вид = ВидПоляФормы.ПолеНадписи;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.Ширина = 4;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.РастягиватьПоГоризонтали = Ложь;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.РастягиватьПоВертикали = Ложь;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.ПутьКДанным = "НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя";
			
			ИмяЭлементаКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = "КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении";
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = Форма.Элементы.Добавить(ИмяЭлементаКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.Вид = ВидПоляФормы.ПолеВвода;
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.ПутьКДанным = "Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении";
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеЗавершитьИнициализациюФормы(Форма, НовыйДокумент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ДосрочноеУвольнениеКлиентСервер.УвольнениеУстановитьВидимостьПолейВводаКомпенсацииНеотработанныхДней(Форма);
	УвольнениеУстановитьНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя(Форма);
	
КонецПроцедуры

Процедура УвольнениеОбновитьФормуПоВидуДоговора(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрВыбораКомпенсацииЗаНеотработанныеДниЧасы =
		Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении);
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу");
	Если ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			ЭтоГосслужащий = МодульГосударственнаяСлужба.ВидДоговораГосударственнойСлужбы(Форма, Форма.ВидДоговора);
		Иначе
			ЭтоГосслужащий = Ложь;
		КонецЕсли;
		
		Если ЭтоГосслужащий Тогда
			ПараметрВыбораКомпенсацииЗаНеотработанныеДниЧасы = Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего); 
		КонецЕсли;
		
		ЭлементКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = Элементы.Найти("КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
		Если ЭлементКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении <> Неопределено Тогда
			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(ПараметрВыбораКомпенсацииЗаНеотработанныеДниЧасы);
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВАрхиве", Ложь));
			
			ЭлементКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.ПараметрыВыбора =
				Новый ФиксированныйМассив(МассивПараметровВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеПроверкаЗаполненияПриРасчете(Форма, Отказ, ВыводитьСообщения, ОграниченияНаУровнеЗаписей) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаУведомленияОбУвольнении) Тогда
			
			Отказ = Истина;
			Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена дата уведомления об увольнении'"),,"Объект.ДатаУведомленияОбУвольнении");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении) Тогда
			
			Отказ = Истина;
			Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не указан вид расчета компенсации за неотработанные дни'"), , "Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеЗаполнитьНачислениеКомпенсацииЗаНеотработанноеВремя(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Если Не ЗначениеЗаполнено(Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении) Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
				МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
				ЭтоГосслужащий = МодульГосударственнаяСлужба.ВидДоговораГосударственнойСлужбы(Форма, Форма.ВидДоговора);
			Иначе
				ЭтоГосслужащий = Ложь;
			КонецЕсли;
			
			Если ЭтоГосслужащий Тогда
				КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего;
			Иначе
				КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении;
			КонецЕсли;
			
			Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорияНачисления);
			Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоДнейЧасовКомпенсацииПриУвольнении(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		МесяцДатыУведомления = НачалоМесяца(Объект.ДатаУведомленияОбУвольнении);
		ПоложеннаяДатаУвольнения = ДобавитьМесяц(КонецДня(Объект.ДатаУведомленияОбУвольнении) + 1, 2);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
			Запрос.МенеджерВременныхТаблиц, МесяцДатыУведомления, ПоложеннаяДатаУвольнения);
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
		Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
		
		Запрос.УстановитьПараметр("ПоложеннаяДатаУвольнения", ПоложеннаяДатаУвольнения);
		
		Запрос.УстановитьПараметр("ДатаУведомления", Объект.ДатаУведомленияОбУвольнении);
		Запрос.УстановитьПараметр("ДатаУвольнения", Объект.ДатаУвольнения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Периоды.Период КАК Месяц,
			|	ВЫБОР
			|		КОГДА Периоды.Период < &ДатаУведомления
			|			ТОГДА &ДатаУведомления
			|		ИНАЧЕ Периоды.Период
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) > &ПоложеннаяДатаУвольнения
			|			ТОГДА &ПоложеннаяДатаУвольнения
			|		ИНАЧЕ КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
			|	КОНЕЦ КАК ДатаОкончания,
			|	&ПериодРегистрации КАК ДатаАктуальности
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	ВТПериоды КАК Периоды";
		
		Запрос.Выполнить();
		
		ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
		
		ПараметрыПолученияДанных.НеУчитываемыеРегистраторы.Добавить(Форма.СсылкаНаОбъект);
		Если ЗначениеЗаполнено(Форма.СсылкаНаИсправленныйДокумент) Тогда
			ПараметрыПолученияДанных.НеУчитываемыеРегистраторы.Добавить(Форма.СсылкаНаИсправленныйДокумент);
		КонецЕсли;
		
		УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
		
		Запрос.УстановитьПараметр("ВидыРабочегоВремени", УчетРабочегоВремениРасширенный.ВидыВремениВключаемыеВНорму());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановоеВремя.Дата КАК Дата,
			|	МАКСИМУМ(ПлановоеВремя.ДниПлан) КАК ДниПлан,
			|	СУММА(ПлановоеВремя.ЧасыПлан) КАК ЧасыПлан
			|ПОМЕСТИТЬ ВТРабочиеДни
			|ИЗ
			|	ВТПлановоеВремя КАК ПлановоеВремя
			|ГДЕ
			|	ПлановоеВремя.ВидУчетаВремени В(&ВидыРабочегоВремени)
			|	И ПлановоеВремя.Дата > &ДатаУвольнения
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановоеВремя.Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(РабочиеДни.ДниПлан) КАК ДниПлан,
			|	СУММА(РабочиеДни.ЧасыПлан) КАК ЧасыПлан
			|ИЗ
			|	ВТРабочиеДни КАК РабочиеДни";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Форма.ИспользуетсяСреднечасовойЗаработок Тогда
				Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении = Выборка.ЧасыПлан;
			Иначе
				Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении = Выборка.ДниПлан;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.РассчитатьДнейЧасовКомпенсацииЗаНеотработанноеВремя = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеЗаполнитьКомпенсациюЗаНеотработанноеВремя(Форма, ТаблицаНачислений, МенеджерРасчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Если Форма.РассчитатьДнейЧасовКомпенсацииЗаНеотработанноеВремя Тогда
			ЗаполнитьКоличествоДнейЧасовКомпенсацииПриУвольнении(Форма);
		КонецЕсли;
		
		Если Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении > 0 Тогда
			
			ДатаКомпенсации = НачалоДня(Объект.ДатаУвольнения);
			Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
				ДатаКомпенсации = НачалоДня(Объект.ПериодРегистрации);
			КонецЕсли;
			
			НовыйИнтервал = ТаблицаНачислений.Добавить();
			НовыйИнтервал.Сотрудник = Объект.Сотрудник;
			НовыйИнтервал.Начисление = Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении;
			НовыйИнтервал.ДатаНачала = ДатаКомпенсации;
			НовыйИнтервал.ДатаОкончания	= ДатаКомпенсации;
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
				МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
				ЭтоГосслужащий = МодульГосударственнаяСлужба.ВидДоговораГосударственнойСлужбы(Форма, Форма.ВидДоговора);
			Иначе
				ЭтоГосслужащий = Ложь;
			КонецЕсли;
			
			Если ЭтоГосслужащий Тогда
				
				ПоказательВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейКомпенсацииЗаНеотработанноеВремяПриУвольнении");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательВремени, Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении);
				
				ПоказательМесячноеДенежноеСодержание = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МесячноеДенежноеСодержание");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательМесячноеДенежноеСодержание, Объект.МесячноеДенежноеСодержание);
				
			Иначе
				
				ПоказательВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовКомпенсацииЗаНеотработанноеВремяПриУвольнении");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательВремени, Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении);
				
				ПоказательСреднийЗаработок = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательСреднийЗаработок, Объект.СреднийЗаработокВыходногоПособия);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеУстановитьНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ИспользуетсяСреднечасовойЗаработок Тогда
		Форма.НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = НСтр("ru='дн.'");
	Иначе
		Форма.НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = НСтр("ru='час.'");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаПроверкиЗаполнения

Процедура УвольнениеОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, ПраваНаДокумент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		
		Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДатаУведомленияОбУвольнении");
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаУведомленияОбУвольнении");
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	УвольнениеПроверитьЗаполнениеКомпенсацийДнейЧасовПриУвольнении(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент);
	
КонецПроцедуры

Процедура УвольнениеПроверитьЗаполнениеКомпенсацийДнейЧасовПриУвольнении(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДатаУведомленияОбУвольнении");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
		
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
		
		ТекстСообщенияДатаУведомленияОбУвольнении = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""'");
		ПутьКПолюДатаУведомленияОбУвольнении = "Объект.Сотрудники[%1].ДатаУведомленияОбУвольнении";
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаУведомленияОбУвольнении");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
		
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
		
		ТекстСообщенияДатаУведомленияОбУвольнении = НСтр("ru='Поле ""%1"" не заполнено'");
		ПутьКПолюДатаУведомленияОбУвольнении = "Объект.ДатаУведомленияОбУвольнении";
		
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.Увольнение;
	СинонимДатаУведомленияОбУвольнении = МетаданныеДокумента.Реквизиты.ДатаУведомленияОбУвольнении.Синоним;
	СинонимКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = МетаданныеДокумента.Реквизиты.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.Синоним;
	
	Для ИндексЭлементаКоллекции = 0 По ПроверяемаяКоллекция.Количество() - 1 Цикл
		
		ЭлементКоллекции = ПроверяемаяКоллекция[ИндексЭлементаКоллекции];
		Если ЭлементКоллекции.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции.ДатаУведомленияОбУвольнении) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияДатаУведомленияОбУвольнении,
					СинонимДатаУведомленияОбУвольнении,
					ЭлементКоллекции.Сотрудник);
				
				ПутьКПолю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияДатаУведомленияОбУвольнении, ИндексЭлементаКоллекции);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
			Если ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
				И Не ЗначениеЗаполнено(ЭлементКоллекции.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияДатаУведомленияОбУвольнении,
					СинонимКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении,
					ЭлементКоллекции.Сотрудник);
				
				ПутьКПолю = СтрШаблон(ТекстСообщенияДатаУведомленияОбУвольнении, ИндексЭлементаКоллекции);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.8.45",
		"Подсистема.ЗарплатаКадрыКорпоративнаяПодсистемы.Подсистема.КадровыйУчетКорпоративная",
		"Подсистема.ЗарплатаКадрыКорпоративнаяПодсистемы.Подсистема.КадровыйУчет",
		"ЗарплатаКадрыРасширенная");
	
КонецПроцедуры

#КонецОбласти

