
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "СотрудникСсылка");
	
	СотрудникиФормы.ПрочитатьДанныеИзХранилищаВФорму(
		ЭтаФорма,
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы),
		Параметры.АдресВХранилище);
	
	ПроинициализироватьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИнструктажПоОхранеТруда" И Параметр.Свойство("ВладелецФормы") И Параметр.ВладелецФормы = ЭтаФорма Тогда
		ПроинициализироватьФорму();
	КонецЕсли;
	
	ОбработатьОповещениеМедицинскихОсмотров(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработатьНавигационнуюСсылкуНаправлениеНаМедицинскийОсмотрСоздать(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструктажиПоОхранеТруда

&НаКлиенте
Процедура ИнструктажиПоОхранеТрудаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ИнструктажиПоОхранеТрудаДействие" Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация", Организация);
		ЗначенияЗаполнения.Вставить("ВидИнструктажа", ТекущиеДанные.Инструктаж);
		ЗначенияЗаполнения.Вставить("ДатаПроведения", ОбщегоНазначенияКлиент.ДатаСеанса());
		ЗначенияЗаполнения.Вставить("СписокСотрудников", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникСсылка));
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.ИнструктажПоОхранеТруда.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Регистратор) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатыСпециальнойОценкиУсловийТруда

&НаКлиенте
Процедура РезультатыСпециальнойОценкиУсловийТрудаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "РезультатыСпециальнойОценкиУсловийТрудаСрокДействия" И ЗначениеЗаполнено(ТекущиеДанные.РегистраторСрокДействия) Тогда
		ПоказатьЗначение(,ТекущиеДанные.РегистраторСрокДействия);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Регистратор) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМедицинскиеОсмотры

&НаКлиенте
Процедура ВредныеФакторыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВредныеФакторы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.Регистратор) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.Регистратор) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояниеМедицинскихОсмотров(Команда)
	НачатьОбновлениеПериодическихОсмотров(Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроинициализироватьФорму()
	
	ЭтаФорма.Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникСсылка, "Наименование");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", СотрудникСсылка);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Сотрудник КАК Сотрудник,
		|	&ДатаАктуальности КАК Период
		|ПОМЕСТИТЬ ВТСотрудники";
	Запрос.Выполнить();
	
	ОписательВТКадровыеДанные = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТКадровыеДанные, Истина, "ФизическоеЛицо, Организация, ДолжностьПоШтатномуРасписанию");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.Организация
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическоеЛицо = Выборка.ФизическоеЛицо;
		Организация = Выборка.Организация;
		РабочееМесто = Выборка.ДолжностьПоШтатномуРасписанию;
	КонецЦикла;
	
	ЗаполнитьСпециальнуюОценкуУсловийТруда();
	
	ЗаполнитьИнструктажи();
	
	ИнициализироватьМедицинскиеОсмотры();
	
КонецПроцедуры

#Область СпециальнаяОценкаУсловийТруда

&НаСервере
Процедура ЗаполнитьСпециальнуюОценкуУсловийТруда()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСпециальнуюОценкуУсловийТруда") Тогда
		Элементы.ГруппаСпецоценка.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РезультатыСпециальнойОценкиУсловийТруда.РабочееМесто КАК РабочееМесто,
		|	РезультатыСпециальнойОценкиУсловийТруда.КлассУсловийТруда КАК КлассУсловийТруда,
		|	РезультатыСпециальнойОценкиУсловийТруда.Период КАК ДатаПроведения,
		|	РезультатыСпециальнойОценкиУсловийТруда.Регистратор КАК Регистратор,
		|	ПлановыеДатыСпециальнойОценкиУсловийТруда.ДатаБлижайшейОценки КАК СрокДействия,
		|	ПлановыеДатыСпециальнойОценкиУсловийТруда.Регистратор КАК РегистраторСрокДействия
		|ИЗ
		|	РегистрСведений.РезультатыСпециальнойОценкиУсловийТруда.СрезПоследних(&ДатаАктуальности, РабочееМесто = &РабочееМесто) КАК РезультатыСпециальнойОценкиУсловийТруда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеДатыСпециальнойОценкиУсловийТруда.СрезПоследних(&ДатаАктуальности, РабочееМесто = &РабочееМесто) КАК ПлановыеДатыСпециальнойОценкиУсловийТруда
		|		ПО РезультатыСпециальнойОценкиУсловийТруда.РабочееМесто = ПлановыеДатыСпециальнойОценкиУсловийТруда.РабочееМесто";
	
	РезультатыСпециальнойОценкиУсловийТруда.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РезультатыСпециальнойОценкиУсловийТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инструктажи

&НаСервере
Процедура ЗаполнитьИнструктажи()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнструктажиПоОхранеТруда") Тогда
		Элементы.ГруппаИнструктажиПоОхранеТруда.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", СотрудникСсылка);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОформитьЗаголовокКоманды", НСтр("ru = 'Оформить'"));
	Запрос.УстановитьПараметр("ПродлитьЗаголовокКоманды", НСтр("ru = 'Продлить'"));
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыИнструктажейПоОхранеТруда.Ссылка КАК Инструктаж,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ВидыИнструктажейПоОхранеТруда.КонтролироватьПроведениеИнструктажа
		|				ТОГДА ИСТИНА
		|			КОГДА ВидыИнструктажейПоОхранеТруда.ИспользоватьДляВсехРабочихМест
		|					ИЛИ ВидыИнструктажейПоОхранеТрудаРабочиеМеста.РабочееМесто = &РабочееМесто
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК Используется
		|ПОМЕСТИТЬ ВТВсеИнструктажи
		|ИЗ
		|	Справочник.ВидыИнструктажейПоОхранеТруда КАК ВидыИнструктажейПоОхранеТруда
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИнструктажейПоОхранеТруда.РабочиеМеста КАК ВидыИнструктажейПоОхранеТрудаРабочиеМеста
		|		ПО ВидыИнструктажейПоОхранеТруда.Ссылка = ВидыИнструктажейПоОхранеТрудаРабочиеМеста.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыИнструктажейПоОхранеТруда.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеИнструктажи.Инструктаж КАК Инструктаж,
		|	ИнструктажиПоОхранеТруда.Период КАК ДатаПолучения,
		|	ИнструктажиПоОхранеТруда.Регистратор КАК Регистратор,
		|	ИнструктажиПоОхранеТруда.СрокДействия КАК СрокДействия,
		|	ВЫБОР
		|		КОГДА ИнструктажиПоОхранеТруда.ВидИнструктажа = ЗНАЧЕНИЕ(Справочник.ВидыИнструктажейПоОхранеТруда.Вводный)
		|			ТОГДА """"
		|		КОГДА ИнструктажиПоОхранеТруда.ВидИнструктажа ЕСТЬ NULL
		|			ТОГДА &ОформитьЗаголовокКоманды
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВидыИнструктажейПоОхранеТруда.ПроводитсяПовторно
		|					ТОГДА &ПродлитьЗаголовокКоманды
		|				ИНАЧЕ &ОформитьЗаголовокКоманды
		|			КОНЕЦ
		|	КОНЕЦ КАК Действие
		|ИЗ
		|	ВТВсеИнструктажи КАК ВсеИнструктажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИнструктажейПоОхранеТруда КАК ВидыИнструктажейПоОхранеТруда
		|		ПО ВсеИнструктажи.Инструктаж = ВидыИнструктажейПоОхранеТруда.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнструктажиПоОхранеТруда.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК ИнструктажиПоОхранеТруда
		|		ПО ВсеИнструктажи.Инструктаж = ИнструктажиПоОхранеТруда.ВидИнструктажа
		|ГДЕ
		|	ВсеИнструктажи.Используется";
	
	ИнструктажиПоОхранеТруда.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ИнструктажиПоОхранеТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МедицинскиеОсмотры

&НаКлиенте
Процедура ОбработатьОповещениеМедицинскихОсмотров(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаправлениеНаМедицинскийОсмотр" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Свойство("ФизическоеЛицо") И Параметр["ФизическоеЛицо"] = ФизическоеЛицо Тогда
				ДанныеСостояния = ДанныеСостояния(ФизическоеЛицо, РабочееМесто); 
				ЗаполнитьСостояниеМедицинскогоОсмотра(ЭтаФорма, ДанныеСостояния, НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЗаключениеМедицинскогоОсмотра" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Свойство("ФизическоеЛицо") И Параметр["ФизическоеЛицо"] = ФизическоеЛицо Тогда
				НачатьОбновлениеПериодическихОсмотров();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПозицияШтатногоРасписания" И Параметр = РабочееМесто Тогда
		НачатьОбновлениеПериодическихОсмотров();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМедицинскиеОсмотры()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМедицинскиеОсмотры") Тогда
		Элементы.ГруппаМедицинскиеОсмотры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МедицинскиеОсмотры) Тогда
		Элементы.ГруппаМедицинскиеОсмотры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДобавитьУсловноеОформлениеМедицинскихОсмотров();
	
	СостояниеМедосмотраКритичноеЦветТекста = ЦветаСтиля.СостояниеМедосмотраКритичноеЦветТекста;	
	
	ЗаполнитьМедицинскиеОсмотры();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеМедицинскихОсмотров()
	
	Сегодня = НачалоДня(ТекущаяДатаСеанса());
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("ВредныеФакторы");
	ИменаТаблиц.Добавить("ВидыРабот");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		// Осмотр фактора не требуется:
		// - серым цветом текст,
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяТаблицы + ".Требуется", Ложь);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
		// - подпись "Не требуется" в поле "Следующий осмотр".
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяТаблицы + ".Требуется", Ложь);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "СледующийОсмотр");
		// Благоприятное состояние.
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяТаблицы + ".Требуется", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяТаблицы + ".СледующийОсмотр", ДобавитьМесяц(Сегодня, 1), ВидСравненияКомпоновкиДанных.Больше);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СостояниеМедосмотраБлагоприятноеЦветТекста);
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Состояние");
		// Состояние критичное.
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяТаблицы + ".Требуется", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяТаблицы + ".СледующийОсмотр", ДобавитьМесяц(Сегодня, 1), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СостояниеМедосмотраКритичноеЦветТекста);
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "");
		// Подпись последнего осмотра "Не проводился".
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяТаблицы + ".ПоследнийОсмотр", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не проводился'"));
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПоследнийОсмотр");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСостояниеМедицинскогоОсмотра(Форма, ДанныеСостояния, Сегодня)
	
	ЗаполнитьИнформациюПоследнегоОсмотра(Форма, ДанныеСостояния, Сегодня);
	ЗаполнитьИнформациюСледующегоОсмотра(Форма, ДанныеСостояния, Сегодня);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСостояния(ФизическоеЛицо, Позиция)
	
	ДанныеСостояния = Новый Структура(
		"ПоследнийОсмотр,
		|Периодичность,
		|СледующийОсмотр,
		|ВыданноеНаправление");
	
	ДанныеСостояния.ПоследнийОсмотр = МедицинскиеОсмотры.ПоследнийОсмотр(ФизическоеЛицо, Позиция);
	ДанныеСостояния.Периодичность = МедицинскиеОсмотры.ПериодичностьМедицинскихОсмотров(Позиция);
	ДанныеСостояния.СледующийОсмотр = МедицинскиеОсмотры.СледующийОсмотр(ФизическоеЛицо, Позиция);
	ДанныеСостояния.ВыданноеНаправление = МедицинскиеОсмотры.ВыданноеНаправление(ФизическоеЛицо, Позиция);
	
	Возврат ДанныеСостояния;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИнформациюПоследнегоОсмотра(Форма, ДанныеСостояния, Сегодня)
	
	Элементы = Форма.Элементы;
	ПоследнийОсмотр = ДанныеСостояния.ПоследнийОсмотр;
	
	Элементы.ПоследнийОсмотр.Заголовок = Неопределено;
	
	Если ПоследнийОсмотр = Неопределено Тогда
		Элементы.ПоследнийОсмотр.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 медицинский осмотр'"), 
			ПоследнийОсмотр.ТипОсмотра));
	ЧастиСтроки.Добавить(" ");
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'пройден %1'"), 
			Формат(ПоследнийОсмотр.Период, "ДЛФ=D")), , , , ПолучитьНавигационнуюСсылку(ПоследнийОсмотр.Регистратор)));
	Если ПоследнийОсмотр.РезультатОсмотра = ПредопределенноеЗначение("Перечисление.РезультатыМедицинскогоОсмотра.ИмеетПротивопоказания") Тогда
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Предупреждение));
		ЧастиСтроки.Добавить(" ");
		ТекстНадписи = НСтр("ru = 'Имеются противопоказания, требуется отстранение от работы'");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи, , Форма.СостояниеМедосмотраКритичноеЦветТекста));
	КонецЕсли;
	
	Элементы.ПоследнийОсмотр.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	Элементы.ПоследнийОсмотр.Видимость = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИнформациюСледующегоОсмотра(Форма, ДанныеСостояния, Сегодня)
	
	Элементы = Форма.Элементы;
	Периодичность = ДанныеСостояния.Периодичность;
	ПоследнийОсмотр = ДанныеСостояния.ПоследнийОсмотр;
	СледующийОсмотр = ДанныеСостояния.СледующийОсмотр;
	ВыданноеНаправление = ДанныеСостояния.ВыданноеНаправление;
	
	Элементы.СледующийОсмотр.Заголовок = Неопределено;
	
	Если Периодичность.Кратность = 0 Тогда
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Текущая позиция'"));
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(Форма.РабочееМесто), , , , ПолучитьНавигационнуюСсылку(Форма.РабочееМесто)));
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(НСтр("ru = 'не требует прохождения обязательных медицинских осмотров'"));
		Элементы.СледующийОсмотр.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Возврат;
	КонецЕсли;
	
	Если СледующийОсмотр = Неопределено Тогда
		Элементы.СледующийОсмотр.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	Если СледующийОсмотр.ДатаСледующегоОсмотра < Сегодня Тогда
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Предупреждение));
		ЧастиСтроки.Добавить(" ");
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующий осмотр должен был пройти %1, требуется пройти осмотр немедленно.'"), 
			Формат(СледующийОсмотр.ДатаСледующегоОсмотра, "ДЛФ=D"));
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи, , Форма.СостояниеМедосмотраКритичноеЦветТекста));
	ИначеЕсли СледующийОсмотр.ДатаСледующегоОсмотра < ДобавитьМесяц(Сегодня, 1) Тогда
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующий осмотр должен пройти не позднее %1, осталось меньше месяца.'"), 
			Формат(СледующийОсмотр.ДатаСледующегоОсмотра, "ДЛФ=D"));
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи, , Форма.СостояниеМедосмотраКритичноеЦветТекста));
	Иначе	
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующий осмотр должен пройти не позднее %1, осталось %2.'"), 
			Формат(СледующийОсмотр.ДатаСледующегоОсмотра, "ДЛФ=D"),
			РазностьДатСтрокой(Сегодня, СледующийОсмотр.ДатаСледующегоОсмотра));
		ЧастиСтроки.Добавить(ТекстНадписи);
	КонецЕсли;
	
	ЧастиСтроки.Добавить(" ");
	
	Если ВыданноеНаправление = Неопределено Тогда
		ЧастиСтроки.Добавить(НаправитьСейчасФорматированнаяСтрока());
	Иначе
		Если ЗначениеЗаполнено(ВыданноеНаправление.Направление) Тогда
			Если Не ЗначениеЗаполнено(ВыданноеНаправление.Заключение) Тогда
				ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Направлен на осмотр'"), , , , ПолучитьНавигационнуюСсылку(ВыданноеНаправление.Направление)));
				ЧастиСтроки.Добавить(НСтр("ru = ', заключения пока нет.'"));
			Иначе
				ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Заключение получено'"), , , , ПолучитьНавигационнуюСсылку(ВыданноеНаправление.Заключение)));
				ЧастиСтроки.Добавить(НСтр("ru = ', но документ не проведен.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СледующийОсмотр.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	Элементы.СледующийОсмотр.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФакторыМедицинскогоОсмотра()
	
	ВредныеФакторы.Очистить();
	ОсмотрыПоВреднымФакторам = МедицинскиеОсмотры.ОсмотрыПоВреднымФакторамФизическогоЛица(ФизическоеЛицо, РабочееМесто);
	Для Каждого СтрокаТаблицы Из ОсмотрыПоВреднымФакторам Цикл
		НоваяСтрока = ВредныеФакторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Периодичность = СтрокаТаблицы.Периодичность.Представление;
		НоваяСтрока.Состояние = ПредставлениеСостояния(СтрокаТаблицы.СостояниеПроцент);
	КонецЦикла;
	ВредныеФакторы.Сортировать("Требуется Убыв, СледующийОсмотр Убыв");
	
	ВидыРабот.Очистить();
	ОсмотрыПоВидамРабот = МедицинскиеОсмотры.ОсмотрыПоВидамРаботФизическогоЛица(ФизическоеЛицо, РабочееМесто);
	Для Каждого СтрокаТаблицы Из ОсмотрыПоВидамРабот Цикл
		НоваяСтрока = ВидыРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Периодичность = СтрокаТаблицы.Периодичность.Представление;
		НоваяСтрока.Состояние = ПредставлениеСостояния(СтрокаТаблицы.СостояниеПроцент);
	КонецЦикла;
	ВидыРабот.Сортировать("Требуется Убыв, СледующийОсмотр Убыв");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаправитьСейчасФорматированнаяСтрока()
	
	Возврат Новый ФорматированнаяСтрока(
		НСтр("ru = 'Направить сейчас'"), , , , 
		ПолучитьНавигационнуюСсылку(Документы.НаправлениеНаМедицинскийОсмотр.ПустаяСсылка()));
		
КонецФункции

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылкуНаправлениеНаМедицинскийОсмотрСоздать(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если ПолучитьНавигационнуюСсылку(ДокументНаправлениеНаМедицинскийОсмотрПустаяСсылка) <> НавигационнаяСсылкаФорматированнойСтроки Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения");
	ПараметрыФормы.ЗначенияЗаполнения = Новый Структура(
		"ФизическоеЛицо,
		|Организация,
		|ТипОсмотра,
		|Позиция");
	ПараметрыФормы.ЗначенияЗаполнения.ФизическоеЛицо = ФизическоеЛицо;
	ПараметрыФормы.ЗначенияЗаполнения.Организация = Организация;
	ПараметрыФормы.ЗначенияЗаполнения.ТипОсмотра = ПредопределенноеЗначение("Перечисление.ТипыМедицинскогоОсмотра.Периодический");
	ПараметрыФормы.ЗначенияЗаполнения.Позиция = РабочееМесто;
	
	ОткрытьФорму("Документ.НаправлениеНаМедицинскийОсмотр.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазностьДатСтрокой(Знач ДатаНачала, Знач ДатаОкончания)
	
	Возврат ЗарплатаКадрыКлиентСервер.ПредставлениеВременногоИнтервала(ДатаНачала, ДатаОкончания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСостояния(СостояниеПроцент)
	
	Представление = "";
	
	МаркерЗаполнен = "●";
	МаркерНеЗаполнен = "○";
	
	ВсегоМаркеров = 5;
	Значение = Окр(СостояниеПроцент * ВсегоМаркеров / 100);
	
	Для НомерМаркера = 1 По ВсегоМаркеров Цикл
		Маркер = МаркерНеЗаполнен;
		Если НомерМаркера <= Значение Тогда
			Маркер = МаркерЗаполнен;
		КонецЕсли;
		Представление = Представление + Маркер;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура НачатьОбновлениеПериодическихОсмотров(ПоказыватьСообщения = Ложь)
	
	ДлительнаяОперация = ОбновитьПериодическиеОсмотрыНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Если ПоказыватьСообщения Тогда
		ПараметрыОжидания.ВыводитьСообщения = Истина;
	Иначе
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновлениеПериодическихОсмотровЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеПериодическихОсмотровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМедицинскиеОсмотры();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьМедицинскиеОсмотры()
	
	ДанныеСостояния = ДанныеСостояния(ФизическоеЛицо, РабочееМесто); 
	ЗаполнитьСостояниеМедицинскогоОсмотра(ЭтаФорма, ДанныеСостояния, НачалоДня(ТекущаяДатаСеанса()));
	ЗаполнитьФакторыМедицинскогоОсмотра();
	
КонецПроцедуры 

&НаСервере
Функция ОбновитьПериодическиеОсмотрыНаСервере()
	
	ПараметрыПроцедуры = Новый Структура("ФизическиеЛица");
	ПараметрыПроцедуры.ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление сведений о периодических медицинских осмотрах физического лица'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("МедицинскиеОсмотры.ОбновитьПериодическиеОсмотрыФизическихЛицДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#КонецОбласти
