#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ВводОстатков") Тогда
		Организация  = ЭтотОбъект[0].Организация;
		ДатаОперации = ЭтотОбъект[0].ДатаОперации;
		Регистратор  = Отбор.Регистратор.Значение;
		ПроверитьОбновитьЗаписиРегистраПриВводеОстатков(Отказ, Организация, ДатаОперации, Регистратор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьОбновитьЗаписиРегистраПриВводеОстатков(Отказ, Организация, ДатаОперации, ИсключаемыйРегистратор) 

	// Удаляем записи РН РасчетыСБюджетомПоНДФЛ до даты ДатаОперации.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОперации", ДатаОперации);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСБюджетомПоНДФЛ КАК РасчетыСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыСБюджетомПоНДФЛ.Организация = &Организация
	|	И РасчетыСБюджетомПоНДФЛ.ДатаОперации < &ДатаОперации
	|	И РасчетыСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|	И НЕ РасчетыСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ПереносДанных";
	РегистраторыКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	РегистрыНакопления.РасчетыСБюджетомПоНДФЛ.УстановитьИспользованиеИтогов(Ложь);
	
	// Три попытки на удаление записей.
	Для Сч = 1 По 3 Цикл
		
		НеОбработанныеРегистраторы = Новый Массив;
		
		Для каждого Регистратор Из РегистраторыКОбработке Цикл
			
			Если Не ПодготовитьОбновлениеДанных("РегистрНакопления.РасчетыСБюджетомПоНДФЛ.НаборЗаписей", "Регистратор", Регистратор) Тогда
				НеОбработанныеРегистраторы.Добавить(Регистратор);
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыНакопления.РасчетыСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Если НеОбработанныеРегистраторы.Количество() = 0 Тогда
			Прервать;
		Иначе
			РегистраторыКОбработке = ОбщегоНазначения.СкопироватьРекурсивно(НеОбработанныеРегистраторы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеОбработанныеРегистраторы.Количество() > 0 Тогда
		Отказ = Истина;
		РегистрыНакопления.РасчетыСБюджетомПоНДФЛ.УстановитьИспользованиеИтогов(Истина);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТИсключаемыеРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыСБюджетомПоНДФЛ КАК РасчетыСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыСБюджетомПоНДФЛ.Организация = &Организация
	|	И РасчетыСБюджетомПоНДФЛ.ДатаОперации >= &ДатаОперации
	|	И РасчетыСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|	И НЕ РасчетыСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ПереносДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛКПеречислению.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеРегистраторы КАК ИсключаемыеРегистраторы
	|		ПО НДФЛКПеречислению.Регистратор = ИсключаемыеРегистраторы.Регистратор
	|ГДЕ
	|	ИсключаемыеРегистраторы.Регистратор ЕСТЬ NULL
	|	И НДФЛКПеречислению.Период >= &ДатаОперации
	|	И НЕ НДФЛКПеречислению.Регистратор ССЫЛКА Документ.ПереносДанных
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛПеречисленный.Регистратор
	|ИЗ
	|	РегистрНакопления.НДФЛПеречисленный КАК НДФЛПеречисленный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеРегистраторы КАК ИсключаемыеРегистраторы
	|		ПО НДФЛПеречисленный.Регистратор = ИсключаемыеРегистраторы.Регистратор
	|ГДЕ
	|	ИсключаемыеРегистраторы.Регистратор ЕСТЬ NULL
	|	И НДФЛПеречисленный.Период >= &ДатаОперации
	|	И НЕ НДФЛПеречисленный.Регистратор ССЫЛКА Документ.ПереносДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛКПеречислению.Период КАК Период,
	|	НДФЛКПеречислению.Регистратор КАК Регистратор,
	|	НДФЛКПеречислению.Организация КАК Организация,
	|	НДФЛКПеречислению.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НДФЛКПеречислению.Сумма КАК Сумма,
	|	НДФЛКПеречислению.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НДФЛКПеречислению.СтатьяРасходов КАК СтатьяРасходов,
	|	НДФЛКПеречислению.ДокументОснование КАК ДокументОснование,
	|	НДФЛКПеречислению.КатегорияДохода КАК КатегорияДохода,
	|	НДФЛКПеречислению.КодДохода КАК КодДохода,
	|	НДФЛКПеречислению.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛКПеречислению.Подразделение КАК Подразделение,
	|	НДФЛКПеречислению.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НДФЛКПеречислению.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НДФЛКПеречислению.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НДФЛКПеречислению.КрайнийСрокУплаты КАК КрайнийСрокУплаты,
	|	НДФЛКПеречислению.ВариантУдержания КАК ВариантУдержания,
	|	НДФЛКПеречислению.СрокПеречисления КАК СрокПеречисления,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|		ПО Регистраторы.Регистратор = НДФЛКПеречислению.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДФЛПеречисленный.Период,
	|	НДФЛПеречисленный.Регистратор,
	|	НДФЛПеречисленный.Организация,
	|	НДФЛПеречисленный.ФизическоеЛицо,
	|	НДФЛПеречисленный.Сумма,
	|	НДФЛПеречисленный.СтатьяФинансирования,
	|	НДФЛПеречисленный.СтатьяРасходов,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НДФЛПеречисленный.РегистрацияВНалоговомОргане,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛПеречисленный КАК НДФЛПеречисленный
	|		ПО Регистраторы.Регистратор = НДФЛПеречисленный.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НаборЗаписей = РегистрыНакопления.РасчетыСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				
				НоваяЗапись = НаборЗаписей.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				НоваяЗапись.ДатаОперации = НоваяЗапись.Период;
				Если ЗначениеЗаполнено(Выборка.КрайнийСрокУплаты) Тогда
					НоваяЗапись.Период = Выборка.КрайнийСрокУплаты;
				КонецЕсли;
				
			Иначе
				
				НоваяЗапись = НаборЗаписей.ДобавитьРасход();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				НоваяЗапись.ДатаОперации = НоваяЗапись.Период;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	РегистрыНакопления.РасчетыСБюджетомПоНДФЛ.УстановитьИспользованиеИтогов(Истина);

КонецПроцедуры

Функция ПодготовитьОбновлениеДанных(ИмяПространстваБлокировки, ПолеБлокировки, ЗначениеБлокировки)

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ИмяПространстваБлокировки);
	ЭлементБлокировки.УстановитьЗначение(ПолеБлокировки, ЗначениеБлокировки);
	Попытка 
		Блокировка.Заблокировать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции


#КонецОбласти


#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли