#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	ОтчетПустой = Истина;
	
	Попытка
		
		КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		ЗначениеПараметраДокумент = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Документ"));
		Если ЗначениеПараметраДокумент.Значение = Неопределено Тогда
			ЗначениеПараметраДокумент.Значение = Документы.ИнструктажПоОхранеТруда.ПустаяСсылка();
			ЗначениеПараметраДокумент.Использование = Истина;
		ИначеЕсли Не ЗначениеПараметраДокумент.Использование Тогда
			ЗначениеПараметраДокумент.Использование = Истина;
		КонецЕсли;
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
		
		Если КлючВарианта = "ЖурналРегистрацииВводногоИнструктажа" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналРегистрацииВводногоИнструктажа";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.Очистить();
			
			МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ЖурналРегистрацииИнструктажа.ПФ_MXL_ЖурналРегистрацииВводногоИнструктажа");
			
			ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			ПерваяОрганизация = Истина;
			ПериодОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
			Для каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
				
				Если ПерваяОрганизация Тогда
					ПерваяОрганизация = Ложь;
				Иначе
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ОбластьОрганизация.Параметры.Заполнить(СтрокаОрганизации);
				Если ПериодОтчета <> Неопределено Тогда
					ОбластьОрганизация.Параметры.НачалоПериода = ПериодОтчета.Значение.ДатаНачала;
					ОбластьОрганизация.Параметры.КонецПериода = ПериодОтчета.Значение.ДатаОкончания;
				КонецЕсли;
				Если ЗначениеПараметраДокумент.Значение = Документы.ИнструктажПоОхранеТруда.ПустаяСсылка() Тогда
					ДокументРезультат.Вывести(ОбластьОрганизация);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьШапка);
				Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
					ОбластьСтрока.Параметры.Дата = СтрокаСотрудника.ДатаПроведения;
					ОбластьСтрока.Параметры.ФИОИнструктируемого = СтрокаСотрудника.Сотрудник;
					ОбластьСтрока.Параметры.ГодРожденияИнструктируемого = СтрокаСотрудника.ДатаРождения;
					ОбластьСтрока.Параметры.ДолжностьИнструктируемого = СтрокаСотрудника.Должность;
					ОбластьСтрока.Параметры.ПодразделениеИнструктируемого = СтрокаСотрудника.Подразделение;
					ОбластьСтрока.Параметры.ФИОИнструктирующего = СтрокаСотрудника.ОтветственныйЗаОхрануТрудаФамилияИО;
					ОбластьСтрока.Параметры.ДолжностьИнструктирующего = СтрокаСотрудника.ДолжностьОтветственногоЗаОхрануТруда;
					
					ДокументРезультат.Вывести(ОбластьСтрока);
					ОтчетПустой = Ложь;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли КлючВарианта = "ЖурналРегистрацииИнструктажаНаРабочемМесте" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналРегистрацииИнструктажаНаРабочемМесте";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.Очистить();
			
			МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ЖурналРегистрацииИнструктажа.ПФ_MXL_ЖурналРегистрацииИнструктажаНаРабочемМесте");
			
			ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			ПерваяОрганизация = Истина;
			ПериодОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
			Для каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
				
				Если ПерваяОрганизация Тогда
					ПерваяОрганизация = Ложь;
				Иначе
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ОбластьОрганизация.Параметры.Заполнить(СтрокаОрганизации);
				Если ПериодОтчета <> Неопределено Тогда
					ОбластьОрганизация.Параметры.НачалоПериода = ПериодОтчета.Значение.ДатаНачала;
					ОбластьОрганизация.Параметры.КонецПериода = ПериодОтчета.Значение.ДатаОкончания;
				КонецЕсли;
				Если ЗначениеПараметраДокумент.Значение = Документы.ИнструктажПоОхранеТруда.ПустаяСсылка() Тогда
					ДокументРезультат.Вывести(ОбластьОрганизация);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьШапка);
				Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
					ОбластьСтрока.Параметры.Дата = СтрокаСотрудника.ДатаПроведения;
					ОбластьСтрока.Параметры.ФИОИнструктируемого = СтрокаСотрудника.Сотрудник;
					ОбластьСтрока.Параметры.ГодРожденияИнструктируемого = СтрокаСотрудника.ДатаРождения;
					ОбластьСтрока.Параметры.ДолжностьИнструктируемого = СтрокаСотрудника.Должность;
					ОбластьСтрока.Параметры.ВидИнструктажа = СтрокаСотрудника.ВидИнструктажа;
					ОбластьСтрока.Параметры.ПричинаПроведения = СтрокаСотрудника.ПричинаПроведения;
					ОбластьСтрока.Параметры.ФИОИнструктирующего = СтрокаСотрудника.ОтветственныйЗаОхрануТрудаФамилияИО;
					ОбластьСтрока.Параметры.ДолжностьИнструктирующего = СтрокаСотрудника.ДолжностьОтветственногоЗаОхрануТруда;
					
					ДокументРезультат.Вывести(ОбластьСтрока);
					ОтчетПустой = Ложь;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		ВызватьИсключение НСтр("ru = 'В настройку отчета внесены критичные изменения. Журнал регистрации инструктажа не будет сформирован.'") + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли