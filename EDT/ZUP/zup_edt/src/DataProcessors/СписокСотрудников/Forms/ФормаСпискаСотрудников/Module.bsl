#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ИдентификаторЗамера;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеШтатнымРасписаниемФормы.УстановитьУсловноеОформлениеСпискаПодразделений(ЭтотОбъект, "ПодразделенияОрганизаций", "СформированоНаСегодня", "РасформированоНаСегодня");
	
	СтруктураПараметровФормы = Новый Структура("РежимВыбора,МножественныйВыбор,АдресСпискаПодобранныхСотрудников,ДоступныНепринятые");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровФормы, Параметры);
	
	ПараметрыФормы = Новый ФиксированнаяСтруктура(СтруктураПараметровФормы);
	
	ПодготовитьФормуКРаботеВРежимеВыбора();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПараметрыРазмещения.Источники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Метаданные.Справочники.Сотрудники);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ВАрхиве.Пометка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаСпискаСотрудников", "ПометкаВАрхиве", Ложь);
	
	СотрудникиФормы.УстановитьМенюВводаНаОсновании(ЭтотОбъект, "ОформитьДокумент");
	
	ИнициализироватьСписок();
	
	УстановитьОтборыПараметровФормы();
	
	// Начальная панель вспомогательных отборов
	ИмяКомандыВспомогательногоОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаСпискаСотрудников", "ИмяКомандыВспомогательногоОтбора", "ПоПодразделениям");
	
	// Структура предприятия
	СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц = ПолучитьФункциональнуюОпциюФормы("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
	Если Не СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц И ИмяКомандыВспомогательногоОтбора = "ПоСтруктуреПредприятия" Тогда
		ИмяКомандыВспомогательногоОтбора = "ПоПодразделениям";
	КонецЕсли;
	
	Если ПодразделениеИспользование И ИмяКомандыВспомогательногоОтбора = "ПоПодразделениям" Тогда
		ИмяКомандыВспомогательногоОтбора = "ВсеСотрудники";
	КонецЕсли;
	
	ОтборПоИерархииПодразделений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаСпискаСотрудников", "ОтборПоИерархииПодразделений", Истина);
	УстановитьОтборПоИерархииПодразделений(ЭтотОбъект, ОтборПоИерархииПодразделений, Истина);
	
	ОтборПоИерархииГруппСотрудников = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаСпискаСотрудников", "ОтборПоИерархииГруппСотрудников", Истина);
	УстановитьОтборПоИерархииГруппСотрудников(ЭтотОбъект, ОтборПоИерархииГруппСотрудников, Истина);
	
	ОтборПоСтруктуреПредприятия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаСпискаСотрудников", "ОтборПоСтруктуреПредприятия", Истина);
	УстановитьОтборПоИерархииСтруктурыПредприятия(ЭтотОбъект, ОтборПоСтруктуреПредприятия, Истина);
	
	УстановитьОтборПоДоговорникамГПХ(ЭтотОбъект, Отборы.ПоказыватьДоговорниковГПХ, Отборы.ПоказыватьТолькоДоговорниковГПХ);
	УстановитьОтборПоПодработкам(ЭтотОбъект, Отборы.ПоказыватьПодработки, Отборы.ПоказыватьТолькоПодработки);
	
	ПриИзмененииВспомогательногоОтбора(ЭтотОбъект, ИмяКомандыВспомогательногоОтбора, Ложь);
	
	УстановитьОтображениеЭлементовУправленияФормы();
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список", Новый Структура("ИмяПоляИндикатораПроблем", "ИндикаторПроблем"));
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы
		И ПараметрыФормы.РежимВыбора
		И ПараметрыФормы.МножественныйВыбор
		И ВыбранныеСотрудники.Количество() > 0 Тогда
		
		Отказ = Истина;
		ЗадатьВопросОВыбореОтобранныхСотрудников();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Сотрудники" Тогда
		
		Если Элементы.Список.РежимВыбора Тогда
			
			Если ПараметрыФормы.МножественныйВыбор Тогда
				ОповеститьОВыборе(Параметр.Сотрудник);
				ОбновитьСпискиНаКлиенте();
			Иначе
				ОповеститьОВыборе(Параметр.Сотрудник);
			КонецЕсли;
			
		Иначе
			
			Если Элементы.Список.ТекущаяСтрока <> Неопределено
				И Элементы.Список.ДанныеСтроки(Элементы.Список.ТекущаяСтрока).Ссылка = Параметр.Сотрудник Тогда
				
				ОбновитьТекущуюСтрокуСотрудника(Параметр.Сотрудник);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтбиратьРаботающихВПериодеПриИзменении(Элемент)
	
	Если ОтбиратьРаботающихВПериоде Тогда
		ДатаНачала = НачалоМесяца(ДатаНачала);
	КонецЕсли;
	
	ПриИзмененииПериодаРаботы(ЭтотОбъект);
	УстановитьОтображениеПолейОтбораПоПериодуРаботы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииПериодаРаботы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериодаРаботы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИспользованиеПриИзменении(Элемент)
	
	ПриИзмененииОтбораПоОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияИспользование = Истина;
	КонецЕсли;
	
	ФилиалИспользование = Ложь;
	ПриИзмененииОтбораПоОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалИспользованиеПриИзменении(Элемент)
	
	ПриИзмененииОтбораПоФилиалу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		ФилиалИспользование = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбораПоФилиалу(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПодразделенияОрганизаций

&НаКлиенте
Процедура ПодразделенияОрганизацийПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоПодразделению(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппыСотрудников

&НаКлиенте
Процедура ГруппыСотрудниковПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоГруппеСотрудников", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ГруппыСотрудниковПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ГруппыСотрудников.ДинамическийСписокГруппСотрудниковПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураПредприятия

&НаКлиенте
Процедура СтруктураПредприятияПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоСтруктуреПредприятия(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ИдентификаторЗамера = Неопределено Тогда
		ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		Если ПараметрыФормы.РежимВыбора Тогда
			
			Если ПараметрыФормы.МножественныйВыбор Тогда
				
				Для Каждого ВыбраннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
					
					ВыбранныеДанные = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
					Если СписокПодобранных.НайтиПоЗначению(ВыбранныеДанные.Ссылка) = Неопределено Тогда
						
						ЭлементВыбранногоСотрудника = ВыбранныеСотрудники.НайтиПоЗначению(ВыбранныеДанные.Ссылка);
						Если ЭлементВыбранногоСотрудника = Неопределено Тогда
							ЭлементВыбранногоСотрудника = ВыбранныеСотрудники.Добавить(ВыбранныеДанные.Ссылка);
						КонецЕсли;
						
						Элементы.ВыбранныеСотрудники.ТекущаяСтрока = ЭлементВыбранногоСотрудника.ПолучитьИдентификатор();
						УстановитьСписокВыбранныхСотрудников();
						
					Иначе
						Состояние(ВыбранныеДанные.Наименование + " " + НСтр("ru='уже подобран ранее'"));
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ОповеститьОВыборе(Элементы.Список.ТекущиеДанные.Ссылка);
			КонецЕсли;
			
		Иначе
			ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамера, "ОткрытиеФормыЭлементаСправочникаСотрудники");
			ОткрытьФормуСотрудника(Элементы.Список.ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторЗамера = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьВыборОтобранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыНовогоЭлементаСправочникаСотрудники");
	
	Отказ = Истина;
	
	ПараметрыЗаполнения = Новый Структура;
	Если ОрганизацияИспользование И ЗначениеЗаполнено(Организация) Тогда
		ПараметрыЗаполнения.Вставить("ГоловнаяОрганизация", Организация);
	КонецЕсли;
	
	ОткрытьФормуСотрудника(Неопределено, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыЭлементаСправочникаСотрудники");
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ОткрытьФормуСотрудника(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ОперацияУстановить = Истина;
		Для каждого КлючСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
			
			Если Элементы.Список.ДанныеСтроки(КлючСтроки).ПометкаУдаления Тогда
				ОперацияУстановить = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
			
			Если ОперацияУстановить Тогда
				ТекстВопроса = НСтр("ru='Пометить ""%1"" на удаление'") + "?";
			Иначе
				ТекстВопроса = НСтр("ru='Снять с ""%1"" пометку на удаление'") + "?";
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстВопроса,
				Элементы.Список.ТекущиеДанные.Ссылка);
			
		Иначе
			
			Если ОперацияУстановить Тогда
				ТекстВопроса = НСтр("ru='Пометить выделенные элементы на удаление'") + "?";
			Иначе
				ТекстВопроса = НСтр("ru='Снять с выделенных элементов пометку на удаление'") + "?";
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОперацияУстановить", ОперацияУстановить);
		ДополнительныеПараметры.Вставить("Сотрудники", Элементы.Список.ВыделенныеСтроки);
		ДополнительныеПараметры.Вставить("ЭлементФормыСписок", Элементы.Список);
		
		Оповещение = Новый ОписаниеОповещения("СписокУдалитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиКОбновлению = ОбщегоНазначения.ВыгрузитьКолонку(Строки.ПолучитьКлючи(), "Сотрудник");
	
	ДатаАктуальности = Неопределено;
	
	ПараметрДатаАктуальности = Настройки.ПараметрыДанных.Элементы.Найти("ДатаАктуальности");
	Если ПараметрДатаАктуальности.Использование Тогда
		ДатаАктуальности = ПараметрДатаАктуальности.Значение;
	Иначе
		ДатаАктуальности = Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания").Значение;
	КонецЕсли;
	
	ЗаполнитьКадровыеДанные(Настройки, Строки);
	ЗаполнитьТекущиеКадровыеДанные(Настройки, Строки, СотрудникиКОбновлению);
	ЗаполнитьСостоянияСотрудников(Настройки, Строки, СотрудникиКОбновлению, ДатаАктуальности);
	ЗаполнитьПлановыйФОТ(Настройки, Строки, СотрудникиКОбновлению, ДатаАктуальности);
	ЗаполнитьДанныеОбАвансеДляПодбора(Настройки, Строки, СотрудникиКОбновлению, ДатаАктуальности);
	ЗаполнитьВидыЗанятостиСотрудниковДляПодбора(Настройки, Строки, СотрудникиКОбновлению, ДатаАктуальности);
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриПолученииДанныхНаСервере(Настройки, Строки, "Сотрудник");
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура ВыбранныеСотрудникиПослеУдаления(Элемент)
	
	УстановитьСписокВыбранныхСотрудников();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура НапомнитьОДнеРождения(Команда)
	
	ОткрытьФормуНапоминаниеОДнеРождения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписки(Команда)
	
	ОбновитьСпискиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеСотрудники(Команда)
	
	ПриИзмененииВспомогательногоОтбора(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСотрудниковПодчиненныхПодразделений(Команда)
	
	УстановитьОтборПоИерархииПодразделений(ЭтотОбъект, Не Элементы.СписокПоказыватьСотрудниковПодчиненныхПодразделений.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСотрудниковПодчиненныхГрупп(Команда)
	
	УстановитьОтборПоИерархииГруппСотрудников(ЭтотОбъект, Не Элементы.СписокПоказыватьСотрудниковПодчиненныхГрупп.Пометка);
	ПодключитьОбработчикОжидания("УстановитьОтборПоГруппеСотрудников", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСотрудниковПодчиненныхСтруктурныхЕдиниц(Команда)
	
	УстановитьОтборПоИерархииСтруктурыПредприятия(ЭтотОбъект, Не Элементы.СписокПоказыватьСотрудниковПодчиненныхСтруктурныхЕдиниц.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоПодразделениям(Команда)
	
	ПриИзмененииВспомогательногоОтбора(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоГруппамСотрудников(Команда)
	
	ПриИзмененииВспомогательногоОтбора(ЭтотОбъект, Команда.Имя);
	ПодключитьОбработчикОжидания("УстановитьОтборПоГруппеСотрудников", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоСтруктуреПредприятия(Команда)
	
	ПриИзмененииВспомогательногоОтбора(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВАрхиве(Команда)
	
	Элементы.ВАрхиве.Пометка = Не Элементы.ВАрхиве.Пометка;
	УстановитьОтборСотрудниковВАрхиве(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорникиГПХ(Команда)
	
	УстановитьОтборПоДоговорникамГПХ(ЭтотОбъект, Не Элементы.СписокДоговорникиГПХ.Пометка, Отборы.ПоказыватьТолькоДоговорниковГПХ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подработки(Команда)
	
	УстановитьОтборПоПодработкам(ЭтотОбъект, Не Элементы.СписокПодработки.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбратьВсех(Команда)
	
	ВыбратьВсех();
	ВыполнитьВыборОтобранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацииНеВыполняются(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ОперацияУстановить = Истина;
		Для каждого СотрудникСсылка Из Элементы.Список.ВыделенныеСтроки Цикл
			
			Если Элементы.Список.ДанныеСтроки(СотрудникСсылка).ВАрхиве Тогда
				ОперацияУстановить = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОперацияУстановить Тогда
			ТекстВопроса = НСтр("ru='Установить отметку того, что все операции по %1 завершены'") + "?";
		Иначе
			ТекстВопроса = НСтр("ru='Снять отметку того, что все операции по %1 завершены'") + "?";
		КонецЕсли;
		
		Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстВопроса,
				НСтр("ru='сотруднику'") + " " + Элементы.Список.ТекущиеДанные.Ссылка);
			
		Иначе
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстВопроса,
				НСтр("ru='сотрудникам'"));
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОперацияУстановить", ОперацияУстановить);
		ДополнительныеПараметры.Вставить("Сотрудники", Элементы.Список.ВыделенныеСтроки);
		ДополнительныеПараметры.Вставить("ЭлементФормыСписок", Элементы.Список);
		
		Оповещение = Новый ОписаниеОповещения("СписокОперацииНеВыполняютсяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОформитьНаОсновании(Команда)
	
	СотрудникиКлиент.ОформитьНаОсновании(ЭтотОбъект, Элементы.Список.ТекущиеДанные.Ссылка, Команда.Имя);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени();
	ДополнительныеСвойства = Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	Если (ДополнительныеСвойства.Свойство("КолонкаИндикатора")
		И ДополнительныеСвойства.Свойство("ВидОбъектаМетаданных")
		И ДополнительныеСвойства.Свойство("ИмяОбъектаМетаданных")
		И ДополнительныеСвойства.Свойство("ИмяСписка")) Тогда
		
		ТаблицаФормы = Элементы.Список;
		
		Если Поле.Имя = ДополнительныеСвойства.КолонкаИндикатора Тогда
			
			СписокСотрудников = Новый Массив;
			Для Каждого ВыделеннаяСтрока Из ТаблицаФормы.ВыделенныеСтроки Цикл
				
				ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
				Если ДанныеСтроки.ИндикаторПроблем > 0 Тогда
					СписокСотрудников.Добавить(ДанныеСтроки.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СписокСотрудников.Количество() > 0 Тогда
				
				СтандартнаяОбработка = Ложь;
				
				ДанныеКонтекста = Новый Структура;
				ДанныеКонтекста.Вставить("ВыделенныеСтроки",     СписокСотрудников);
				ДанныеКонтекста.Вставить("ВидОбъектаМетаданных", ДополнительныеСвойства.ВидОбъектаМетаданных);
				ДанныеКонтекста.Вставить("ИмяОбъектаМетаданных", ДополнительныеСвойства.ИмяОбъектаМетаданных);
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("ДанныеКонтекста", ДанныеКонтекста);
				ОткрытьФорму("Отчет.РезультатыПроверкиУчета.Форма", ПараметрыОткрытияФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
	ИдентификаторЗамера = Неопределено;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

#Область ИнициализацияСпискаСотрудников

&НаСервере
Процедура ИнициализироватьСписок()
	
	ДатаНачала = ОбщегоНазначения.ТекущаяДатаПользователя();
	ПриИзмененииПериодаРаботы(ЭтотОбъект);
	
	УстановитьОтборСотрудниковВАрхиве(ЭтотОбъект, Ложь);

	СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПолучениеКадровыхДанных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИсточникДоступныхНастроекКомпоновкиДанных  = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	АдресНастроекСКД = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АдресСКД", АдресСКД);
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АдресНастроекСКД", АдресНастроекСКД);
	
	УстановитьОграничениеПолейСписка();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеПолейСписка()
	
	ДоступныеДляОтбораПоля = ДоступныеДляОтбораПоля();
	ДоступныеДляСортировкиПоля = ДоступныеДляСортировкиПоля();
	
	ПоляБезОтбора = Новый Структура;
	ПоляБезСортировки = Новый Структура;
	ПоляБезГруппировки = Новый Структура;
	
	ПоляБезОтбора.Вставить("УдалитьВидЗанятости");
	ПоляБезОтбора.Вставить("ТекущийПроцентСевернойНадбавки");
	
	Для Каждого ДоступноеПолеВыбора Из Список.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		Если ТипЗнч(ДоступноеПолеВыбора) <> Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = Строка(ДоступноеПолеВыбора.Поле);
		
		Если Не ДоступныеДляОтбораПоля.Свойство(ИмяПоля) Тогда
			ПоляБезОтбора.Вставить(ИмяПоля);
		КонецЕсли;
		
		Если Не ДоступныеДляСортировкиПоля.Свойство(ИмяПоля) Тогда
			ПоляБезСортировки.Вставить(ИмяПоля);
		КонецЕсли;
		
		ПоляБезГруппировки.Вставить(ИмяПоля);
		
	КонецЦикла;
	
	СхемаЗапросаСписка = Новый СхемаЗапроса;
	СхемаЗапросаСписка.УстановитьТекстЗапроса(Список.ТекстЗапроса);
	
	ЗапросПакета = СхемаЗапросаСписка.ПакетЗапросов[0];
	
	Для Каждого Поле Из ЗапросПакета.Колонки Цикл
		
		Если Не ДоступныеДляОтбораПоля.Свойство(Поле.Псевдоним) Тогда
			ПоляБезОтбора.Вставить(Поле.Псевдоним);
		КонецЕсли;
		
		Если Не ДоступныеДляСортировкиПоля.Свойство(Поле.Псевдоним) Тогда
			ПоляБезСортировки.Вставить(Поле.Псевдоним);
		КонецЕсли;
		
		ПоляБезГруппировки.Вставить(Поле.Псевдоним);
		
	КонецЦикла;
	
	Для Каждого Поле Из Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников.Измерения Цикл
		
		Если Не ДоступныеДляОтбораПоля.Свойство(Поле.Имя) Тогда
			ПоляБезОтбора.Вставить(Поле.Имя);
		КонецЕсли;
		
		Если Не ДоступныеДляСортировкиПоля.Свойство(Поле.Имя) Тогда
			ПоляБезСортировки.Вставить(Поле.Имя);
		КонецЕсли;
		
		ПоляБезГруппировки.Вставить(Поле.Имя);
		
	КонецЦикла;
	
	Для Каждого Поле Из Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников.Ресурсы Цикл
		
		Если Не ДоступныеДляОтбораПоля.Свойство(Поле.Имя) Тогда
			ПоляБезОтбора.Вставить(Поле.Имя);
		КонецЕсли;
		
		Если Не ДоступныеДляСортировкиПоля.Свойство(Поле.Имя) Тогда
			ПоляБезСортировки.Вставить(Поле.Имя);
		КонецЕсли;
		
		ПоляБезГруппировки.Вставить(Поле.Имя);
		
	КонецЦикла;
	
	Список.УстановитьОграниченияИспользованияВГруппировке(ОбщегоНазначения.ВыгрузитьКолонку(ПоляБезГруппировки, "Ключ"));
	Список.УстановитьОграниченияИспользованияВОтборе(ОбщегоНазначения.ВыгрузитьКолонку(ПоляБезОтбора, "Ключ"));
	Список.УстановитьОграниченияИспользованияВПорядке(ОбщегоНазначения.ВыгрузитьКолонку(ПоляБезСортировки, "Ключ"));
	
КонецПроцедуры

&НаСервере
Функция ДоступныеДляОтбораПоля()
	
	ДоступныеДляОтбораПоля = Новый Структура;
	
	ДоступныеДляОтбораПоля.Вставить("Наименование");
	ДоступныеДляОтбораПоля.Вставить("Должность");
	ДоступныеДляОтбораПоля.Вставить("ДолжностьПоШтатномуРасписанию");
	ДоступныеДляОтбораПоля.Вставить("ПометкаУдаления");
	ДоступныеДляОтбораПоля.Вставить("Код");
	ДоступныеДляОтбораПоля.Вставить("ФизическоеЛицо");
	ДоступныеДляОтбораПоля.Вставить("ВидДоговора");
	
	Возврат ДоступныеДляОтбораПоля;

КонецФункции

&НаСервере
Функция ДоступныеДляСортировкиПоля()
	
	ДоступныеДляСортировкиПоля = Новый Структура;
	ДоступныеДляСортировкиПоля.Вставить("Наименование");
	
	Возврат ДоступныеДляСортировкиПоля;
	
КонецФункции

#КонецОбласти


#Область ПриПолученииДанныхСпискаСотрудников

&НаСервереБезКонтекста
Процедура ЗаполнитьКадровыеДанные(НастройкиСписка, СтрокиСписка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СКД = ПолучитьИзВременногоХранилища(НастройкиСписка.ДополнительныеСвойства.АдресСКД);
	
	НастройкиСКД = ПолучитьИзВременногоХранилища(НастройкиСписка.ДополнительныеСвойства.АдресНастроекСКД);
	НастройкиСКД.Отбор.Элементы.Очистить();
	НастройкиСКД.Структура.Очистить();
	
	УстановитьСписокСотрудниковДляПолученияДанных(НастройкиСКД.ПараметрыДанных, СтрокиСписка);
	ЗаполнитьПараметрыПолученияДанных(НастройкиСКД.ПараметрыДанных, НастройкиСписка.ПараметрыДанных);
	ЗаполнитьОтборПолучаемыхДанных(НастройкиСКД.Отбор, НастройкиСписка.Отбор);
	
	ДетальныеЗаписи = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЗаполнитьПолучаемыеПоля(ДетальныеЗаписи, СтрокиСписка[СтрокиСписка.ПолучитьКлючи()[0]].Данные);
	ИсполняемыйМакет = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СКД, НастройкиСКД, , , Ложь);
	
	Если ИсполняемыйМакет.НаборыДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсполняемыйМакет.НаборыДанных.Количество() = 1 И ИсполняемыйМакет.НаборыДанных[0].Поля.Количество() = 1
		И ИсполняемыйМакет.НаборыДанных[0].Поля[0].ПутьКДанным = "Сотрудник" Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Новый ТаблицаЗначений;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(ИсполняемыйМакет);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Данные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если Данные.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеСтрокСписка(СтрокиСписка, Данные);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТекущиеКадровыеДанные(НастройкиСписка, СтрокиСписка, СотрудникиКОбновлению)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ДанныеСтроки = СтрокиСписка[СтрокиСписка.ПолучитьКлючи()[0]].Данные;
	Если НЕ (ДанныеСтроки.Свойство("ДатаПриема") Или ДанныеСтроки.Свойство("ДатаУвольнения") Или ДанныеСтроки.Свойство("ОформленПоТрудовомуДоговору")) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанные.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	ТекущиеКадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ТекущиеКадровыеДанные.ОформленПоТрудовомуДоговору КАК ОформленПоТрудовомуДоговору
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанные
		|ГДЕ
		|	ТекущиеКадровыеДанные.Сотрудник В(&СотрудникиКОбновлению)";
	
	Данные = Запрос.Выполнить().Выгрузить();
	ЗаполнитьДанныеСтрокСписка(СтрокиСписка, Данные);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСостоянияСотрудников(НастройкиСписка, СтрокиСписка, СотрудникиКОбновлению, ДатаАктуальности)
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СостоянияСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ДанныеСтроки = СтрокиСписка[СтрокиСписка.ПолучитьКлючи()[0]].Данные;
	Если НЕ (ДанныеСтроки.Свойство("Состояние") Или ДанныеСтроки.Свойство("СостояниеДействуетДо") Или ДанныеСтроки.Свойство("ОкончаниеПредположительно")) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
		|	СостоянияСотрудников.Состояние КАК Состояние,
		|	&ПредставлениеСостояния КАК ПредставлениеСостояния,
		|	СостоянияСотрудников.ДействуетДо КАК СостояниеДействуетДо,
		|	СостоянияСотрудников.ОкончаниеПредположительно КАК ОкончаниеПредположительно
		|ИЗ
		|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|ГДЕ
		|	СостоянияСотрудников.Сотрудник В(&СотрудникиКОбновлению)
		|	И &ДатаАктуальности МЕЖДУ СостоянияСотрудников.Период И ВЫБОР
		|			КОГДА СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|			ИНАЧЕ СостоянияСотрудников.ДействуетДо
		|		КОНЕЦ";
	СотрудникиФормыРасширенный.УстановитьПараметрыПредставленияСостояний(Запрос);
	
	Данные = Запрос.Выполнить().Выгрузить();
	ЗаполнитьДанныеСтрокСписка(СтрокиСписка, Данные);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		Модуль.ЗаполнитьСостоянияИспытательногоСрокаСотрудников(СтрокиСписка, СотрудникиКОбновлению, ДатаАктуальности);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПлановыйФОТ(НастройкиСписка, СтрокиСписка, СотрудникиКОбновлению, ДатаАктуальности)
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПлановыйФОТИтоги) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = СтрокиСписка[СтрокиСписка.ПолучитьКлючи()[0]].Данные;
	
	Если НЕ (ДанныеСтроки.Свойство("ТарифнаяСтавка") Или ДанныеСтроки.Свойство("СовокупнаяТарифнаяСтавка") Или ДанныеСтроки.Свойство("ФОТ") Или ДанныеСтроки.Свойство("Надбавка")) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеОбОплатеТрудаДляПодбора.Сотрудник КАК Сотрудник,
		|	ДанныеОбОплатеТрудаДляПодбора.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	ДанныеОбОплатеТрудаДляПодбора.СовокупнаяТарифнаяСтавка КАК СовокупнаяТарифнаяСтавка,
		|	ДанныеОбОплатеТрудаДляПодбора.ФОТ КАК ФОТ,
		|	ДанныеОбОплатеТрудаДляПодбора.Надбавка КАК Надбавка
		|ИЗ
		|	РегистрСведений.ПлановыйФОТИтоги КАК ДанныеОбОплатеТрудаДляПодбора
		|ГДЕ
		|	ДанныеОбОплатеТрудаДляПодбора.Сотрудник В(&СотрудникиКОбновлению)
		|	И КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ) МЕЖДУ ДанныеОбОплатеТрудаДляПодбора.Период И ДанныеОбОплатеТрудаДляПодбора.ДатаОкончания";
	
	Данные = Запрос.Выполнить().Выгрузить();
	ЗаполнитьДанныеСтрокСписка(СтрокиСписка, Данные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеОбАвансеДляПодбора(НастройкиСписка, СтрокиСписка, СотрудникиКОбновлению, ДатаАктуальности)
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПлановыеАвансы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = СтрокиСписка[СтрокиСписка.ПолучитьКлючи()[0]].Данные;
	
	Если НЕ (ДанныеСтроки.Свойство("СпособРасчетаАванса") Или ДанныеСтроки.Свойство("Аванс")) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеОбАвансеДляПодбора.Сотрудник КАК Сотрудник,
		|	ДанныеОбАвансеДляПодбора.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	ДанныеОбАвансеДляПодбора.Аванс КАК Аванс
		|ИЗ
		|	РегистрСведений.ПлановыеАвансыИнтервальный КАК ДанныеОбАвансеДляПодбора
		|ГДЕ
		|	ДанныеОбАвансеДляПодбора.Сотрудник В(&СотрудникиКОбновлению)
		|	И КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ) МЕЖДУ ДанныеОбАвансеДляПодбора.ДатаНачала И ДанныеОбАвансеДляПодбора.ДатаОкончания";
	
	Данные = Запрос.Выполнить().Выгрузить();
	ЗаполнитьДанныеСтрокСписка(СтрокиСписка, Данные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВидыЗанятостиСотрудниковДляПодбора(НастройкиСписка, СтрокиСписка, СотрудникиКОбновлению, ДатаАктуальности)
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСтроки = СтрокиСписка[СтрокиСписка.ПолучитьКлючи()[0]].Данные;
	
	Если НЕ (ДанныеСтроки.Свойство("ВидЗанятости")) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗанятостиСотрудниковДляПодбора.Сотрудник КАК Сотрудник,
		|	ВидыЗанятостиСотрудниковДляПодбора.ВидЗанятости КАК ВидЗанятости
		|ИЗ
		|	РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковДляПодбора
		|ГДЕ
		|	ВидыЗанятостиСотрудниковДляПодбора.Сотрудник В(&СотрудникиКОбновлению)
		|	И КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ) МЕЖДУ ВидыЗанятостиСотрудниковДляПодбора.ДатаНачала И ВидыЗанятостиСотрудниковДляПодбора.ДатаОкончания";
	
	Данные = Запрос.Выполнить().Выгрузить();
	ЗаполнитьДанныеСтрокСписка(СтрокиСписка, Данные);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеСтрокСписка(СтрокиСписка, Данные)
	
	Данные.Индексы.Добавить("Сотрудник");
	
	СтруктураПоиска = Новый Структура("Сотрудник");
	Для Каждого КлючЗначение Из СтрокиСписка Цикл
		
		СтруктураПоиска.Сотрудник = КлючЗначение.Ключ.Сотрудник;
		ДанныеПоСотруднику = Данные.НайтиСтроки(СтруктураПоиска);
		Для Каждого ДанныеПоСотрудника Из ДанныеПоСотруднику Цикл
			ЗаполнитьЗначенияСвойств(КлючЗначение.Значение.Данные, ДанныеПоСотрудника);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСписокСотрудниковДляПолученияДанных(ПараметрыПолученияДанных, СтрокиСписка)
	
	СотрудникиКОбновлению = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиСписка.ПолучитьКлючи(), "Сотрудник");
	
	ПараметрСКД = ПараметрыПолученияДанных.Элементы.Найти("СотрудникиКОбновлению");
	Если ПараметрСКД = Неопределено Тогда
		
		ПараметрСКД = ПараметрыПолученияДанных.Элементы.Добавить(Тип("ЗначениеПараметраКомпоновкиДанных"));
		ПараметрСКД.Параметр = Новый ПараметрКомпоновкиДанных("СотрудникиКОбновлению");
		
	КонецЕсли;
	
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение = СотрудникиКОбновлению;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыПолученияДанных(ПараметрыСКД, ПараметрыСписка)
	
	Для Каждого ПараметрСписка Из ПараметрыСписка.Элементы Цикл
		
		ПараметрСКД = ПараметрыСКД.Элементы.Найти(ПараметрСписка.Параметр);
		Если ПараметрСКД <> Неопределено Тогда
			
			ПараметрСКД.Использование = ПараметрСписка.Использование;
			ПараметрСКД.Значение = ПараметрСписка.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОтборПолучаемыхДанных(ОтборПолученияДанных, ОтборДинамическогоСписка)
	
	Для Каждого ЭлементОтбораСписка Из ОтборДинамическогоСписка.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбораСписка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ЭлементОтбора = ОтборПолученияДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, ЭлементОтбораСписка, "ВидСравнения, Использование, ЛевоеЗначение, ПравоеЗначение, Применение");
			
		ИначеЕсли ТипЗнч(ЭлементОтбораСписка) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ГруппаЭлементовОтбора = ОтборПолученияДанных.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбора.ТипГруппы = ЭлементОтбораСписка.ТипГруппы;
			ЗаполнитьОтборПолучаемыхДанных(ГруппаЭлементовОтбора, ЭлементОтбораСписка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПолучаемыеПоля(ДетальныеЗаписи, ПоляДинамическогоСписка)
	
	ДоступныеПоля = ОписаниеПолейСписка();
	
	Для Каждого ОписаниеПоля Из ДоступныеПоля Цикл
		
		Если ПоляДинамическогоСписка.Свойство(ОписаниеПоля.Ключ) 
			И ОписаниеПоля.Значение.Получать Тогда
			
			ДобавитьПолеДетальныхЗаписей(ДетальныеЗаписи, ОписаниеПоля.Ключ, ОписаниеПоля.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДетальныеЗаписи.Выбор.Элементы.Количество() > 0 Тогда
		ДобавитьПолеДетальныхЗаписей(ДетальныеЗаписи, "Сотрудник", "Сотрудник");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПолеДетальныхЗаписей(ДетальныеЗаписи, Заголовок, ИмяПоля)
	
	ВыбираемыйЭлемент = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбираемыйЭлемент.Заголовок = Заголовок;
	ВыбираемыйЭлемент.Использование = Истина;
	ВыбираемыйЭлемент.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеПолейСписка()
	
	ОписаниеПолей = Новый Соответствие;
	ПоляОписания = "Получать, ИспользоватьПривилегированныйРежим, ПутьКДанным";
	
	ОписаниеПолей.Вставить("Наименование",					Новый Структура(ПоляОписания, Ложь,   Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Сотрудник",						Новый Структура(ПоляОписания, Ложь,   Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("ПометкаУдаления",				Новый Структура(ПоляОписания, Истина, Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Код",							Новый Структура(ПоляОписания, Истина, Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("ФизическоеЛицо",				Новый Структура(ПоляОписания, Истина, Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Организация",					Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("ВАрхиве",						Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("УточнениеНаименования",			Новый Структура(ПоляОписания, Истина, Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("ГоловнойСотрудник",				Новый Структура(ПоляОписания, Истина, Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Предопределенный",				Новый Структура(ПоляОписания, Истина, Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Филиал",						Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Подразделение",					Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Должность",						Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("ДолжностьПоШтатномуРасписанию",	Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("КоличествоСтавок",				Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("КоличествоСтавокПредставление",	Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("ВидДоговора",					Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Начало",						Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Окончание",						Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("МестоВСтруктуреПредприятия",	Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("Пиктограмма",					Новый Структура(ПоляОписания, Истина, Ложь,   "ДанныеДляПодбора"));
	ОписаниеПолей.Вставить("ВидЗанятости",					Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	
	Возврат ОписаниеПолей;
	
КонецФункции

#КонецОбласти


#Область ИзменениеРеквизитовВыделенныхСтрокСотрудников

&НаКлиенте
Процедура СписокОперацииНеВыполняютсяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьЗначениеРеквизитаСотрудникам(ДополнительныеПараметры.Сотрудники, ДополнительныеПараметры.ОперацияУстановить, "ВАрхиве");
		ДополнительныеПараметры.ЭлементФормыСписок.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУдалитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьЗначениеРеквизитаСотрудникам(ДополнительныеПараметры.Сотрудники, ДополнительныеПараметры.ОперацияУстановить, "ПометкаУдаления");
		ДополнительныеПараметры.ЭлементФормыСписок.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеРеквизитаСотрудникам(СтрокиСотрудников, ЗначениеРеквизита, ИмяРеквизита)
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиСотрудников, "Сотрудник");
	
	ЗначениеРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, ИмяРеквизита);
	Для каждого ОписаниеОбъекта Из ЗначениеРеквизитов Цикл
		
		Если ОписаниеОбъекта.Значение <> ЗначениеРеквизита Тогда
			
			СотрудникОбъект = ОписаниеОбъекта.Ключ.ПолучитьОбъект();
			СотрудникОбъект[ИмяРеквизита] = ЗначениеРеквизита;
			СотрудникОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область РежимВыбораСотрудников

&НаКлиенте
Процедура ВыполнитьВыборОтобранных()
	
	Если ПараметрыФормы.МножественныйВыбор Тогда
		
		Если ВыбранныеСотрудники.Количество() > 0
			Или Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		
			СписокОповещения = ВыбранныеСотрудники.ВыгрузитьЗначения();
			ВыбранныеСотрудники.Очистить();
			
			Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
				
				Для Каждого ВыбраннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
					
					ВыбранныеДанные = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
					Если СписокОповещения.Найти(ВыбранныеДанные.Ссылка) = Неопределено Тогда
						СписокОповещения.Добавить(ВыбранныеДанные.Ссылка);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ОповеститьОВыборе(СписокОповещения);
			
		ИначеЕсли Элементы.Список.ТекущиеДанные <> Неопределено
			И Элементы.Список.ТекущиеДанные.Ссылка <> Неопределено Тогда
			
			ОповеститьОВыборе(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Список.ТекущиеДанные.Ссылка));
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Список.ТекущиеДанные <> Неопределено
		И Элементы.Список.ТекущиеДанные.Ссылка <> Неопределено Тогда
		
		ОповеститьОВыборе(Элементы.Список.ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОВыбореОтобранныхСотрудников()
	
	Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОВыбореОтобранныхСотрудниковЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru='Выполнить выбор отобранных сотрудников?'"), РежимДиалогаВопрос.ДаНетОтмена,);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОВыбореОтобранныхСотрудниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьВыборОтобранных();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ВыбранныеСотрудники.Очистить();
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокРанееПодобранныхСотрудников()
	
	ЭлементУсловногоОформления = Неопределено;
	Для каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru='Выделение ранее подобранных'") Тогда
			ЭлементУсловногоОформления = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементУсловногоОформления <> Неопределено Тогда
		ЭлементУсловногоОформления.Отбор.Элементы[0].ПравоеЗначение = СписокПодобранных;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбранныхСотрудников()
	
	ЭлементУсловногоОформления = Неопределено;
	Для каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru='Выделение подобранных'") Тогда
			ЭлементУсловногоОформления = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементУсловногоОформления <> Неопределено Тогда
		ЭлементУсловногоОформления.Отбор.Элементы[0].ПравоеЗначение = ВыбранныеСотрудники;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсех()
	
	СхемаСписка = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиСхемы = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ПолеСсылка = НастройкиСхемы.Структура.Получить(0).Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеСсылка.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	Если ВыбранныеСотрудники.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиСхемы.Отбор, "Ссылка", ВыбранныеСотрудники, ВидСравненияКомпоновкиДанных.НеВСписке);
		
	КонецЕсли;
	
	Если СписокПодобранных.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиСхемы.Отбор, "Ссылка", СписокПодобранных, ВидСравненияКомпоновкиДанных.НеВСписке);
		
	КонецЕсли;
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаСписка, НастройкиСхемы, , , Ложь);
	
	ДанныеСписка = Новый ТаблицаЗначений;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеСписка);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого СтрокаДанныхСписка Из ДанныеСписка Цикл
		ВыбранныеСотрудники.Добавить(СтрокаДанныхСписка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Напоминания

&НаКлиенте
Процедура ОткрытьФормуНапоминаниеОДнеРождения()
	
	МассивСотрудников = Новый Массив;
	
	Для каждого КлючСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		МассивСотрудников.Добавить(Элементы.Список.ДанныеСтроки(КлючСтроки).Ссылка);
	КонецЦикла;
	
	Если МассивСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("СписокПредметов", АдресСпискаСотрудниковНаСервере(МассивСотрудников, УникальныйИдентификатор));
	ОткрытьФорму("ОбщаяФорма.НапоминаниеОДнеРождения", ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресСпискаСотрудниковНаСервере(МассивСотрудников, ИдентификаторФормы)
	
	Возврат ПоместитьВоВременноеХранилище(МассивСотрудников, ИдентификаторФормы);
	
КонецФункции

#КонецОбласти


#Область ОтборПоОрганизации

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОтбораПоОрганизации(Форма)
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	
	ВспомогательныйОтборПоСтруктуреПредприятия = Элементы["ПоСтруктуреПредприятия"].Пометка;
	
	// Установка отбора по организации
	Если Не ВспомогательныйОтборПоСтруктуреПредприятия И Форма.ОрганизацияИспользование
		И Не Форма.ОтборПоМестуВСтруктуреПредприятия Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "Организация", Форма.Организация, ВидСравненияКомпоновкиДанных.Равно, НСтр("ru='Организация'"), ,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, "Организация", НСтр("ru='Организация'"));
		
	КонецЕсли;
	
	// Проверка наличия организаций-филиалов
	Форма.ЕстьФилиалы = Ложь;
	Если Не Форма.ПараметрыФормы.ДоступныНепринятые
		И Не Форма.Отборы.ПоказыватьТолькоДоговорниковГПХ Тогда
		
		Если ЗначениеЗаполнено(Форма.Организация) Тогда
			Форма.ЕстьФилиалы = ЗарплатаКадрыВызовСервера.УОрганизацииЕстьФилиалы(Форма.Организация);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтборПоФилиалуГруппа",
			"Видимость",
			Не Форма.ФилиалЗафиксирован
				И Не Форма.ПодразделениеИспользование
				И (Форма.ЕстьФилиалы Или Форма.ФилиалИспользование));
		
		Если Форма.ЕстьФилиалы Тогда
			
			Если Не ЗначениеЗаполнено(Форма.Филиал)
				Или ГоловнаяОрганизацияНаСервереБезКонтекста(Форма.Филиал) <> Форма.Организация Тогда
				
				Форма.ФилиалИспользование = Истина;
				Форма.Филиал = Форма.Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПриИзмененииОтбораПоФилиалу(Форма);
		
		Если Не Форма.ФилиалИспользование Тогда
			ЗапомнитьОтборПоОрганизации(Форма.Организация, Форма.Филиал);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГоловнаяОрганизацияНаСервереБезКонтекста(Филиал)
	
	УстановитьПривилегированныйРежим(Истина);
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Филиал);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ГоловнаяОрганизация; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОтбораПоФилиалу(Форма)
	
	ВспомогательныйОтборПоСтруктуреПредприятия = Форма.Элементы["ПоСтруктуреПредприятия"].Пометка;
	Если Не ВспомогательныйОтборПоСтруктуреПредприятия И Форма.ФилиалИспользование Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, "Филиал", Форма.Филиал, ВидСравненияКомпоновкиДанных.Равно, НСтр("ru='Филиал'"), ,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ЗапомнитьОтборПоОрганизации(Форма.Организация, Форма.Филиал);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Форма.Список, "Филиал", НСтр("ru='Филиал'"));
		
	КонецЕсли;
	
	УстановитьОборПодразделений(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОборПодразделений(Форма)
	
	Если Форма.ОрганизацияИспользование Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.ПодразделенияОрганизаций, "ГоловнаяОрганизация", Форма.Организация, ВидСравненияКомпоновкиДанных.Равно, НСтр("ru='Организация'"), ,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Форма.ПодразделенияОрганизаций, "ГоловнаяОрганизация", НСтр("ru='Организация'"));
		
	КонецЕсли;
	
	Если Форма.ФилиалИспользование
		Или Не Форма.ЕстьФилиалы И Форма.ОрганизацияИспользование Тогда
		
		Если Форма.ЕстьФилиалы Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.ПодразделенияОрганизаций, "Владелец", Форма.Филиал, ВидСравненияКомпоновкиДанных.Равно, НСтр("ru='Владелец'"), ,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.ПодразделенияОрганизаций, "Владелец", Форма.Организация, ВидСравненияКомпоновкиДанных.Равно, НСтр("ru='Владелец'"), ,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Форма.ПодразделенияОрганизаций, "Владелец", НСтр("ru='Владелец'"));
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПодразделенияОрганизацийВладелец",
		"Видимость",
		Форма.ЕстьФилиалы И Не Форма.ФилиалИспользование);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапомнитьОтборПоОрганизации(Организация, Филиал)
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		ОрганизацияОтбора = Филиал;
	Иначе
		ОрганизацияОтбора = Организация;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаСпискаСотрудников", "Организация", ОрганизацияОтбора);
	
КонецПроцедуры

#КонецОбласти


#Область ОтборПоПериоду

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииПериодаРаботы(Форма)
	
	Если Форма.ДатаОкончания < Форма.ДатаНачала Тогда
		Форма.ДатаОкончания = Форма.ДатаНачала;
	КонецЕсли;
	
	УстановитьОтборПоПериоду(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Форма)
	
	Если Форма.ОтбиратьРаботающихВПериоде Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаНачала", Форма.ДатаНачала, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаОкончания", Форма.ДатаОкончания, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаАктуальности", '00010101', Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.Список, "ВидСобытияУвольнение", ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.Увольнение"), Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПодразделенияОрганизаций, "ДатаОкончания", Форма.ДатаОкончания, Истина);
		
	Иначе
		
		Если Форма.Отборы <> Неопределено И Форма.Отборы.ПоказыватьТолькоДоговорниковГПХ Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаНачала", '00010101', Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаОкончания", Форма.ДатаОкончания, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаАктуальности", '00010101', Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПодразделенияОрганизаций, "ДатаОкончания", Форма.ДатаОкончания, Истина);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаАктуальности", Форма.ДатаНачала, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаНачала", '00010101', Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "ДатаОкончания", '00010101', Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПодразделенияОрганизаций, "ДатаОкончания", Форма.ДатаНачала, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.Список, "ВидСобытияУвольнение", ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.Увольнение"), Ложь);
		
	КонецЕсли;

	УстановитьОтображениеПолейОтбораПоПериодуРаботы(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейОтбораПоПериодуРаботы(Форма)
	
	ВидимостьПолей = Не Форма.ПараметрыФормы.ДоступныНепринятые;
	Если ВидимостьПолей И Форма.Отборы <> Неопределено Тогда
		
		Если Форма.Отборы.ПоказыватьТолькоДоговорниковГПХ Тогда
			ВидимостьПолей = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаРаботы",
		"Видимость",
		ВидимостьПолей И Не Форма.ОтбиратьРаботающихВПериоде);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОтборПоПериодуГруппа",
		"Видимость",
		ВидимостьПолей И Форма.ОтбиратьРаботающихВПериоде);
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеОтборы

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииВспомогательногоОтбора(Форма, ИмяКомандыВспомогательногоОтбора, СохранитьВНастройках = Истина)
	
	Элементы = Форма.Элементы;
	
	СписокКоманд = Новый Соответствие;
	СписокКоманд.Вставить("ВсеСотрудники");
	СписокКоманд.Вставить("ПоПодразделениям", "ПоПодразделениямГруппа");
	СписокКоманд.Вставить("ПоГруппамСотрудников", "ПоГруппамСотрудниковГруппа");
	СписокКоманд.Вставить("ПоСтруктуреПредприятия", "ПоСтруктуреПредприятияГруппа");
	
	ИмяСтраницыВспомогательногоОтбора = Неопределено;
	Для Каждого ОписаниеКоманды Из СписокКоманд Цикл
		
		ПометкаЭлемента = (ОписаниеКоманды.Ключ = ИмяКомандыВспомогательногоОтбора);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ОписаниеКоманды.Ключ,
			"Пометка",
			ПометкаЭлемента);
		
		Если ПометкаЭлемента Тогда
			ИмяСтраницыВспомогательногоОтбора = ОписаниеКоманды.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВспомогательныеОтборы",
		"Видимость",
		ЗначениеЗаполнено(ИмяСтраницыВспомогательногоОтбора));
	
	Если ЗначениеЗаполнено(ИмяСтраницыВспомогательногоОтбора) Тогда
		
		СтраницаВспомогательногоОтбора = Элементы.Найти(ИмяСтраницыВспомогательногоОтбора);
		Если СтраницаВспомогательногоОтбора <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ВспомогательныеОтборы",
				"ТекущаяСтраница",
				СтраницаВспомогательногоОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СохранитьВНастройках Тогда
		ЗапомнитьВыбранныйВидВспомогательногоОтбора(ИмяКомандыВспомогательногоОтбора);
	КонецЕсли;
	
	Если Не Форма.ПодразделениеИспользование Тогда
		
		ОтборПоПодразделениям = (ИмяКомандыВспомогательногоОтбора = "ПоПодразделениям");
		Если Не ОтборПоПодразделениям Тогда
			УстановитьОтборПоПодразделению(Форма);
		КонецЕсли;
		
	Иначе
		ОтборПоПодразделениям = Истина;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокПоказыватьСотрудниковПодчиненныхПодразделений",
		"Видимость",
		ОтборПоПодразделениям Или Форма.ПодразделениеИспользование);
	
	ОтборПоГруппамСотрудников = (ИмяКомандыВспомогательногоОтбора = "ПоГруппамСотрудников");
	Если ОтборПоГруппамСотрудников Тогда
		Форма.ВосстановитьПоследнееЗначениеОтбораПоГруппамСотрудников();
	Иначе
		УстановитьОтборСотрудниковПоГруппам(Форма);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокПоказыватьСотрудниковПодчиненныхГрупп",
		"Видимость",
		ОтборПоГруппамСотрудников);
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		
		ОтборПоСтруктуреПредприятия = (ИмяКомандыВспомогательногоОтбора = "ПоСтруктуреПредприятия");
		Если Не ОтборПоСтруктуреПредприятия Тогда
			УстановитьОтборПоСтруктуреПредприятия(Форма);
		КонецЕсли;
		
		ПриИзмененииОтбораПоОрганизации(Форма);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтборыПоОрганизациямГруппа",
			"Видимость",
			Не ОтборПоСтруктуреПредприятия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапомнитьВыбранныйВидВспомогательногоОтбора(ИмяКомандыВспомогательногоОтбора)
	
	// Не сохраняем имя команды вспомогательно отбора если это отбор по группам сотрудников
	Если ИмяКомандыВспомогательногоОтбора = "ПоГруппамСотрудников" Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаСпискаСотрудников", "ИмяКомандыВспомогательногоОтбора", ИмяКомандыВспомогательногоОтбора);
	
КонецПроцедуры


#Область ВспомогательныйОтборПоПодразделениям

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма, СписокПодразделений = Неопределено)
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	ПодразделенияОрганизацийВИерархии = ПодразделенияОрганизацийВИерархии(Форма);
	
	Если СписокПодразделений = Неопределено Тогда
		
		СписокПодразделений = Новый Массив;
		Если Элементы["ПоПодразделениям"].Пометка Тогда
			
			Если Элементы.ПодразделенияОрганизаций.ВыделенныеСтроки.Количество() > 0 Тогда
				
				Для Каждого Подразделение Из Элементы.ПодразделенияОрганизаций.ВыделенныеСтроки Цикл
					
					Если ЗначениеЗаполнено(Подразделение) Тогда
						СписокПодразделений.Добавить(Подразделение);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПодразделенияОрганизацийВИерархии Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Форма.Подразделения) = Тип("ФиксированныйМассив") Тогда
			СписокПодразделений = Новый Массив(Форма.Подразделения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокПодразделений.Количество() > 0 Тогда
		
		Если ПодразделенияОрганизацийВИерархии Тогда
			ПодразделениеИспользование = Ложь;
			ВышестоящееПодразделениеИспользование = Истина;
		Иначе
			ПодразделениеИспользование = Истина;
			ВышестоящееПодразделениеИспользование = Ложь;
		КонецЕсли;
		
	Иначе
		ПодразделениеИспользование = Ложь;
		ВышестоящееПодразделениеИспользование = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Подразделение", СписокПодразделений, ПодразделениеИспользование);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВышестоящееПодразделение", СписокПодразделений, ВышестоящееПодразделениеИспользование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоИерархииПодразделений(Форма, Значение, СохранитьВНастройках = Истина)
	
	Элементы = Форма.Элементы;
	
	Элементы.СписокПоказыватьСотрудниковПодчиненныхПодразделений.Пометка = Значение;
	Элементы.ПоказыватьСотрудниковПодчиненныхПодразделений.Пометка = Значение;
	
	Если СохранитьВНастройках Тогда
		ЗапомнитьВыбранныйОтборПоИерархииПодразделений(Значение);
		УстановитьОтборПоПодразделению(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапомнитьВыбранныйОтборПоИерархииПодразделений(Значение)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаСпискаСотрудников", "ОтборПоИерархииПодразделений", Значение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодразделенияОрганизацийВИерархии(Форма)
	
	Возврат Форма.Элементы.СписокПоказыватьСотрудниковПодчиненныхПодразделений.Пометка;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныйОтборПоГруппамСотрудников

&НаКлиенте
Процедура УстановитьОтборПоГруппеСотрудников()
	
	СписокГруппСотрудников = Новый Массив;
	
	Если Элементы["ПоГруппамСотрудников"].Пометка Тогда
		
		Если Элементы.ГруппыСотрудников.ВыделенныеСтроки.Количество() > 0 Тогда
			
			Для каждого ГруппаСотрудников Из Элементы.ГруппыСотрудников.ВыделенныеСтроки Цикл
				
				Если ЗначениеЗаполнено(ГруппаСотрудников) Тогда
					СписокГруппСотрудников.Добавить(ГруппаСотрудников);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокГруппСотрудников.Количество() > 0 Тогда
		
		Результат = УстановитьОтборПоГруппеСотрудниковНаСервере(СписокГруппСотрудников);
		Если Не Результат.Статус = "Выполнено" Тогда
			
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			АдресХранилища		 = Результат.АдресРезультата;
			
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
			
		Иначе
			
			УстановитьОтборСотрудниковПоГруппам(ЭтотОбъект, АдресХранилища);
			
		КонецЕсли;
		
	Иначе
		УстановитьОтборСотрудниковПоГруппам(ЭтотОбъект);
	КонецЕсли;
	
	Если Элементы["ПоГруппамСотрудников"].Пометка И Элементы.ГруппыСотрудников.ТекущаяСтрока <> Неопределено Тогда
		ЗапомнитьВыбраннуюГруппуСотрудников(Элементы.ГруппыСотрудников.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьОтборПоГруппеСотрудниковНаСервере(СписокГруппСотрудников)
	
	ПараметрыПолученияСотрудниковПоГруппам = Новый Структура;
	ПараметрыПолученияСотрудниковПоГруппам.Вставить("СписокГрупп", СписокГруппСотрудников);
	ПараметрыПолученияСотрудниковПоГруппам.Вставить("ПоказыватьСотрудниковПодчиненныхПодразделений", ГруппыСотрудниковВИерархии(ЭтотОбъект));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение сотрудников по группам'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ГруппыСотрудников.СотрудникиГруппСотрудниковВФоне",
		ПараметрыПолученияСотрудниковПоГруппам,
		ПараметрыВыполнения);
	
	АдресХранилища = Результат.АдресРезультата;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				УстановитьОтборСотрудниковПоГруппам(ЭтотОбъект, АдресХранилища);
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
				КонецЕсли;
				
			КонецЕсли;
			
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСотрудниковПоГруппам(Форма, АдресХранилища = Неопределено)
	
	Список = Форма.Список;
	
	Если АдресХранилища = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, , "ОтборПоГруппеСотрудников");
		
	Иначе
		
		ОтборПоГруппеСотрудников = Неопределено;
		ОтборыПоГруппеСотрудников = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
			,
			"ОтборПоГруппеСотрудников");
		
		Если ОтборыПоГруппеСотрудников.Количество() > 0 Тогда
			ОтборПоГруппеСотрудников = ОтборыПоГруппеСотрудников[0];
		КонецЕсли;
		
		СотрудникиГрупп = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ОтборПоГруппеСотрудников = Неопределено Тогда
			
			ОтборПоГруппеСотрудников = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, "ОтборПоГруппеСотрудников", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОтборПоГруппеСотрудников, "Сотрудник", СотрудникиГрупп, ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапомнитьВыбраннуюГруппуСотрудников(ГруппаСотрудников)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаСпискаСотрудников", "ГруппаСотрудников", ГруппаСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПоследнееЗначениеОтбораПоГруппамСотрудников() Экспорт
	
	ГруппаСотрудников = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаСпискаСотрудников", "ГруппаСотрудников");
	Если ЗначениеЗаполнено(ГруппаСотрудников) Тогда
		Элементы.ГруппыСотрудников.ТекущаяСтрока = ГруппаСотрудников;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоИерархииГруппСотрудников(Форма, Значение, СохранитьВНастройках = Истина)
	
	Элементы = Форма.Элементы;
	
	Элементы.СписокПоказыватьСотрудниковПодчиненныхГрупп.Пометка = Значение;
	Элементы.ПоказыватьСотрудниковПодчиненныхГрупп.Пометка = Значение;
	
	Если СохранитьВНастройках Тогда
		ЗапомнитьВыбранныйОтборПоИерархииГруппСотрудников(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапомнитьВыбранныйОтборПоИерархииГруппСотрудников(Значение)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаСпискаСотрудников", "ОтборПоИерархииГруппСотрудников", Значение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ГруппыСотрудниковВИерархии(Форма)
	
	Возврат Форма.Элементы.СписокПоказыватьСотрудниковПодчиненныхГрупп.Пометка;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныйОтборПоСтруктуреПредприятия

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСтруктуреПредприятия(Форма, СписокСтруктурныхЕдиниц = Неопределено)
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	СтруктураПредприятияВИерархии = СтруктураПредприятияВИерархии(Форма);
	
	Если СписокСтруктурныхЕдиниц = Неопределено Тогда
		
		СписокСтруктурныхЕдиниц = Новый Массив;
		Если Элементы["ПоСтруктуреПредприятия"].Пометка Тогда
			
			Если Элементы.СтруктураПредприятия.ВыделенныеСтроки.Количество() > 0 Тогда
				
				Для Каждого СтруктурнаяЕдиница Из Элементы.СтруктураПредприятия.ВыделенныеСтроки Цикл
					
					Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
						СписокСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		
		Если СтруктураПредприятияВИерархии Тогда
			СтруктурнаяЕдиницаИспользование = Ложь;
			ВышестоящаяСтруктурнаяЕдиницаИспользование = Истина;
		Иначе
			СтруктурнаяЕдиницаИспользование = Истина;
			ВышестоящаяСтруктурнаяЕдиницаИспользование = Ложь;
		КонецЕсли;
		
	Иначе
		СтруктурнаяЕдиницаИспользование = Ложь;
		ВышестоящаяСтруктурнаяЕдиницаИспользование = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СтруктурнаяЕдиница", СписокСтруктурныхЕдиниц, СтруктурнаяЕдиницаИспользование);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВышестоящаяСтруктурнаяЕдиница", СписокСтруктурныхЕдиниц, ВышестоящаяСтруктурнаяЕдиницаИспользование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоИерархииСтруктурыПредприятия(Форма, Значение, СохранитьВНастройках = Истина)
	
	Элементы = Форма.Элементы;
	
	Элементы.СписокПоказыватьСотрудниковПодчиненныхСтруктурныхЕдиниц.Пометка = Значение;
	Элементы.ПоказыватьСотрудниковПодчиненныхСтруктурныхЕдиниц.Пометка = Значение;
	
	Если СохранитьВНастройках Тогда
		ЗапомнитьВыбранныйОтборПоСтруктуреПредприятия(Значение);
		УстановитьОтборПоСтруктуреПредприятия(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапомнитьВыбранныйОтборПоСтруктуреПредприятия(Значение)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаСпискаСотрудников", "ОтборПоСтруктуреПредприятия", Значение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПредприятияВИерархии(Форма)
	
	Возврат Форма.Элементы.СписокПоказыватьСотрудниковПодчиненныхСтруктурныхЕдиниц.Пометка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФормуСотрудника(СотрудникСсылка, ПараметрыОткрытия = Неопределено)
	
	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		ПараметрыОткрытия.Вставить("Ключ", СотрудникСсылка);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("РежимВыбора", Элементы.Список.РежимВыбора);
	ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиНаКлиенте()
	
	Элементы.Список.Обновить();
	Если Элементы.ПоПодразделениям.Пометка Тогда
		Элементы.ПодразделенияОрганизаций.Обновить();
	ИначеЕсли Элементы.ПоГруппамСотрудников.Пометка Тогда
		Элементы.ГруппыСотрудников.Обновить();
	ИначеЕсли Элементы.ПоСтруктуреПредприятия.Пометка Тогда
		Элементы.СтруктураПредприятия.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюСтрокуСотрудника(Сотрудник)
	
	НовыйКлюч = Новый Структура("Наименование,ФизическоеЛицо,Сотрудник,ИдентификаторЗаписи");
	ЗаполнитьЗначенияСвойств(НовыйКлюч, Элементы.Список.ТекущаяСтрока);
	
	НовыйКлюч.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Наименование");
	
	Элементы.Список.ТекущаяСтрока = РегистрыСведений.ДанныеДляПодбораСотрудников.СоздатьКлючЗаписи(НовыйКлюч);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапомнитьОтборПоСотрудникамВАрхиве(ПометкаВАрхиве)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаСпискаСотрудников", "ПометкаВАрхиве", ПометкаВАрхиве);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСотрудниковВАрхиве(Форма, СохранитьНастройку = Истина)
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	
	Если Элементы.ВАрхиве.Пометка Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, "ВАрхиве", "ВАрхиве");
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "ВАрхиве", Ложь, ВидСравненияКомпоновкиДанных.Равно, "ВАрхиве", , , РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
	Если СохранитьНастройку Тогда
		ЗапомнитьОтборПоСотрудникамВАрхиве(Элементы.ВАрхиве.Пометка)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДоговорникамГПХ(Форма, Значение, ПоказыватьТолькоДоговорниковГПХ)
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокДоговорникиГПХ",
		"Пометка",
		Значение);
		
	Если ПоказыватьТолькоДоговорниковГПХ = Истина Тогда
		
		Если Значение Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "ПоДоговоруГПХ", Истина, ВидСравненияКомпоновкиДанных.Равно, "ПоДоговоруГПХ", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				
		Иначе
				
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
				Список, "ПоДоговоруГПХ", "ПоДоговоруГПХ");
				
		КонецЕсли;
		
	Иначе
			
		Если Не Значение Тогда
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "ПоДоговоруГПХ", Ложь, ВидСравненияКомпоновкиДанных.Равно, "ПоДоговоруГПХ", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		Иначе
				
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
				Список, "ПоДоговоруГПХ", "ПоДоговоруГПХ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Значение Тогда
		УстановитьОтборПоПодработкам(Форма, Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокПодработки",
		"Видимость",
		Не Значение
			И Не Форма.ПараметрыФормы.РежимВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодработкам(Форма, Значение, ПоказыватьТолькоПодработки = Неопределено)
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокПодработки",
		"Пометка",
		Значение);
	
	Если Значение Тогда
		
		Если ПоказыватьТолькоПодработки = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "ЭтоГоловнойСотрудник", Ложь, ВидСравненияКомпоновкиДанных.Равно, "ЭтоГоловнойСотрудник", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
				Список, "ЭтоГоловнойСотрудник", "ЭтоГоловнойСотрудник");
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "ЭтоГоловнойСотрудник", Истина, ВидСравненияКомпоновкиДанных.Равно, "ЭтоГоловнойСотрудник", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
КонецПроцедуры


#Область ПодготовкаФормы

&НаСервере
Процедура УстановитьОтображениеЭлементовУправленияФормы()
	
	// Если форма в режиме выбора с параметром ДоступныНепринятые команду режима ВсеСотрудники не показываем
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВсеСотрудники",
		"Видимость",
		Не ПараметрыФормы.РежимВыбора
			Или Не ПараметрыФормы.ДоступныНепринятые);
	
	// Панель вспомогательного отбора по группам сотрудников доступна только при работе в режиме выбора
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоГруппамСотрудников",
		"Видимость",
		ПараметрыФормы.РежимВыбора
			И Не ПараметрыФормы.ДоступныНепринятые);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоГруппамСотрудниковГруппа",
		"Видимость",
		ПараметрыФормы.РежимВыбора
			И Не ПараметрыФормы.ДоступныНепринятые);
	
	// Панель вспомогательного отбора по подразделениям не доступна с параметром формы ДоступныНепринятые
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоПодразделениям",
		"Видимость",
		Не ПараметрыФормы.ДоступныНепринятые
			И Не ПодразделениеИспользование
			И Не ОтборПоМестуВСтруктуреПредприятия);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоПодразделениямГруппа",
		"Видимость",
		Не ПараметрыФормы.ДоступныНепринятые
			И Не ПодразделениеИспользование
			И Не ОтборПоМестуВСтруктуреПредприятия);
	
	// Установка видимости элементов, обеспечивающих выбор/подбор сотрудников
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокВыбрать",
		"Видимость",
		ПараметрыФормы.РежимВыбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокВыбратьВсех",
		"Видимость",
		ПараметрыФормы.РежимВыбора
			И ПараметрыФормы.МножественныйВыбор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыбранныеСотрудники",
		"Видимость",
		ПараметрыФормы.РежимВыбора
			И ПараметрыФормы.МножественныйВыбор);
	
	// Панель вспомогательного отбора по структуре предприятия не доступна с параметром формы ДоступныНепринятые
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоСтруктуреПредприятия",
		"Видимость",
		Не ПараметрыФормы.ДоступныНепринятые
			И СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц
			И Не ОтборПоМестуВСтруктуреПредприятия);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоСтруктуреПредприятияГруппа",
		"Видимость",
		Не ПараметрыФормы.ДоступныНепринятые
			И СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц
			И Не ОтборПоМестуВСтруктуреПредприятия);
	
	// Установка видимости команд отборов по подработкам и договорникам
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокПодработки",
		"Видимость",
		Не Отборы.ПоказыватьТолькоПодработки
			И (Отборы.ПоказыватьПодработки
				Или Не ПараметрыФормы.РежимВыбора));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокДоговорникиГПХ",
		"Видимость",
		Не Отборы.ПоказыватьТолькоПодработки
			И (Отборы.ПоказыватьДоговорниковГПХ
				Или Не ПараметрыФормы.РежимВыбора));
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуКРаботеВРежимеВыбора()
	
	Если ПараметрыФормы.РежимВыбора Тогда
		
		Если ПараметрыФормы.МножественныйВыбор Тогда
			
			Если ЗначениеЗаполнено(ПараметрыФормы.АдресСпискаПодобранныхСотрудников) Тогда
				
				СписокПодобранных.ЗагрузитьЗначения(
					ПолучитьИзВременногоХранилища(ПараметрыФормы.АдресСпискаПодобранныхСотрудников));
				
				УстановитьСписокРанееПодобранныхСотрудников();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыФормы.ДоступныНепринятые Тогда
			
			Если СписокПодобранных.Количество() = 0
				И Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
				
				СписокПодобранных.Добавить(Параметры.ТекущаяСтрока);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список, "ДоступныНепринятые", Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список, "СписокПодобранных", СписокПодобранных.ВыгрузитьЗначения());
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список, "ТрудовыеОтношенияОформлены", Истина);
			
		КонецЕсли;
		
	Иначе
		Элементы.Список.РежимВыбора = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПараметровФормы()
	
	ИзмененОтборПоОрганизации = Ложь;
	УстановленОтборПоПодразделению = Ложь;
	
	СтруктураОтборов = Новый Структура;
	
	СтруктураОтборов.Вставить("ПоказыватьДоговорниковГПХ", Ложь);
	СтруктураОтборов.Вставить("ПоказыватьТолькоДоговорниковГПХ", Ложь);
	
	СтруктураОтборов.Вставить("ПоказыватьПодработки", Ложь);
	СтруктураОтборов.Вставить("ПоказыватьТолькоПодработки", Ложь);
	СтруктураОтборов.Вставить("ЗаданОтборПоПериоду", Ложь);
	
	Если Параметры.Свойство("Отбор") Тогда
		
		СписокНастройкиОтбора = Новый Массив;
		
		// Получим параметры периода отбора.
		ПараметрыОтбораПоПериоду = СотрудникиФормыРасширенный.ПараметрыОтбораПоПериодуПараметровОткрытияФормыСписка(Параметры);
		Если ПараметрыОтбораПоПериоду.ОтборПоПериодуКадровыхДанныхИспользуется Тогда
			
			СтруктураОтборов.ЗаданОтборПоПериоду = Истина;
			
			ОтбиратьРаботающихВПериоде = ПараметрыОтбораПоПериоду.ОтбиратьРаботающихВПериоде;
			ДатаНачала = ПараметрыОтбораПоПериоду.ПериодРаботы.ДатаНачала;
			ДатаОкончания = ПараметрыОтбораПоПериоду.ПериодРаботы.ДатаОкончания;
			
			Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = ТекущаяДатаСеанса();
			КонецЕсли; 
			
		КонецЕсли;
		
		// Установка параметра ПоказыватьПодработки
		Если Параметры.Отбор.Свойство("ПоказыватьПодработки") Тогда
			
			СтруктураОтборов.ПоказыватьПодработки = Параметры.Отбор.ПоказыватьПодработки;
			Параметры.Отбор.Удалить("ПоказыватьПодработки");
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ПоказыватьТолькоПодработки") Тогда
			
			СтруктураОтборов.ПоказыватьТолькоПодработки = Параметры.Отбор.ПоказыватьТолькоПодработки;
			Параметры.Отбор.Удалить("ПоказыватьТолькоПодработки");
			
		КонецЕсли;
		
		// Установка параметра ПоказыватьДоговорниковГПХ
		Если Параметры.Отбор.Свойство("ПоказыватьДоговорниковГПХ") Тогда
			
			СтруктураОтборов.ПоказыватьДоговорниковГПХ = Параметры.Отбор.ПоказыватьДоговорниковГПХ;
			Параметры.Отбор.Удалить("ПоказыватьДоговорниковГПХ");
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("РольСотрудника") Тогда
			
			Если Параметры.Отбор.РольСотрудника = Перечисления.РолиСотрудников.Договорник Тогда
				
				СтруктураОтборов.ПоказыватьТолькоДоговорниковГПХ = Истина;
				СтруктураОтборов.ПоказыватьДоговорниковГПХ = Истина;
				
				Если Параметры.Свойство("РазрешеноОтключатьОтборПоРоли")
					И Параметры.РазрешеноОтключатьОтборПоРоли = Истина Тогда
					СтруктураОтборов.ПоказыватьДоговорниковГПХ = Ложь;
				КонецЕсли;
				
			Иначе
				СтруктураОтборов.ПоказыватьДоговорниковГПХ = Ложь;
			КонецЕсли;
			
			Параметры.Отбор.Удалить("РольСотрудника");
			
		КонецЕсли;
		
		// Установка отбора по гражданским или по военнослужащим
		ОтборПоВидуДоговоров = "";
		Если Параметры.Отбор.Свойство("НачислениеЗарплатыВоеннослужащим") Тогда
			
			Если Параметры.Отбор.НачислениеЗарплатыВоеннослужащим Тогда
				
				ВидыДоговоровОтобор = Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы();
				ОтборПоВидуДоговоров = НСтр("ru='Военнослужащие'");
				
			Иначе
				
				ВидыДоговоровОтобор = Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровКромеВоеннойСлужбы();
				ОтборПоВидуДоговоров = НСтр("ru='Гражданский персонал'");
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "ВидДоговора", ВидыДоговоровОтобор, ВидСравненияКомпоновкиДанных.ВСписке,
				"ВидДоговора", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			Параметры.Отбор.Удалить("НачислениеЗарплатыВоеннослужащим");
			
		КонецЕсли;
		
		ОтборПоМестуВСтруктуреПредприятия = Параметры.Отбор.Свойство("МестоВСтруктуреПредприятия");
		ДолжностьПоШтатномуРасписанию = Неопределено;
		
		Если ОтборПоМестуВСтруктуреПредприятия Тогда
			
			УстановитьОтборПоСтруктуреПредприятия(ЭтотОбъект, Параметры.Отбор.МестоВСтруктуреПредприятия);
			Параметры.Отбор.Удалить("МестоВСтруктуреПредприятия");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОтборПоОрганизацииГруппа",
				"Видимость",
				Ложь);
			
		ИначеЕсли Параметры.Отбор.Свойство("ДолжностьПоШтатномуРасписанию")
			И ЗначениеЗаполнено(Параметры.Отбор.ДолжностьПоШтатномуРасписанию) Тогда
			
			// Отбор по позиции штатного расписания
			ДолжностьПоШтатномуРасписанию = Параметры.Отбор.ДолжностьПоШтатномуРасписанию;
			
			УстановитьПривилегированныйРежим(Истина);
			ДанныеПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьПоШтатномуРасписанию, "Владелец,Подразделение");
			УстановитьПривилегированныйРежим(Ложь);
			
			ФилиалЗафиксирован = Истина;
			
			Филиал = ДанныеПозиции.Владелец;
			Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Филиал);
			
			ПодразделенияОтбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПозиции.Подразделение);
			Подразделения = Новый ФиксированныйМассив(ПодразделенияОтбора);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "ДолжностьПоШтатномуРасписанию", ДолжностьПоШтатномуРасписанию,ВидСравненияКомпоновкиДанных.Равно,
				"ДолжностьПоШтатномуРасписанию", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			
		Иначе
			
			// Установка отборов по организации / филиалу / подразделению
			Если Параметры.Отбор.Свойство("ГоловнаяОрганизация") Тогда
				
				Если ЗначениеЗаполнено(Параметры.Отбор.ГоловнаяОрганизация) Тогда
					Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Параметры.Отбор.ГоловнаяОрганизация);
				КонецЕсли;
				
				Параметры.Отбор.Удалить("ГоловнаяОрганизация");
				
			КонецЕсли;
			
			Если Параметры.Отбор.Свойство("ТекущаяОрганизация") Тогда
				
				Если ЗначениеЗаполнено(Параметры.Отбор.ТекущаяОрганизация) Тогда
				
					ОрганизацияФилиала = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Параметры.Отбор.ТекущаяОрганизация);
					Если ПараметрыФормы.ДоступныНепринятые Тогда
						
						Если Не ЗначениеЗаполнено(Организация) Тогда
							Организация = ОрганизацияФилиала;
						КонецЕсли;
						
					Иначе
						
						Если Не ЗначениеЗаполнено(Организация) Тогда
							
							ФилиалЗафиксирован = Истина;
							
							Организация = ОрганизацияФилиала;
							Филиал = Параметры.Отбор.ТекущаяОрганизация;
							
						ИначеЕсли Организация = ОрганизацияФилиала Тогда
							
							ФилиалЗафиксирован = Истина;
							Филиал = Параметры.Отбор.ТекущаяОрганизация;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Параметры.Отбор.Удалить("ТекущаяОрганизация");
				
			КонецЕсли;
			
			Если Параметры.Отбор.Свойство("ТекущееПодразделение") Тогда
				
				Если ЗначениеЗаполнено(Параметры.Отбор.ТекущееПодразделение) Тогда
					
					Если ТипЗнч(Параметры.Отбор.ТекущееПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ПодразделенияОтбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Отбор.ТекущееПодразделение);
					Иначе
						ПодразделенияОтбора = Параметры.Отбор.ТекущееПодразделение;
					КонецЕсли;
					
					УстановитьПривилегированныйРежим(Истина);
					РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделенияОтбора[0], "ГоловнаяОрганизация,Владелец");
					УстановитьПривилегированныйРежим(Ложь);
					
					Если ПараметрыФормы.ДоступныНепринятые Тогда
						
						Если Не ЗначениеЗаполнено(Организация) Тогда
							Организация = РеквизитыПодразделения.ГоловнаяОрганизация;
						КонецЕсли;
						
					Иначе
						
						Если Не ЗначениеЗаполнено(Филиал) Тогда
							
							ФилиалЗафиксирован = Истина;
							
							Организация = РеквизитыПодразделения.ГоловнаяОрганизация;
							Филиал = РеквизитыПодразделения.Владелец;
							Подразделения = Новый ФиксированныйМассив(ПодразделенияОтбора);
							
						ИначеЕсли Филиал = РеквизитыПодразделения.Владелец Тогда
							Подразделения = Новый ФиксированныйМассив(ПодразделенияОтбора);
						КонецЕсли;
						
						Если Параметры.УчитыватьОтборПоПодразделению
							И Не ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
							
							Подразделения = Новый ФиксированныйМассив(Новый Массив);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Параметры.Отбор.Удалить("ТекущееПодразделение");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Параметры.Отбор.Удалить("ДолжностьПоШтатномуРасписанию");
		
		ОрганизацияИспользование = ЗначениеЗаполнено(Организация);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
			Модуль.УточнитьПараметрыОтбораФормыВыбораСотрудников(Список, Организация, ОрганизацияИспользование, ИсключаемыеИменаОтборов);
		КонецЕсли;
		
		Если ОрганизацияИспользование Тогда
			ФилиалИспользование = ЗначениеЗаполнено(Филиал);
		Иначе
			ФилиалИспользование = Ложь;
		КонецЕсли;
		
		ПодразделениеИспользование = ЗначениеЗаполнено(Подразделения);
		
		
		Если ОрганизацияИспользование Тогда
			
			СписокНастройкиОтбора.Добавить(НСтр("ru='Организация'") + ": " + Организация);
			
			Если ФилиалЗафиксирован И ЗарплатаКадрыПовтИсп.УОрганизацииЕстьФилиалы(Организация)Тогда
				СписокНастройкиОтбора.Добавить(НСтр("ru='Филиал'") + ": " + Филиал);
			КонецЕсли;
			
			Если ПодразделениеИспользование Тогда
				
				Если Подразделения.Количество() = 1 Тогда
					СписокНастройкиОтбора.Добавить(НСтр("ru='Подразделение'") + ": " + Подразделения[0]);
				Иначе
					СписокНастройкиОтбора.Добавить(НСтр("ru='Подразделение в списке'") + ": " + Подразделения.Количество());
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
				СписокНастройкиОтбора.Добавить(НСтр("ru='Должность'") + ": " + ДолжностьПоШтатномуРасписанию);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОтборПоВидуДоговоров) Тогда
			СписокНастройкиОтбора.Добавить(ОтборПоВидуДоговоров);
		КонецЕсли;
		
		Если СтруктураОтборов.ПоказыватьТолькоПодработки Тогда
			СписокНастройкиОтбора.Добавить(НСтр("ru='Только подработки сотрудников'"));
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
			
			ОписаниеОтбора = ЭлементОтбора.Ключ;
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив")
				Или ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
				
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				ОписаниеОтбора = ОписаниеОтбора + " " + НСтр("ru='в списке'");
				
			Иначе
				
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				ОписаниеОтбора = ОписаниеОтбора + ": " + ЭлементОтбора.Значение;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияОтбора,
				ЭлементОтбора.Ключ, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			СписокНастройкиОтбора.Добавить(ОписаниеОтбора);
			
		КонецЦикла;
		
		СписокНастройкиОтбораНадпись = СтрСоединить(СписокНастройкиОтбора, "; ");
		
		Если ОрганизацияИспользование Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОтборПоОрганизацииГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОтборПоФилиалуГруппа",
				"Видимость",
				Не ПараметрыФормы.ДоступныНепринятые
				И Не СтруктураОтборов.ПоказыватьТолькоДоговорниковГПХ
				И Не ФилиалИспользование);
			
		КонецЕсли;
		
		ИзмененОтборПоОрганизации = Истина;
		
		Если ПодразделениеИспользование Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПоПодразделениям",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПоПодразделениямГруппа",
				"Видимость",
				Ложь);
			
			УстановленОтборПоПодразделению = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Начальное значение отбора по организации
	Если Не ЗначениеЗаполнено(Организация)
		И Не ОтборПоМестуВСтруктуреПредприятия Тогда
		
		ОрганизацияОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаСпискаСотрудников", "Организация");
		Если Не ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
			
			ЗначенияДляЗаполнения  = Новый Структура("Организация");
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияДляЗаполнения);
			
			ОрганизацияОтбора = ЗначенияДляЗаполнения.Организация;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
			
			ОрганизацияИспользование = Истина;
			
			УстановитьПривилегированныйРежим(Истина);
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияОтбора, "ГоловнаяОрганизация,ОбособленноеПодразделение");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если РеквизитыОрганизации.ОбособленноеПодразделение Тогда
				
				Организация = РеквизитыОрганизации.ГоловнаяОрганизация;
				Филиал = ОрганизацияОтбора;
				
				ФилиалИспользование = Истина;
				
			Иначе
				
				Организация = ОрганизацияОтбора;
				Филиал = Справочники.Организации.ПустаяСсылка();
				
				ФилиалИспользование = Ложь;
				
			КонецЕсли;
			
			ИзмененОтборПоОрганизации = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отборы = Новый ФиксированнаяСтруктура(СтруктураОтборов);
	
	Если ИзмененОтборПоОрганизации Тогда
		
		ПриИзмененииОтбораПоОрганизации(ЭтотОбъект);
		Если УстановленОтборПоПодразделению Тогда
			УстановитьОтборПоПодразделению(ЭтотОбъект, Подразделения);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеЭлементовУправленияОтборомПоПериоду();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокНастройкиОтбораНадпись",
		"Видимость",
		Не ПустаяСтрока(СписокНастройкиОтбораНадпись));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеЭлементовУправленияОтборомПоПериоду()
	
	Если Не ПараметрыФормы.РежимВыбора Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтборПоПериодуРаботыГруппа",
			"Видимость",
			Ложь);
		
	Иначе
		
		ВидимостьПолей = Не ПараметрыФормы.ДоступныНепринятые;
		Если ВидимостьПолей И Отборы.ПоказыватьТолькоДоговорниковГПХ Тогда
			ВидимостьПолей = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтбиратьРаботающихВПериоде",
			"Видимость",
			ВидимостьПолей И Не Отборы.ЗаданОтборПоПериоду);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаРаботы",
			"Видимость",
			ВидимостьПолей И Не ОтбиратьРаботающихВПериоде);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтборПоПериодуГруппа",
			"Видимость",
			ВидимостьПолей И ОтбиратьРаботающихВПериоде);
		
		Если Отборы.ЗаданОтборПоПериоду Тогда
			
			Если ОтбиратьРаботающихВПериоде Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ДатаНачала",
					"Заголовок",
					НСтр("ru='Работающие в периоде с'"));
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ДатаРаботы",
					"ПоложениеЗаголовка",
					ПоложениеЗаголовкаЭлементаФормы.Лево);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ДатаРаботы",
					"Заголовок",
					НСтр("ru='Работающие на'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПриИзмененииПериодаРаботы(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
