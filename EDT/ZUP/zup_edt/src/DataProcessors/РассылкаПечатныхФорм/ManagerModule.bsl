#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ОтправитьДокументыПолучателям(Получатели, ДляПечати, ДляОтправки) Экспорт

	ДлительныеОперации.СообщитьПрогресс(5);
	
	ДанныеПечатиВсехФорм = Новый Соответствие;
	Для Каждого ПечатнаяФорма Из ДляПечати.ПечатныеФормы Цикл
		Если ЗначениеЗаполнено(ПечатнаяФорма.ОбработчикПолученияДанных) Тогда
			ДанныеПечатиВсехФорм.Вставить(ПечатнаяФорма.Идентификатор, 
				ДанныеПечатиБезОтбора(ПечатнаяФорма.ОбработчикПолученияДанных, 
					Получатели.ВыгрузитьКолонку("РассылаемыйДокумент")));
		КонецЕсли;
	КонецЦикла;
	
	Результаты = НовыйСводныйРезультатОтправки();
	ТаблицаРезультатов = ТаблицаРезультатовОтправки();
	
	Для Каждого СтрокаПолучателя Из Получатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПолучателя.Адрес) Тогда
			НакопитьЗначение(Результаты.Обработано, 1);
			НакопитьЗначение(Результаты.БезАдресов, 1);
			Продолжить;
		КонецЕсли;
		
		ДляСохраненияВФайл = УправлениеПечатью.НастройкиСохранения();
		ДляСохраненияВФайл.ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента.PDF);
		ДляСохраненияВФайл.УпаковатьВАрхив = ДляПечати.УпаковатьВАрхив;
		
		Для Каждого ПечатнаяФорма Из ДляПечати.ПечатныеФормы Цикл
			Если Не ЗначениеЗаполнено(ПечатнаяФорма.ОбработчикПолученияДанных) Тогда
				Продолжить;
			КонецЕсли;
			ОтборСтрок = Новый Структура("РассылаемыйДокумент, ФизическоеЛицо");
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаПолучателя);
			ДанныеПечати = ДанныеПечатиВсехФорм[ПечатнаяФорма.Идентификатор].НайтиСтроки(ОтборСтрок);
			ПечатнаяФорма.ДополнительныеПараметры.Вставить("ДанныеПечати", ПоместитьВоВременноеХранилище(ДанныеПечати));
		КонецЦикла;
		
		ПечатныеДокументы = УправлениеПечатью.НапечататьВФайл(
			ДляПечати.ПечатныеФормы, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаПолучателя.РассылаемыйДокумент),
			ДляСохраненияВФайл);
		
		ПараметрыОтправки = ПараметрыПисьма();
		ПараметрыОтправки.Тема = ДляОтправки.ШаблонПисьма.Тема;
		ПараметрыОтправки.Тело = ДляОтправки.ШаблонПисьма.Текст;
		ПараметрыОтправки.Кому.Добавить(ОписаниеПолучателя(СтрокаПолучателя.Адрес, СтрокаПолучателя.ФизическоеЛицо));

		Для Каждого ПечатныйДокумент Из ПечатныеДокументы Цикл
			ПараметрыОтправки.Вложения.Добавить(
				ОписаниеВложения(
					ПечатныйДокумент.ИмяФайла, 
					ПоместитьВоВременноеХранилище(ПечатныйДокумент.ДвоичныеДанные)));
		КонецЦикла;
				
		РезультатОтправки = ОписаниеРезультатаОтправки();

		Ответ = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ДляОтправки.УчетнаяЗапись, 
			РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ДляОтправки.УчетнаяЗапись, ПараметрыОтправки));
		
		Если Ответ.ОшибочныеПолучатели.Количество() = 0 Тогда
			ЗаполнитьУспешнымРезультатом(РезультатОтправки);
			НакопитьЗначение(Результаты.Отправлено, 1);
		Иначе
			ПричиныОшибки = ПричиныОшибки(Ответ.ОшибочныеПолучатели);
			ЗаполнитьНеуспешнымРезультатом(РезультатОтправки, ПричиныОшибки);
			НакопитьЗначение(Результаты.Ошибок, 1);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Рассылка документов.Сообщение не отправлено'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Предупреждение, , , ПричиныОшибки);
		КонецЕсли;
	
		ЗаписатьРезультатОтправки(СтрокаПолучателя.ФизическоеЛицо, СтрокаПолучателя.ФизическоеЛицо, 
			СтрокаПолучателя.РассылаемыйДокумент, РезультатОтправки);
		НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультата, СтрокаПолучателя);
		НоваяСтрокаРезультата.Результат = РезультатОтправки;
			
		ДлительныеОперации.СообщитьПрогресс(ПрогрессОтправки(Результаты.Обработано, Получатели.Количество()));
		НакопитьЗначение(Результаты.Обработано, 1);
	КонецЦикла;
	
	Результаты.Детально = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРезультатов);
	
	Возврат Результаты;
	
КонецФункции

Функция ПрогрессОтправки(Обработано, Всего)
	Возврат Макс(5, Окр(Обработано / Всего * 100));
КонецФункции

Процедура НакопитьЗначение(Накопленное, Значение)
	Накопленное = Накопленное + Значение;
КонецПроцедуры

Функция ОписаниеПолучателя(Адрес, Представление)
	Возврат Новый Структура("Адрес, Представление", Адрес, Представление);
КонецФункции

Функция ПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", "");
	ПараметрыПисьма.Вставить("Тело", "");
	ПараметрыПисьма.Вставить("Кому", Новый Массив);
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция ОписаниеВложения(ИмяФайла, АдресВХранилище)
	Возврат Новый Структура("Представление, АдресВоВременномХранилище", ИмяФайла, АдресВХранилище);
КонецФункции

Функция ДанныеПечатиБезОтбора(Обработчик, МассивОбъектов) Экспорт
	
	ДанныеПечати = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Обработчик + "(Параметры.МассивОбъектов)", 
		Новый Структура("МассивОбъектов", МассивОбъектов));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипЗнч(ДанныеПечати) = Тип("ТаблицаЗначений") 
		И ДанныеПечати.Колонки.Найти("ФизическоеЛицо") <> Неопределено
		И ДанныеПечати.Колонки.Найти("РассылаемыйДокумент") <> Неопределено, 
		СтрШаблон(НСтр("ru = 'Данные печати должны быть подготовлены в виде таблицы значений, 
			 |в которой есть обязательные колонки ФизическоеЛицо и РассылаемыйДокумент.
			 |Проверьте возвращаемое значение функции %1'"), 
			 Обработчик), 
		"РассылкаДокументов");
	
	Возврат ДанныеПечати;
	
КонецФункции

Функция ПричиныОшибки(ОшибочныеПолучатели)
	
	Причины = "";
	Для Каждого КлючИЗначение Из ОшибочныеПолучатели Цикл
		Если Не ПустаяСтрока(Причины) Тогда
			Причины = Причины + Символы.ПС;
		КонецЕсли;
		Причины = Причины + СтрШаблон(НСтр("ru = 'Проблема отправки по адресу %1, причина: «%2».'"), 
			КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Возврат Причины;
	
КонецФункции

#Область РезультатыОтправки

Функция ТаблицаРезультатовОтправки()
	Возврат РассылкаДокументов.ТаблицаРезультатовОтправки();
КонецФункции

Функция ОписаниеРезультатаОтправки()
	
	РезультатОтправки = Неопределено; 
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРезультатыРассылкиДокументов = ОбщегоНазначения.ОбщийМодуль("РезультатыРассылкиДокументов");
		РезультатОтправки = МодульРезультатыРассылкиДокументов.НовыйРезультатОтправки();
	КонецЕсли;
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ЗаполнитьУспешнымРезультатом(РезультатОтправки)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРезультатыРассылкиДокументов = ОбщегоНазначения.ОбщийМодуль("РезультатыРассылкиДокументов");
		МодульРезультатыРассылкиДокументов.ЗаполнитьУспешнымРезультатом(РезультатОтправки);
	Иначе
		РезультатОтправки = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНеуспешнымРезультатом(РезультатОтправки, ПричиныОшибки)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРезультатыРассылкиДокументов = ОбщегоНазначения.ОбщийМодуль("РезультатыРассылкиДокументов");
		МодульРезультатыРассылкиДокументов.ЗаполнитьНеуспешнымРезультатом(РезультатОтправки, ПричиныОшибки);
	Иначе
		РезультатОтправки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРезультатОтправки(ФизическоеЛицо, Получатель, РассылаемыйДокумент, РезультатОтправки)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРезультатыРассылкиДокументов = ОбщегоНазначения.ОбщийМодуль("РезультатыРассылкиДокументов");
		МодульРезультатыРассылкиДокументов.ЗаписатьРезультатОтправки(
			ФизическоеЛицо, Получатель, РассылаемыйДокумент, РезультатОтправки);
	КонецЕсли;

КонецПроцедуры

Функция НовыйСводныйРезультатОтправки()
	
	СводныйРезультат = Новый Структура;
	СводныйРезультат.Вставить("Отправлено", 0);
	СводныйРезультат.Вставить("Ошибок", 0);
	СводныйРезультат.Вставить("Обработано", 0);
	СводныйРезультат.Вставить("БезАдресов", 0);
	СводныйРезультат.Вставить("Детально", Новый Массив);
	
	Возврат СводныйРезультат;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли