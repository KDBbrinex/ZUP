#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	УстановитьШрифтыПолейТаблицыФайлов();
	
	УстановитьВидимость();
	
	ПомещенныеФайлыПереданные = Неопределено;
	Если Параметры.Свойство("ПомещенныеФайлы", ПомещенныеФайлыПереданные) Тогда
		Для Каждого ТекущийФайл Из ПомещенныеФайлыПереданные Цикл
			ПомещенныеФайлы.Добавить(ТекущийФайл);
		КонецЦикла;
	КонецЕсли;
	
	Параметры.Свойство("ЗакрытьФормуПослеЗагрузкиКандидатов", ЗакрытьФормуПослеЗагрузкиКандидатов);
	Параметры.Свойство("Вакансия", Вакансия);
	Если ЗначениеЗаполнено(Вакансия) Тогда
		СтруктураДанныхВакансии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вакансия, "Подразделение");
		СтруктураДанныхВакансии.Свойство("Подразделение", Подразделение);
	КонецЕсли;
	
	ЗначениеФильтра = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПомещенныеФайлы.Количество() > 0 Тогда
		
		ЗагрузитьСписокФайлов(ПомещенныеФайлы);
		
	КонецЕсли;
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_Кандидаты" Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРезюмеДляЗагрузки = "";
	Параметр.Свойство("ФайлРезюмеДляЗагрузки", ФайлРезюмеДляЗагрузки);
	Если Не ЗначениеЗаполнено(ФайлРезюмеДляЗагрузки) Тогда
		Возврат;
	КонецЕсли;

	НайденныеСтроки = ТаблицаФайлов.НайтиСтроки(Новый Структура("ПутьКФайлу", ФайлРезюмеДляЗагрузки));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеКандидата = ЗначенияРеквизитовОбъектаСКлиента(Источник, "Вакансия, Подразделение, ФизическоеЛицо, Наименование");
	
	ДанныеРезюме = НайденныеСтроки[0];
	
	ДанныеРезюме.ФИО = ДанныеКандидата.Наименование;
	ДанныеРезюме.Вакансия = ДанныеКандидата.Вакансия;
	ДанныеРезюме.Подразделение = ДанныеКандидата.Подразделение;
	ДанныеРезюме.ФизическоеЛицо = ДанныеКандидата.ФизическоеЛицо;
	ДанныеРезюме.Кандидат = Источник;
	ДанныеРезюме.ЭтоНовоеФизическоеЛицо = Ложь;
	ДанныеРезюме.ЭтоНовыйКандидат = Ложь;
	ДанныеРезюме.ДоступноДляЗагрузки = Истина;
	ДанныеРезюме.Обработан = Истина;
	
	Если ЗначениеЗаполнено(ДанныеРезюме.ФизическоеЛицо) Тогда
		ДанныеРезюме.ГруппаДоступа = ГруппаДоступаФизическогоЛица(ДанныеРезюме.ФизическоеЛицо);
	КонецЕсли;
	
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (Не ВсеРавноЗакрытьФорму) И ЕстьНеЗаписанныеИзменения() Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'В списке файлов, есть необработанные резюме.'");
		
		Если Не ЗавершениеРаботы Тогда
		
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
				"ОбработатьРезультатВопросаОЗакрытииФормы", ЭтотОбъект);
			
			
			ТекстПредупреждения = НСтр("ru = 'В списке файлов, есть необработанные резюме.
									|Вернуться к работе со списком файлов?'");
			
			Кнопки = РежимДиалогаВопрос.ДаНет;
			ТекстЗаголовка = НСтр("ru = 'Закрытие обработки загрузки кондидатов'");
			ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстПредупреждения, Кнопки, , КодВозвратаДиалога.Да, ТекстЗаголовка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФильтрыПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаФайлов

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТаблицаФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ИмяТекКолонки = Поле.Имя;
	
	Если ТекущаяСтрока.Обработан = Истина Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФормуКандидата(ТекущаяСтрока);
		
	ИначеЕсли ИмяТекКолонки = "ТаблицаФайловФизическоеЛицо" Тогда 
		
		ОткрытьФормуПроверкиОднофамильцев(ТекущаяСтрока);
		
	ИначеЕсли ИмяТекКолонки = "ТаблицаФайловФИО" 
		ИЛИ ИмяТекКолонки = "ТаблицаФайловПутьКФайлу" Тогда
		
		СоздатьОбновитьКандидата(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПриАктивизацииСтроки(Элемент)
	
	СтрокаТаблицы =  Элементы.ТаблицаФайлов.ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено 
		ИЛИ (Не ЗначениеЗаполнено(СтрокаТаблицы.ПутьКФайлу)) Тогда
		ТекстРезюме = "";
		ТекстРезюмеHTML.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстРезюме));

		ПолеТекстРезюмеЗаголовок = "";
		ПолеТекстРезюмеПодвал = "";
		ПутьКВыбранномуФайлу = "";
		
		Возврат;
	КонецЕсли;
	
	Если ПутьКВыбранномуФайлу <> СтрокаТаблицы.ПутьКФайлу Тогда
		
		ПутьКВыбранномуФайлу = СтрокаТаблицы.ПутьКФайлу;
		
		ТекстРезюме = СтрокаТаблицы.СтруктураРезюме.ПолныйТекстРезюме;
		ТекстРезюмеHTML.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстРезюме));
		
		ПолеТекстРезюмеЗаголовок = СтрокаТаблицы.ИмяФайла;
		ПолеТекстРезюмеПодвал = "Изменен - " + СтрокаТаблицы.ДатаИзмененияФайла + " - " + СтрокаТаблицы.РазмерФайла + "Kb";
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ТаблицаФайлов.ВыделенныеСтроки;
	АдресКартинки = "";
	ПутьКВыбранномуФайлу = "";
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекСтрока = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки) ;
		Если ТекСтрока.АдресКартинки <> "" Тогда
			УдалитьИзВременногоХранилища(ТекСтрока.АдресКартинки);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПослеУдаления(Элемент)
	
	ПроверитьНаДубли();
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловКандидатПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура;
	ОбработатьРезультатВыбораКандидата(ТекущиеДанные.Кандидат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВакансияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	ОбработатьСтрокуПриИзмененииВакансии(ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПодразделениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	ОбработатьСтрокуПриИзмененииПодразделения(ТекущиеДанные, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловГруппаДоступаПриИзменении(Элемент)
	
	ТекущаяСтрока = ТаблицаФайлов.НайтиПоИдентификатору(Элементы.ТаблицаФайлов.ТекущаяСтрока);
	
	ТекущаяСтрока.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущаяСтрока);
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьФайлыРезюме(Команда)
	
	ПараметрыФормы = Новый Структура();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлыРезюмеПродолжение", ЭтаФорма, ПараметрыФормы);
	
	РазборРезюмеКлиент.ПровестиИнициализациюВнешнихКомпонент(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыРезюмеИзКаталога(Команда)
	
	ПараметрыФормы = Новый Структура();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлыРезюмеИзКаталогаПродолжение", ЭтаФорма, ПараметрыФормы);
	
	РазборРезюмеКлиент.ПровестиИнициализациюВнешнихКомпонент(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезюмеВБазу(Команда)
	
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСтрокуТаблицыФайлов();
		
КонецПроцедуры

&НаКлиенте
Процедура СброситьВакансию(Команда)
	
	ИдентификаторыРезюмеКОбработке = Элементы.ТаблицаФайлов.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыРезюмеКОбработке Цикл
		
		ТекущиеДанные = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные.Обработан = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СброситьКандидата = Ложь;
		
		Если Не ТекущиеДанные.Вакансия.Пустая() Тогда
			СброситьКандидата = Истина;
			ТекущиеДанные.Вакансия = Неопределено;
		КонецЕсли;
		
		Если СброситьКандидата Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
				ЗаполнитьКандидата(ТекущиеДанные);
			Иначе
				ТекущиеДанные.Кандидат = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ТекущиеДанные.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущиеДанные);
		 
	КонецЦикла;
	
	ПроверитьНаДубли();
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();	
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПодразделение(Команда)
	
	ИдентификаторыРезюмеКОбработке = Элементы.ТаблицаФайлов.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыРезюмеКОбработке Цикл
		
		ТекущиеДанные = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные.Обработан = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СброситьКандидата = Ложь;
		
		Если Не ТекущиеДанные.Подразделение.Пустая() Тогда
			СброситьКандидата = Истина;
			ТекущиеДанные.Подразделение = Неопределено;
			ТекущиеДанные.Вакансия = Неопределено;
		КонецЕсли;
		
		Если СброситьКандидата Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
				ЗаполнитьКандидата(ТекущиеДанные);
			Иначе
				ТекущиеДанные.Кандидат = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ТекущиеДанные.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущиеДанные);
		 
	КонецЦикла;
	
	ПроверитьНаДубли();
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьГруппуДоступа(Команда)
	
	ИдентификаторыРезюмеКОбработке = Элементы.ТаблицаФайлов.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыРезюмеКОбработке Цикл
		
		ТекущиеДанные = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные.Обработан = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанные.ГруппаДоступа = Неопределено;
		
		ТекущиеДанные.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущиеДанные);
		 
	КонецЦикла;
	
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВакансию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВакансиюПродолжение", ЭтаФорма);

	ПараметрыФормыВыбора = Новый Структура();
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);

	ОткрытьФорму("Справочник.Вакансии.ФормаВыбора", ПараметрыФормыВыбора, ЭтаФорма, Истина,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПодразделениеПродолжение", ЭтаФорма);

	ПараметрыФормыВыбора = Новый Структура();
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("ТекущаяСтрока");

	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаСписка", ПараметрыФормыВыбора, ЭтаФорма, Истина,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГруппуДоступа(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьГруппуДоступаПродолжение", ЭтаФорма);

	ПараметрыФормыВыбора = Новый Структура();
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("ТекущаяСтрока");

	ОткрытьФорму("Справочник.ГруппыДоступаФизическихЛиц.ФормаВыбора", ПараметрыФормыВыбора, ЭтаФорма, Истина,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
	 	И УправлениеДоступомСлужебный.ВидДоступаИспользуется("ГруппыФизическихЛиц") Тогда
	 
	 	ИспользоватьГруппыДоступа = Истина;
	КонецЕсли;
	
	Элементы.ТаблицаФайловГруппаДоступа.Видимость = ИспользоватьГруппыДоступа;
	Элементы.ТаблицаФайловЗаполнитьГруппуДоступа.Видимость = ИспользоватьГруппыДоступа;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УсловноеОформление.Элементы.Очистить();
	
	// Оформление поля ФИО в случае дублей.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаФайловФИО.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.ЕстьДубль");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));	

	// Оформление поля Физическое лицо в случае, если это не новое физическое лицо.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаФайловФизическоеЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.ЭтоНовоеФизическоеЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.ФизическоеЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Оформление поля Физическое лицо в случае, если это новое физическое лицо.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаФайловФизическоеЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.ЭтоНовоеФизическоеЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.ФизическоеЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Новое физическое лицо>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
	
	// Оформление поля Кандидат в случае, если это не новый кандидат.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаФайловКандидат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.ЭтоНовыйКандидат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.Кандидат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Оформление поля Кандидат в случае, если это новый кандидат.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаФайловКандидат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.ЭтоНовыйКандидат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФайлов.Кандидат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Новый кандидат>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШрифтыПолейТаблицыФайлов()
	
	ШрифтПолей = Новый Шрифт(Элементы.ТаблицаФайловФИО.Шрифт,,,,Истина);
	Элементы.ТаблицаФайловФИО.Шрифт = ШрифтПолей;
	Элементы.ТаблицаФайловПутьКФайлу.Шрифт = ШрифтПолей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормы()
	
	ДоступностьКнопок = ТаблицаФайлов.Количество();
	Элементы.ТаблицаФайловКонтекстноеМенюЗаполнитьВакансию.Доступность = ДоступностьКнопок;
	Элементы.ТаблицаФайловКонтекстноеМенюСброситьВакансию.Доступность = ДоступностьКнопок;
	Элементы.ТаблицаФайловКонтекстноеМенюЗаполнитьПодразделение.Доступность = ДоступностьКнопок;
	Элементы.ТаблицаФайловКонтекстноеМенюСброситьПодразделение.Доступность = ДоступностьКнопок;
	
	Элементы.ТаблицаФайловЗаполнитьВакансию.Доступность = ДоступностьКнопок;
	Элементы.ТаблицаФайловЗаполнитьПодразделение.Доступность = ДоступностьКнопок;
	Элементы.ТаблицаФайловЗаполнитьГруппуДоступа.Доступность = ДоступностьКнопок;
	
	УстановитьДоступностьКнопкиЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиЗагрузки()
	
	КнопкаДоступна = ТаблицаФайлов.Количество();
	
	Для Каждого ТекСтрока Из ТаблицаФайлов Цикл
		Если Не ТекСтрока.ДоступноДляЗагрузки Тогда
			КнопкаДоступна = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ЗагрузитьКандидатовВБазу.Доступность = КнопкаДоступна;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()
	
	СтруктураОтбора = Новый Структура();
	
	Если ЗначениеФильтра = 2 Тогда
		СтруктураОтбора.Вставить("ЭтоНовоеФизическоеЛицо", Истина);
		СтруктураОтбора.Вставить("ЭтоНовыйКандидат", Истина);
	ИначеЕсли ЗначениеФильтра = 3 Тогда
		СтруктураОтбора.Вставить("ЭтоНовоеФизическоеЛицо", Ложь);
	ИначеЕсли ЗначениеФильтра = 4 Тогда
		СтруктураОтбора.Вставить("ДоступноДляЗагрузки", Ложь);
	КонецЕсли;
	
	Элементы.ТаблицаФайлов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлы()
	
	Отказ = Истина;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Каталог = КаталогСФайлами;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
	ДиалогОткрытияФайла.Фильтр				= НСтр("ru = '(*.txt;*.rtf;*.doc;*.docx;*)|*.txt;*.rtf;*.doc;*.docx;'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		КаталогСФайлами = ДиалогОткрытияФайла.Каталог;
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		
		ЗагрузитьСписокФайлов(МассивФайлов);
		
		ОбновитьЭлементыФормы();  
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыИзКаталога()
	
	Отказ = Истина;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Каталог = КаталогСФайлами;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		МассивФайлов = Новый Массив;
		КаталогСФайлами = ДиалогОткрытияФайла.Каталог;
		НайденныеФайлы = НайтиФайлы(КаталогСФайлами, "*.*", Истина);
		
		Для Каждого Файл Из НайденныеФайлы Цикл
		
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Расширение = СтрЗаменить(НРег(Файл.Расширение), ".", "");
			
			Если Расширение = "txt" ИЛИ Расширение = "rtf" ИЛИ Расширение = "doc" ИЛИ Расширение = "docx" Тогда
				МассивФайлов.Добавить(Файл.ПолноеИмя); 
			КонецЕсли;
			
		КонецЦикла;
			
		ЗагрузитьСписокФайлов(МассивФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокФайлов(МассивФайлов)
	
	КоличествоФайловВходящих = МассивФайлов.Количество();
	
	Счетчик = 0;
	
	Для Каждого ТекущийФайл Из МассивФайлов Цикл
		
		Если ТипЗнч(ТекущийФайл) = Тип("ЭлементСпискаЗначений") Тогда
			Путь = ТекущийФайл.Значение.ПолноеИмя;
			АдресФайла = ТекущийФайл.Значение.Хранение;
		Иначе
			Путь = ТекущийФайл;
			АдресФайла = "";
		КонецЕсли;
		
		Состояние(НСтр("ru='Подготовка файлов для обработки...'"), Счетчик/КоличествоФайловВходящих*100, Путь);
		Счетчик = Счетчик+1;
		
		Если СтрНайти(Путь, "~$") > 0 Тогда // Пропускаем файлы владельца MS Word
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаФайлов.НайтиСтроки(Новый Структура("ПутьКФайлу", Путь)); //Можно реализовать обновление, существующей строки
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Файл = Новый Файл(Путь);
			
			СтруктураРезюмеРезультат = РазборРезюмеКлиент.СтруктураРезюмеПоФайлу(Файл);
			
			ОписаниеОшибок = СтруктураРезюмеРезультат.ОписаниеОшибки;
			
			НоваяСтрока = ТаблицаФайлов.Добавить();
			
			НоваяСтрока.Представление = Файл.ИмяБезРасширения;
			НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
			НоваяСтрока.ЭтоНовоеФизическоеЛицо = Истина;
			НоваяСтрока.ЭтоНовыйКандидат = Истина;
			НоваяСтрока.ДоступноДляЗагрузки = Истина;
			НоваяСтрока.ПутьКФайлу = Путь;
			НоваяСтрока.Вакансия = Вакансия;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.АдресФайла = АдресФайла;
			НоваяСтрока.РазмерФайла = Файл.Размер()/1024; 
			НоваяСтрока.ДатаИзмененияФайла = Файл.ПолучитьВремяИзменения();
			НоваяСтрока.ИмяФайла = Файл.Имя;
			
			СтруктураРезюме = СтруктураРезюмеРезультат.СтруктураДанныхКандидата;
			
			НоваяСтрока.СтруктураРезюме = СтруктураРезюме;
			
			НоваяСтрока.Фамилия  = СОКРЛП(СтруктураРезюме.Фамилия);
			НоваяСтрока.Имя 	 = СОКРЛП(СтруктураРезюме.Имя);
			НоваяСтрока.Отчество = СОКРЛП(СтруктураРезюме.Отчество);
			
			НоваяСтрока.ФИО = НоваяСтрока.Фамилия +" "+ НоваяСтрока.Имя +" "+ НоваяСтрока.Отчество;
			
			ПараметрыПроверки = СотрудникиВызовСервера.ПодобратьСписокФизЛиц(
				Неопределено,
				НоваяСтрока.Фамилия,
				НоваяСтрока.Имя,
				НоваяСтрока.Отчество);
				
			НоваяСтрока.ЭтоНовоеФизическоеЛицо = ПараметрыПроверки.ФизическоеЛицоУникально;
			
			Если Не ПараметрыПроверки.ФизическоеЛицоУникально Тогда
				
				// Будем считать, что физические лица с одинаковым ФИО и датами рождения, являются одним человеком.
				Если ПараметрыПроверки.ДанныеФизическихЛицДоступны Тогда
					
					СовпадающиеФизическиеЛица = Новый Массив; 
					
					Для Каждого ДанныеФизическихЛиц Из ПараметрыПроверки.ДанныеФизическихЛиц Цикл
						
						Если ЗначениеЗаполнено(СтруктураРезюме.ДатаРождения) 
							И СтруктураРезюме.ДатаРождения = ДанныеФизическихЛиц.ДатаРождения Тогда
							СовпадающиеФизическиеЛица.Добавить(ДанныеФизическихЛиц.ФизическоеЛицо);
							Продолжить;
						КонецЕсли;
						
						Если ФизическоеЛицоСовпадаетПоКонтактнойИнформации(СтруктураРезюме.КонтактнаяИнформация, ДанныеФизическихЛиц.ФизическоеЛицо) Тогда
							СовпадающиеФизическиеЛица.Добавить(ДанныеФизическихЛиц.ФизическоеЛицо);
						КонецЕсли;
						
					КонецЦикла;
					
					Если СовпадающиеФизическиеЛица.Количество() = 1 Тогда
						НоваяСтрока.ФизическоеЛицо = СовпадающиеФизическиеЛица[0];
						НоваяСтрока.ГруппаДоступа = ГруппаДоступаФизическогоЛица(НоваяСтрока.ФизическоеЛицо);
					КонецЕсли;
						
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
					ЗаполнитьКандидата(НоваяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьНаДубли();
	УстановитьОтбор();
	
	ТаблицаФайлов.Сортировать("ФИО Возр");
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуТаблицыФайлов(Индекс = 0)
	
	Если Индекс = 0 Тогда
		
		ОчиститьСообщения();
		РезультатЗагрузки = Новый Структура();
		РезультатЗагрузки.Вставить("Обработано", 0);
		РезультатЗагрузки.Вставить("СозданоФизическихЛиц", 0);
		РезультатЗагрузки.Вставить("СозданоКандидатов", 0);
		РезультатЗагрузки.Вставить("ОбновленоКандидатов", 0);
		РезультатЗагрузки.Вставить("ОбновленоФизическихЛиц", 0);
		РезультатЗагрузки.Вставить("КоличествоОшибок", 0);
		РезультатЗагрузки.Вставить("ТекстОшибок", "");
		
	КонецЕсли;
	
	Если ТаблицаФайлов.Количество() = Индекс Тогда
		
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru='Загрузка резюме завершена.'");
		Если РезультатЗагрузки.Обработано > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС 
											+ "   " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработано файлов: %1.'"), РезультатЗагрузки.Обработано);
		КонецЕсли;
		
		Если РезультатЗагрузки.СозданоКандидатов > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС 
											+ "   " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Создано кандидатов: %1.'"), РезультатЗагрузки.СозданоКандидатов);
		КонецЕсли;
		
		Если РезультатЗагрузки.ОбновленоКандидатов > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС
											+ "   " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обновлено кандидатов: %1.'"), РезультатЗагрузки.ОбновленоКандидатов);
		КонецЕсли;
		
		Если РезультатЗагрузки.КоличествоОшибок > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС
											+ "   " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибок    : %1.'"), РезультатЗагрузки.КоличествоОшибок);
		КонецЕсли;
	
		Если РезультатЗагрузки.ТекстОшибок <> "" Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС
											+ "   " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Описание ошибок. %1.'"), РезультатЗагрузки.ТекстОшибок);
		КонецЕсли;
		
		ПоказатьПредупреждение(,ТекстСообщения);
		
		Ид = ТаблицаФайлов.Количество();
		
		Пока Ид > 0 Цикл
			Ид = Ид - 1;
			ТекСтрока = ТаблицаФайлов[Ид];
			Если ТекСтрока.Обработан Тогда
				ТаблицаФайлов.Удалить(ТаблицаФайлов.Индекс(ТекСтрока));
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаФайлов.Количество() = 0 
			И ЗакрытьФормуПослеЗагрузкиКандидатов Тогда
			Закрыть();
		КонецЕсли;
		
		УстановитьДоступностьКнопкиЗагрузки();		
		УстановитьОтбор();

		Возврат;
	КонецЕсли;
		
	КоличествоФайловВходящих = ТаблицаФайлов.Количество();
	ТекущаяСтрока = ТаблицаФайлов[Индекс];
	Состояние(НСтр("ru = 'Загрузка файлов резюме в базу...'"), (Индекс + 1)/КоличествоФайловВходящих*100, ТекущаяСтрока.ПутьКФайлу);
	
	Если ТекущаяСтрока.ДоступноДляЗагрузки И (Не ТекущаяСтрока.Обработан) Тогда
		РезультатЗагрузки.Обработано = РезультатЗагрузки.Обработано + 1;
		СоздатьОбновитьКандидата(ТекущаяСтрока, Ложь, Индекс);
	Иначе
		ОбработатьСтрокуТаблицыФайлов(Индекс + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезюмеДоступноДляАвтоматическойЗагрузки(ДанныеРезюме)
	
	Результат = Истина;
	
	Результат = (Результат И (ДанныеРезюме.ЭтоНовоеФизическоеЛицо ИЛИ ЗначениеЗаполнено(ДанныеРезюме.ФизическоеЛицо)));
	Результат = (Результат И (ДанныеРезюме.ЭтоНовыйКандидат ИЛИ ЗначениеЗаполнено(ДанныеРезюме.Кандидат)));
	Результат = (Результат И (Не ДанныеРезюме.ЕстьДубль));
	Результат = (Результат И ЗначениеЗаполнено(ДанныеРезюме.Подразделение));
	
	Если ИспользоватьГруппыДоступа Тогда
		Результат = (Результат И ЗначениеЗаполнено(ДанныеРезюме.ГруппаДоступа));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КандидатыФизическогоЛица(ФизическоеЛицо, Вакансия, Подразделение)
	
	Отбор = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(Вакансия) Тогда
		Отбор.Вставить("Вакансия", Вакансия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Кандидаты = Справочники.Кандидаты.КандидатыПоОтбору(Отбор);
	
	Возврат Кандидаты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъектаСКлиента(Ссылка, Реквизиты) 
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПроверкиОднофамильцев(ТекущаяСтрока)
	
	ПараметрыПроверки = СотрудникиВызовСервера.ПодобратьСписокФизЛиц(
		ФизическоеЛицоПустаяСсылка,
		ТекущаяСтрока.Фамилия,
		ТекущаяСтрока.Имя,
		ТекущаяСтрока.Отчество);
	
	Если ПараметрыПроверки.ФизическоеЛицоУникально Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = СотрудникиКлиент.ПараметрыОткрытияФормыФизическиеЛицаСПохожимиДанными(ПараметрыПроверки);
	ПараметрыОткрытия.Вставить("УчитыватьОтрицательныйВыбор", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаОднофамильцевЗавершение", ЭтаФорма);
	ОткрытьФорму(
		"Справочник.ФизическиеЛица.Форма.ФизическиеЛицаСПохожимиДанными", 
		ПараметрыОткрытия, 
		ЭтаФорма, , , , 
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОднофамильцевЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ТаблицаФайлов.НайтиПоИдентификатору(Элементы.ТаблицаФайлов.ТекущаяСтрока);
	
	Если ТипЗнч(РезультатВыбора) = Тип("Булево") Тогда
		ТекущаяСтрока.ЭтоНовоеФизическоеЛицо = Не РезультатВыбора;
		ТекущаяСтрока.ФизическоеЛицо = Неопределено;
	Иначе	
		ТекущаяСтрока.ЭтоНовоеФизическоеЛицо = РезультатВыбора.Пустая();
		ТекущаяСтрока.ФизическоеЛицо = РезультатВыбора;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ФизическоеЛицо) Тогда
		Если ИспользоватьГруппыДоступа Тогда
			ТекущаяСтрока.ГруппаДоступа = ГруппаДоступаФизическогоЛица(ТекущаяСтрока.ФизическоеЛицо);
		КонецЕсли;
		ЗаполнитьКандидата(ТекущаяСтрока);
	Иначе
		ТекущаяСтрока.Кандидат = Неопределено;
		ТекущаяСтрока.ЭтоНовыйКандидат = Истина;
	КонецЕсли;
	
	ПроверитьНаДубли();
	
	ТекущаяСтрока.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущаяСтрока);
	
	УстановитьОтбор();
	
	УстановитьДоступностьКнопкиЗагрузки();
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыбораКандидата(РезультатВыбора, ДополнительныеПараметры)
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ТаблицаФайлов.НайтиПоИдентификатору(Элементы.ТаблицаФайлов.ТекущаяСтрока);
	
	Если РезультатВыбора.Пустая() Тогда
		ТекущаяСтрока.ЭтоНовыйКандидат = Истина;
	Иначе
		ТекущаяСтрока.Кандидат = РезультатВыбора;
		
		ДанныеКандидата = ЗначенияРеквизитовОбъектаСКлиента(ТекущаяСтрока.Кандидат, "Вакансия, Подразделение");
		
		ТекущаяСтрока.Вакансия = ДанныеКандидата.Вакансия;
		ТекущаяСтрока.Подразделение = ДанныеКандидата.Подразделение;
	КонецЕсли;
	
	ПроверитьНаДубли();
	ТекущаяСтрока.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущаяСтрока);
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьКандидата(ТекущаяСтрока, Интеррактивно = Истина, Индекс = 0)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеРезюме", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("Интеррактивно", Интеррактивно);
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	
	МассивФайлов = Новый Массив();
	МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекущаяСтрока.ПутьКФайлу, ТекущаяСтрока.АдресФайла));
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.АдресФайла) Тогда
		ЗакончитьСозданиеКандидатаПослеПомещенияФайлов(МассивФайлов, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		// Веб-клиент без расширения для работы с файлами.
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьСозданиеКандидатаПослеПомещенияФайла", ЭтаФорма, ДополнительныеПараметры);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения,,ТекущаяСтрока.ПутьКФайлу,,УникальныйИдентификатор);
			Возврат;
		Исключение
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить файл на сервер по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Если Интеррактивно Тогда  	
				ПоказатьПредупреждение(, ТекстПредупреждения);
			Иначе
				РезультатЗагрузки.КоличествоОшибок = РезультатЗагрузки.КоличествоОшибок + 1;
				РезультатЗагрузки.ТекстОшибок = РезультатЗагрузки.ТекстОшибок + Символы.ПС + ТекстПредупреждения;
				ОбработатьСтрокуТаблицыФайлов(Индекс + 1);
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьСозданиеКандидатаПослеПомещенияФайлов", ЭтаФорма, ДополнительныеПараметры);
	
	Попытка
		НачатьПомещениеФайлов(ОписаниеОповещения, МассивФайлов, , Ложь, УникальныйИдентификатор);
	Исключение
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить файл на сервер по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Если Интеррактивно Тогда  	
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			РезультатЗагрузки.КоличествоОшибок = РезультатЗагрузки.КоличествоОшибок + 1;
			РезультатЗагрузки.ТекстОшибок = РезультатЗагрузки.ТекстОшибок + Символы.ПС + ТекстПредупреждения;
			ОбработатьСтрокуТаблицыФайлов(Индекс + 1);
		КонецЕсли;
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьСозданиеКандидатаПослеПомещенияФайла(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	ПомещенныеФайлыКандидата = Новый Массив();
	
	Если Результат Тогда
		ПомещенныеФайлыКандидата.Добавить(Новый ОписаниеПередаваемогоФайла(ПолныйПуть, Адрес));
	КонецЕсли;
	
	ЗакончитьСозданиеКандидатаПослеПомещенияФайлов(ПомещенныеФайлыКандидата, Параметры);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакончитьСозданиеКандидатаПослеПомещенияФайлов(ПомещенныеФайлыКандидата, ПараметрыЗагрузки) Экспорт
	
	Если ПомещенныеФайлыКандидата = Неопределено ИЛИ ПомещенныеФайлыКандидата.Количество() = 0 Тогда
		
		Если ПараметрыЗагрузки.Интеррактивно Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Загрузка файла ""%1"" не выполнена.'"),
									ПараметрыЗагрузки.ДанныеРезюме.ПутьКФайлу);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Строка %1. Загрузка файла ""%2"" не выполнена.'"),
									ПараметрыЗагрузки.Индекс + 1,
									ПараметрыЗагрузки.ДанныеРезюме.ПутьКФайлу);
		КонецЕсли;
		
		Если ПараметрыЗагрузки.Интеррактивно Тогда
			ПоказатьПредупреждение(,ТекстСообщения); 		
		Иначе
			РезультатЗагрузки.КоличествоОшибок = РезультатЗагрузки.КоличествоОшибок + 1;
			РезультатЗагрузки.ТекстОшибок = РезультатЗагрузки.ТекстОшибок + Символы.ПС + ТекстСообщения;
			ОбработатьСтрокуТаблицыФайлов(ПараметрыЗагрузки.Индекс + 1);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ФайлРезюмеПараметры = ПомещенныеФайлыКандидата[0];
	
	ПараметрыРезюме = Новый Структура();
	ПараметрыРезюме.Вставить("СтруктураРезюме", ПараметрыЗагрузки.ДанныеРезюме.СтруктураРезюме);
	
	ПараметрыРезюме.Вставить("Вакансия", ПараметрыЗагрузки.ДанныеРезюме.Вакансия);
	ПараметрыРезюме.Вставить("Подразделение", ПараметрыЗагрузки.ДанныеРезюме.Подразделение);
	ПараметрыРезюме.Вставить("ФизическоеЛицо", ПараметрыЗагрузки.ДанныеРезюме.ФизическоеЛицо);
	ПараметрыРезюме.Вставить("Кандидат", ПараметрыЗагрузки.ДанныеРезюме.Кандидат);
	ПараметрыРезюме.Вставить("ГруппаДоступа", ПараметрыЗагрузки.ДанныеРезюме.ГруппаДоступа);
	
	ПараметрыРезюме.Вставить("Сайт", ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.ПустаяСсылка"));
	ПараметрыРезюме.Вставить("ФайлРезюмеДляЗагрузки", ФайлРезюмеПараметры.Имя);
	ПараметрыРезюме.Вставить("АдресРезюмеДляЗагрузки", ФайлРезюмеПараметры.Хранение);
		
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ДанныеРезюме.Кандидат) Тогда
		
		ПараметрыРезюме.Вставить("Ключ", ПараметрыЗагрузки.ДанныеРезюме.Кандидат);
		
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Интеррактивно Тогда
		
		ОткрытьФорму("Справочник.Кандидаты.Форма.ФормаЭлемента", ПараметрыРезюме, ЭтаФорма, Истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ОписаниеОшибки = "";
		СоздатьРезюмеНаСервере(ПараметрыРезюме, ОписаниеОшибки);
		
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			ПараметрыЗагрузки.ДанныеРезюме.Обработан = Истина;
			ПараметрыЗагрузки.ДанныеРезюме.ФизическоеЛицо = ПараметрыРезюме.ФизическоеЛицо;
			ПараметрыЗагрузки.ДанныеРезюме.Кандидат = ПараметрыРезюме.Кандидат;
			ПараметрыЗагрузки.ДанныеРезюме.Вакансия = ПараметрыРезюме.Вакансия;
			ПараметрыЗагрузки.ДанныеРезюме.Подразделение = ПараметрыРезюме.Подразделение;
			
			Если ПараметрыЗагрузки.ДанныеРезюме.ЭтоНовыйКандидат = Истина Тогда
				РезультатЗагрузки.СозданоКандидатов = РезультатЗагрузки.СозданоКандидатов + 1;
			Иначе
				РезультатЗагрузки.ОбновленоКандидатов = РезультатЗагрузки.ОбновленоКандидатов + 1;
			КонецЕсли;
			
			Если ПараметрыЗагрузки.ДанныеРезюме.ЭтоНовоеФизическоеЛицо = Истина Тогда
				РезультатЗагрузки.СозданоФизическихЛиц = РезультатЗагрузки.СозданоФизическихЛиц + 1;
			Иначе
				РезультатЗагрузки.ОбновленоФизическихЛиц = РезультатЗагрузки.ОбновленоФизическихЛиц + 1;
			КонецЕсли;
			
			ПараметрыЗагрузки.ДанныеРезюме.ЭтоНовыйКандидат = Ложь;
			ПараметрыЗагрузки.ДанныеРезюме.ЭтоНовоеФизическоеЛицо = Ложь;
			ПараметрыЗагрузки.ДанныеРезюме.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ПараметрыЗагрузки.ДанныеРезюме);
			
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Строка %1. При загрузке резюме возникла ошибка:'"), ПараметрыЗагрузки.Индекс + 1) +
								"|" + ОписаниеОшибки;
								
			РезультатЗагрузки.КоличествоОшибок = РезультатЗагрузки.КоличествоОшибок + 1;
			РезультатЗагрузки.ТекстОшибок = РезультатЗагрузки.ТекстОшибок + Символы.ПС + ТекстСообщения;
			
		КонецЕсли;
		
		ОбработатьСтрокуТаблицыФайлов(ПараметрыЗагрузки.Индекс + 1);
		
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьРезультатВопросаОЗакрытииФормы(РезультатВопроса, Параметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВсеРавноЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВакансиюПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ИдентификаторыРезюмеКОбработке = Элементы.ТаблицаФайлов.ВыделенныеСтроки;
		
		Для Каждого ИдентификаторСтроки Из ИдентификаторыРезюмеКОбработке Цикл
			
			ТекущиеДанные = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ТекущиеДанные.Обработан = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СброситьКандидата = (ТекущиеДанные.Вакансия <> Результат);
			ТекущиеДанные.Вакансия = Результат;
			ОбработатьСтрокуПриИзмененииВакансии(ТекущиеДанные, СброситьКандидата);
			
		КонецЦикла;
		ПроверитьНаДубли();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыРезюмеПродолжение(Результат, Параметры) Экспорт
	
	ДобавитьФайлы();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДобавитьФайлыРезюмеИзКаталогаПродолжение(Результат, Параметры) Экспорт
	
	ДобавитьФайлыИзКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ИдентификаторыРезюмеКОбработке = Элементы.ТаблицаФайлов.ВыделенныеСтроки;
		
		Для Каждого ИдентификаторСтроки Из ИдентификаторыРезюмеКОбработке Цикл
			
			ТекущиеДанные = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ТекущиеДанные.Обработан = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СброситьКандидата = (ТекущиеДанные.Подразделение <> Результат);
			ТекущиеДанные.Подразделение = Результат;
			ОбработатьСтрокуПриИзмененииПодразделения(ТекущиеДанные, СброситьКандидата);
			
		КонецЦикла;
		
		ПроверитьНаДубли();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГруппуДоступаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ИдентификаторыРезюмеКОбработке = Элементы.ТаблицаФайлов.ВыделенныеСтроки;
		
		Для Каждого ИдентификаторСтроки Из ИдентификаторыРезюмеКОбработке Цикл
			
			ТекущиеДанные = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ТекущиеДанные.Обработан = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущиеДанные.ГруппаДоступа = Результат;
			ТекущиеДанные.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущиеДанные);
			УстановитьОтбор();
			УстановитьДоступностьКнопкиЗагрузки();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКандидата(ДанныеРезюме)
	
	Если Не ЗначениеЗаполнено(ДанныеРезюме.Кандидат) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРезюме = Новый Структура();
	ПараметрыРезюме.Вставить("Ключ", ДанныеРезюме.Кандидат);
	
	ОткрытьФорму(
		"Справочник.Кандидаты.Форма.ФормаЭлемента", 
		ПараметрыРезюме, 
		ЭтаФорма, 
		Истина, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуПриИзмененииВакансии(ТекущиеДанные, СброситьКандидата)
	
	ПодразделениеРезультат = ЗначенияРеквизитовОбъектаСКлиента(ТекущиеДанные.Вакансия, "Подразделение").Подразделение;
	
	Если ТекущиеДанные.Подразделение <> ПодразделениеРезультат Тогда
		СброситьКандидата = Истина;
	КонецЕсли;
	
	ТекущиеДанные.Подразделение = ПодразделениеРезультат;
	
	Если СброситьКандидата Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
			ЗаполнитьКандидата(ТекущиеДанные);
		Иначе
			ТекущиеДанные.Кандидат = Неопределено;
		КонецЕсли;                
	КонецЕсли;
	
	ТекущиеДанные.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущиеДанные);
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуПриИзмененииПодразделения(ТекущиеДанные, СброситьКандидата)
	
	Если СброситьКандидата Тогда
		ТекущиеДанные.Вакансия = Неопределено;
		Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
			ЗаполнитьКандидата(ТекущиеДанные);
		Иначе
			ТекущиеДанные.Кандидат = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущиеДанные);
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНеЗаписанныеИзменения()
	
	Результат = Ложь;
	
	Для Каждого ТекСтрока Из ТаблицаФайлов Цикл
		Если Не ТекСтрока.Обработан Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНаДубли()
	
	Для Каждого ТекущиеДанные Из ТаблицаФайлов Цикл                 
		
		НайденныеСтроки = ТаблицаФайлов.НайтиСтроки(Новый Структура("ФИО, ФизическоеЛицо, ЭтоНовоеФизическоеЛицо", 
													ТекущиеДанные.ФИО, 
													ТекущиеДанные.ФизическоеЛицо, 
													Не ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо)));
		
		ТекущиеДанные.ЕстьДубль = (НайденныеСтроки.Количество() > 1);		
		ТекущиеДанные.ДоступноДляЗагрузки = РезюмеДоступноДляАвтоматическойЗагрузки(ТекущиеДанные);
		
	КонецЦикла;
	
	УстановитьОтбор();
	УстановитьДоступностьКнопкиЗагрузки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКандидата(СтрокаРезюме)

	КандидатыФизическогоЛица = КандидатыФизическогоЛица(СтрокаРезюме.ФизическоеЛицо, СтрокаРезюме.Вакансия, СтрокаРезюме.Подразделение);
	СтрокаРезюме.ЭтоНовыйКандидат = (КандидатыФизическогоЛица.Количество() = 0);
	Если КандидатыФизическогоЛица.Количество() = 1 Тогда
		СтрокаРезюме.Кандидат = КандидатыФизическогоЛица[0];
		ДанныеКандидата = ЗначенияРеквизитовОбъектаСКлиента(СтрокаРезюме.Кандидат, "Вакансия, Подразделение");
		СтрокаРезюме.Вакансия = ДанныеКандидата.Вакансия;
		СтрокаРезюме.Подразделение = ДанныеКандидата.Подразделение;
	Иначе
		СтрокаРезюме.Кандидат = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГруппаДоступаФизическогоЛица(ФизическоеЛицо)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ГруппаДоступа");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьРезюмеНаСервере(ПараметрыЗагрузки, ОписаниеОшибки)
	
	ЭтоНовыйКандидат = Истина;
	
	// Получаем кандидата.
	Если ПараметрыЗагрузки.Свойство("Ключ") И ЗначениеЗаполнено(ПараметрыЗагрузки.Ключ) Тогда
		КандидатОбъект = ПараметрыЗагрузки.Ключ.ПолучитьОбъект();
		КандидатСсылка = ПараметрыЗагрузки.Ключ;
		ЭтоНовыйКандидат = Ложь;
	Иначе
		КандидатСсылка = Справочники.Кандидаты.ПолучитьСсылку();
		КандидатОбъект = Справочники.Кандидаты.СоздатьЭлемент();
		КандидатОбъект.УстановитьСсылкуНового(КандидатСсылка);
	КонецЕсли;
	
	// Заполняем реквизиты кандидата по заданной структуре данными из резюме.
	СтруктураЗаполнения = Справочники.Кандидаты.СтруктураДанныхКандидата();
	СтруктураРезюме = ПараметрыЗагрузки.СтруктураРезюме;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЗаполнения, СтруктураРезюме, Истина);
	
	СписокИсключений = "ФизическоеЛицо";
	Если Не ЭтоНовыйКандидат Тогда
		СписокИсключений = СписокИсключений + ",Состояние,Ответственный,ДатаРегистрации";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КандидатОбъект, СтруктураЗаполнения, ,"ФизическоеЛицо");
	
	// Отрабатываем заполнение вакансии и подразделения.
	ПараметрВакансия = Неопределено;
	
	Если ПараметрыЗагрузки.Свойство("Вакансия", ПараметрВакансия)
		И ЗначениеЗаполнено(ПараметрыЗагрузки.Вакансия) Тогда
		КандидатОбъект.Вакансия = ПараметрВакансия;
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрВакансия, "Позиция, Подразделение");
		ЗаполнитьЗначенияСвойств(КандидатОбъект, СтруктураРеквизитов);
	Иначе
		ПараметрыЗагрузки.Свойство("Подразделение", КандидатОбъект.Подразделение);
	КонецЕсли;
	
	ПараметрыЗагрузки.Подразделение = КандидатОбъект.Подразделение;
	
	// Заполняем у кандидата часть дополнительных реквизитов.
	Если Не ЗначениеЗаполнено(КандидатОбъект.Состояние) Тогда
		КандидатОбъект.Состояние = Перечисления.СостоянияСогласования.Рассматривается;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КандидатОбъект.Ответственный) Тогда
		КандидатОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КандидатОбъект.ДатаРегистрации) Тогда
		КандидатОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Получаем физическое лицо.
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ФизическоеЛицо) Тогда
		ФизическоеЛицоОбъект = ПараметрыЗагрузки.ФизическоеЛицо.ПолучитьОбъект();
		ФизическоеЛицоСсылка = ПараметрыЗагрузки.ФизическоеЛицо;
	Иначе
		ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизическоеЛицоОбъект.УстановитьСсылкуНового(ФизическоеЛицоСсылка);
	КонецЕсли;
	
	КандидатОбъект.ФизическоеЛицо = ФизическоеЛицоСсылка;
	
	// Заполняем ФИО и наименование кандидата и физического лица.
	ФизическоеЛицоОбъект.ФИО = ?(ЗначениеЗаполнено(СтруктураЗаполнения.Фамилия), СтруктураЗаполнения.Фамилия, "") 
			+ ?(ЗначениеЗаполнено(СтруктураЗаполнения.Имя), " " + СтруктураЗаполнения.Имя, "")
			+ ?(ЗначениеЗаполнено(СтруктураЗаполнения.Отчество), " " + СтруктураЗаполнения.Отчество, "");
	
	КандидатОбъект.Наименование = ФизическоеЛицоОбъект.ФИО;
	
	ФИОФизическихЛиц = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	ФИОФизическихЛиц.Период = ?(ЗначениеЗаполнено(СтруктураЗаполнения.ДатаРождения),
								СтруктураЗаполнения.ДатаРождения,
								ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений());
								
	ФИОФизическихЛиц.Фамилия = СтруктураЗаполнения.Фамилия;
	ФИОФизическихЛиц.Имя = СтруктураЗаполнения.Имя;
	ФИОФизическихЛиц.Отчество = СтруктураЗаполнения.Отчество;
	ФИОФизическихЛиц.ФизическоеЛицо = ФизическоеЛицоСсылка;
	
	ФизическоеЛицоОбъект.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		ФИОФизическихЛиц.Фамилия, 
		ФИОФизическихЛиц.Имя, 
		ФИОФизическихЛиц.Отчество, 
		ФизическоеЛицоОбъект.УточнениеНаименования);
	
	ФизическоеЛицоОбъект.ДатаРождения = СтруктураЗаполнения.ДатаРождения;
	
	// Заполняем пол физического лица.
	Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Пол) И СтруктураЗаполнения.Свойство("Пол") Тогда
		ФизическоеЛицоОбъект.Пол = СтруктураЗаполнения.Пол;
		Если ТипЗнч(СтруктураЗаполнения.Пол) = Тип("Строка") И ЗначениеЗаполнено(СтруктураЗаполнения.Пол) Тогда
			Если СтруктураЗаполнения.Пол = "Мужской" Тогда
				Пол = Перечисления.ПолФизическогоЛица.Мужской;
			ИначеЕсли СтруктураЗаполнения.Пол = "Женский" Тогда
				Пол = Перечисления.ПолФизическогоЛица.Женский;
			КонецЕсли;
			ФизическоеЛицоОбъект.Пол = Пол;
		КонецЕсли;
	КонецЕсли;
	
	ФизическоеЛицоОбъект.ГруппаДоступа = ПараметрыЗагрузки.ГруппаДоступа;
	
	// Заполняем трудовую деятельность физического лица.
	ТрудоваяДеятельностьФизическихЛицНаборЗаписей = РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц.СоздатьНаборЗаписей();
	
	Если СтруктураЗаполнения.Свойство("ТрудоваяДеятельность") 
				И ЗначениеЗаполнено(СтруктураЗаполнения.ТрудоваяДеятельность) Тогда
				
		ТрудоваяДеятельностьФизическихЛицНаборЗаписей.Очистить();
		Для Каждого ТрудоваяДеятельностьСтрока Из СтруктураЗаполнения.ТрудоваяДеятельность Цикл
			
			НоваяСтрокаСтаж = ТрудоваяДеятельностьФизическихЛицНаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСтаж, ТрудоваяДеятельностьСтрока, "Организация, Должность, Обязанности, СфераДеятельностиКомпании");
			НоваяСтрокаСтаж.ФизическоеЛицо = ФизическоеЛицоСсылка;
			
			Если ТипЗнч(ТрудоваяДеятельностьСтрока.ДатаНачала) = Тип("Дата") Тогда 
				НоваяСтрокаСтаж.ДатаНачала = ТрудоваяДеятельностьСтрока.ДатаНачала;
				НоваяСтрокаСтаж.ДатаОкончания = ТрудоваяДеятельностьСтрока.ДатаОкончания;
			Иначе
				НоваяСтрокаСтаж.ДатаНачала = ?(ЗначениеЗаполнено(ТрудоваяДеятельностьСтрока.ДатаНачала), Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТрудоваяДеятельностьСтрока.ДатаНачала, "-", ""), " ", ""), Символы.НПП, "")), Дата(1, 1, 1));
				НоваяСтрокаСтаж.ДатаОкончания = ?(ЗначениеЗаполнено(ТрудоваяДеятельностьСтрока.ДатаОкончания), Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТрудоваяДеятельностьСтрока.ДатаОкончания, "-", ""), " ", ""), Символы.НПП, "")), Дата(1, 1, 1));
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Заполняем сотстояние в браке физического лица.
	
	СостоянияВБракеФизическихЛиц = РегистрыСведений.СостоянияВБракеФизическихЛиц.СоздатьМенеджерЗаписи();
	
	Если СтруктураЗаполнения.Свойство("СостояниеВБраке")
		И ЗначениеЗаполнено(СтруктураЗаполнения.СостояниеВБраке) 
		И СтруктураЗаполнения.СостояниеВБраке.Количество() = 1 Тогда
		
		СостоянияВБракеФизическихЛиц.ФизическоеЛицо = ФизическоеЛицоСсылка;
		СостояниеВБраке = Справочники.СостояниеВБраке.ПустаяСсылка();
		
		Если ТипЗнч(СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке) = Тип("СправочникСсылка.СостояниеВБраке") Тогда
			СостояниеВБраке = ТипЗнч(СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке);
		ИначеЕсли СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Женат" 
			Или СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Замужем" Тогда
			СостояниеВБраке = Справочники.СостояниеВБраке.НайтиПоКоду("2");
		ИначеЕсли СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Не женат" 
			Или СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Не замужем" Тогда
			СостояниеВБраке = Справочники.СостояниеВБраке.НайтиПоКоду("1");
		КонецЕсли;
		
		СостоянияВБракеФизическихЛиц.СостояниеВБраке = СостояниеВБраке;
		
		СостоянияВБракеФизическихЛиц.Период = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	// Заполняем гражданство физического лица.
	ГражданствоФизическихЛиц = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи();
	ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.Россия;
	
	Если СтруктураЗаполнения.Свойство("Гражданство")
		И ЗначениеЗаполнено(СтруктураЗаполнения.Гражданство) 
		И СтруктураЗаполнения.Гражданство.Количество() = 1 Тогда
		
		ГражданствоФизическихЛиц.ФизическоеЛицо = ФизическоеЛицоСсылка;
		ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.НайтиПоНаименованию(СтруктураЗаполнения.Гражданство[0].Страна);
		ГражданствоФизическихЛиц.Период = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	// Заполняем образование физического лица.
	Образование = Неопределено;
	Если СтруктураЗаполнения.Свойство("Образование")
		И ЗначениеЗаполнено(СтруктураЗаполнения.Образование)
		И СтруктураЗаполнения.Образование.Количество() > 0 Тогда
		Образование = Справочники.Кандидаты.ПодготовитьДанныеОбОбразовании(СтруктураЗаполнения.Образование);
	КонецЕсли;
	
	// Заполняем знание языков физического лица.
	ЗнаниеЯзыков = Неопределено;
	Если СтруктураЗаполнения.Свойство("ЗнаниеЯзыков")
		И ЗначениеЗаполнено(СтруктураЗаполнения.ЗнаниеЯзыков) 
		И СтруктураЗаполнения.ЗнаниеЯзыков.Количество() > 0 Тогда
		ЗнаниеЯзыков = Справочники.Кандидаты.ПодготовитьДанныеОЗнанияхЯзыков(СтруктураЗаполнения.ЗнаниеЯзыков);
	КонецЕсли;
	
	// Подготавливаем фото для резюме.
	Если СтруктураЗаполнения.Свойство("Фото") 
		И ЗначениеЗаполнено(СтруктураЗаполнения.Фото) Тогда
		АдресФотографии = ПоместитьВоВременноеХранилище(СтруктураЗаполнения.Фото);
	КонецЕсли;
	
	// Сохраняем в кандидате извлеченный текст резюме 
	СтруктураРезюме = ПодборПерсоналаКлиентСервер.СтруктураHTMLРезюме();
	ФоматированныйДокумент = Новый ФорматированныйДокумент;
	ФоматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(СтруктураЗаполнения.ПолныйТекстРезюме));
	ФоматированныйДокумент.ПолучитьHTML(СтруктураРезюме.HTML, СтруктураРезюме.Вложения);
	
	КандидатОбъект.Резюме = Новый ХранилищеЗначения(СтруктураРезюме);
	КандидатОбъект.РезюмеТекст = Новый ХранилищеЗначения(СтруктураЗаполнения.ПолныйТекстРезюме);
	
	// ЗАПИСЬ
	// Начинаем записывать данные резюме в базу.
	НачатьТранзакцию();
	Попытка
		
		УстановитьКонтактнуюИнформациюФизическогоЛица(ФизическоеЛицоОбъект, СтруктураЗаполнения);
		
		// Проверка и запись физического лица.
		Если Не ФизическоеЛицоОбъект.ПроверитьЗаполнение() Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка заполнения физического лица.'");
		КонецЕсли;
		
		ФизическоеЛицоОбъект.Записать(); 
		
		ПараметрыЗагрузки.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
		
		Если (Не ЭтоНовыйКандидат) И (КандидатОбъект.ВерсияДанных <> КандидатОбъект.Ссылка.ВерсияДанных) Тогда
			
			КандидатОбъектОбновленный = КандидатОбъект.Ссылка.ПолучитьОбъект();
			КандидатОбъектОбновленный.Вакансия = КандидатОбъект.Вакансия;
			КандидатОбъектОбновленный.Позиция = КандидатОбъект.Позиция;
			КандидатОбъектОбновленный.Подразделение = КандидатОбъект.Подразделение;
			КандидатОбъектОбновленный.Состояние = КандидатОбъект.Состояние;
			КандидатОбъектОбновленный.Ответственный = КандидатОбъект.Ответственный;
			КандидатОбъектОбновленный.ДатаРегистрации = КандидатОбъект.ДатаРегистрации;
			КандидатОбъектОбновленный.Наименование = КандидатОбъект.Наименование;
			КандидатОбъектОбновленный.Резюме = КандидатОбъект.Резюме;
			КандидатОбъектОбновленный.РезюмеТекст = КандидатОбъект.РезюмеТекст;
			
			КандидатОбъект = КандидатОбъектОбновленный;
		КонецЕсли;
		
		КандидатОбъект.Записать();                                        
		
		ПараметрыЗагрузки.Кандидат = КандидатОбъект.Ссылка;
	
		// ФИО физических лиц.                    
		ФИОФизическихЛиц.Записать(Истина);
		
		// Состояние в браке.
		Если ЗначениеЗаполнено(СостоянияВБракеФизическихЛиц.ФизическоеЛицо) Тогда
			СостоянияВБракеФизическихЛиц.Записать(Истина);
		КонецЕсли;
			
		// Гражданство физического лица.
		Если ЗначениеЗаполнено(ГражданствоФизическихЛиц.ФизическоеЛицо) Тогда
			ГражданствоФизическихЛиц.Записать(Истина);
		КонецЕсли;
		
		// Трудовая деятельность физических лиц.
		ТрудоваяДеятельностьФизическихЛицНаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоСсылка);
		ТрудоваяДеятельностьФизическихЛицНаборЗаписей.Записать(Истина);
		
		Если Образование <> Неопределено Тогда
			КадровыйУчетРасширенный.ЗаписатьДанныеОбОбразовании(ФизическоеЛицоОбъект, Образование);
		КонецЕсли;
		
		Если ЗнаниеЯзыков <> Неопределено Тогда
			КадровыйУчетРасширенный.ЗаписатьДанныеОЗнанииЯзыков(ФизическоеЛицоОбъект, ЗнаниеЯзыков);
		КонецЕсли;
		
		КадровыйУчетРасширенный.ЗаписатьФотографию(ФизическоеЛицоСсылка, АдресФотографии);
		
		// Прикрепляем файл резюме к кандидату.
		ФайлРезюмеДляЗагрузки = "";
		Если ПараметрыЗагрузки.Свойство("ФайлРезюмеДляЗагрузки", ФайлРезюмеДляЗагрузки) Тогда
			
			СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ФайлРезюмеДляЗагрузки);
			Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
			ИмяБезРасширения = СтруктураПути.ИмяБезРасширения;
			
			ПараметрыФайла = Новый Структура;
			
			ПараметрыФайла.Вставить("Автор", Неопределено);
			ПараметрыФайла.Вставить("ВладелецФайлов", КандидатОбъект.Ссылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
			
			АдресРезюмеДляЗагрузки = "";
			Если ПараметрыЗагрузки.Свойство("АдресРезюмеДляЗагрузки", АдресРезюмеДляЗагрузки) Тогда
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресРезюмеДляЗагрузки);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКонтактнуюИнформациюФизическогоЛица(ФизическоеЛицоОбъект, СтруктураЗаполнения)
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица"));
	ВидыКонтактнойИнформации.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица"));
	ВидыКонтактнойИнформации.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"));
	
	Для Каждого КонтактнаяИнформацияСтрока Из СтруктураЗаполнения.КонтактнаяИнформация Цикл
		
		Если ВидыКонтактнойИнформации.Найти(КонтактнаяИнформацияСтрока.Вид) <> Неопределено Тогда 
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ФизическоеЛицоОбъект, КонтактнаяИнформацияСтрока.Представление, КонтактнаяИнформацияСтрока.Вид);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизическоеЛицоСовпадаетПоКонтактнойИнформации(КонтактнаяИнформация, ФизическоеЛицо)
	
	КонтактнаяИнформацияФизическогоЛица = КонтактнаяИнформацияФизическогоЛицаСервер(ФизическоеЛицо);
	
	Для Каждого КонтактнаяИнформацияСтрока Из КонтактнаяИнформация Цикл
		
		Если КонтактнаяИнформацияСтрока.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица") Тогда
			Если ЗначениеЗаполнено(КонтактнаяИнформацияСтрока.Представление) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Вид", КонтактнаяИнформацияСтрока.Вид);
				Отбор.Вставить("Представление", КонтактнаяИнформацияСтрока.Представление);
				НайденныеСтроки = КонтактнаяИнформацияФизическогоЛица.НайтиСтроки(Отбор);
				Возврат НайденныеСтроки.Количество() > 0;
			КонецЕсли;
		КонецЕсли; 
		
		Если КонтактнаяИнформацияСтрока.Вид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица") Тогда
			Если ЗначениеЗаполнено(КонтактнаяИнформацияСтрока.Представление) Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Тип", КонтактнаяИнформацияСтрока.Тип);
				НайденныеСтроки = КонтактнаяИнформацияФизическогоЛица.НайтиСтроки(Отбор);
				
				ТолькоЦифрыТелефона = ТолькоЦифрыИзСтроки(КонтактнаяИнформацияСтрока.Представление);
				ТолькоЦифрыТелефона = ?(СтрДлина(ТолькоЦифрыТелефона)>10, Прав(ТолькоЦифрыТелефона, 10), ТолькоЦифрыТелефона);
				
				Если ЗначениеЗаполнено(ТолькоЦифрыТелефона) Тогда
					Для Каждого ТекСтрока Из НайденныеСтроки Цикл
						ТолькоЦифрыТелефонаФизическогоЛица = ТолькоЦифрыИзСтроки(ТекСтрока.Представление);
						ТолькоЦифрыТелефонаФизическогоЛица = ?(СтрДлина(ТолькоЦифрыТелефонаФизическогоЛица)>10, Прав(ТолькоЦифрыТелефонаФизическогоЛица, 10), ТолькоЦифрыТелефонаФизическогоЛица);
						Если ТолькоЦифрыТелефона = ТолькоЦифрыТелефонаФизическогоЛица Тогда
							Возврат Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияФизическогоЛицаСервер(ФизическоеЛицо)
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицо,,,Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТолькоЦифрыИзСтроки(Знач ЗначениеИзТекста)
	Результат = "";
	
	ДопустимыеСимволы = "0123456789";
	Для НомерСимвола = 1 По СтрДлина(ЗначениеИзТекста) Цикл
		ТекущийСимвол = Сред(ЗначениеИзТекста, НомерСимвола, 1);
		Если Найти(ДопустимыеСимволы, ТекущийСимвол) > 0 Тогда
			Результат = Результат + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

