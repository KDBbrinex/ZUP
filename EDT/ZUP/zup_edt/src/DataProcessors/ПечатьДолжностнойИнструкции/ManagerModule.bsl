#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура - Заполняет список команд печати
//
// Параметры:
//  КомандыПечати	 - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьДолжностнойИнструкции";
	КомандаПечати.Идентификатор = "ДолжностнаяИнструкция";
	КомандаПечати.Представление = НСтр("ru = 'Должностная инструкция'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Должностная инструкция'");
	КомандаПечати.Порядок = 1;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	// В формате Microsoft Word.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьДолжностнойИнструкции";
	КомандаПечати.Идентификатор = "ДолжностнаяИнструкция(OfficeOpenXML)";
	КомандаПечати.Представление = НСтр("ru = 'Должностная инструкция (документ Office Open XML)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord2007;
	КомандаПечати.Порядок = 2;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Процедура - Формирует печатные формы
//
// Параметры:
//  МассивОбъектов			 - Массив - ссылки на объекты, которые нужно распечатать
//  ПараметрыПечати			 - Структура - дополнительные настройки печати
//  КоллекцияПечатныхФорм	 - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати			 - СписокЗначений - значение - ссылка на объект
//  ПараметрыВывода			 - Структура - дополнительные параметры сформированных табличных документов (выходной параметр)
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДолжностнаяИнструкция") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ДолжностнаяИнструкция",
		НСтр("ru = 'Должностная инструкция'"),
		ПечатьДолжностнойИнструкции(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДолжностнаяИнструкция(OfficeOpenXML)") Тогда
		ФормированиеДолжностнойИнструкции(МассивОбъектов, КоллекцияПечатныхФорм);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормированиеПечатнойФормы(МассивОбъектов, ТабличныйДокумент, ОбластиМакета, Макет, ОбъектыПечати)
	
	ДанныеДляПечати = ДанныеДляПечатиДолжностнойИнструкции(МассивОбъектов);
	ПервыйДокумент = Истина;
	// Вывод форм для субъектов.
	Для Каждого ОписаниеДолжностнойИнструкции Из ДанныеДляПечати Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		// Формируем печатную форму
		Инструкция = Новый ТабличныйДокумент;
		Для Каждого КлючИЗначение Из ОбластиМакета Цикл
			ИмяОбласти = КлючИЗначение.Ключ;
			ОписаниеОбласти = КлючИЗначение.Значение;
			Если ОписаниеОбласти = Неопределено Тогда
				ОписаниеОбласти = ОписаниеОбласти();
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеОбласти.КлючевоеПоле) Тогда
				Если Не ЗначениеЗаполнено(ОписаниеДолжностнойИнструкции[ОписаниеОбласти.КлючевоеПоле]) Тогда
					Если (ОписаниеДолжностнойИнструкции[ОписаниеОбласти.КлючевоеПоле] = Неопределено) ИЛИ (ОписаниеОбласти.ОбластьНаЗамену = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеОбласти.ОбластьНаЗамену) Тогда
						ИмяОбласти = ОписаниеОбласти.ОбластьНаЗамену;
						ОписаниеОбласти = ОписаниеОбласти();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если Не ОписаниеОбласти.Табличная Тогда
				ОбластьМакета.Параметры.Заполнить(ОписаниеДолжностнойИнструкции);
				Инструкция.Вывести(ОбластьМакета);
				Продолжить;
			КонецЕсли;
			Для Каждого ОписаниеЭлемента Из ОписаниеДолжностнойИнструкции[ИмяОбласти] Цикл
				ОбластьМакета.Параметры.Заполнить(ОписаниеЭлемента);
				Инструкция.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЦикла;
		ТабличныйДокумент.Вывести(Инструкция);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОписаниеДолжностнойИнструкции.Позиция);
	КонецЦикла;
	
КонецПроцедуры

// Функция - Подготавливает данные объекта к выводу на печать
//
// Параметры:
//  МассивОбъектов		 - Массив - ссылки на документы, для которых запрашиваются данные для печати
//  МассивИменМакетов	 - Массив - имена макетов (Строка), в которые подставляются данные для печати
// 
// Возвращаемое значение:
//  Соответствие - коллекция ссылок на объекты и их данные:
//   * Ключ - ЛюбаяСсылка - ссылка на объект информационной базы;
//   * Значение - Структура - макет и данные:
//    ** Ключ - Строка - имя макета,
//    ** Значение - Структура - данные объекта
//
Функция ПолучитьДанныеПечати(Знач МассивОбъектов, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	СоответствиеПоПрофилямДолжностей = СоответствиеДанныхДляПечатиДолжностнойИнструкции(МассивОбъектов);
	
	Для Каждого ОбъектСсылка Из МассивОбъектов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, СоответствиеПоПрофилямДолжностей[ОбъектСсылка]);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "ДолжностнаяИнструкция(OfficeOpenXML)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьДолжностнойИнструкции.ПФ_DOC_ДолжностнаяИнструкция_ru"));
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, ОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Макеты = Новый Структура("ОписаниеОбластей, ДвоичныеДанныеМакетов");
	Макеты.ОписаниеОбластей = ОписаниеОбластей;
	Макеты.ДвоичныеДанныеМакетов = ДвоичныеДанныеМакетов;
	
	ДанныеПечати = Новый Структура("Данные, Макеты");
	ДанныеПечати.Данные = ДанныеПоВсемОбъектам;
	ДанныеПечати.Макеты = Макеты;
	
	Возврат ДанныеПечати;
	
КонецФункции

// Функция - Печать должностной инструкции
//
// Параметры:
//  МассивОбъектов	 - Массив - массив типа СправочникСсылка.ШтатноеРасписание
//  ОбъектыПечати	 - СписокЗначений - список доступных значений
// 
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями макета
//
Функция ПечатьДолжностнойИнструкции(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ДолжностнаяИнструкция";
	
	ОбластиМакета = Новый Структура;
	ОбластиМакета.Вставить("Заголовок");
	ОбластиМакета.Вставить("ОбщиеПоложения");
	ОбластиМакета.Вставить("ШапкаПозицииПодчиненных", ОписаниеОбласти(,"ПозицииПодчиненных"));
	ОбластиМакета.Вставить("ПозицииПодчиненных", ОписаниеОбласти(Истина, "ПозицииПодчиненных", "Шаблон"));
	ОбластиМакета.Вставить("ШапкаДействияСотрудников");
	ОбластиМакета.Вставить("ДействияСотрудников", ОписаниеОбласти(Истина, "ДействияСотрудников", "ТабличныйШаблон"));
	ОбластиМакета.Вставить("ШапкаДолжностныеОбязанности");
	ОбластиМакета.Вставить("Обязанности", ОписаниеОбласти(Истина, "Обязанности", "ТабличныйШаблон"));
	ОбластиМакета.Вставить("ИнаяДолжностнаяИнформация");
	ОбластиМакета.Вставить("ШапкаЗнания");
	ОбластиМакета.Вставить("Знания", ОписаниеОбласти(Истина, "Знания", "ТабличныйШаблон"));
	ОбластиМакета.Вставить("ШапкаНавыки");
	ОбластиМакета.Вставить("Навыки", ОписаниеОбласти(Истина, "Навыки", "ТабличныйШаблон"));
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьДолжностнойИнструкции.ПФ_MXL_ДолжностнаяИнструкция");
	ФормированиеПечатнойФормы(МассивОбъектов, ТабличныйДокумент, ОбластиМакета, Макет, ОбъектыПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОписаниеОбласти(Табличная = Ложь, КлючевоеПоле = "", ОбластьНаЗамену = "")
	
	Возврат Новый Структура(
		"Табличная,
		|КлючевоеПоле,
		|ОбластьНаЗамену",
		Табличная, КлючевоеПоле, ОбластьНаЗамену);
	
КонецФункции

// Функция - Структура данных для подготовки печатных форм
//
// Параметры:
//  МассивОбъектов	 - Массив - массив СправочникСсылка.ШтатноеРасписание
// 
// Возвращаемое значение:
//  Соответствие -соответствие, в котором ключом является ссылкой, а значением описание, см. ОписаниеСогласия()
//
Функция СоответствиеДанныхДляПечатиДолжностнойИнструкции(МассивОбъектов)
	
	Соответствие = Новый Соответствие;
	ДанныеДляПечати = ДанныеДляПечатиДолжностнойИнструкции(МассивОбъектов);
	
	Для Каждого ОписаниеДолжностнойИнструкции Из ДанныеДляПечати Цикл
		Соответствие.Вставить(ОписаниеДолжностнойИнструкции.Позиция, ОписаниеДолжностнойИнструкции);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция ОКПДТРНаименованиеКатегории(ДолжностьОКПДТРКатегория)
	
	Перем НаименованиеКатегории;
	
	Если ДолжностьОКПДТРКатегория = "1" Тогда
		НаименованиеКатегории = НСтр("ru = '(Руководители)'");
	ИначеЕсли ДолжностьОКПДТРКатегория = "2" Тогда
		НаименованиеКатегории = НСтр("ru = '(Специалисты)'");
	ИначеЕсли ДолжностьОКПДТРКатегория = "3" Тогда
		НаименованиеКатегории = НСтр("ru = '(Другие служащие)'");
	ИначеЕсли ДолжностьОКПДТРКатегория = "4" Тогда
		НаименованиеКатегории = НСтр("ru = '(Рабочие)'");
	Иначе
		НаименованиеКатегории = "";
	КонецЕсли;
	
	Возврат НаименованиеКатегории;
	
КонецФункции

#Область ЗаполнениеДанных

// Функция - Структура данных для подготовки печатных форм
//
// Параметры:
//  МассивОбъектов	 - Массив - массив типа СправочникСсылка.ШтатноеРасписание
// 
// Возвращаемое значение:
//  Массив - массив структур, см. ОписаниеСогласия()
//
Функция ДанныеДляПечатиДолжностнойИнструкции(МассивОбъектов)
	
	ДанныеДляПечати = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Позиция,
		|	ШтатноеРасписание.Наименование КАК НаименованиеДолжности,
		|	ШтатноеРасписание.Подразделение КАК Подразделение,
		|	ШтатноеРасписание.Должность.ОКПДТРКатегория КАК ОКПДТРКатегория,
		|	ШтатноеРасписание.Должность КАК Должность
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Ссылка В(&ШтатноеРасписание)");
	
	Запрос.УстановитьПараметр("ШтатноеРасписание", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Описание = ОписаниеДолжностнойИнструкции();
		ЗаполнитьЗначенияСвойств(Описание, Выборка);
		
		ЗаполнитьРуководителя(Выборка.Позиция, Описание);
		ЗаполнитьПодчиненных(Выборка.Позиция, Описание);
		ЗаполнитьДействияСотрудников(Выборка.Позиция, Описание);
		ЗаполнитьХарактеристикиПерсонала(Выборка.Позиция, Описание);
		ЗаполнитьОбязанности(Выборка.Позиция, Описание);
		
		Если Не ПустаяСтрока(Выборка.НаименованиеДолжности) Тогда
			Описание.НаименованиеДолжности = Выборка.НаименованиеДолжности;
		КонецЕсли;
		ЗаполнитьДолжностьВРодительномПадеже(Описание, Выборка.Должность);
		ЗаполнитьНаименованиеДолжностиВРодительномПадеже(Описание, Выборка.НаименованиеДолжности);
		ЗаполнитьНаименованиеДолжностиВДательномПадеже(Описание, Выборка.НаименованиеДолжности);
		
		НаименованиеКатегории = ОКПДТРНаименованиеКатегории(Выборка.ОКПДТРКатегория);
		Если Не ПустаяСтрока(Выборка.ОКПДТРКатегория) Тогда
			Описание.ОКПДТРКатегория = Выборка.ОКПДТРКатегория;
			Описание.НаименованиеКатегории = НаименованиеКатегории;
		КонецЕсли;
		
		ДанныеДляПечати.Добавить(Описание);
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ЗаполнитьРуководителя(Позиция, Описание)
	
	ПодразделениеПозиции = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ПодразделениеПозиции = МодульОрганизационнаяСтруктура.МестоПозицииВСтруктуреПредприятия(Позиция);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПодразделениеПозиции) Тогда
		Описание.Подразделение = "";
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРуководителяПодразделения(Позиция, ПодразделениеПозиции, Описание);
	
КонецПроцедуры

Процедура ЗаполнитьРуководителяПодразделения(Позиция, Подразделение, Описание)

	УстановитьПривилегированныйРежим(Истина);
	ДанныеРуководителей = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		МодульРуководителиПодразделений = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		ДанныеРуководителей = МодульРуководителиПодразделений.ДанныеРуководителей(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение), Истина);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеРуководителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителей[Подразделение];
	ПозицияРуководителя = ДанныеРуководителя.ПозицияРуководителя;
	
	Если Не ЗначениеЗаполнено(ПозицияРуководителя) Тогда
		Возврат;
	КонецЕсли;
	
	Если Позиция <> ПозицияРуководителя Тогда
		ЗаполнитьПозициюРуководителя(Описание, ПозицияРуководителя);
		Возврат;
	КонецЕсли;
		
	ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Родитель");
	Если Не ЗначениеЗаполнено(ВышестоящееПодразделение) Тогда
		ЗаполнитьПозициюРуководителя(Описание, ПозицияРуководителя);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРуководителяПодразделения(Позиция, ВышестоящееПодразделение, Описание);
	
КонецПроцедуры

Процедура ЗаполнитьПодчиненных(Позиция, Описание)
	
	Описание.ПозицииПодчиненных = Неопределено;

	ПодразделенияРуководителя = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		МодульРуководителиПодразделений = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		ПодразделенияРуководителя = МодульРуководителиПодразделений.ПодразделенияПозицииРуководителя(Позиция);
	КонецЕсли;
	
	Если ПодразделенияРуководителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПозицииПодразделений = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ПозицииПодразделений = МодульОрганизационнаяСтруктура.ПозицииПодразделений(ПодразделенияРуководителя);
	КонецЕсли;
	
	Если ПозицииПодразделений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание.ПозицииПодчиненных = ПозицииПодразделений.ВыгрузитьКолонку("Позиция");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Описание.ПозицииПодчиненных, Позиция);
	
	Если Описание.ПозицииПодчиненных.Количество() = 0 Тогда
		Описание.ВсеПозицииПодчиненных = НСтр("ru = '<Подчиненных нет>'");
		Возврат;
	КонецЕсли;
	
	ПозицииПодразделений.Сортировать("Подразделение");
	Описание.ВсеПозицииПодчиненных = "";
	Для Каждого ПодчиненнаяПозиция Из Описание.ПозицииПодчиненных Цикл
		Если ЗначениеЗаполнено(Описание.ВсеПозицииПодчиненных) Тогда
			Описание.ВсеПозицииПодчиненных = Описание.ВсеПозицииПодчиненных + Символы.ПС;
		КонецЕсли;
		Описание.ВсеПозицииПодчиненных = Описание.ВсеПозицииПодчиненных + Строка(ПодчиненнаяПозиция);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДействияСотрудников(Позиция, Описание)
	
	ДействияСотрудников = ХарактеристикиПерсонала.ДействияСотрудниковПоПозицииШтатногоРасписания(Позиция);
	НомерСтроки = 1;
	Описание.ВсеДействияСотрудников = "";
	Для Каждого ДействиеСотрудника Из ДействияСотрудников Цикл
		ОписаниеДействия = ОписаниеДействияСотрудника();
		ОписаниеДействия.ДействиеСотрудника = ДействиеСотрудника;
		ОписаниеДействия.НомерСтроки = НомерСтроки;
		Описание.ДействияСотрудников.Добавить(ОписаниеДействия);
		Описание.ВсеДействияСотрудников = Описание.ВсеДействияСотрудников + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1. %2.'"),
			ОписаниеДействия.НомерСтроки,
			ОписаниеДействия.ДействиеСотрудника) + Символы.ПС;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьХарактеристикиПерсонала(Позиция, Описание)
	
	Характеристики = ХарактеристикиПерсонала.ХарактеристикиПерсоналаПоПозицииШтатногоРасписания(Позиция);
	Знание = Перечисления.ВидыХарактеристикПерсонала.Знание;
	Навык = Перечисления.ВидыХарактеристикПерсонала.Навык;
	НомерЗнания = 1;
	НомерНавыка = 1;
	Описание.ВсеЗнания = "";
	Описание.ВсеНавыки = "";
	Для Каждого Характеристика Из Характеристики Цикл
		ОписаниеХарактеристики = ОписаниеХарактеристикиПерсонала();
		ОписаниеХарактеристики.Характеристика = Характеристика;
		Если Характеристика.ВидХарактеристики = Знание Тогда
			ОписаниеХарактеристики.НомерСтроки = НомерЗнания;
			Описание.Знания.Добавить(ОписаниеХарактеристики);
			Описание.ВсеЗнания = Описание.ВсеЗнания + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1. %2.'"),
			ОписаниеХарактеристики.НомерСтроки,
			ОписаниеХарактеристики.Характеристика) + Символы.ПС;
			НомерЗнания = НомерЗнания + 1;
		ИначеЕсли Характеристика.ВидХарактеристики = Навык Тогда
			ОписаниеХарактеристики.НомерСтроки = НомерНавыка;
			Описание.Навыки.Добавить(ОписаниеХарактеристики);
			Описание.ВсеНавыки = Описание.ВсеНавыки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1. %2.'"),
			ОписаниеХарактеристики.НомерСтроки,
			ОписаниеХарактеристики.Характеристика) + Символы.ПС;
			НомерНавыка = НомерНавыка + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбязанности(Позиция, Описание)
	
	ПрофильДолжности = ХарактеристикиПерсонала.ПрофильДолжностиПоПозицииШтатногоРасписания(Позиция);
	Если Не ЗначениеЗаполнено(ПрофильДолжности) Тогда
		Возврат;
	КонецЕсли;
	Описание.ВсеОбязанности = "";
	Обязанности = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрофильДолжности[0].Обязанности, Символы.ПС, Истина);
	Для Каждого Обязанность Из Обязанности Цикл
		ОписаниеОбязанности = ОписаниеОбязанности();
		ОписаниеОбязанности.Обязанность = Обязанность;
		Описание.Обязанности.Добавить(ОписаниеОбязанности);
		Описание.ВсеОбязанности = Описание.ВсеОбязанности + ОписаниеОбязанности.Обязанность + Символы.ПС;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличныеДанные

Функция ОписаниеДействияСотрудника()
	
	Описание = Новый Структура(
		"НомерСтроки, 
		|ДействиеСотрудника");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеХарактеристикиПерсонала()
	
	Описание = Новый Структура(
		"НомерСтроки, 
		|Характеристика,
		|Значение");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеОбязанности()
	
	Описание = Новый Структура("Обязанность");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеДолжностнойИнструкции()
	
	ОписаниеДолжностнойИнструкции = Новый Структура(
		"Позиция,
		|Подразделение,
		|Обязанности,
		|ВсеОбязанности,
		|НаименованиеДолжности,
		|НаименованиеДолжностиВРодительномПадеже, 
		|НаименованиеДолжностиВДательномПадеже,
		|ОКПДТРКатегория,
		|НаименованиеКатегории,
		|ПозицияРуководителя,
		|ПозицияРуководителяВДательномПадеже,
		|ПозицииПодчиненных,
		|ВсеПозицииПодчиненных,
		|НаименованиеДолжностиПодчиненного,
		|ДействияСотрудников,
		|ВсеДействияСотрудников,
		|Знания,
		|Навыки,
		|ВсеЗнания,
		|ВсеНавыки,
		|Должность,
		|ДолжностьВРодительномПадеже");
	
	ОписаниеДолжностнойИнструкции.ДействияСотрудников = 	Новый Массив;
	ОписаниеДолжностнойИнструкции.Знания = 					Новый Массив;
	ОписаниеДолжностнойИнструкции.Навыки = 					Новый Массив;
	ОписаниеДолжностнойИнструкции.ПозицииПодчиненных = 		Новый Массив;
	ОписаниеДолжностнойИнструкции.Обязанности = 			Новый Массив;
	ОписаниеДолжностнойИнструкции.НаименованиеКатегории = "";
	ОписаниеДолжностнойИнструкции.ПозицияРуководителя = "";
	ОписаниеДолжностнойИнструкции.ДолжностьВРодительномПадеже = ОписаниеДолжностнойИнструкции.Должность;
	ОписаниеДолжностнойИнструкции.НаименованиеДолжностиВРодительномПадеже = ОписаниеДолжностнойИнструкции.НаименованиеДолжности;
	ОписаниеДолжностнойИнструкции.НаименованиеДолжностиВДательномПадеже = ОписаниеДолжностнойИнструкции.НаименованиеДолжности;
	ОписаниеДолжностнойИнструкции.ПозицияРуководителяВДательномПадеже = ОписаниеДолжностнойИнструкции.ПозицияРуководителя;
	
	Возврат ОписаниеДолжностнойИнструкции;
	
КонецФункции

#КонецОбласти

#Область Склонение

Процедура ЗаполнитьДолжностьВРодительномПадеже(ОписаниеДолжностнойИнструкции, Должность)
	
	Если ПустаяСтрока(Должность) Тогда
		ОписаниеДолжностнойИнструкции.ДолжностьВРодительномПадеже = ОписаниеДолжностнойИнструкции.Должность;
		Возврат;
	КонецЕсли;
	
	ОписаниеДолжностнойИнструкции.ДолжностьВРодительномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Должность, 2);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеДолжностиВРодительномПадеже(ОписаниеДолжностнойИнструкции, НаименованиеДолжности)
	
	Если ПустаяСтрока(НаименованиеДолжности) Тогда
		ОписаниеДолжностнойИнструкции.НаименованиеДолжностиВРодительномПадеже = ОписаниеДолжностнойИнструкции.НаименованиеДолжности;
		Возврат;
	КонецЕсли;
	
	ОписаниеДолжностнойИнструкции.НаименованиеДолжностиВРодительномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(НаименованиеДолжности, 2);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеДолжностиВДательномПадеже(ОписаниеДолжностнойИнструкции, НаименованиеДолжности)
	
	Если ПустаяСтрока(НаименованиеДолжности) Тогда
		ОписаниеДолжностнойИнструкции.НаименованиеДолжностиВДательномПадеже = ОписаниеДолжностнойИнструкции.НаименованиеДолжности;
		Возврат;
	КонецЕсли;
	
	ОписаниеДолжностнойИнструкции.НаименованиеДолжностиВДательномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(НаименованиеДолжности, 3);
	
КонецПроцедуры

Процедура ЗаполнитьПозициюРуководителя(ОписаниеДолжностнойИнструкции, ПозицияРуководителя)
	
	Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияРуководителя, "Должность");
	ОписаниеДолжностнойИнструкции.ПозицияРуководителя = Должность;
	
	Если ПустаяСтрока(Должность) Тогда
		ОписаниеДолжностнойИнструкции.ПозицияРуководителяВДательномПадеже = Должность;
		Возврат;
	КонецЕсли;
	
	ОписаниеДолжностнойИнструкции.ПозицияРуководителяВДательномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Должность), 3);
	
КонецПроцедуры

#КонецОбласти

#Область РедактируемыйДокумент

Процедура ФормированиеДолжностнойИнструкции(МассивОбъектов, КоллекцияПечатныхФорм)
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ДолжностнаяИнструкция(OfficeOpenXML)");
	Если ПечатнаяФорма <> Неопределено Тогда
		ИмяМакета = "ДолжностнаяИнструкция(OfficeOpenXML)";
		МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.МакетыИДанныеОбъектовДляПечати("Обработка.ПечатьДолжностнойИнструкции", ИмяМакета, МассивОбъектов);
		ОфисныеДокументы = Новый Соответствие;
			
		Шаблон = НСтр("ru = 'Должностная Инструкция [Ссылка] - [Подразделение]'");
		ЗначенияОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "Подразделение");
		Для Каждого Ссылка Из МассивОбъектов Цикл
			Имя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияОбъектов[Ссылка]);
			АдресХранилищаОфисныйДокумент = НапечататьДолжностнуюИнструкцию(Ссылка, МакетИДанныеОбъекта, ИмяМакета);
			ОфисныеДокументы.Вставить(АдресХранилищаОфисныйДокумент, Имя);
		КонецЦикла;
			
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Должностная инструкция (документ Microsoft Word)'");
		ПечатнаяФорма.ОфисныеДокументы = ОфисныеДокументы;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеЗаполнениеДолжностнойИнструкции(Макет, ИмяМакета, Области, ПечатнаяФорма, ДанныеОбъекта)
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["П1ОбщиеПоложения"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ПозицииПодчиненных"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["П2Функции"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ДействияСотрудников"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["П3ДолжностныеОбязанности"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["П4ПраваИПолномочия"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["П5Ответственность"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["П6ТребованияККвалификации"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаЗнания"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["Знания"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаНавыки"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
	Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["Навыки"]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	
КонецПроцедуры

Функция НапечататьДолжностнуюИнструкцию(Ссылка, МакетИДанныеОбъекта, ИмяМакета)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	ДанныеОбъекта			= МакетИДанныеОбъекта.Данные[Ссылка][ИмяМакета];
	
	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗакрытьОкноПечатнойФормы = Ложь;
	Попытка
		ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета, Макет);
		АдресХранилищаПечатнойФормы = "";
		Если ПечатнаяФорма = Неопределено Тогда
			УправлениеПечатью.ОчиститьСсылки(Макет);
			Возврат "";
		КонецЕсли;
		// Вывод обычных областей с параметрами.
		Если ИмяМакета = "ДолжностнаяИнструкция(OfficeOpenXML)" Тогда
			ПолучениеЗаполнениеДолжностнойИнструкции(Макет, ИмяМакета, Области, ПечатнаяФорма, ДанныеОбъекта);
		КонецЕсли;
		АдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗакрытьОкноПечатнойФормы = Истина;
		Возврат "";
	КонецПопытки;
	
	УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
	УправлениеПечатью.ОчиститьСсылки(Макет);
	
	Возврат АдресХранилищаПечатнойФормы;
	
КонецФункции

Функция ОписаниеОбластейМакетаОфисногоДокумента()
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "П1ОбщиеПоложения",				"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПозицииПодчиненных",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "П2Функции",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ДействияСотрудников",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "П3ДолжностныеОбязанности",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "П4ПраваИПолномочия",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "П5Ответственность",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "П6ТребованияККвалификации",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаЗнания",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Знания",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаНавыки",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Навыки",						"Общая");
	
	Возврат ОписаниеОбластей;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли