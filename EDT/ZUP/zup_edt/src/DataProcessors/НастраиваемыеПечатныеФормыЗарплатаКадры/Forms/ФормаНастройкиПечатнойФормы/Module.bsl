#Область ОписаниеПеременных

&НаКлиенте
Перем ЭтоДоступноеПользовательскоеПоле;

&НаКлиенте
Перем ЭтоДоступныйПараметрДанных;

&НаКлиенте
Перем ТекущееВыбранноеПоле;

&НаКлиенте
Перем ИдентификаторыМакетаПечатнойФормы Экспорт;

&НаКлиенте
Перем ИдентификаторыОбластей Экспорт;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = Параметры.Представление;
	ПутьКМакетуПечатнойФормы = Параметры.ПутьКМакетуПечатнойФормы;
	ПутьКВариантуОтчета = Параметры.ПутьКВариантуОтчета;
	
	УстановитьОтображениеПолейРедактора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапомнитьИдентификаторыМакетаПечатнойФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Проверка того, что данные изменены
	Если Модифицированность Тогда
		
		Отказ = Истина;
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗакрытьФорму", Истина);
		
		ЗадатьВопросОНеобходимостиСохранения(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МакетПечатнойФормыПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура МакетПечатнойФормыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетПечатнойФормыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		
		ИменаРеквизитов = Новый Массив;
		Для Каждого ПараметрПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
			ИменаРеквизитов.Добавить(ПараметрПеретаскивания.ИмяПоля);
		КонецЦикла;
		
		ОбластьЯчеек = МакетПечатнойФормы.Область(Область.Верх, Область.Лево);
		ВставитьПараметрыВОбласть(ОбластьЯчеек, ИменаРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыДоступныеПоля

&НаКлиенте
Процедура ДоступныеПоляВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьПолеВыбора(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляВыбораПриАктивизацииСтроки(Элемент)
	
	ЭтоПользовательскоеПоле = Элемент.ТекущаяСтрока <> Неопределено И (КомпоновщикНастроекКД.Настройки.ПользовательскиеПоля.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока) <> Неопределено);
	Если ЭтоДоступноеПользовательскоеПоле <> ЭтоПользовательскоеПоле Тогда
		
		ЭтоДоступноеПользовательскоеПоле = ЭтоПользовательскоеПоле;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыбранныеПоляИзменитьПользовательскоеПоле",
			"Доступность",
			ЭтоДоступноеПользовательскоеПоле);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыбранныеПоляСкопироватьПользовательскоеПоле",
			"Доступность",
			ЭтоДоступноеПользовательскоеПоле);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДоступныеПоляВыбораКонтекстноеМенюИзменитьПользовательскоеПоле",
			"Видимость",
			ЭтоДоступноеПользовательскоеПоле);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДоступныеПоляВыбораКонтекстноеМенюСкопироватьПользовательскоеПоле",
			"Видимость",
			ЭтоДоступноеПользовательскоеПоле);
		
	КонецЕсли;
	
	ЭтоПолеПараметра = (СтрНайти(Строка(Элемент.ТекущаяСтрока), "DataParameters.") = 1);
	Если ЭтоДоступныйПараметрДанных <> ЭтоПолеПараметра Тогда
		
		ЭтоДоступныйПараметрДанных = ЭтоПолеПараметра;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДоступныеПоляВыбораКонтекстноеМенюУстановитьЗначениеПараметра",
			"Видимость",
			ЭтоДоступныйПараметрДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыВыбранныеПоля

&НаКлиенте
Процедура ВыбранныеПоляПриАктивизацииСтроки(Элемент)
	
	Если ТекущееВыбранноеПоле <> Элементы.ВыбранныеПоля.ТекущиеДанные Тогда
		
		ТекущееВыбранноеПоле = Элементы.ВыбранныеПоля.ТекущиеДанные;
		ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Строка = Неопределено Тогда
		ИндексСтрокиДляВставки = Неопределено;
	Иначе
		ИндексСтрокиДляВставки = ВыбранныеПоля.Индекс(ВыбранныеПоля.НайтиПоИдентификатору(Строка));
	КонецЕсли;
	
	ИдентификаторСтроки = ВставитьВыбранныеПоляВКоллекцию(ПараметрыПеретаскивания.Значение, ИндексСтрокиДляВставки);
	
	Элементы.ВыбранныеПоля.ТекущаяСтрока = ИдентификаторСтроки;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыПараметрыМакета

&НаКлиенте
Процедура ПараметрыМакетаПриАктивизацииСтроки(Элемент)
	
	Если ТекущееВыбранноеПоле <> Элементы.ПараметрыМакета.ТекущиеДанные Тогда
		
		ТекущееВыбранноеПоле = Элементы.ПараметрыМакета.ТекущиеДанные;
		ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		
		ВосстановитьОформлениеМакета();
		
		СохранитьИзменения();
		Закрыть(Истина);
		
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКМакетуПоУмолчанию(Команда)
	
	УдалитьПользовательскийМакет();
	УстановитьОтображениеПолейРедактора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПоле(Команда)
	
	Если Элементы.ДоступныеПоляВыбора.ТекущаяСтрока <> Неопределено Тогда
		ДобавитьПолеВыбора(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборПоля(Команда)
	
	Если Элементы.ВыбранныеПоля.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Пока Элементы.ВыбранныеПоля.ВыделенныеСтроки.Количество() > 0 Цикл
			
			ВыбранноеПоле = ВыбранныеПоля.НайтиПоИдентификатору(Элементы.ВыбранныеПоля.ВыделенныеСтроки[0]);
			ИмяПоля = ВыбранноеПоле.ИмяПоля;
			
			ВыбранныеПоля.Удалить(ВыбранноеПоле);
			
			СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля,Выбрано", ИмяПоля, Истина));
			Если СтрокиКоллекции.Количество() > 0 Тогда
				СтрокиКоллекции[0].Выбрано = Ложь;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
		Элементы.ПараметрыМакета.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Выбрано", Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИдентификатор(Команда)
	
	Если Элементы.ВыбранныеПоля.ТекущаяСтрока = Неопределено Тогда
		ИдентификаторСтрокиВыбранногоПоля = Неопределено;
	Иначе
		ИдентификаторСтрокиВыбранногоПоля = Элементы.ВыбранныеПоля.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИдентификатор(Команда)
	
	Если ИдентификаторСтрокиВыбранногоПоля <> Неопределено Тогда
		
		ВыбранноеПоле = ВыбранныеПоля.НайтиПоИдентификатору(ИдентификаторСтрокиВыбранногоПоля);
		Если ВыбранноеПоле = Неопределено Тогда
			ИдентификаторСтрокиВыбранногоПоля = Неопределено;
		Иначе
			
			ИменаРеквизитов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеПоле.ИмяПоля);
			ВставитьПараметрыВОбласть(Элементы.МакетПечатнойФормы.ТекущаяОбласть, ИменаРеквизитов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрСКДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		НовыйПараметр = КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраКомпоновкиДанных"));
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных(Результат.Имя);
		НовыйПараметр.Значение = Результат.ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользовательскоеПоле(Команда)
	
	ОткрытьРедакторПользовательскогоПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПользовательскоеПоле(Команда)
	
	ОткрытьРедакторПользовательскогоПоля(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПользовательскоеПоле(Команда)
	
	ОткрытьРедакторПользовательскогоПоля(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПараметра(Команда)
	
	Если ЭтоДоступныйПараметрДанных Тогда
		
		ЧастиТекущегоИдентификатора = СтрРазделить(Строка(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока), ".");
		ИмяПараметра = ЧастиТекущегоИдентификатора[ЧастиТекущегоИдентификатора.Количество() - 1];
		
		ПараметрНастроек = КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ПараметрНастроек <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(ПараметрНастроек.ИдентификаторПользовательскойНастройки) Тогда
				ПараметрНастроек.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			ПараметрПользовательскихНастроек = Неопределено;
			Для Каждого ЭлементНастройки Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
				
				Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
					И ЭлементНастройки.Параметр = ПараметрНастроек.Параметр Тогда
					
					ПараметрПользовательскихНастроек = ЭлементНастройки;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПараметрПользовательскихНастроек <> Неопределено Тогда
				
				ДоступныйПараметр = КомпоновщикНастроекКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрНастроек.Параметр);
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрНастроек", ПараметрПользовательскихНастроек);
				
				Оповещение = Новый ОписаниеОповещения("УстановитьЗначениеПараметраЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВводЗначения(Оповещение, ПараметрНастроек.Значение, ДоступныйПараметр.Заголовок, ДоступныйПараметр.ТипЗначения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	ВосстановитьОформлениеМакета();
	
	ЧастиПути = СтрРазделить(ПутьКВариантуОтчета, ".");
	КлючВарианта = ЧастиПути[ЧастиПути.Количество() - 1];
	
	ЧастиПути.Удалить(ЧастиПути.Количество() - 1);
	
	ВыбранныеПоляВНастройки(ЭтотОбъект);
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("МакетПечатнойФормы", МакетПечатнойФормы);
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("Настройки", ПолучитьНастройки(КомпоновщикНастроекКД));
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиУстановлены", Истина);
	
	ВариантОтчета = ВариантОтчетов(СтрСоединить(ЧастиПути, "."), КлючВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиКД);
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, ВариантОтчета, ПараметрыФормы);
	
	ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьЗначениеПараметраЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Не ДополнительныеПараметры.ПараметрНастроек.Использование
			Или ДополнительныеПараметры.ПараметрНастроек.Значение <> Результат Тогда
			
			ДополнительныеПараметры.ПараметрНастроек.Значение = Результат;
			ДополнительныеПараметры.ПараметрНастроек.Использование = Истина;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторПользовательскогоПоля(ТекущийЭлемент = Неопределено, Скопировать = Ложь)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КомпоновщикНастроекКД", КомпоновщикНастроекКД);
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ТекущийЭлемент <> Неопределено Тогда
		
		ПараметрыОткрытия.Вставить("ТекущийЭлемент", ТекущийЭлемент);
		
		Если Скопировать Тогда
			ПараметрыОткрытия.Вставить("Скопировать", Истина);
		Иначе
			ДополнительныеПараметры.Вставить("ТекущийЭлемент", ТекущийЭлемент);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаРезультатаРедактированияПользовательскогоПоля", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.НастраиваемыеПечатныеФормыЗарплатаКадры.Форма.ФормаПользовательскогоПоля", ПараметрыОткрытия, ЭтотОбъект, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаРедактированияПользовательскогоПоля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ТекущийЭлемент") Тогда
			
			ВставитьВыбранноеПоле = Ложь;
			ПользовательскоеПоле = КомпоновщикНастроекКД.Настройки.ПользовательскиеПоля.ПолучитьОбъектПоИдентификатору(ДополнительныеПараметры.ТекущийЭлемент);
			
		Иначе
			
			ВставитьВыбранноеПоле = Истина;
			ПользовательскоеПоле = КомпоновщикНастроекКД.Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			
		КонецЕсли;
		
		ПользовательскоеПоле.Заголовок = Результат.Заголовок;
		
		ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Результат.ВыражениеДетальныхЗаписей);
		
		Если ЗначениеЗаполнено(Результат.ВыражениеИтоговыхЗаписей) Тогда
			ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(Результат.ВыражениеИтоговыхЗаписей);
		КонецЕсли;
		
		Если ВставитьВыбранноеПоле Тогда
			
			Элементы.ВыбранныеПоля.ТекущаяСтрока = ВставитьВыбранноеПолеВКоллекцию(
				ВыбранныеПоля, КомпоновщикНастроекКД, Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным), ПараметрыМакета);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПолейРедактора()
	
	ИдентификаторСтрокиВыбранногоПоля = Неопределено;
	
	// Установка макета печатной формы и настроек СКД
	МакетПечатнойФормы = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакетуПечатнойФормы);
	
	ИмяОтчета = ЗарплатаКадрыОтчетыРасширенный.ИмяОтчетаИзПутиКВарианту(ПутьКВариантуОтчета);
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВариантаИзПутиКВарианту(ПутьКВариантуОтчета);
	
	ОбъектОтчета = ОбщегоНазначения.ОбъектПоПолномуИмени(ИмяОтчета);
	
	ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СообщатьОРасхожденияхВПутяхКДанным", Истина);
	ОбъектОтчета.ИнициализироватьОтчет();
	ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Удалить("СообщатьОРасхожденияхВПутяхКДанным");
	
	ЗарплатаКадрыОтчеты.ЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, ОбъектОтчета, КлючВарианта);
	
	ЗаполнитьВыбранныеПоля();
	
	Элементы.ПараметрыМакета.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Выбрано", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОНеобходимостиСохранения(ДополнительныеПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаНеобходимостиСохранитьИзмененияНастроекПечатнойФормы", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Настройка печатной формы была изменена.
		|Сохранить изменения?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНеобходимостиСохранитьИзмененияНастроекПечатнойФормы(Результат, ДополнительныеПараметры) Экспорт
	
	ВосстановитьОформлениеМакета();
	
	Попытка
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			СохранитьИзменения();
			
			Если ДополнительныеПараметры.Свойство("ЗакрытьФорму") Тогда
				
				Закрыть(Истина);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			
			Если ДополнительныеПараметры.Свойство("ЗакрытьФорму") Тогда
				
				Модифицированность = Ложь;
				Закрыть();
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменения()
	
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВариантаИзПутиКВарианту(ПутьКВариантуОтчета);
	
	ВыбранныеПоляВНастройки(ЭтотОбъект);
	
	КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства.Очистить();
	
	НастройкиСхемы = Новый Структура;
	НастройкиСхемы.Вставить("Настройки", КомпоновщикНастроекКД.Настройки);
	НастройкиСхемы.Вставить("ПользовательскиеНастройкиКД", КомпоновщикНастроекКД.ПользовательскиеНастройки);
	
	ПолноеИмяОбъектаМетаданныхОтчета = ЗарплатаКадрыОтчетыРасширенный.ИмяОтчетаИзПутиКВарианту(ПутьКВариантуОтчета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВариантОтчета = ЗарплатаКадрыОтчеты.ВариантОтчетаПечатнойФормыПоИмениОбъекта(ПолноеИмяОбъектаМетаданныхОтчета, КлючВарианта);
	
	ВариантОтчетаОбъект = ВариантОтчета.ПолучитьОбъект();
	ВариантОтчетаОбъект.Настройки = Новый ХранилищеЗначения(НастройкиСхемы);
	ВариантОтчетаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Сохранение настоек макета печатной формы
	АдресМакета = ПоместитьВоВременноеХранилище(МакетПечатнойФормы);
	УправлениеПечатью.ЗаписатьМакет(ПутьКМакетуПечатнойФормы, АдресМакета);
	
	ЗарплатаКадрыОтчеты.ОчиститьМакетОтчета(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданныхОтчета), КлючВарианта);
	
	Модифицированность = Ложь;
	
КонецПроцедуры


#Область РаботаСПредставлениемМакетаПечатнойФормы

&НаКлиенте
Процедура ПриИзмененииСодержимогоОбласти(Область)
	
	ДобавитьПараметрыОбласти(ИдентификаторыМакетаПечатнойФормы, Область, Истина);
	ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы);
	
	ПараметрыМакета.Сортировать("ИмяПоля");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы, ВыбранноеПоле = Истина)
	
	ВосстановитьОформлениеМакета();
	
	Если Не ЗначениеЗаполнено(ИдентификаторыМакетаПечатнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущееВыбранноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоля = ТекущееВыбранноеПоле.ИмяПоля;
	Если ВыбранноеПоле Тогда
		
		ЦветРамки = WebЦвета.Зеленый;
		ЦветФона = WebЦвета.СветлоЗеленый;
		
	Иначе
		
		ЦветРамки = WebЦвета.ТемноОранжевый;
		ЦветФона = WebЦвета.Оранжевый;
		
	КонецЕсли;
	
	ИдентификаторыОбластей = Новый Соответствие;
	
	Если Не ПустаяСтрока(ИмяПоля) Тогда
		
		СтрокиПараметра = ИдентификаторыМакетаПечатнойФормы.Получить(ИмяПоля);
		Если СтрокиПараметра <> Неопределено Тогда
			
			Для Каждого ОписаниеСтроки Из СтрокиПараметра Цикл
				
				НомерСтроки = ОписаниеСтроки.Ключ;
				Для Каждого ОписаниеКолонки Из ОписаниеСтроки.Значение Цикл
					
					НомерКолонки = ОписаниеКолонки.Ключ;
					Область = МакетПечатнойФормы.Область(НомерСтроки, НомерКолонки);
					
					// Запоминание настроек исходного макета
					НастройкиОбласти = Новый Структура;
					НастройкиОбласти.Вставить("Узор", Область.Узор);
					НастройкиОбласти.Вставить("ЦветУзора", Область.ЦветУзора);
					НастройкиОбласти.Вставить("ГраницаСверху", Область.ГраницаСверху);
					НастройкиОбласти.Вставить("ГраницаСлева", Область.ГраницаСлева);
					НастройкиОбласти.Вставить("ГраницаСнизу", Область.ГраницаСнизу);
					НастройкиОбласти.Вставить("ГраницаСправа", Область.ГраницаСправа);
					НастройкиОбласти.Вставить("ЦветРамки", Область.ЦветРамки);
					
					ИдентификаторыОбластей.Вставить(Область, НастройкиОбласти);
					
					// Выделение ячейки, содержащей выбранный параметр
					Область.Узор = ТипУзораТабличногоДокумента.Узор14;
					Область.ЦветУзора = ЦветФона;
					
					ЛинияВыделения = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
					Область.ГраницаСверху = ЛинияВыделения;
					Область.ГраницаСлева = ЛинияВыделения;
					Область.ГраницаСнизу = ЛинияВыделения;
					Область.ГраницаСправа = ЛинияВыделения;
					
					Область.ЦветРамки = ЦветРамки;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОформлениеМакета()
	
	Если ИдентификаторыОбластей <> Неопределено Тогда
		
		Для Каждого ОписаниеОформления Из ИдентификаторыОбластей Цикл
			
			Область = ОписаниеОформления.Ключ;
			ЗаполнитьЗначенияСвойств(Область, ОписаниеОформления.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИдентификаторыОбластей = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПараметрыВОбласть(ОбластьЯчеек, ИменаРеквизитов)
	
	Если ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст Тогда
		
		Если ИменаРеквизитов.Количество() = 1
			И ПустаяСтрока(ОбластьЯчеек.Текст) Тогда
			
			ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			ОбластьЯчеек.Параметр = ИменаРеквизитов[0];
			
		Иначе
			
			ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
			Для Каждого ИмеяРеквизита Из ИменаРеквизитов Цикл
				ОбластьЯчеек.Текст = ОбластьЯчеек.Текст + " [" + ИмеяРеквизита + "]";
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
		
		ТекстОбласти = "[" + ОбластьЯчеек.Параметр + "]";
		
		ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ОбластьЯчеек.Текст = ТекстОбласти;
		
		Для Каждого ИмеяРеквизита Из ИменаРеквизитов Цикл
			ОбластьЯчеек.Текст = ОбластьЯчеек.Текст + " [" + ИмеяРеквизита + "]";
		КонецЦикла;
		
	ИначеЕсли ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
		
		Для Каждого ИмеяРеквизита Из ИменаРеквизитов Цикл
			ОбластьЯчеек.Текст = ОбластьЯчеек.Текст + " [" + ИмеяРеквизита + "]";
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПриИзмененииСодержимогоОбласти(ОбластьЯчеек);
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСИдентификаторамиМакетаПечатнойФормы

&НаКлиенте
Процедура ЗапомнитьИдентификаторыМакетаПечатнойФормы()
	
	ИдентификаторыМакетаПечатнойФормы = Новый Соответствие;
	Для НомерСтроки = 1 По МакетПечатнойФормы.ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По МакетПечатнойФормы.ШиринаТаблицы Цикл
			
			ОбластьЯчейки = МакетПечатнойФормы.Область(НомерСтроки, НомерКолонки);
			Если ОбластьЯчейки.Верх < НомерСтроки Или ОбластьЯчейки.Лево < НомерКолонки Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьПараметрыОбласти(ИдентификаторыМакетаПечатнойФормы, ОбластьЯчейки, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыМакета.Сортировать("ИмяПоля");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрыОбласти(ИдентификаторыМакета, ОбластьЯчеек, ОчищатьПредыдущие)
	
	Если ОчищатьПредыдущие Тогда
		УдалитьУпоминаниеОбласти(ИдентификаторыМакета, ОбластьЯчеек);
	КонецЕсли;
	
	Если ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
		ДобавитьПараметрМакета(ИдентификаторыМакета, ОбластьЯчеек.Параметр, ОбластьЯчеек.Верх, ОбластьЯчеек.Лево);
	ИначеЕсли ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
		ДобавитьПараметрыШаблона(ИдентификаторыМакета, ОбластьЯчеек.Текст, ОбластьЯчеек.Верх, ОбластьЯчеек.Лево);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУпоминаниеОбласти(ИдентификаторыМакета, ОбластьЯчеек)
	
	Для Каждого ОписаниеАдресов Из ИдентификаторыМакета Цикл
		
		КолонкиСтроки = ОписаниеАдресов.Значение.Получить(ОбластьЯчеек.Верх);
		Если КолонкиСтроки <> Неопределено Тогда
			
			ОписаниеКолонки = КолонкиСтроки.Получить(ОбластьЯчеек.Лево);
			Если ОписаниеКолонки <> Неопределено Тогда
				
				КолонкиСтроки.Удалить(ОбластьЯчеек.Лево);
				Если КолонкиСтроки.Количество() = 0 Тогда
					ОписаниеАдресов.Значение.Удалить(ОбластьЯчеек.Верх);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеАдресов.Значение.Количество() = 0 Тогда
			
			СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля", ОписаниеАдресов.Ключ));
			Если СтрокиКоллекции.Количество() > 0 Тогда
				ПараметрыМакета.Удалить(СтрокиКоллекции[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрМакета(ИдентификаторыМакета, ИмяПараметра, НомерСтроки, НомерКолонки)
	
	СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля", ИмяПараметра));
	Если СтрокиКоллекции.Количество() = 0 Тогда
		
		НоваяСтрока = ПараметрыМакета.Добавить();
		НоваяСтрока.ИмяПоля = ИмяПараметра;
		НоваяСтрока.Выбрано = ВыбранныеПоля.НайтиСтроки(Новый Структура("ИмяПоля", НоваяСтрока.ИмяПоля)).Количество() > 0;
		
	КонецЕсли;
	
	АдресаПараметра = ИдентификаторыМакета.Получить(ИмяПараметра);
	Если АдресаПараметра = Неопределено Тогда
		АдресаПараметра = Новый Соответствие;
		ИдентификаторыМакета.Вставить(ИмяПараметра, АдресаПараметра);
	КонецЕсли;
	
	КолонкиСтроки = АдресаПараметра.Получить(НомерСтроки);
	Если КолонкиСтроки = Неопределено Тогда
		КолонкиСтроки = Новый Соответствие;
		АдресаПараметра.Вставить(НомерСтроки, КолонкиСтроки);
	КонецЕсли;
	
	КолонкиСтроки.Вставить(НомерКолонки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрыШаблона(ИдентификаторыМакета, ТекстШаблона, НомерСтроки, НомерКолонки)
	
	КоличествоОткрывающихСкобок = СтрЧислоВхождений(ТекстШаблона, "[");
	Для НомерВхождения =1 По КоличествоОткрывающихСкобок Цикл
		
		ПозицияОткрывающейСкобки = СтрНайти(ТекстШаблона, "[", , , НомерВхождения);
		ПозицияЗакрывающейСкобки = СтрНайти(ТекстШаблона, "]", , ПозицияОткрывающейСкобки);
		
		Если ПозицияЗакрывающейСкобки <> 0 Тогда
			
			ИмяПараметра = Сред(ТекстШаблона, ПозицияОткрывающейСкобки + 1, ПозицияЗакрывающейСкобки - ПозицияОткрывающейСкобки - 1);
			ДобавитьПараметрМакета(ИдентификаторыМакета, ИмяПараметра, НомерСтроки, НомерКолонки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеквизитаПоИмениПоля(Знач ИмяПоля)
	
	ПозицияСкобки = СтрНайти(ИмяПоля, "[");
	Если ПозицияСкобки > 0 Тогда
		
		ИмяРеквизита = Лев(ИмяПоля, ПозицияСкобки - 2);
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, ".", "");
		
		ИмяПоля = Сред(ИмяПоля, ПозицияСкобки);
		ИмяПоля = СтрЗаменить(ИмяПоля, "[", "");
		ИмяПоля = СтрЗаменить(ИмяПоля, "]", "");
		ИмяПоля = СтрЗаменить(ИмяПоля, " ", "");
		ИмяПоля = СтрЗаменить(ИмяПоля, ".", "");
		
		Для НомерСимвола = 1 По СтрДлина(ИмяПоля) Цикл
			
			Символ = Сред(ИмяПоля, НомерСимвола, 1);
			Если Символ = "_"
				Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)
				Или СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(Символ)
				Или СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Символ) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИмяПоля = Лев(ИмяПоля, НомерСимвола - 1) + "_" + Сред(ИмяПоля, НомерСимвола + 1);
			
		КонецЦикла;
		
		ИмяПоля = ИмяРеквизита + "_" + ИмяПоля + "_";
		
	Иначе
		ИмяПоля = СтрЗаменить(ИмяПоля, ".", "");
	КонецЕсли;
	
	Возврат ИмяПоля
	
КонецФункции

&НаСервере
Процедура УдалитьПользовательскийМакет()
	
	НаборЗаписей = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПутьКВариантуОтчета);
	НаборЗаписей.Отбор.ИмяМакета.Установить(ПутьКМакетуПечатнойФормы);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыбранныеПоля()
	
	ВыбранныеПоля.Очистить();
	
	ЗагруженыПользовательскиеНастройки = Ложь;
	Для Каждого ЭлементКоллекции Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ЗагруженыПользовательскиеНастройки = Истина;
			Для Каждого Элемент Из ЭлементКоллекции.Элементы Цикл
				
				ВставитьВыбранноеПолеВКоллекцию(
					ВыбранныеПоля, КомпоновщикНастроекКД, Элемент.Поле, ПараметрыМакета, , Элемент.Использование);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗагруженыПользовательскиеНастройки Тогда
		
		Для Каждого Элемент Из КомпоновщикНастроекКД.Настройки.Выбор.Элементы Цикл
			
			ВставитьВыбранноеПолеВКоллекцию(
				ВыбранныеПоля, КомпоновщикНастроекКД, Элемент.Поле, ПараметрыМакета, , Элемент.Использование);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеВыбора(ВыбраннаяСтрока)
	
	ОбъектКомпоновки = КомпоновщикНастроекКД.Настройки.ДоступныеПоляВыбора.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	Если ОбъектКомпоновки.Папка Тогда
		ИдентификаторСтроки = ВставитьВыбранныеПоляВКоллекцию(ОбъектКомпоновки.Элементы);
	Иначе
		
		ИдентификаторСтроки = ВставитьВыбранноеПолеВКоллекцию(
			ВыбранныеПоля, КомпоновщикНастроекКД, ОбъектКомпоновки.Поле, ПараметрыМакета);
		
	КонецЕсли;
	
	Элементы.ВыбранныеПоля.ТекущаяСтрока = ИдентификаторСтроки;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ВставитьВыбранныеПоляВКоллекцию(ВставляемыеПоля, ИндексСтрокиДляВставки = Неопределено)
	
	Модифицированность = Истина;
	
	Для Каждого ВставляемыйЭлемент Из ВставляемыеПоля Цикл
		
		Если ВставляемыйЭлемент.Папка Тогда
			ИдентификаторСтроки = ВставитьВыбранныеПоляВКоллекцию(ВставляемыйЭлемент.Элементы, ИндексСтрокиДляВставки);
		Иначе
			ИдентификаторСтроки = ВставитьВыбранноеПолеВКоллекцию(
				ВыбранныеПоля, КомпоновщикНастроекКД, ВставляемыйЭлемент.Поле, ПараметрыМакета, ИндексСтрокиДляВставки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВставитьВыбранноеПолеВКоллекцию(КоллекцияВыбранныхПолей, КомпоновщикНастроекКД, Поле, ПараметрыМакета, ИндексСтрокиДляВставки = Неопределено, Использование = Истина)
	
	ИдентификаторПоля = 0;
	
	ДоступныеПоляВыбора = КомпоновщикНастроекКД.Настройки.ДоступныеПоляВыбора;
	ДоступноеПоле = ДоступныеПоляВыбора.НайтиПоле(Поле);
	
	Если ДоступноеПоле <> Неопределено Тогда
		
		Если ИндексСтрокиДляВставки = Неопределено
			Или ИндексСтрокиДляВставки < 0 Тогда
			
			НоваяСтрока = КоллекцияВыбранныхПолей.Добавить();
			
		Иначе
			НоваяСтрока = КоллекцияВыбранныхПолей.Вставить(ИндексСтрокиДляВставки);
			ИндексСтрокиДляВставки = ИндексСтрокиДляВставки + 1;
		КонецЕсли;
		
		НоваяСтрока.Использование = Использование;
		НоваяСтрока.ПутьКДанным = Поле;
		
		НоваяСтрока.Представление = ДоступноеПоле.Заголовок;
		
		Если Лев(Строка(Поле), 21) = "ПользовательскиеПоля." Тогда
			НоваяСтрока.ИмяПоля = ЗарплатаКадрыКлиентСервер.ИдентификаторМакетаПечатнойФормы(НоваяСтрока.Представление);
		Иначе
			НоваяСтрока.ИмяПоля = ИмяРеквизитаПоИмениПоля(Поле);
		КонецЕсли;
		
		СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля", НоваяСтрока.ИмяПоля));
		Если СтрокиКоллекции.Количество() > 0 Тогда
			СтрокиКоллекции[0].Выбрано = Истина;
		КонецЕсли;
		
		ИдентификаторПоля = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат ИдентификаторПоля;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройки(КомпоновщикНастроекКД)
	Возврат КомпоновщикНастроекКД.ПолучитьНастройки();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыбранныеПоляВНастройки(Форма)
	
	УстанавливалсяИдентификаторПользовательскойНастройки = Ложь;
	Если Не ЗначениеЗаполнено(Форма.КомпоновщикНастроекКД.Настройки.Выбор.ИдентификаторПользовательскойНастройки) Тогда
		Форма.КомпоновщикНастроекКД.Настройки.Выбор.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		УстанавливалсяИдентификаторПользовательскойНастройки = Истина;
	КонецЕсли;
	
	Для Каждого Элемент Из Форма.КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ЭлементВыбор = Элемент;
			Если УстанавливалсяИдентификаторПользовательскойНастройки Тогда
				ЭлементВыбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
			Иначе
				ЭлементВыбор.Элементы.Очистить();
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВыбранноеПоле Из Форма.ВыбранныеПоля Цикл
		
		НовоеВыбранноеПоле = ЭлементВыбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеВыбранноеПоле.Использование = ВыбранноеПоле.Использование;
		НовоеВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ВыбранноеПоле.ПутьКДанным);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантОтчетов(ИмяОбъекта, КлючВарианта)
	
	Возврат ЗарплатаКадрыОтчеты.ВариантОтчетаПечатнойФормыПоИмениОбъекта(ИмяОбъекта, КлючВарианта);
	
КонецФункции

#КонецОбласти

#КонецОбласти

