
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначенияДляЗаполнения  = Новый Структура("Месяц,Организация,Подразделение", "ПериодРегистрации", "Организация", "Подразделение");
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЗарплатаКадры.ПерваяДоступнаяОрганизация();
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	ОтсутствияСотрудников.СоздатьКонтекстноеМенюОформленияОтсутствий(
		ЭтотОбъект, "ТаблицаОтсутствийКонтекстноеМенюОформитьНачислениеОтсутствияГруппа", "ТаблицаОтсутствийКонтекстноеМенюОформитьНачислениеОтсутствияПрочиеГруппа");
	
	ЗаполнитьТаблицуОтсутствий();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодРегистрацииСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "ПериодРегистрации", "ПериодРегистрацииСтрокой");
	ОбновитьТаблицуОтсутствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "ПериодРегистрации", "ПериодРегистрацииСтрокой", Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ОбновитьТаблицуОтсутствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление);
	ОбновитьТаблицуОтсутствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьТаблицуОтсутствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьТаблицуОтсутствий();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтсутствий

&НаКлиенте
Процедура ТаблицаОтсутствийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаОтсутствий.ТекущиеДанные;
	
	Если Поле.Имя = "ТаблицаОтсутствийПредставлениеПериода" Тогда
		
		ОписаниеПериода = Новый Структура("ПериодРегистрации,ПериодВвода,ДатаНачала,ДатаОкончания,ЧастьСмены,КоличествоЧасов");
		
		ОписаниеПериода.ПериодРегистрации = ПериодРегистрации;
		ОписаниеПериода.ПериодВвода = ПредопределенноеЗначение("Перечисление.ПериодыВводаДанныхОВремени.ТекущийМесяц");
		ОписаниеПериода.ДатаНачала = ТекущиеДанные.Начало;
		ОписаниеПериода.ДатаОкончания = ТекущиеДанные.Окончание;
		ОписаниеПериода.ЧастьСмены = ТекущиеДанные.ЧастьСмены;
		ОписаниеПериода.КоличествоЧасов = ТекущиеДанные.КоличествоЧасов;
		
		ОтсутствияСотрудниковКлиент.ОткрытьФормуВыбораПериода(ЭтотОбъект, ОписаниеПериода, , Истина);
		
	ИначеЕсли Поле.Имя = "ТаблицаОтсутствийДокументыНачисления" Тогда
		
		Если ТекущиеДанные.ДокументыНачисления.Количество() = 1 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ОбновитьТекущиеДанные", ЭтотОбъект);
			ПоказатьЗначение(Оповещение, ТекущиеДанные.ДокументыНачисления[0].Значение);
			
		ИначеЕсли ТекущиеДанные.ДокументыНачисления.Количество() > 1 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ВидОтсутствия", ТекущиеДанные.ВидОтсутствия);
			
			Оповещение = Новый ОписаниеОповещения("ПоказатьДокументНачисленийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзСписка(Оповещение, ТекущиеДанные.ДокументыНачисления, Элемент);
			
		Иначе
			СоздатьДокумент(Элементы.ТаблицаОтсутствий.ТекущаяСтрока, ТекущиеДанные.ВидОтсутствия);
		КонецЕсли;
		
	Иначе
		ОткрытьПериодыОтсутствияСотрудников(ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтсутствийПриАктивизацииСтроки(Элемент)
	
	УстановитьКомандыОформленияОтсутствий(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ЗаполнитьТаблицуОтсутствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтсутствие(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ПериодРегистрации", ПериодРегистрации);
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("ПериодВвода", ПредопределенноеЗначение("Перечисление.ПериодыВводаДанныхОВремени.ТекущийМесяц"));
	
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОтсутствиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ПериодыОтсутствияСотрудников.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, Истина, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтсутствиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуОтсутствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтсутствие(Команда)
	
	Если Элементы.ТаблицаОтсутствий.ТекущиеДанные <> Неопределено Тогда
		ОткрытьПериодыОтсутствияСотрудников(Элементы.ТаблицаОтсутствий.ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьНачисления(Команда)
	
	ОтсутствияКОформлению = ТаблицаСоздаваемыхОтсутствий();
	Если ОтсутствияКОформлению.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( , НСтр("ru='Все документы начисляния отсутствий оформлены.'"));
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Организация", Организация);
		ПараметрыОткрытия.Вставить("ПериодРегистрации", ПериодРегистрации);
		ПараметрыОткрытия.Вставить("ТаблицаОтсутствий", ОтсутствияКОформлению);
		
		Оповещение = Новый ОписаниеОповещения("ДобавитьОтсутствиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.РегистрацияОтсутствийСотрудников.Форма.ФормаСозданияДокументов", ПараметрыОткрытия, ЭтотОбъект, Истина, , , Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОформитьОтсутствие(Команда)
	
	СоздатьДокументПоПолномуИмениМетаданных(Элементы.ТаблицаОтсутствий.ТекущаяСтрока, "Документ." + Команда.Имя);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьПериодыОтсутствияСотрудников(Регистратор)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьТекущиеДанные", ЭтотОбъект);
	ПоказатьЗначение(Оповещение, Регистратор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущиеДанные(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьТекущиеДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДокументНачисленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Значение = Неопределено Тогда
			СоздатьДокумент(Элементы.ТаблицаОтсутствий.ТекущаяСтрока, ДополнительныеПараметры.ВидОтсутствия);
		Иначе
			ПоказатьЗначение(, Результат.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуОтсутствий()
	
	ПодключитьОбработчикОжидания("ЗаполнитьТаблицуОтсутствийНаКлиенте", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОтсутствийНаКлиенте()
	
	ЗаполнитьТаблицуОтсутствий();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОтсутствий()
	
	Если Элементы.ТаблицаОтсутствий.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = ТаблицаОтсутствий.НайтиПоИдентификатору(Элементы.ТаблицаОтсутствий.ТекущаяСтрока);
		
		КлючТекущейСтроки = Новый Структура;
		КлючТекущейСтроки.Вставить("Организация", ТекущиеДанные.Организация);
		КлючТекущейСтроки.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
		КлючТекущейСтроки.Вставить("Начало", ТекущиеДанные.Начало);
		
	Иначе
		КлючТекущейСтроки = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстыЗапроса = Новый Массив;
	УсловияОтбора = Новый Массив;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПериодыОтсутствияСотрудников.Регистратор КАК Регистратор,
		|	ПериодыОтсутствияСотрудников.Организация КАК Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало КАК Начало,
		|	ПериодыОтсутствияСотрудников.Окончание КАК Окончание,
		|	ПериодыОтсутствияСотрудников.ВидОтсутствия КАК ВидОтсутствия,
		|	ПериодыОтсутствияСотрудников.ЧастьСмены КАК ЧастьСмены,
		|	ПериодыОтсутствияСотрудников.КоличествоЧасов КАК КоличествоЧасов
		|ПОМЕСТИТЬ ВТПериодыОтсутствия
		|ИЗ
		|	РегистрСведений.ПериодыОтсутствияСотрудников КАК ПериодыОтсутствияСотрудников");
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		УсловияОтбора.Добавить("ДанныеДляПодбораСотрудников.Подразделение В ИЕРАРХИИ (&Подразделение)");
		
		ТекстыЗапроса.Добавить(
			"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
			|		ПО ПериодыОтсутствияСотрудников.Организация = ДанныеДляПодбораСотрудников.Организация
			|			И ПериодыОтсутствияСотрудников.Сотрудник = ДанныеДляПодбораСотрудников.Сотрудник
			|			И ПериодыОтсутствияСотрудников.ФизическоеЛицо = ДанныеДляПодбораСотрудников.ФизическоеЛицо
			|			И (ПериодыОтсутствияСотрудников.Окончание МЕЖДУ ДанныеДляПодбораСотрудников.Начало И ДанныеДляПодбораСотрудников.Окончание)");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
		УсловияОтбора.Добавить("ПериодыОтсутствияСотрудников.Организация = (&Организация)");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Начало", ПериодРегистрации);
	Запрос.УстановитьПараметр("Окончание", КонецМесяца(ПериодРегистрации));
	УсловияОтбора.Добавить("ПериодыОтсутствияСотрудников.Начало МЕЖДУ &Начало И &Окончание");
	
	ТекстыЗапроса.Добавить("ГДЕ");
	ТекстыЗапроса.Добавить(СтрСоединить(УсловияОтбора, Символы.ПС + "И "));
	
	ТекстыЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ПериодыОтсутствияСотрудников.Регистратор КАК Регистратор,
		|	ПериодыОтсутствияСотрудников.Организация КАК Организация,
		|	ПериодыОтсутствияСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыОтсутствияСотрудников.Начало КАК Начало,
		|	ПериодыОтсутствияСотрудников.Окончание КАК Окончание,
		|	ПериодыОтсутствияСотрудников.ВидОтсутствия КАК ВидОтсутствия,
		|	ПериодыОтсутствияСотрудников.ЧастьСмены КАК ЧастьСмены,
		|	ПериодыОтсутствияСотрудников.КоличествоЧасов КАК КоличествоЧасов
		|ИЗ
		|	ВТПериодыОтсутствия КАК ПериодыОтсутствияСотрудников");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);
	
	ТаблицаОтсутствий.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ДоступноЗакрытиеОтсутствий = (ДоступныеДляСозданияДокументыНачислений.Количество() > 0);
	ОтсутствияСотрудников.ЗаполнитьТаблицуОтсутствийДокументамиНачислений(Запрос.МенеджерВременныхТаблиц, ТаблицаОтсутствий, ДоступноЗакрытиеОтсутствий);
	
	ЕстьНеОформленныеСтроки = Ложь;
	Для Каждого СтрокаТаблицыОтсутствий Из ТаблицаОтсутствий Цикл
		
		Если Не СтрокаТаблицыОтсутствий.ЗакрытПолностью Тогда
			ЕстьНеОформленныеСтроки = Истина;
		КонецЕсли;
		
		ЗаполнитьПредставлениеПериодаСтроки(СтрокаТаблицыОтсутствий);
		Если СтрокаТаблицыОтсутствий.ДокументыНачисления.Количество() = 0 Тогда
			
			СтрокаТаблицыОтсутствий.КомандаЗакрытия = ОтсутствияСотрудников.ПредставлениеКомандыЗакрытияПоВидуОтсутствия(
				СтрокаТаблицыОтсутствий.ВидОтсутствия, ДоступноЗакрытиеОтсутствий);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОтсутствий.Сортировать("ЗакрытПолностью,Сотрудник,Начало");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТаблицаОтсутствийОформитьНачисления",
		"Видимость",
		ЕстьНеОформленныеСтроки
			И ДоступноЗакрытиеОтсутствий);
	
	Если КлючТекущейСтроки <> Неопределено Тогда
		
		НайденныеСтроки = ТаблицаОтсутствий.НайтиСтроки(КлючТекущейСтроки);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ТаблицаОтсутствий.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКомандыОформленияОтсутствий(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущиеДанныеНаСервере()
	
	Если Элементы.ТаблицаОтсутствий.ТекущаяСтрока <> Неопределено Тогда
		
		СтрокаТаблицыОтсутствий = ТаблицаОтсутствий.НайтиПоИдентификатору(Элементы.ТаблицаОтсутствий.ТекущаяСтрока);
		Если СтрокаТаблицыОтсутствий <> Неопределено Тогда
			
			ДокументыНачисленийИОстаткиДат = ОтсутствияСотрудников.ДокументыНачисленийИОстаткиДатОтсутствия(
				СтрокаТаблицыОтсутствий.Организация, СтрокаТаблицыОтсутствий.Сотрудник, СтрокаТаблицыОтсутствий.Начало, СтрокаТаблицыОтсутствий.Окончание, СтрокаТаблицыОтсутствий.ЧастьСмены);
			
			СтрокаТаблицыОтсутствий.ДокументыНачисления.Очистить();
			Для Каждого ЭлементДокументыНачисления Из ДокументыНачисленийИОстаткиДат.ДокументыНачисления Цикл
				СтрокаТаблицыОтсутствий.ДокументыНачисления.Добавить(ЭлементДокументыНачисления.Значение, ЭлементДокументыНачисления.Представление);
			КонецЦикла;
			
			ДоступноЗакрытиеОтсутствий = (ДоступныеДляСозданияДокументыНачислений.Количество() > 0);
			Если ДокументыНачисленийИОстаткиДат.ОстатокДатОтсутствия.Количество() = 0 Тогда
				СтрокаТаблицыОтсутствий.ЗакрытПолностью = Истина;
				СтрокаТаблицыОтсутствий.ПериодЗакрыт = Истина;
			ИначеЕсли СтрокаТаблицыОтсутствий.ДокументыНачисления.Количество() > 0 Тогда
				
				СтрокаТаблицыОтсутствий.ПериодЗакрыт = Истина;
				Если ДоступноЗакрытиеОтсутствий Тогда
					
					СтрокаТаблицыОтсутствий.ДокументыНачисления.Вставить(
						0, Неопределено, ОтсутствияСотрудников.ПредставлениеКомандыЗакрытияПоВидуОтсутствия(СтрокаТаблицыОтсутствий.ВидОтсутствия));
					
				КонецЕсли;
				
			Иначе
				СтрокаТаблицыОтсутствий.КомандаЗакрытия = ОтсутствияСотрудников.ПредставлениеКомандыЗакрытияПоВидуОтсутствия(
					СтрокаТаблицыОтсутствий.ВидОтсутствия, ДоступноЗакрытиеОтсутствий);
			КонецЕсли;
			
			ЗаполнитьПредставлениеПериодаСтроки(СтрокаТаблицыОтсутствий);
			
			ТаблицаОтсутствий.Сортировать("ЗакрытПолностью,Сотрудник,Начало");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеПериодаСтроки(СтрокаТаблицыОтсутствий)
	
	СтрокаТаблицыОтсутствий.ПредставлениеПериода = ОтсутствияСотрудниковКлиентСервер.ПредставлениеПериодаОтсутствия(
		СтрокаТаблицыОтсутствий.Начало,
		СтрокаТаблицыОтсутствий.Окончание,
		СтрокаТаблицыОтсутствий.ЧастьСмены,
		СтрокаТаблицыОтсутствий.КоличествоЧасов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКомандыОформленияОтсутствий(Форма)
	
	ТекущийВидОтсутствия = Неопределено;
	
	УстанавливатьКомандыКонтекстногоМеню = Ложь;
	Если Форма.Элементы.ТаблицаОтсутствий.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ДоступностьИзмененияОтсутствия = Истина;
		
		Для Каждого ИдентификаторСтроки Из Форма.Элементы.ТаблицаОтсутствий.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Форма.ТаблицаОтсутствий.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ДанныеСтроки <> Неопределено И Не ДанныеСтроки.ЗакрытПолностью Тогда
				
				УстанавливатьКомандыКонтекстногоМеню = Истина;
				
				Если ЗначениеЗаполнено(ТекущийВидОтсутствия) И ТекущийВидОтсутствия <> ДанныеСтроки.ВидОтсутствия Тогда
					
					ДоступностьИзмененияОтсутствия = Ложь;
					ТекущийВидОтсутствия = Неопределено;
					Прервать;
					
				КонецЕсли;
				
				ТекущийВидОтсутствия = ДанныеСтроки.ВидОтсутствия;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ДоступностьИзмененияОтсутствия = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТаблицаОтсутствийКонтекстноеМенюИзменитьОтсутствие",
		"Доступность",
		ДоступностьИзмененияОтсутствия);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТаблицаОтсутствийКонтекстноеМенюОформитьНачислениеОтсутствияГруппа",
		"Видимость",
		УстанавливатьКомандыКонтекстногоМеню);
	
	Если УстанавливатьКомандыКонтекстногоМеню Тогда
		
		ОтсутствияСотрудниковКлиентСервер.УстановитьОтображениеКомандСозданияДокументовНачисленияКонтекстногоМеню(
			Форма, ТекущийВидОтсутствия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(ИдентификаторСтроки, ВидОтсутствия)
	
	ИмяДокумента = ОтсутствияСотрудниковКлиентСервер.ИменаДокументовВидовОтсутствия().Получить(ВидОтсутствия);
	СоздатьДокументПоПолномуИмениМетаданных(ИдентификаторСтроки, ИмяДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоПолномуИмениМетаданных(ИдентификаторСтроки, ИмяДокумента)
	
	ТекущиеДанные = ТаблицаОтсутствий.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		ОписаниеДокумента = ДоступныеДляСозданияДокументыНачислений.НайтиПоЗначению(ИмяДокумента);
		Если ОписаниеДокумента <> Неопределено Тогда
			СоздатьДокументЗавершение(ОписаниеДокумента, ДополнительныеПараметры);
		Иначе
			
			Если ДоступныеДляСозданияДокументыНачислений.Количество() > 0 Тогда
				
				Оповещение = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВыборИзСписка(Оповещение, ДоступныеДляСозданияДокументыНачислений);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные = ТаблицаОтсутствий.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если ТекущиеДанные <> Неопределено Тогда
			
			ИмяМетаданныхДокумента = Результат.Значение;
			Если ИмяМетаданныхДокумента <> Неопределено Тогда
				
				ДокументыНачисленийИОстаткиДат = ДокументыНачисленийИОстаткиДатОтсутствия(Организация, ТекущиеДанные.Сотрудник, ТекущиеДанные.Начало, ТекущиеДанные.Окончание, ТекущиеДанные.ЧастьСмены);
				Если ДокументыНачисленийИОстаткиДат.ОстатокДатОтсутствия.Количество() > 0 Тогда
					
					НачалоИнтервала = ДокументыНачисленийИОстаткиДат.ОстатокДатОтсутствия[0].Значение;
					ОкончаниеИнтервала = НачалоИнтервала;
					Для Каждого ЭлементСписка Из ДокументыНачисленийИОстаткиДат.ОстатокДатОтсутствия Цикл
						
						Если ОкончаниеИнтервала < НачалоДня(ЭлементСписка.Значение - 1) Тогда
							Прервать;
						КонецЕсли;
						
						ОкончаниеИнтервала = ЭлементСписка.Значение;
						
					КонецЦикла;
					
				Иначе
					НачалоИнтервала = ТекущиеДанные.Начало;
					ОкончаниеИнтервала = ТекущиеДанные.Окончание;
				КонецЕсли;
				
				ОписаниеОтсутствия = ОтсутствияСотрудниковКлиентСервер.ОписаниеОтсутствия();
				ОписаниеОтсутствия.Сотрудник = ТекущиеДанные.Сотрудник;
				ОписаниеОтсутствия.ВидОтсутствия = ТекущиеДанные.ВидОтсутствия;
				ОписаниеОтсутствия.Организация = Организация;
				ОписаниеОтсутствия.ПериодРегистрации = ПериодРегистрации;
				ОписаниеОтсутствия.Начало = НачалоИнтервала;
				ОписаниеОтсутствия.Окончание = ОкончаниеИнтервала;
				ОписаниеОтсутствия.ЧастьСмены = ТекущиеДанные.ЧастьСмены;
				ОписаниеОтсутствия.КоличествоЧасов = ТекущиеДанные.КоличествоЧасов;
				
				Оповещение = Новый ОписаниеОповещения("ОбновитьТекущиеДанные", ЭтотОбъект);
				ОтсутствияСотрудниковКлиент.ОткрытьФормуНовогоДокументаНачисленияОтсутствий(
					ИмяМетаданныхДокумента, ОписаниеОтсутствия, ЭтотОбъект, Оповещение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыНачисленийИОстаткиДатОтсутствия(Организация, Сотрудник, ДатаНачала, ДатаОкончания, ЧастьСмены)
	
	Возврат ОтсутствияСотрудников.ДокументыНачисленийИОстаткиДатОтсутствия(Организация, Сотрудник, ДатаНачала, ДатаОкончания, ЧастьСмены);
	
КонецФункции

&НаСервере
Функция ТаблицаСоздаваемыхОтсутствий()
	
	ТаблицаСоздаваемых = Новый ТаблицаЗначений;
	ТаблицаСоздаваемых.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСоздаваемых.Колонки.Добавить("ВидОтсутствия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПериодовОтсутствияСотрудников"));
	ТаблицаСоздаваемых.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ТаблицаСоздаваемых.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	ТаблицаСоздаваемых.Колонки.Добавить("ЧастьСмены", Новый ОписаниеТипов("Булево"));
	ТаблицаСоздаваемых.Колонки.Добавить("КоличествоЧасов", Новый ОписаниеТипов("Число"));
	
	Если Элементы.ТаблицаОтсутствий.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого ИдентификаторСтроки Из Элементы.ТаблицаОтсутствий.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ТаблицаОтсутствий.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ДанныеСтроки <> Неопределено И Не ДанныеСтроки.ЗакрытПолностью Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаСоздаваемых.Добавить(), ДанныеСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ДанныеСтроки Из ТаблицаОтсутствий Цикл
			
			Если Не ДанныеСтроки.ЗакрытПолностью Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаСоздаваемых.Добавить(), ДанныеСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаСоздаваемых", ТаблицаСоздаваемых);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаСоздаваемых.Сотрудник КАК Сотрудник,
		|	ТаблицаСоздаваемых.Начало КАК Начало,
		|	ТаблицаСоздаваемых.Окончание КАК Окончание,
		|	ТаблицаСоздаваемых.ВидОтсутствия КАК ВидОтсутствия,
		|	ТаблицаСоздаваемых.ЧастьСмены КАК ЧастьСмены,
		|	"""" КАК Регистратор
		|ПОМЕСТИТЬ ВТПериодыОтсутствия
		|ИЗ
		|	&ТаблицаСоздаваемых КАК ТаблицаСоздаваемых";
	
	Запрос.Выполнить();
	
	РезультатЗапроса = ОтсутствияСотрудников.РезультатЗапросаПоДокументамНачислений(Запрос.МенеджерВременныхТаблиц, Истина);
	Выборка = РезультатЗапроса.Выбрать();
	
	ПериодыУточнялись = Ложь;
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("Начало") Цикл
				
				ДатыОтсутствий = ОтсутствияСотрудников.ДатыИнтервала(Выборка.Начало, Выборка.Окончание);
				Пока Выборка.Следующий() Цикл
					ОтсутствияСотрудников.ВычеркнутьПериодИзДатИнтервала(ДатыОтсутствий, Выборка.НачалоСостояния, Выборка.ОкончаниеСостояния);
				КонецЦикла;
				
				Если ДатыОтсутствий.Количество() > 0 Тогда
					
					ПериодыУточнялись = Истина;
					
					ПериодыСпискаДат = ОтсутствияСотрудников.ПериодыСпискаДат(ДатыОтсутствий);
					
					СтрокиСотрудника = ТаблицаСоздаваемых.НайтиСтроки(Новый Структура("Сотрудник,Начало", Выборка.Сотрудник, Выборка.Начало));
					Если СтрокиСотрудника.Количество() > 0 Тогда
						
						Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
							
							СтрокаСотрудника.Начало = ПериодыСпискаДат[0].Начало;
							СтрокаСотрудника.Окончание = ПериодыСпискаДат[0].Окончание;
							Для ИндексПериода = 1 По ПериодыСпискаДат.Количество() - 1 Цикл
								
								НоваяСтрокаСотрудника = ТаблицаСоздаваемых.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаСотрудника, СтрокаСотрудника);
								
								НоваяСтрокаСотрудника.Начало = ПериодыСпискаДат[ИндексПериода].Начало;
								НоваяСтрокаСотрудника.Окончание = ПериодыСпискаДат[ИндексПериода].Окончание;
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПериодыУточнялись Тогда
		ТаблицаСоздаваемых.Сортировать("Сотрудник,Начало");
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСоздаваемых);
	
КонецФункции

#КонецОбласти
