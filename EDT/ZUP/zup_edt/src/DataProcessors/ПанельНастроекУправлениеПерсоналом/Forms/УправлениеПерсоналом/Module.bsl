
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьНастройки();
	
	ОбновитьФормуПоНастройкам();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщаяКомандаНастройкиЭлектронногоОбучения", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧислоПриИзменении(Элемент)
	НачатьИзменениеИспользованияСтруктурыПредприятия();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГрейдыПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		МодульГрейдыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ГрейдыКлиентСервер");
		МодульГрейдыКлиентСервер.ПанельУправлениеПерсоналомИспользоватьГрейдыПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиГрейдов");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		МодульГрейдыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ГрейдыКлиентСервер");
		МодульГрейдыКлиентСервер.ОбновитьПанельУправлениеПерсоналомПоНастройкеИспользоватьГрейды(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныеГрейдыЧислоПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиГрейдов");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСозданиеГрейдовПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиГрейдов");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		МодульГрейдыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ГрейдыКлиентСервер");
		МодульГрейдыКлиентСервер.ОбновитьПанельУправлениеПерсоналомПоНастройкеИспользоватьГрейды(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодборПерсоналаПриИзменении(Элемент)
	
	ИспользоватьПодборПерсоналаПриИзмененииНаСервере(КонстантыНабор.ИспользоватьПодборПерсонала);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

КонецПроцедуры

#Область ПериодРаботыСВакансией

&НаКлиенте
Процедура НастройкиПодбораПерсоналаПериодРаботыСВакансиейПриИзменении(Элемент)
	УстановитьСклонениеЕдиницыИзмеренияПериодаВремени(ЭтаФорма);
	ПодключитьОбработчикОжиданияЗаписиНастроекПодбораПерсонала();
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПериодаРаботыСВакансиейПриИзменении(Элемент)
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИспользоватьЗаявкиНаПодборПерсоналаПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСогласованиеВакансийПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеВакансииТребуетСогласованияПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодбораПерсоналаРассчитыватьЭффективностьИсточниковПодбораПерсоналаПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСкрытиеПерсональныхДанныхКандидатовПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	НастройкиПодбора = ТекущиеНастройкиПодбораПерсонала();
	ПодборПерсоналаКлиент.ИспользоватьСкрытиеПерсональныхДанныхКандидатовПриИзменении(ЭтотОбъект, НастройкиПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьКандидатовЗадержавшихсяНаОдномЭтапеПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(ЭтотОбъект);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейДоСообщенияПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапеПриИзменении(Элемент)
	
	ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапеПриИзмененииНаСервере();
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейДоОтклоненияПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаАвтоматическогоОтклоненияПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЧатботовПриИзменении(Элемент)
	ИспользоватьЧатботовПриИзмененииНаСервере(КонстантыНабор.ИспользоватьЧатботов);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

#Область КлючевыеПоказателиЭффективности

&НаКлиенте
Процедура ИспользоватьКлючевыеПоказателиЭффективностиПриИзменении(Элемент)
	
	ИспользоватьКлючевыеПоказателиЭффективностиУстановить(КонстантыНабор.ИспользоватьКлючевыеПоказателиЭффективности);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		МодульКлючевыеПоказателиЭффективностиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("КлючевыеПоказателиЭффективностиКлиентСервер");
		МодульКлючевыеПоказателиЭффективностиКлиентСервер.ОбновитьПанельУправлениеПерсоналомДляКлючевыхПоказателейЭффективности(ЭтотОбъект);
	КонецЕсли;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКлючевыхПоказателейЭффективности");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьКлючевыеПоказателиЭффективностиУстановить(Значение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		МодульКлючевыеПоказателиЭффективности.ПанельУправлениеПерсоналомЗаписатьКонстантуИспользоватьКлючевыеПоказателиЭффективности(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКлючевыхПоказателейЭффективностиИспользоватьРазныеГоризонтыОценкиПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		МодульКлючевыеПоказателиЭффективностиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("КлючевыеПоказателиЭффективностиКлиентСервер");
		МодульКлючевыеПоказателиЭффективностиКлиентСервер.ОбновитьПанельУправлениеПерсоналомДляКлючевыхПоказателейЭффективности(ЭтотОбъект);
	КонецЕсли;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКлючевыхПоказателейЭффективности");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКлючевыхПоказателейЭффективностиИспользоватьГоризонтКварталПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКлючевыхПоказателейЭффективности");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКлючевыхПоказателейЭффективностиИспользоватьГоризонтПолугодиеПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКлючевыхПоказателейЭффективности");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКлючевыхПоказателейЭффективностиИспользоватьГоризонтГодПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКлючевыхПоказателейЭффективности");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИспользоватьЛьготыСотрудниковПриИзменении(Элемент)
	
	НастройкиЛьготСотрудниковПрежняя.ИспользоватьЛьготыСотрудников = НастройкиЛьготСотрудников.ИспользоватьЛьготыСотрудников;
	
	УстановитьЗначенияЗависимыхНастроекЛьгот();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиЛьготСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьЛьготыСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныеЛьготыСотрудниковПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиЛьготСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбучениеРазвитиеСотрудниковПриИзменении(Элемент)
	
	НастройкиОбученияРазвитияПрежняя.ИспользоватьОбучениеРазвитиеСотрудников = НастройкиОбученияРазвития.ИспользоватьОбучениеРазвитиеСотрудников;
	
	УстановитьЗначенияЗависимыхНастроекОбученияРазвития();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиОбученияРазвития");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьОбучениеРазвитиеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУченическиеДоговорыПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиОбученияРазвития");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронноеОбучениеПриИзменении(Элемент)
	
	ИспользоватьЭлектронноеОбучениеУстановить(КонстантыНабор.ИспользоватьЭлектронноеОбучение);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьЭлектронноеОбучениеУстановить(Значение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение") Тогда
		МодульЭлектронноеОбучение = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучение");
		МодульЭлектронноеОбучение.ОбновитьИспользованиеЭлектронногоОбучения(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАнализТекучестиПерсоналаПриИзменении(Элемент)
	
	АнализТекучестиПерсоналаУстановить(КонстантыНабор.ИспользоватьАнализТекучестиПерсонала);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АнализТекучестиПерсоналаУстановить(Значение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		МодульАнализТекучестиПерсонала.ОбновитьИспользованиеАнализаТекучестиПерсонала(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКадровыйРезервПриИзменении(Элемент)
	
	НастройкиКадровогоРезерваПрежняя.ИспользоватьКадровыйРезерв = НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв;
	
	УстановитьЗначенияЗависимыхНастроекКадровогоРезерва();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКадровогоРезерва");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьКадровыйРезерв(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаВключениеВКадровыйРезервПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКадровогоРезерва");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКадровыйРезервПоВидамПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКадровогоРезерва");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОценкуПерсоналаПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиОценкиПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАдаптациюУвольнениеПриИзменении(Элемент)
	
	ИспользоватьАдаптациюУвольнениеУстановить(КонстантыНабор.ИспользоватьАдаптациюУвольнение);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура КонстантыНаборИспользоватьУведомленияПриИзменении(Элемент)
	
	ИспользоватьУведомленияПриИзмененииНаСервере(КонстантыНабор.ИспользоватьУведомления, КонстантыНабор.ИспользоватьШаблоныСообщений);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСамообслуживаниеСотрудниковПриИзменении(Элемент)
	
	ИспользоватьСамообслуживаниеСотрудниковПриИзмененииНаСервере(КонстантыНабор.ИспользоватьСамообслуживаниеСотрудников);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапросыСправокСотрудникомПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаЕдиновременнуюКомпенсациюПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаКомандировкуПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаОтпускПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСообщенияОбОтсутствииПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПродолжительностьСеансаПользователейПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьКоличествоОдновременныхСеансовПользователейПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСозданиеПользователейРегламентнымЗаданиемПриИзменении(Элемент)
	
	СоздаватьПользователейДляПринятыхНаРаботуСотрудниковАвтоматическиПриИзмененииНаСервере(КонстантыНабор.СоздаватьПользователейДляПринятыхНаРаботуСотрудниковАвтоматически);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеДляЗапретаВходаВПрограммуУволеннымСотрудникамПриИзменении(Элемент)
	
	ЗапрещатьВходВПрограммуУволеннымСотрудникамАвтоматическиПриИзмененииНаСервере(КонстантыНабор.ЗапрещатьВходВПрограммуУволеннымСотрудникамАвтоматически);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковДоступНеЗапрещается(Команда)
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.СписокСотрудниковДоступНеЗапрещается", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетныхЗаписейСотрудников(Команда)
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.НастройкиУчетныхЗаписейСотрудников", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУправленияПерсоналом(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПолеСортировкиРазделов", 5); 
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", "НастройкиПоРазделам");
	
	ОткрытьФорму("Отчет.НастройкиПрограммыЗарплатаКадры.Форма", ПараметрыФормы, ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПродолжительностиСеансов(Команда)
	
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.ПродолжительностьСеансовПользователей", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКоличестваОдновременныхСеансов(Команда)
	
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.ОграничениеКоличестваСеансов", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтеграциюРекрутинговыхСайтовПриИзменении(Элемент)
	
	ИспользоватьИнтеграциюРекрутинговыхСайтовПриИзмененииНаСервере();
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтеграциюРекрутинговыхСайтовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СсылкаНаПерсональныеНастройки" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ПерсональныеНастройки", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронноеИнтервьюПриИзменении(Элемент)
	
	ИспользоватьЭлектронноеИнтервьюУстановить(КонстантыНабор.ИспользоватьЭлектронноеИнтервью);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРабочийКалендарьПриИзменении(Элемент)
	
	ИспользоватьРабочийКалендарьПриИзмененииНаСервере(КонстантыНабор.ИспользоватьРабочийКалендарь);
	
	ОбновитьФормуПоНастройкамИспользоватьРабочийКалендарь(ЭтаФорма);
	
	Если Не КонстантыНабор.ИспользоватьРабочийКалендарь Тогда
		КонстантыНабор.ИспользоватьСинхронизациюКалендарей = Ложь;
		ИспользоватьСинхронизациюКалендарейПриИзмененииНаСервере(КонстантыНабор.ИспользоватьСинхронизациюКалендарей);
	КонецЕсли;
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБронированиеПомещенийПриИзменении(Элемент)
	
	ИспользоватьБронированиеПомещенийПриИзмененииНаСервере(КонстантыНабор.ИспользоватьБронированиеПомещений);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБронированиеКомандировокПриИзменении(Элемент)
	
	ИспользоватьБронированиеКомандировокПриИзмененииНаСервере(КонстантыНабор.ИспользоватьБронированиеКомандировок);
	
	Если Не КонстантыНабор.ИспользоватьБронированиеКомандировок Тогда
		КонстантыНабор.ИспользоватьАвтоматическуюОтправкуСотрудниковБронированияКомандировок = Ложь;
	КонецЕсли;
	
	ОбновитьФормуПоНастройкеИспользоватьБронированиеКомандировок(ЭтотОбъект);

	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСинхронизациюКалендарейПриИзменении(Элемент)
	
	ИспользоватьСинхронизациюКалендарейПриИзмененииНаСервере(КонстантыНабор.ИспользоватьСинхронизациюКалендарей);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьФизическихЛицАвтоматическиПриИзменении(Элемент)
	
	ОтправлятьФизическихЛицАвтоматическиПриИзмененииНаСервере(КонстантыНабор.ИспользоватьАвтоматическуюОтправкуСотрудниковБронированияКомандировок);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьНастройки()
		
	СтрокаКонстант = 
		"СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц, 
		|ИспользоватьПодборПерсонала,
		|ИспользоватьИнтеграциюРекрутинговыхСайтов,
		|ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе,
		|ИспользоватьАнализТекучестиПерсонала,
		|ИспользоватьАдаптациюУвольнение,
		|ЗапрещатьВходВПрограммуУволеннымСотрудникамАвтоматически,
		|ИспользоватьСамообслуживаниеСотрудников,
		|СоздаватьПользователейДляПринятыхНаРаботуСотрудниковАвтоматически,
		|ИспользоватьЭлектронноеОбучение,
		|ИспользоватьЭлектронноеИнтервью,
		|ИспользоватьЧатботов,
		|ИспользоватьРабочийКалендарь,
		|ИспользоватьСинхронизациюКалендарей,
		|ИспользоватьБронированиеПомещений,
		|ИспользоватьБронированиеКомандировок,
		|ИспользоватьАвтоматическуюОтправкуСотрудниковБронированияКомандировок,
		|ИспользоватьУведомления";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		МодульКлючевыеПоказателиЭффективности.ПанельУправлениеПерсоналомДополнитьСтрокуКонстант(СтрокаКонстант);
	КонецЕсли;
	
	Настройка = Константы.СоздатьНабор(СтрокаКонстант);
	Настройка.Прочитать();
	ЗначениеВРеквизитФормы(Настройка, "КонстантыНабор");
	
	СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ?(Не КонстантыНабор.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц, 1, 0);
	
	ИспользоватьИнтеграциюРекрутинговыхСайтов = КонстантыНабор.ИспользоватьИнтеграциюРекрутинговыхСайтов;
	
	ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе = КонстантыНабор.ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе;
	
	Настройки = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиПодбораПерсонала");
	
	Настройки = РегистрыСведений.НастройкиОбученияРазвития.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиОбученияРазвития");
	
	Настройки = РегистрыСведений.НастройкиОценкиПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиОценкиПерсонала");
	
	Настройки = РегистрыСведений.НастройкиСамообслуживанияСотрудников.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиСамообслуживанияСотрудников");
	
	Настройки = РегистрыСведений.НастройкиКадровогоРезерва.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиКадровогоРезерва");
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
			МодульГрейды.ПанельУправлениеПерсоналомПрочитатьНастройкиГрейдов(ЭтаФорма);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
			МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
			МодульКлючевыеПоказателиЭффективности.ПанельУправлениеПерсоналомПрочитатьНастройкиКлючевыхПоказателейЭффективности(ЭтаФорма);
		КонецЕсли;
		
		Настройки = РегистрыСведений.НастройкиЛьготСотрудников.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		ЗначениеВРеквизитФормы(Настройки, "НастройкиЛьготСотрудников");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОрганизационнаяСтруктура

&НаКлиенте
Процедура НачатьИзменениеИспользованияСтруктурыПредприятия()

	Если СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ИспользованиеСтруктурыПредприятия().НеСоответствует Тогда
		НачатьУстановкуИспользованияСтруктурыПредприятия(Ложь);
		Возврат;
	КонецЕсли;

	Если Не МестаПозицийВСтруктуреПредприятияЗаполнены() Тогда
		НачатьУстановкуИспользованияСтруктурыПредприятия(Истина);
		Возврат;
	КонецЕсли;

	ТекстВопроса = 
		НСтр("ru = 'В одной или нескольких позициях заполнено место в структуре предприятия, отличающееся от подразделения организации. 
			 |При приведении структуры предприятия в соответствие со структурой юридических лиц эти сведения будут утрачены.
			 |
			 |Продолжить?'");

	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Места позиций в структуре предприятия будут утрачены'");
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	
	КнопкиОтвета = Новый СписокЗначений;
	КнопкиОтвета.Добавить(Истина, НСтр("ru = 'Продолжить'"));
	КнопкиОтвета.Добавить(Ложь, НСтр("ru = 'Отмена'"));
	
	ОбработчикОтвета = Новый ОписаниеОповещения("ЗавершитьИзменениеИспользованияСтруктурыПредприятия", ЭтотОбъект);
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОбработчикОтвета, ТекстВопроса, КнопкиОтвета, ПараметрыВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеИспользованияСтруктурыПредприятия(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Или Ответ.Значение <> Истина Тогда
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ИспользованиеСтруктурыПредприятия().НеСоответствует;
		Возврат;
	КонецЕсли;
	
	НачатьУстановкуИспользованияСтруктурыПредприятия(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуИспользованияСтруктурыПредприятия(СоответствуетСтруктуреЮридическихЛиц, ИспользоватьДлительнуюОперацию = Ложь)
	
	Элементы.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло.Доступность = Ложь;
	Элементы.ИспользованиеСтруктурыПредприятияОжидание.Видимость = Истина;
	
	ДлительнаяОперация = ДлительнаяОперацииУстановкиИспользованияСтруктурыПредприятия(
		СоответствуетСтруктуреЮридическихЛиц, ИспользоватьДлительнуюОперацию);
 
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Организационная структура'");
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Установлено'");
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;

	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация, 
		Новый ОписаниеОповещения(
			"ЗавершитьУстановкуИспользованияСтруктурыПредприятия", 
			ЭтотОбъект, 
			Новый Структура("Соответствует", СоответствуетСтруктуреЮридическихЛиц)), 
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУстановкуИспользованияСтруктурыПредприятия(Результат, ДополнительныеПараметры) Экспорт

	Элементы.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло.Доступность = Истина;
	Элементы.ИспользованиеСтруктурыПредприятияОжидание.Видимость = Ложь;		

	Если Результат = Неопределено Тогда
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ИспользованиеСтруктурыПредприятияЧислом(Не ДополнительныеПараметры.Соответствует);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ИспользованиеСтруктурыПредприятияЧислом(Не ДополнительныеПараметры.Соответствует);
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДлительнаяОперацииУстановкиИспользованияСтруктурыПредприятия(СоответствуетСтруктуреЮридическихЛиц, ИспользоватьДлительнуюОперацию)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	Если Не ИспользоватьДлительнуюОперацию Тогда
		ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, 
		"ОрганизационнаяСтруктура.УстановитьИспользованиеСтруктурыПредприятия", СоответствуетСтруктуреЮридическихЛиц);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользованиеСтруктурыПредприятияЧислом(Соответствует)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Истина, ИспользованиеСтруктурыПредприятия().Соответствует);
	Соответствие.Вставить(Ложь, ИспользованиеСтруктурыПредприятия().НеСоответствует);
	Возврат Соответствие[Соответствует];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользованиеСтруктурыПредприятия()
	Возврат Новый Структура("Соответствует, НеСоответствует", 1, 0);
КонецФункции

&НаСервереБезКонтекста
Функция МестаПозицийВСтруктуреПредприятияЗаполнены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестаПозиций
		|ГДЕ
		|	МестаПозиций.Подразделение.Источник <> МестаПозиций.Позиция.Подразделение";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекЛьгот()
	
	Если Не НастройкиЛьготСотрудников.ИспользоватьЛьготыСотрудников Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиЛьготСотрудниковПрежняя, НастройкиЛьготСотрудников);
		НастройкиЛьготСотрудников.ИспользоватьИндивидуальныеЛьготыСотрудников = Ложь;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиЛьготСотрудников, НастройкиЛьготСотрудниковПрежняя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекОбученияРазвития()
	
	Если Не НастройкиОбученияРазвития.ИспользоватьОбучениеРазвитиеСотрудников Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиОбученияРазвитияПрежняя, НастройкиОбученияРазвития);
		
		НастройкиОбученияРазвития.ИспользоватьУченическиеДоговоры = Ложь;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиОбученияРазвития, НастройкиОбученияРазвитияПрежняя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекКадровогоРезерва()
	
	Если Не НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиКадровогоРезерваПрежняя, НастройкиКадровогоРезерва);
		
		НастройкиКадровогоРезерва.ИспользоватьЗаявкиНаВключениеВКадровыйРезерв = Ложь;
		НастройкиКадровогоРезерва.ИспользоватьКадровыйРезервПоВидам = Ложь;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиКадровогоРезерва, НастройкиКадровогоРезерваПрежняя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(Форма)
	
	ИспользоватьПодборПерсонала = Форма.КонстантыНабор.ИспользоватьПодборПерсонала;
	ОткрытиеВакансииТребуетСогласования = Форма.НастройкиПодбораПерсонала.ОткрытиеВакансииТребуетСогласования;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьЗаявкиНаПодборПерсонала", "Доступность", ИспользоватьПодборПерсонала И Не ОткрытиеВакансииТребуетСогласования);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьСогласованиеВакансий", "Доступность", ИспользоватьПодборПерсонала И Не ОткрытиеВакансииТребуетСогласования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ОткрытиеВакансииТребуетСогласования", "Доступность", ИспользоватьПодборПерсонала);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьИнтеграциюРекрутинговыхСайтов", "Доступность", ИспользоватьПодборПерсонала);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьОценкуЭффективностиИсточниковИнформацииОКандидатах", "Доступность", ИспользоватьПодборПерсонала);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьЧатботов", "Доступность", ИспользоватьПодборПерсонала);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ГруппаПериодРаботыСВакансией", "Доступность", ИспользоватьПодборПерсонала);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ДнейДоСообщения",
		"Доступность",
		Форма.НастройкиПодбораПерсонала.ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьИнтеграциюРекрутинговыхСайтов(Форма)
	
	Если Форма.ИспользоватьИнтеграциюРекрутинговыхСайтов Тогда
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Выгрузка/загрузка на рекрутинговые сайты вакансий, кандидатов, их откликов и резюме'"));
		ЧастиСтроки.Добавить(".");
		ЧастиСтроки.Добавить(Символы.ПС);
		ЧастиСтроки.Добавить(НСтр("ru = 'Настроить использование отдельных рекрутинговых сайтов пользователи могут в своих'"));
		ЧастиСтроки.Добавить(" ");	
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'персональных настройках'"), , , , "СсылкаНаПерсональныеНастройки"));
	Иначе
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Выгрузка/загрузка на рекрутинговые сайты вакансий, кандидатов, их откликов и резюме'"));
		ЧастиСтроки.Добавить(".");
		ЧастиСтроки.Добавить(Символы.ПС);
		ЧастиСтроки.Добавить(НСтр("ru = 'Настроить использование отдельных рекрутинговых сайтов пользователи могут в своих персональных настройках'"));
	КонецЕсли;
	
	Форма.Элементы.ИспользоватьИнтеграциюРекрутинговыхСайтовРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ДнейДоОтклонения",
		"Доступность",
		Форма.ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ПричинаАвтоматическогоОтклонения",
		"Доступность",
		Форма.ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьЛьготыСотрудников(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьИндивидуальныеЛьготыСотрудников", "Доступность", Форма.НастройкиЛьготСотрудников.ИспользоватьЛьготыСотрудников);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьОбучениеРазвитиеСотрудников(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьУченическиеДоговоры", "Доступность",
		Форма.НастройкиОбученияРазвития.ИспользоватьОбучениеРазвитиеСотрудников);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьКадровыйРезерв(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьЗаявкиНаВключениеВКадровыйРезерв", "Доступность",
		Форма.НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьКадровыйРезервПоВидам", "Доступность",
		Форма.НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(Форма)
	
	ИспользоватьСамообслуживаниеСотрудников = Форма.КонстантыНабор.ИспользоватьСамообслуживаниеСотрудников;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СамообслуживаниеЛеваяГруппа", "Доступность",
		ИспользоватьСамообслуживаниеСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СамообслуживаниеПраваяГруппа", "Доступность",
		ИспользоватьСамообслуживаниеСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиПродолжительностиСеансов", "Доступность",
		ИспользоватьСамообслуживаниеСотрудников
		И Форма.НастройкиСамообслуживанияСотрудников.ОграничиватьПродолжительностьСеансаПользователей);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиКоличестваОдновременныхСеансов", "Доступность",
		ИспользоватьСамообслуживаниеСотрудников
		И Форма.НастройкиСамообслуживанияСотрудников.ОграничиватьКоличествоОдновременныхСеансовПользователей);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиУчетныхЗаписейСотрудников", "Доступность",
		ИспользоватьСамообслуживаниеСотрудников
		И Форма.КонстантыНабор.СоздаватьПользователейДляПринятыхНаРаботуСотрудниковАвтоматически);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СписокСотрудниковДоступНеЗапрещается", "Доступность",
		ИспользоватьСамообслуживаниеСотрудников
		И Форма.КонстантыНабор.ЗапрещатьВходВПрограммуУволеннымСотрудникамАвтоматически);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьБронированиеКомандировок(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ОтправлятьСотрудниковАвтоматически", "Доступность",
		Форма.КонстантыНабор.ИспользоватьБронированиеКомандировок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСклонениеЕдиницыИзмеренияПериодаВремени(Форма)
	
	СклонениеДней = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';день;;дня;дней;'"),
		Форма.НастройкиПодбораПерсонала.ПериодРаботыСВакансией);
	Форма.Элементы.ЕдиницаИзмеренияПериодаРаботыСВакансией.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.Периодичность.День")).Представление = СклонениеДней;
		
	СклонениеМесяцев = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';месяц;;месяца;месяцев;'"),
		Форма.НастройкиПодбораПерсонала.ПериодРаботыСВакансией);
	Форма.Элементы.ЕдиницаИзмеренияПериодаРаботыСВакансией.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")).Представление = СклонениеМесяцев;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоНастройкам()
	
	ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьИнтеграциюРекрутинговыхСайтов(ЭтотОбъект);
	ОбновитьФормуПоНастройкеОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьЛьготыСотрудников(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьОбучениеРазвитиеСотрудников(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьКадровыйРезерв(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	ОбновитьФормуПоНастройкамИспользоватьРабочийКалендарь(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьБронированиеКомандировок(ЭтотОбъект);
	УстановитьСклонениеЕдиницыИзмеренияПериодаВремени(ЭтаФорма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		МодульГрейдыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ГрейдыКлиентСервер");
		МодульГрейдыКлиентСервер.ОбновитьПанельУправлениеПерсоналомПоНастройкеИспользоватьГрейды(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		МодульКлючевыеПоказателиЭффективностиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективностиКлиентСервер");
		МодульКлючевыеПоказателиЭффективностиКлиентСервер.ОбновитьПанельУправлениеПерсоналомДляКлючевыхПоказателейЭффективности(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновленияИнтерфейса() Экспорт
	
	ТребуетсяОбновлениеИнтерфейса = Истина;
	
	#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияИнтерфейса", 1, Истина);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияЗаписиНастроекПодбораПерсонала() Экспорт
	
	ТребуетсяОбновлениеИнтерфейса = Истина;
	
	#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияЗаписиНастроекПодбораПерсонала", 1, Истина);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжиданияОбновленияИнтерфейса()
	
	ОбновитьИнтерфейс();
	
	ТребуетсяОбновлениеИнтерфейса = Ложь;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжиданияЗаписиНастроекПодбораПерсонала()
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ТребуетсяОбновлениеИнтерфейса = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиНаКлиенте(ИмяНастройки)
	
	ЗаписатьНастройкиНаСервере(ИмяНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиНаСервере(ИмяНастройки)
	
	ПараметрыНастроек = Обработки.ПанельНастроекУправлениеПерсоналом.ЗаполнитьСтруктуруПараметровНастроек(ИмяНастройки);
	
	ПараметрыНастроек.НастройкиПодбораПерсонала = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиПодбораПерсонала, Метаданные.РегистрыСведений.НастройкиПодбораПерсонала);
	ПараметрыНастроек.НастройкиЛьготСотрудников = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиЛьготСотрудников, Метаданные.РегистрыСведений.НастройкиЛьготСотрудников);
	ПараметрыНастроек.НастройкиОбученияРазвития = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиОбученияРазвития, Метаданные.РегистрыСведений.НастройкиОбученияРазвития);
	ПараметрыНастроек.НастройкиКадровогоРезерва = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиКадровогоРезерва, Метаданные.РегистрыСведений.НастройкиКадровогоРезерва);
	ПараметрыНастроек.НастройкиОценкиПерсонала = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиОценкиПерсонала, Метаданные.РегистрыСведений.НастройкиОценкиПерсонала);
	ПараметрыНастроек.НастройкиСамообслуживанияСотрудников = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиСамообслуживанияСотрудников, Метаданные.РегистрыСведений.НастройкиСамообслуживанияСотрудников);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.ПанельУправлениеПерсоналомЗаполнитьНастройкиГрейдов(ЭтаФорма, ПараметрыНастроек);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		МодульКлючевыеПоказателиЭффективности.ПанельУправлениеПерсоналомЗаполнитьНастройкиКлючевыхПоказателейЭффективности(ЭтаФорма, ПараметрыНастроек);
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Обработки.ПанельНастроекУправлениеПерсоналом.ЗаписатьНастройки(ПараметрыНастроек, АдресХранилища);
	ОбновитьПовторноИспользуемыеЗначения();
	
	ПрочитатьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьПодборПерсоналаПриИзмененииНаСервере(Использование)
	
	Константы.ИспользоватьПодборПерсонала.Установить(Использование);
	ПрочитатьНастройки();
	ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ТекущиеНастройкиПодбораПерсонала()
	
	Возврат ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиПодбораПерсонала, Метаданные.РегистрыСведений.НастройкиПодбораПерсонала);
	
КонецФункции

&НаСервере
Процедура ИспользоватьИнтеграциюРекрутинговыхСайтовПриИзмененииНаСервере()
	
	Константы.ИспользоватьИнтеграциюРекрутинговыхСайтов.Установить(ИспользоватьИнтеграциюРекрутинговыхСайтов);
	
	ИнтеграцияРекрутинговыхСайтов.УстановитьФОИспользуетсяВзаимодействиеСРекрутинговымиСайтами();
	
	ОбновитьФормуПоНастройкеИспользоватьИнтеграциюРекрутинговыхСайтов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапеПриИзмененииНаСервере()
	
	Константы.ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе.Установить(ОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе);
	ОбновитьФормуПоНастройкеОтклонятьКандидатовЗадержавшихсяНаОдномЭтапе(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСамообслуживаниеСотрудниковПриИзмененииНаСервере(Использование)
	
	Константы.ИспользоватьСамообслуживаниеСотрудников.Установить(Использование);
	ПрочитатьНастройки();
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗапрещатьВходВПрограммуУволеннымСотрудникамАвтоматическиПриИзмененииНаСервере(Использование)
	
	Константы.ЗапрещатьВходВПрограммуУволеннымСотрудникамАвтоматически.Установить(Использование);
	ПрочитатьНастройки();
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СоздаватьПользователейДляПринятыхНаРаботуСотрудниковАвтоматическиПриИзмененииНаСервере(Использование)
	
	Константы.СоздаватьПользователейДляПринятыхНаРаботуСотрудниковАвтоматически.Установить(Использование);
	ПрочитатьНастройки();
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьЭлектронноеИнтервьюУстановить(ИспользоватьЭлектронноеИнтервьюУстановить)
	Константы.ИспользоватьЭлектронноеИнтервью.Установить(ИспользоватьЭлектронноеИнтервьюУстановить);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьЧатботовПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьЧатботов.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьАдаптациюУвольнениеУстановить(Использование)
	Константы.ИспользоватьАдаптациюУвольнение.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьРабочийКалендарьПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьРабочийКалендарь.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьБронированиеПомещенийПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьБронированиеПомещений.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьБронированиеКомандировокПриИзмененииНаСервере(Использование)
	
	Константы.ИспользоватьБронированиеКомандировок.Установить(Использование);
	Если Не Константы.ИспользоватьБронированиеКомандировок.Получить() Тогда
		Константы.ИспользоватьАвтоматическуюОтправкуСотрудниковБронированияКомандировок.Установить(Использование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьУведомленияПриИзмененииНаСервере(ИспользованиеУведомлений, ИспользованиеШаблоновСообщений)
	
	Константы.ИспользоватьУведомления.Установить(ИспользованиеУведомлений);
	Если ИспользованиеУведомлений И Не ИспользованиеШаблоновСообщений Тогда
		Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкамИспользоватьРабочийКалендарь(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИспользоватьСинхронизациюКалендарейГруппа",
		"Доступность",
		Форма.КонстантыНабор.ИспользоватьРабочийКалендарь);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьСинхронизациюКалендарейПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьСинхронизациюКалендарей.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправлятьФизическихЛицАвтоматическиПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьАвтоматическуюОтправкуСотрудниковБронированияКомандировок.Установить(Использование);
КонецПроцедуры

#КонецОбласти