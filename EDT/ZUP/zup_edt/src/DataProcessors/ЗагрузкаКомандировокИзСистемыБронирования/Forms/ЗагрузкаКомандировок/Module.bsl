
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	ЗаполнитьСведенияОНастройкеДоступа();
	
	ПоВсемОрганизациям = Истина;
	
	УстановитьВидимостьОрганизацииВСписке(ЭтаФорма);
	УстановитьСвойстваПоляОрганизация(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СохранениеНастроекДоступаКСервисамБронированияКомандировок" Тогда
		ЗаполнитьСведенияОНастройкеДоступа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоВсемОрганизациямПриИзменении(Элемент)
	
	УстановитьВидимостьОрганизацииВСписке(ЭтаФорма);
	УстановитьСвойстваПоляОрганизация(ЭтаФорма);
	
	СтрокиДерева = Поездки.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтрокиДерева = Поездки.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоездки

&НаКлиенте
Процедура ПоездкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуПодбораСотрудников(ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	ОткрытьСтраницуПоездкиНаСайте(ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	ОткрытьФормуПояснения(ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПоездкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Поездки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоСтрокаПоездки Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ФизическиеЛица.Количество() = 1 Тогда
		Элементы.ПоездкиКомандировка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.Командировка");
	Иначе
		Элементы.ПоездкиКомандировка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.КомандировкиСотрудников");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Отказ = Неопределено;
	ПроверитьЗаполнениеОтбора(Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗагрузкуНовыхПоездок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПрошлыеПоездки(Команда)
	
	Отказ = Неопределено;
	ПроверитьЗаполнениеОтбора(Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьВыборПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКомандировки(Команда)
	
	НачатьФормированиеКомандировок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьЗагрузкуНовыхПоездок()
	
	ДлительнаяОперация = ЗагрузитьНовыеПоездкиНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Загрузка новых поездок из системы бронирования'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Загрузка новых поездок завершена'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Бронирование командировок'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьЗагрузкуНовыхПоездок", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНовыеПоездкиНаСервере()
	
	ПараметрыПроцедуры = Новый Структура(
		"СистемаБронирования, 
		|Организация");
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	ПараметрыПроцедуры.Организация = Организация;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка поездок из системы бронирования'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("БронированиеКомандировок.ЗагрузитьНовыеПоездкиДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗагрузкуНовыхПоездок(Результат, ДополнительныеПараметры) Экспорт
	                             	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	ЗаполнитьДанныеПоездокПослеЗагрузкиНовыхПоездок(Результат.АдресРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеКомандировок()
	
	ДлительнаяОперация = СформироватьПриказыНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Формирование кадровых приказов (командировок) по данным поездок'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьФормированиеКомандировок", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборПериода()
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗавершитьВыборПериода", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.Последние7Дней);
	Диалог.Показать(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборПериода(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗагрузкуПоездокЗаПериод(Период);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуПоездокЗаПериод(Период)
	
	ДлительнаяОперация = ЗагрузитьПоездкиЗаПериодНаСервере(Период);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Загрузка поездок за период из системы бронирования'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Загрузка поездок за период завершена'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Бронирование командировок'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьЗагрузкуПоездокЗаПериод", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПоездкиЗаПериодНаСервере(Период)
	
	ПараметрыПроцедуры = Новый Структура(
		"СистемаБронирования, 
		|Организация, 
		|Период");
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	ПараметрыПроцедуры.Организация = Организация;
	ПараметрыПроцедуры.Период = Период;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка поездок за период из системы бронирования'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("БронированиеКомандировок.ЗагрузитьПоездкиЗаПериодДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоездокПослеЗагрузкиПоездокЗаПериод(АдресРезультата)
	
	Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	Версия = Неопределено;
	
	ЗаполнитьДанныеПоездокПослеЗагрузки(Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗагрузкуПоездокЗаПериод(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	ЗаполнитьДанныеПоездокПослеЗагрузкиПоездокЗаПериод(Результат.АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоездокПослеЗагрузкиНовыхПоездок(АдресРезультата)
	
	Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	Версия = Данные.Версия;
	
	ЗаполнитьДанныеПоездокПослеЗагрузки(Данные);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоездокПослеЗагрузки(Данные)
	
	СтрокиДерева = Поездки.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	ЗагруженныеПоездки = Данные.Поездки;
	Если ЗагруженныеПоездки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В системе бронирования не обнаружено данных о поездках.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ОтборПустойСсылки = Новый Структура("СотрудникСсылка");
	ОтборПустойСсылки.СотрудникСсылка = Справочники.Сотрудники.ПустаяСсылка();
	
	Для Каждого Поездка Из ЗагруженныеПоездки Цикл
		НоваяПоездка = СтрокиДерева.Добавить();
		НоваяПоездка.ЭтоСтрокаПоездки = Истина;
		ЗаполнитьЗначенияСвойств(НоваяПоездка, Поездка);
		Для Каждого Услуга Из Поездка.Услуги Цикл
			НоваяУслуга = НоваяПоездка.ПолучитьЭлементы().Добавить();
			НоваяУслуга.Представление = Услуга.Представление;
			НоваяУслуга.ФизическиеЛицаПредставление = Услуга.ФизическиеЛицаПредставление;
			НоваяУслуга.Сумма = Услуга.Сумма;
			ФизическиеЛицаУслуги = БронированиеКомандировок.ТаблицаФизическихЛиц(Ложь);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Услуга.ФизическиеЛица, ФизическиеЛицаУслуги);
			НоваяУслуга.ФизическиеЛица = ФиксированнаяТаблицаЗначений(ФизическиеЛицаУслуги);
			ЕстьОшибкиСотрудников = Услуга.ФизическиеЛица.НайтиСтроки(ОтборПустойСсылки).Количество() > 0;
			Если ЕстьОшибкиСотрудников Тогда
				НоваяПоездка.ЕстьОшибкиСотрудников = Истина;
			КонецЕсли;
			НоваяУслуга.ЕстьОшибкиСотрудников = ЕстьОшибкиСотрудников И Не ПустаяСтрока(Услуга.ФизическиеЛицаПредставление);
			ЗаполнитьИндексКартинки(Услуга, НоваяУслуга);
		КонецЦикла;
		НоваяПоездка.ФизическиеЛица = ФиксированнаяТаблицаЗначений(Поездка.ФизическиеЛица);
		НоваяПоездка.Пояснение = Поездка.ОписаниеИзменений;
		ЗаполнитьПризнакЗагружать(НоваяПоездка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакЗагружать(Поездка)
	
	Поездка.Загружать = Ложь;
	
	Если Поездка.ЕстьОшибкиСотрудников Тогда
		Поездка.Загружать = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Поездка.Командировка) Тогда
		Поездка.Загружать = Истина;
		Возврат;
	КонецЕсли;
	
	Если Поездка.Изменена Тогда
		Поездка.Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексКартинки(ЗагружаемаяУслуга, СтрокаУслуги)
	
	СтрокаУслуги.ИндексКартинки = 99;
	
	Если ЗагружаемаяУслуга.ВидУслуги = Перечисления.ВидыУслугБронированияКомандировок.Проживание Тогда
		СтрокаУслуги.ИндексКартинки = 2;
		Возврат;
	КонецЕсли;
	
	Если ЗагружаемаяУслуга.ВидУслуги <> Перечисления.ВидыУслугБронированияКомандировок.Билеты Тогда
		Возврат;
	КонецЕсли;
	
	Содержимое = ЗагружаемаяУслуга.Содержимое;
	
	Если Содержимое.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Поезд Тогда
		СтрокаУслуги.ИндексКартинки = 1;
	Иначе
		Если Содержимое.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Самолет Тогда
			СтрокаУслуги.ИндексКартинки = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПриказыНаСервере()
	
	ДанныеПоездок = БронированиеКомандировок.ТаблицаПоездок();
	
	СтрокиПоездок = Поездки.ПолучитьЭлементы();
	Для Каждого СтрокаПоездки Из СтрокиПоездок Цикл
		Если Не СтрокаПоездки.Загружать Тогда
			Продолжить;
		КонецЕсли;
		НоваяПоездка = БронированиеКомандировок.ДобавитьНовуюПоездку(ДанныеПоездок);
		ЗаполнитьЗначенияСвойств(НоваяПоездка, СтрокаПоездки, , "ФизическиеЛица");
		НоваяПоездка.СистемаБронирования = СистемаБронирования;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаПоездки.ФизическиеЛица, НоваяПоездка.ФизическиеЛица);
	КонецЦикла;
	
	Если ДанныеПоездок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет поездок, отмеченных для загрузки.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура("ДанныеПоездок");
	ПараметрыПроцедуры.ДанныеПоездок = ДанныеПоездок;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование кадровых приказов по данным поездок'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("БронированиеКомандировок.СформироватьПриказыДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьФормированиеКомандировок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	ЗавершитьФормированиеКомандировокНаСервере(Результат.АдресРезультата);
	
	ЗаголовокОповещения = НСтр("ru = 'Бронирование командировок'");
	ПояснениеОповещения = НСтр("ru = 'Создание командировок завершено'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ПояснениеОповещения, БиблиотекаКартинок.Информация);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьФормированиеКомандировокНаСервере(АдресРезультата)
	
	ЗаписатьВерсиюПоследнегоЗаказа();
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЗаполнитьПриказыПоездок(Результат.ДанныеПоездок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВерсиюПоследнегоЗаказа()
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	БронированиеКомандировок.ЗаписатьВерсиюПоследнегоЗаказа(Версия, СистемаБронирования, Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриказыПоездок(ДанныеПоездок)
	
	ОтборСтрок = Новый Структура(
		"ИдентификаторПоездки, 
		|Организация");
	
	СтрокиПоездок = Поездки.ПолучитьЭлементы();
	Для Каждого СтрокаПоездки Из СтрокиПоездок Цикл
		Если Не СтрокаПоездки.ЭтоСтрокаПоездки Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаПоездки);
		НайденныеСтроки = ДанныеПоездок.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаПоездки.Командировка = НайденнаяСтрока.Командировка;
			СтрокаПоездки.Изменена = НайденнаяСтрока.Изменена;
			СтрокаПоездки.Пояснение = НайденнаяСтрока.ОписаниеИзменений;
			ЗаполнитьПризнакЗагружать(СтрокаПоездки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОрганизацииВСписке(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ПоездкиОрганизация.Видимость = Форма.ПоВсемОрганизациям;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляОрганизация(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Организация.Доступность = Не Форма.ПоВсемОрганизациям;
	Элементы.Организация.АвтоОтметкаНеЗаполненного = Не Форма.ПоВсемОрганизациям;
	Элементы.Организация.ОтметкаНеЗаполненного = Не Форма.ПоВсемОрганизациям И Не ЗначениеЗаполнено(Форма.Организация);
	
	Если Форма.ПоВсемОрганизациям Тогда
		Форма.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// "Загружать" недоступен, если есть ошибки сотрудников.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.ЕстьОшибкиСотрудников", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоездкиЗагружать");
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоездкиПриказ");
	
	// Отображать флажок "Загружать".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.ЭтоСтрокаПоездки", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоездкиЗагружать");
	
	// Картинка услуги не отображается для поездки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.ЭтоСтрокаПоездки", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоездкиКартинка");
	
	// Текст "Создается новая".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.Командировка", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.Загружать", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создается новая'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПодсказкаСозданияНовойКомандировкиЦвет);
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоездкиКомандировка");
	
	// Цвет фона поездки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.ЭтоСтрокаПоездки", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПодсказки);
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Поездки");
	
	// Цвет текста отмененной поездки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.Отменена", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоездкаОтмененаЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Поездки.Шрифт, , , Истина));
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Поездки");
	
	// Жирным шрифтом измененная поездка.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.ЭтоСтрокаПоездки", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Поездки.Изменена", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Поездки.Шрифт, , , Истина));
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Поездки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОтбора(Отказ)
	
	Если Не ПоВсемОрганизациям И Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Организация не заполнена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Организация", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФиксированнаяТаблицаЗначений(ТаблицаЗначений)
	
	Данные = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Структура = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
		Для Каждого КлючИЗначение Из Структура Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
				Структура.Вставить(КлючИЗначение.Ключ, ФиксированнаяТаблицаЗначений(КлючИЗначение.Значение));
			КонецЕсли;
		КонецЦикла;
		Данные.Добавить(Структура);
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Данные);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОНастройкеДоступа()
	
	НастройкиДоступа = БронированиеКомандировок.НастройкиСистемыБронирования(СистемаБронирования);
	
	НавигационнаяСсылкаФормыНастроек = "e1cib/app/ОбщаяФорма." + Метаданные.ОбщиеФормы.ПараметрыДоступаКСервисамБронирования.Имя;
	
	Если Не ЗначениеЗаполнено(НастройкиДоступа.Логин) Тогда
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Доступ к сервису не настроен.'"), , ЦветаСтиля.ОшибкиБронированияКомандировокТекстЦвет));
		Если ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ПараметрыДоступаКСервисамБронирования) Тогда
			ЧастиСтроки.Добавить(" ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Настроить'"), , , , НавигационнаяСсылкаФормыНастроек));
		Иначе
			ЧастиСтроки.Добавить(" ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обратитесь к администратору.'"), , ЦветаСтиля.ОшибкиБронированияКомандировокТекстЦвет));
		КонецЕсли;
		Элементы.СведенияОДоступеКСистемеБронирования.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Возврат;
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	Если ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ПараметрыДоступаКСервисамБронирования) Тогда
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Настроить доступ'"), , , , НавигационнаяСсылкаФормыНастроек));
	КонецЕсли;
	
	Элементы.СведенияОДоступеКСистемеБронирования.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораСотрудников(ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ПоездкиСотрудники" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Поездки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыПодбора = Новый Структура(
		"ИдентификаторСтроки,
		|ПредставлениеПоездки,
		|ДатаНачала,
		|ДатаОкончания,
		|Организация,
		|ФизическиеЛица");
	
	ПараметрыПодбора.ИдентификаторСтроки = ВыбраннаяСтрока;
	ПараметрыПодбора.ПредставлениеПоездки = ДанныеСтроки["Представление"];
	ПараметрыПодбора.ДатаНачала = ДанныеСтроки["ДатаНачала"];
	ПараметрыПодбора.ДатаОкончания = ДанныеСтроки["ДатаОкончания"];
	ПараметрыПодбора.Организация = ДанныеСтроки["Организация"];
	
	ЗаполнитьФизическихЛицДляПодбораСотрудников(ПараметрыПодбора.ФизическиеЛица, ДанныеСтроки["ФизическиеЛица"]);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ФормаПодбораСотрудниковПослеЗакрытия", ЭтотОбъект, ПараметрыПодбора);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаКомандировокИзСистемыБронирования.Форма.ПодборСотрудников", 
		ПараметрыПодбора, 
		ЭтаФорма, 
		ВыбраннаяСтрока, , , 
		ОбработчикОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьФизическихЛицДляПодбораСотрудников(СтрокиДляПодбора, ВсеСтроки)
	
	СтрокиДляПодбора = ВсеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПодбораСотрудниковПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСотрудниковПоездкиПослеПодбора(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковПоездкиПослеПодбора(РезультатПодбора, ПараметрыПодбора)
	
	СтрокаДерева = Поездки.НайтиПоИдентификатору(ПараметрыПодбора.ИдентификаторСтроки);
	
	ТаблицаФизическихЛиц = БронированиеКомандировок.ТаблицаФизическихЛиц(Ложь);
	
	НовыйМассив = Новый Массив;
	ЕстьОшибкиСотрудников = Ложь;
	
	Индекс = 0;
	Пока Индекс < РезультатПодбора.Количество() Цикл
		СтрокаРезультата = РезультатПодбора[Индекс];
		ОписаниеЛица = Новый Структура(СтрокаДерева.ФизическиеЛица[Индекс]);
		ОписаниеЛица.Ссылка = СтрокаРезультата.Ссылка;
		ОписаниеЛица.СотрудникСсылка = СтрокаРезультата.СотрудникСсылка;
		НовыйМассив.Добавить(ОписаниеЛица);
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЛица);
		Если Не ЗначениеЗаполнено(ОписаниеЛица.СотрудникСсылка) Тогда
			ЕстьОшибкиСотрудников = Истина;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	СтрокаДерева.ФизическиеЛица = ОбщегоНазначения.ФиксированныеДанные(НовыйМассив);
	СтрокаДерева.ЕстьОшибкиСотрудников = ЕстьОшибкиСотрудников;
	
	ОстальныеСтроки = Новый Массив;
	Если СтрокаДерева.ЭтоСтрокаПоездки Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОстальныеСтроки, СтрокаДерева.ПолучитьЭлементы());
	Иначе
		СтрокаПоездки = СтрокаДерева.ПолучитьРодителя();
		ОстальныеСтроки.Добавить(СтрокаПоездки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОстальныеСтроки, СтрокаПоездки.ПолучитьЭлементы());
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ОстальныеСтроки, СтрокаДерева);
	КонецЕсли;
	
	ОтборСтрок = Новый Структура(
		"Фамилия, 
		|Имя, 
		|Отчество, 
		|ДатаРождения");
	
	Для Каждого СтрокаДерева Из ОстальныеСтроки Цикл
		НовыйМассив = Новый Массив;
		ЕстьОшибкиСотрудников = Ложь;
		Для Каждого СтрокаТаблицы Из СтрокаДерева.ФизическиеЛица Цикл
			ОписаниеЛица = Новый Структура(СтрокаТаблицы);
			// Поиск сотрудника.
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
			НайденныеСтроки = ТаблицаФизическихЛиц.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				ОписаниеЛица.Ссылка = НайденнаяСтрока.Ссылка;
				ОписаниеЛица.СотрудникСсылка = НайденнаяСтрока.СотрудникСсылка;
			КонецЕсли;
			НовыйМассив.Добавить(ОписаниеЛица);
			Если Не ЗначениеЗаполнено(ОписаниеЛица.СотрудникСсылка) Тогда
				ЕстьОшибкиСотрудников = Истина;
			КонецЕсли;
		КонецЦикла;
		СтрокаДерева.ФизическиеЛица = ОбщегоНазначения.ФиксированныеДанные(НовыйМассив);
		СтрокаДерева.ЕстьОшибкиСотрудников = ЕстьОшибкиСотрудников;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПояснения(ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ПоездкиПояснение" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элементы.Поездки.ТекущиеДанные.Пояснение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуПоездкиНаСайте(ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ПоездкиПредставление" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Поездки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ИдентификаторПоездки = ДанныеСтроки.ИдентификаторПоездки;
	Если Не ДанныеСтроки.ЭтоСтрокаПоездки Тогда
		ИдентификаторПоездки = ДанныеСтроки.ПолучитьРодителя().ИдентификаторПоездки;
	КонецЕсли;
	
	НачатьОткрытиеПоездкиНаСайте(ИдентификаторПоездки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытиеПоездкиНаСайте(ИдентификаторПоездки)
	
	ТекстСообщения = НСтр("ru = 'Открыть поездку на сайте системы бронирования?'");
	
	ВариантыОтвета = Новый СписокЗначений;
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да (перейти на сайт)'"));
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет);
	
	ПараметрыОповещения = Новый Структура("ИдентификаторПоездки");
	ПараметрыОповещения.ИдентификаторПоездки = ИдентификаторПоездки;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗавершитьОткрытиеПоездки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОбработчикОповещения, ТекстСообщения, ВариантыОтвета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытиеПоездки(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияSmartwayКлиент.ОткрытьСтраницуПоездкиНаСайте(СистемаБронирования, ДополнительныеПараметры.ИдентификаторПоездки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти