	
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Наименование");
	Поля.Добавить("Код");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МедицинскиеОсмотрыКлиентСервер.ЗаполнитьПредставлениеВредногоФактораВидаРабот(Данные, Представление);
	
КонецПроцедуры
	
#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Процедура НачальноеЗаполнение(ПараметрыОбновления = Неопределено) Экспорт
	
	Если ПараметрыОбновления = Неопределено Тогда
		ПараметрыОбновления = Новый Структура("ОбработкаЗавершена");
	КонецЕсли;
	
	Если ЕстьЭлементы() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаИзМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ПолучитьМакет("Перечень").ПолучитьТекст()).Данные;
	
	НачатьТранзакцию();
	Попытка
		СоздатьЭлементыПоТаблицеМакета(ТаблицаИзМакета);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Функция ЕстьЭлементы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ВидыРаботМедицинскихОсмотров КАК ВидыРаботМедицинскихОсмотров";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура СоздатьЭлементыПоТаблицеМакета(ТаблицаМакета)
	
	Для Каждого СтрокаТаблицы Из ТаблицаМакета Цикл
		ДобавитьЭлемент(СтрокаТаблицы, ТаблицаМакета.Индекс(СтрокаТаблицы));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлемент(СтрокаТаблицы, ИндексСтроки)
	
	СправочникОбъект = Справочники.ВидыРаботМедицинскихОсмотров.СоздатьЭлемент();
	СправочникОбъект.Код = СтрокаТаблицы["Code"];
	СправочникОбъект.Наименование = СтрокаТаблицы["Name"];
	СправочникОбъект.Родитель = РодительПоКодуЭлемента(СтрокаТаблицы["Code"]);
	СправочникОбъект.Описание = СтрокаТаблицы["Description"];
	СправочникОбъект.РеквизитДопУпорядочивания = ИндексСтроки;
	Если Не ПустаяСтрока(СтрокаТаблицы["FrequencyPeriod"]) Тогда
		СправочникОбъект.КратностьОсмотра = Число(СтрокаТаблицы["FrequencyMultiplicity"]);
		СправочникОбъект.ПериодичностьОсмотра = Число(СтрокаТаблицы["FrequencyRate"]);
		СправочникОбъект.ЕдиницаПериодичностиОсмотра = Перечисления.Периодичность[СтрокаТаблицы["FrequencyPeriod"]];
	КонецЕсли;
	СправочникОбъект.ЗаполнитьПредставлениеПериодичности();
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

Функция РодительПоКодуЭлемента(КодЭлемента)
	
	ЧастиКодаЭлемента = СтрРазделить(КодЭлемента, ".");
	Если ЧастиКодаЭлемента.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастиКодаЭлемента.Удалить(ЧастиКодаЭлемента.Количество() - 1);
	
	КодРодителя = СтрСоединить(ЧастиКодаЭлемента, ".");
	
	ГруппаСсылка = Справочники.ВидыРаботМедицинскихОсмотров.НайтиПоКоду(КодРодителя);
	Если ГруппаСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ГруппаСсылка.Пустая() Тогда
		Возврат ГруппаСсылка;
	КонецЕсли;
	
	Возврат РодительПоКодуЭлемента(КодРодителя);
	
КонецФункции
	
#КонецОбласти

#КонецЕсли
