#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ВерсионированиеОбъектов

// Процедура - Определяет настройки объекта для подсистемы ВерсионированиеОбъектов
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция-конструктор для составления параметра к методу ДанныеПрофиляДолжности.
// 
// Возвращаемое значение:
//  Структура - структура с полями, описывающих требования к получению данных профиля.
//
Функция ПараметрыПолученияДанныхПрофиляДолжности() Экспорт
	
	ПараметрыПолучения = Новый Структура(
		"ХарактеристикиПерсонала,
		|ДействияСотрудников,
		|ЭтапыРаботыСКандидатами");
	
	ПараметрыПолучения.ХарактеристикиПерсонала = Ложь;
	ПараметрыПолучения.ДействияСотрудников = Ложь;
	ПараметрыПолучения.ЭтапыРаботыСКандидатами = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью") Тогда
		ПараметрыПолучения.ХарактеристикиПерсонала = Истина;
		ПараметрыПолучения.ДействияСотрудников = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Формирует данные указанного профиля должности.
//
// Возвращаемое значение - структура
//
Функция ДанныеПрофиляДолжности(ПрофильДолжности, ПараметрыПолучения = Неопределено) Экспорт
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = ПараметрыПолученияДанныхПрофиляДолжности();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрофильДолжности", ПрофильДолжности);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиДолжностей.Ссылка,
		|	ПрофилиДолжностей.Наименование,
		|	ПрофилиДолжностей.Требования,
		|	ПрофилиДолжностей.Обязанности,
		|	ПрофилиДолжностей.Условия,
		|	ПрофилиДолжностей.Подразделение,
		|	ПрофилиДолжностей.Должность
		|ИЗ
		|	Справочник.ПрофилиДолжностей КАК ПрофилиДолжностей
		|ГДЕ
		|	ПрофилиДолжностей.Ссылка = &ПрофильДолжности";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	
	Если ПараметрыПолучения.ХарактеристикиПерсонала Тогда
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ХарактеристикиПерсонала.НомерСтроки");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ХарактеристикиПерсонала.Характеристика");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ХарактеристикиПерсонала.Значение");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ХарактеристикиПерсонала.Вес");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ХарактеристикиПерсонала.ТребуетсяПроверка");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ХарактеристикиПерсонала.ТребуетсяОбучение");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ХарактеристикиПерсонала.ВесЗначения");
	КонецЕсли;
	
	Если ПараметрыПолучения.ДействияСотрудников Тогда
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ДействияСотрудников.НомерСтроки");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ДействияСотрудников.ДействиеСотрудника");
	КонецЕсли;
	
	Если ПараметрыПолучения.ЭтапыРаботыСКандидатами Тогда
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ЭтапыРаботыСКандидатами.НомерСтроки");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ЭтапыРаботыСКандидатами.ЭтапРаботы");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ЭтапыРаботыСКандидатами.ШаблонАнкеты");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ЭтапыРаботыСКандидатами.Комментарий");
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Заполняет список команд печати
//
// Параметры:
//  КомандыПечати	 - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ПрофилиДолжностей";
	КомандаПечати.Идентификатор = "ПрофильДолжности";
	КомандаПечати.Представление = ?(КомандыПечати.Количество() > 1, НСтр("ru = 'ПрофильДолжности'"), НСтр("ru = 'Печать'"));
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Профиль должности'");
	КомандаПечати.Порядок = 1;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Процедура - Формирует печатные формы
//
// Параметры:
//  МассивОбъектов			 - Массив - ссылки на объекты, которые нужно распечатать
//  ПараметрыПечати			 - Структура - дополнительные настройки печати
//  КоллекцияПечатныхФорм	 - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати			 - СписокЗначений - значение - ссылка на объект
//  ПараметрыВывода			 - Структура - дополнительные параметры сформированных табличных документов (выходной параметр)
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	КоллекцияПечатныхФорм,
	"ПрофильДолжности",
	НСтр("ru = 'Профиль должности'"),
	ПечатьПрофиляДолжности(МассивОбъектов, ОбъектыПечати));
КонецПроцедуры

Функция ВыполнитьЗаписьОбъекта(ДанныеОбъекта) Экспорт
	
	СправочникОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ДанныеОбъекта);
	СправочникОбъект.Записать();
	
	Возврат ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(СправочникОбъект);
	
КонецФункции

// Функция - Печать профиля должности
//
// Параметры:
//  МассивОбъектов	 - Массив - массив типа СправочникСсылка.ПрофилиДолжностей
//  ОбъектыПечати	 - СписокЗначений - список доступных значений
// 
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями макета
//
Функция ПечатьПрофиляДолжности(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПрофильДолжности";
	
	ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
	ОбластиМакета = Новый Структура;
	ОписаниеОбласти = ОписаниеОбласти();
	ОписаниеОбласти.Табличная = Истина;
	ОбластиМакета.Вставить("Шапка");
	Если ИспользоватьЭлектронноеИнтервью Тогда
		ОбластиМакета.Вставить("ШапкаДействияСотрудников");
		ОбластиМакета.Вставить("ДействияСотрудников", ОписаниеОбласти(Истина, "ДействияСотрудников", "ШаблонДействияСотрудников"));
		ОбластиМакета.Вставить("ШапкаЗнания");
		ОбластиМакета.Вставить("Знания", ОписаниеОбласти(Истина, "Знания", "ШаблонХарактеристики"));
		ОбластиМакета.Вставить("ШапкаНавыки");
		ОбластиМакета.Вставить("Навыки", ОписаниеОбласти(Истина, "Навыки", "ШаблонХарактеристики"));
		ОбластиМакета.Вставить("ШапкаЛичныеКачества", ОписаниеОбласти(, "ЛичныеКачества", Неопределено));
		ОбластиМакета.Вставить("ЛичныеКачества", ОписаниеОбласти(Истина, "ЛичныеКачества", Неопределено));
		ОбластиМакета.Вставить("ШапкаПрочиеХарактеристики", ОписаниеОбласти(, "ПрочиеХарактеристики", Неопределено));
		ОбластиМакета.Вставить("ПрочиеХарактеристики", ОписаниеОбласти(Истина, "ПрочиеХарактеристики", Неопределено));
	КонецЕсли;
	ОбластиМакета.Вставить("ШапкаОбязанности", ОписаниеОбласти(, "Обязанности", Неопределено));
	ОбластиМакета.Вставить("Обязанности", ОписаниеОбласти(Истина, "Обязанности", Неопределено));
	ОбластиМакета.Вставить("ШапкаТребования", ОписаниеОбласти(, "Требования", Неопределено));
	ОбластиМакета.Вставить("Требования", ОписаниеОбласти(Истина, "Требования", Неопределено));
	ОбластиМакета.Вставить("ШапкаУсловия", ОписаниеОбласти(, "Условия", Неопределено));
	ОбластиМакета.Вставить("Условия", ОписаниеОбласти(Истина, "Условия", Неопределено));
	ОбластиМакета.Вставить("ШапкаЭтапыРаботы", ОписаниеОбласти(, "ЭтапыРаботыСКандидатами", Неопределено));
	ОбластиМакета.Вставить("ЭтапыРаботыСКандидатами", ОписаниеОбласти(Истина, "ЭтапыРаботыСКандидатами", Неопределено));
	ОбластиМакета.Вставить("ШапкаПрограммаОбучения", ОписаниеОбласти(, "ПрограммаОбучения", Неопределено));
	ОбластиМакета.Вставить("ПрограммаОбучения", ОписаниеОбласти(Истина, "ПрограммаОбучения", Неопределено));
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПрофилиДолжностей.ПФ_MXL_ПрофильДолжности");
	ФормированиеПечатнойФормы(МассивОбъектов, ТабличныйДокумент,ОбластиМакета, Макет, ОбъектыПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОписаниеОбласти(Табличная = Ложь, КлючевоеПоле = "", ОбластьНаЗамену = "")
	
	Возврат Новый Структура(
		"Табличная,
		|КлючевоеПоле,
		|ОбластьНаЗамену",
		Табличная, КлючевоеПоле, ОбластьНаЗамену);
	
КонецФункции

Процедура ФормированиеПечатнойФормы(МассивОбъектов, ТабличныйДокумент, ОбластиМакета, Макет, ОбъектыПечати)
	
	ДанныеДляПечати = ДанныеДляПечатиПрофиляДолжности(МассивОбъектов);
	ПервыйДокумент = Истина;
	// Вывод форм для субъектов.
	Для Каждого ОписаниеПрофиляДолжности Из ДанныеДляПечати Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		// Формируем печатную форму
		ПрофильФорма = Новый ТабличныйДокумент;
		Для Каждого КлючИЗначение Из ОбластиМакета Цикл
			ИмяОбласти = КлючИЗначение.Ключ;
			ОписаниеОбласти = КлючИЗначение.Значение;
			Если ОписаниеОбласти = Неопределено Тогда
				ОписаниеОбласти = ОписаниеОбласти();
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеОбласти.КлючевоеПоле) Тогда
				Если Не ЗначениеЗаполнено(ОписаниеПрофиляДолжности[ОписаниеОбласти.КлючевоеПоле]) Тогда
					Если (ОписаниеПрофиляДолжности[ОписаниеОбласти.КлючевоеПоле] = Неопределено) ИЛИ (ОписаниеОбласти.ОбластьНаЗамену = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеОбласти.ОбластьНаЗамену) Тогда
						ИмяОбласти = ОписаниеОбласти.ОбластьНаЗамену;
						ОписаниеОбласти = ОписаниеОбласти();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если Не ОписаниеОбласти.Табличная Тогда
				ОбластьМакета.Параметры.Заполнить(ОписаниеПрофиляДолжности);
				ПрофильФорма.Вывести(ОбластьМакета);
				Продолжить;
			КонецЕсли;
			Для Каждого ОписаниеЭлемента Из ОписаниеПрофиляДолжности[ИмяОбласти] Цикл
				ОбластьМакета.Параметры.Заполнить(ОписаниеЭлемента);
				ПрофильФорма.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ПрофильФорма);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОписаниеПрофиляДолжности.ПрофильДолжности);
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаполнениеДанных

// Функция - Структура данных для подготовки печатных форм
//
// Параметры:
//  МассивОбъектов	 - Массив - массив типа СправочникСсылка.ПрофилиДолжностей
// 
// Возвращаемое значение:
//  Массив - массив структур, см. ОписаниеСогласия()
//
Функция ДанныеДляПечатиПрофиляДолжности(МассивОбъектов)
	
	ДанныеДляПечати = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрофилиДолжностей.Ссылка КАК ПрофильДолжности,
		|	ПрофилиДолжностей.Наименование КАК НаименованиеПрофиляДолжности,
		|	ПрофилиДолжностей.Подразделение КАК Подразделение,
		|	ПрофилиДолжностей.Должность КАК Должность,
		|	ПрофилиДолжностей.Обязанности КАК Обязанности,
		|	ПрофилиДолжностей.ХарактеристикиПерсонала.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Характеристика КАК Характеристика,
		|		Характеристика.ВидХарактеристики КАК Вид,
		|		Значение КАК Значение,
		|		Вес КАК Вес,
		|		ТребуетсяПроверка КАК ТребуетсяПроверка,
		|		ТребуетсяОбучение КАК ТребуетсяОбучение,
		|		ВесЗначения КАК ВесЗначения
		|	) КАК ХарактеристикиПерсонала,
		|	ПрофилиДолжностей.ДействияСотрудников.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ДействиеСотрудника КАК ДействиеСотрудника
		|	) КАК ДействияСотрудников,
		|	ПрофилиДолжностей.ПродолжительностьПланаОбучения КАК ПродолжительностьПланаОбучения,
		|	ПрофилиДолжностей.РазмерностьПродолжительностиПланаОбучения КАК РазмерностьПродолжительностиПланаОбучения,
		|	ПрофилиДолжностей.Требования КАК Требования,
		|	ПрофилиДолжностей.Условия КАК Условия,
		|	ПрофилиДолжностей.ЭтапыРаботыСКандидатами.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ЭтапРаботы КАК ЭтапРаботы,
		|		ШаблонАнкеты КАК ШаблонАнкеты
		|	) КАК ЭтапыРаботыСКандидатами
		|ИЗ
		|	Справочник.ПрофилиДолжностей КАК ПрофилиДолжностей
		|ГДЕ
		|	ПрофилиДолжностей.Ссылка В(&ПрофилиДолжностей)");
	
	Запрос.УстановитьПараметр("ПрофилиДолжностей", МассивОбъектов);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОбучениеРазвитиеСотрудников) Тогда
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ПрограммаОбучения.НомерСтроки");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ПрограммаОбучения.Мероприятие");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ПрограммаОбучения.Ответственный");
		ВыбираемыеПоля.Добавить("ПрофилиДолжностей.ПрограммаОбучения.Мероприятие.КоличествоУчебныхЧасов");
		ЧтениеПрограммОбучения = Истина;
	Иначе
		ЧтениеПрограммОбучения = Ложь;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Описание = ОписаниеПрофиляДолжности();
		ИсключаяСвойства = (
		"ДействияСотрудников,
		|ЭтапыРаботыСКандидатами,
		|Обязанности,
		|Требования,
		|Условия");
		Если ЧтениеПрограммОбучения Тогда
			ИсключаяСвойства = ИсключаяСвойства + "," + Символы.ПС + "ПрограммаОбучения";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Описание, Выборка, ,ИсключаяСвойства);
		ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
		
		Если ИспользоватьЭлектронноеИнтервью Тогда
			ЗаполнитьДействияСотрудников(Выборка, Описание);
			ЗаполнитьХарактеристикиПерсонала(Выборка, Описание);
		КонецЕсли;
		ЗаполнитьДанныеДляПубликацииВакансии(Выборка, Описание);
		ЗаполнитьЭтапыРаботыСКандидатом(Выборка, Описание);
		Если ЧтениеПрограммОбучения Тогда
			ЗаполнитьПрограммыОбучения(Выборка, Описание);
		КонецЕсли;
		Если Не ПустаяСтрока(Выборка.НаименованиеПрофиляДолжности) Тогда
			Описание.НаименованиеПрофиляДолжности = Выборка.НаименованиеПрофиляДолжности;
		КонецЕсли;
		ЗаполнитьНаименованиеПрофиляДолжностиВРодительномПадеже(Описание, Выборка.НаименованиеПрофиляДолжности);
		
		ДанныеДляПечати.Добавить(Описание);
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ЗаполнитьДействияСотрудников(Выборка, Описание)
	
	ВыборкаДействияСотрудников = Выборка.ДействияСотрудников.Выбрать();
	Пока ВыборкаДействияСотрудников.Следующий() Цикл
		ОписаниеДействия = ОписаниеДействияСотрудника();
		ЗаполнитьЗначенияСвойств(ОписаниеДействия, ВыборкаДействияСотрудников);
		Описание.ДействияСотрудников.Добавить(ОписаниеДействия);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьХарактеристикиПерсонала(Выборка, Описание)
	
	Знание = Перечисления.ВидыХарактеристикПерсонала.Знание;
	Навык = Перечисления.ВидыХарактеристикПерсонала.Навык;
	ЛичноеКачество = Перечисления.ВидыХарактеристикПерсонала.ЛичноеКачество;
	Прочее = Перечисления.ВидыХарактеристикПерсонала.Прочее;
	НомерЗнания = 1;
	НомерНавыка = 1;
	НомерЛичногоКачества = 1;
	НомерПрочего = 1;
	Характеристики = Новый Массив;
	ХарактеристикаЗначения = Новый Соответствие;
	ХарактеристикаТребуетсяПроверкаОбучение = Новый Соответствие;
	ВыборкаХарактеристикиПерсонала = Выборка.ХарактеристикиПерсонала.Выбрать();
	Пока ВыборкаХарактеристикиПерсонала.Следующий() Цикл
		ОписаниеХарактеристики = ОписаниеХарактеристикиПерсонала();
		ЗаполнитьЗначенияСвойств(ОписаниеХарактеристики, ВыборкаХарактеристикиПерсонала);
		Значения = ХарактеристикаЗначения.Получить(ОписаниеХарактеристики.Характеристика);
		Если Значения = Неопределено Тогда
			Значения = Новый Массив;
			ТребуетсяПроверкаОбучение = Новый Структура;
			Характеристики.Добавить(ОписаниеХарактеристики.Характеристика);
			ТребуетсяПроверкаОбучение.Вставить("ТребуетсяПроверка", ОписаниеХарактеристики.ТребуетсяПроверка);
			ТребуетсяПроверкаОбучение.Вставить("ТребуетсяОбучение", ОписаниеХарактеристики.ТребуетсяОбучение);
			ХарактеристикаТребуетсяПроверкаОбучение.Вставить(ОписаниеХарактеристики.Характеристика, ТребуетсяПроверкаОбучение);
		КонецЕсли;
		Значения.Добавить(ОписаниеХарактеристики.Значение);
		ХарактеристикаЗначения.Вставить(ОписаниеХарактеристики.Характеристика, Значения);
	КонецЦикла;
	
	Для Каждого Элемент Из Характеристики Цикл
		ОписаниеХарактеристики = ОписаниеХарактеристикиПерсонала();
		ОписаниеХарактеристики.Характеристика = Элемент;
		ОписаниеХарактеристики.Значение = СтрСоединить(ХарактеристикаЗначения.Получить(Элемент),", ");
		ЗаполнитьЗначенияСвойств(ОписаниеХарактеристики, ХарактеристикаТребуетсяПроверкаОбучение.Получить(Элемент));
		ОписаниеХарактеристики.ТребуетсяПроверка = Формат(ОписаниеХарактеристики.ТребуетсяПроверка, "БЛ=; БИ=+");
		ОписаниеХарактеристики.ТребуетсяОбучение = Формат(ОписаниеХарактеристики.ТребуетсяОбучение, "БЛ=; БИ=+");
		Если Элемент.ВидХарактеристики = Знание Тогда
			ОписаниеХарактеристики.НомерСтроки = НомерЗнания;
			Описание.Знания.Добавить(ОписаниеХарактеристики);
			НомерЗнания = НомерЗнания + 1;
		ИначеЕсли Элемент.ВидХарактеристики = Навык Тогда
			ОписаниеХарактеристики.НомерСтроки = НомерНавыка;
			Описание.Навыки.Добавить(ОписаниеХарактеристики);
			НомерНавыка = НомерНавыка + 1;
		ИначеЕсли Элемент.ВидХарактеристики = ЛичноеКачество Тогда
			ОписаниеХарактеристики.НомерСтроки = НомерЛичногоКачества;
			Описание.ЛичныеКачества.Добавить(ОписаниеХарактеристики);
			НомерЛичногоКачества = НомерЛичногоКачества + 1;
		ИначеЕсли Элемент.ВидХарактеристики = Прочее Тогда
			ОписаниеХарактеристики.НомерСтроки = НомерПрочего;
			Описание.ПрочиеХарактеристики.Добавить(ОписаниеХарактеристики);
			НомерПрочего = НомерПрочего + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПубликацииВакансии(Выборка, Описание)
	
	Если Не ПустаяСтрока(Выборка.Обязанности) Тогда
		Обязанности = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Обязанности, Символы.ПС, Истина);
		Для Каждого ЭлементМассива Из Обязанности Цикл
		ОписаниеДанных = ОписаниеДанныеДляПубликацииВакансии();
			ОписаниеДанных.СтрокаДанных = ЭлементМассива;
			Описание.Обязанности.Добавить(ОписаниеДанных);
		КонецЦикла;
	КонецЕсли;
	Если Не ПустаяСтрока(Выборка.Требования) Тогда
		Требования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Требования, Символы.ПС, Истина);
		Для Каждого ЭлементМассива Из Требования Цикл
			ОписаниеДанных = ОписаниеДанныеДляПубликацииВакансии();
			ОписаниеДанных.СтрокаДанных = ЭлементМассива;
			Описание.Требования.Добавить(ОписаниеДанных);
		КонецЦикла;
	КонецЕсли;
	Если Не ПустаяСтрока(Выборка.Условия) Тогда
		Условия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Условия, Символы.ПС, Истина);
		Для Каждого ЭлементМассива Из Условия Цикл
			ОписаниеДанных = ОписаниеДанныеДляПубликацииВакансии();
			ОписаниеДанных.СтрокаДанных = ЭлементМассива;
			Описание.Условия.Добавить(ОписаниеДанных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭтапыРаботыСКандидатом(Выборка, Описание)
	
	ШаблоныАнкет = Новый Массив;
	ВыборкаЭтапыРаботыСКандидатами = Выборка.ЭтапыРаботыСКандидатами.Выбрать();
	Пока ВыборкаЭтапыРаботыСКандидатами.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЭтапыРаботыСКандидатами.ШаблонАнкеты) Тогда
			ШаблоныАнкет.Добавить(ВыборкаЭтапыРаботыСКандидатами.ШаблонАнкеты);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью") Тогда
		МодульЭлектронноеИнтервью = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеИнтервью");
		КоличествоВопросовПоШаблонамАнкет = МодульЭлектронноеИнтервью.КоличествоВопросовВШаблонахАнкет(ШаблоныАнкет);
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыборкаЭтапыРаботыСКандидатами.Сбросить();
	Пока ВыборкаЭтапыРаботыСКандидатами.Следующий() Цикл
		ОписаниеЭтапа = ОписаниеЭтапаРаботыСКандидатом();
		ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, ВыборкаЭтапыРаботыСКандидатами);
		Если ЗначениеЗаполнено(ВыборкаЭтапыРаботыСКандидатами.ШаблонАнкеты) И КоличествоВопросовПоШаблонамАнкет <> Неопределено Тогда
			ОписаниеЭтапа.ШаблонАнкеты = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';Предусмотрена анкета: %1 вопрос;;Предусмотрена анкета: %1 вопроса;Предусмотрена анкета: %1 вопросов;'"),
				КоличествоВопросовПоШаблонамАнкет[ОписаниеЭтапа.ШаблонАнкеты]);
		Иначе
			ОписаниеЭтапа.ШаблонАнкеты = НСтр("ru = 'Анкета не предусмотрена'");
		КонецЕсли;
		Описание.ЭтапыРаботыСКандидатами.Добавить(ОписаниеЭтапа);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПрограммыОбучения(Выборка, Описание)
	
	Описание.ПродолжительностьПланаОбучения =
		ЗарплатаКадрыКлиентСервер.ПредставлениеПоПериодичности(Выборка.ПродолжительностьПланаОбучения, Выборка.РазмерностьПродолжительностиПланаОбучения);
	
	ВыборкаПрограммаОбучения = Выборка.ПрограммаОбучения.Выбрать();
	Пока ВыборкаПрограммаОбучения.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПрограммаОбучения.Мероприятие) Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеПрограммы = ОписаниеПрограммыОбучения();
		ЗаполнитьЗначенияСвойств(ОписаниеПрограммы, ВыборкаПрограммаОбучения);
		ОписаниеПрограммы.КоличествоЧасов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 час;;%1 часа;%1 часов;'"),
			ВыборкаПрограммаОбучения.МероприятиеКоличествоУчебныхЧасов);
		Описание.ПрограммаОбучения.Добавить(ОписаниеПрограммы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличныеДанные

Функция ОписаниеДействияСотрудника()
	
	Описание = Новый Структура(
		"НомерСтроки, 
		|ДействиеСотрудника");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеХарактеристикиПерсонала()
	
	Описание = Новый Структура(
		"НомерСтроки,
		|Характеристика,
		|Значение,
		|ТребуетсяПроверка,
		|ТребуетсяОбучение");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеДанныеДляПубликацииВакансии()
	
	Описание = Новый Структура("СтрокаДанных");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеЭтапаРаботыСКандидатом()
	
	Описание = Новый Структура(
		"НомерСтроки,
		|ЭтапРаботы,
		|ШаблонАнкеты");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеПрограммыОбучения()
	
	Описание = Новый Структура(
		"Мероприятие,
		|КоличествоЧасов,
		|Ответственный,
		|ШаблонАнкеты");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеПрофиляДолжности()
	
	ОписаниеПрофиляДолжности = Новый Структура(
		"ПрофильДолжности,
		|Подразделение,
		|Обязанности,
		|Требования,
		|Условия,
		|НаименованиеПрофиляДолжности,
		|НаименованиеПрофиляДолжностиВРодительномПадеже, 
		|ДействияСотрудников,
		|Знания,
		|Навыки,
		|ЛичныеКачества,
		|ПрочиеХарактеристики,
		|Должность,
		|ЭтапыРаботыСКандидатами,
		|ПродолжительностьПланаОбучения,
		|РазмерностьПродолжительностиПланаОбучения,
		|ПрограммаОбучения");
	ОписаниеПрофиляДолжности.ДействияСотрудников = 		Новый Массив;
	ОписаниеПрофиляДолжности.Знания = 					Новый Массив;
	ОписаниеПрофиляДолжности.Навыки = 					Новый Массив;
	ОписаниеПрофиляДолжности.ЛичныеКачества = 			Новый Массив;
	ОписаниеПрофиляДолжности.ПрочиеХарактеристики = 	Новый Массив;
	ОписаниеПрофиляДолжности.ЭтапыРаботыСКандидатами =	Новый Массив;
	ОписаниеПрофиляДолжности.ПрограммаОбучения = 		Новый Массив;
	ОписаниеПрофиляДолжности.Обязанности = 				Новый Массив;
	ОписаниеПрофиляДолжности.Требования = 				Новый Массив;
	ОписаниеПрофиляДолжности.Условия = 					Новый Массив;
	ОписаниеПрофиляДолжности.НаименованиеПрофиляДолжностиВРодительномПадеже = ОписаниеПрофиляДолжности.НаименованиеПрофиляДолжности;
	
	Возврат ОписаниеПрофиляДолжности;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьНаименованиеПрофиляДолжностиВРодительномПадеже(ОписаниеПрофиляДолжности, НаименованиеПрофиляДолжности)
	Если ПустаяСтрока(НаименованиеПрофиляДолжности) Тогда
		ОписаниеПрофиляДолжности.НаименованиеПрофиляДолжностиВРодительномПадеже = ОписаниеПрофиляДолжности.НаименованиеПрофиляДолжности;
		Возврат;
	КонецЕсли;
	ОписаниеПрофиляДолжности.НаименованиеПрофиляДолжностиВРодительномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(НаименованиеПрофиляДолжности, 2);
КонецПроцедуры

#КонецОбласти

#КонецЕсли
