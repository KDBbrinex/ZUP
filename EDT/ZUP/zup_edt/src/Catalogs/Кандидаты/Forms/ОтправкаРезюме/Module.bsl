#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИспользуетсяПочтовыйКлиент = ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент");
	СпособФормированияПисем = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСКандидатом;
	ВложитьПрисоединенныеФайлы = Истина;
	ЗаполнитьУчетнуюЗапись();
	ЗаполнитьКандидатов(Параметры.Кандидаты);
	ЗаполнитьПолучателей();
	ОбновитьРезультатыОтправки();
	ЗаполнитьСписокДоступныхШаблонов();
	ЗагрузитьПользовательскиеНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ПриЗаписиШаблонаСообщений(ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана учетная запись электронной почты'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "УчетнаяЗапись", , Отказ);
	КонецЕсли;
	
	Если Не АдресаПолучателейЗаполнены(ЭтотОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнены адреса получателей писем'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Получатели", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправительПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если УчетнаяЗапись = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;

	УчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияПисемПриИзменении(Элемент)
	СпособФормированияПисемПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПриИзменении(Элемент)
	ОбновитьРезультатыОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = АдресЭлектроннойПочтыИзСтроки(ДанныеСтроки.Представление);
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Адрес, "@") = 0 Или СтрНайти(Адрес, ".") = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо ввести адрес электронной почты'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Адрес = СокрЛП(Адрес);

	ПроверитьНаличиеАдресаВСпискеПолучателей(Отказ, Адрес);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРезультатыОтправки();

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)

	Если Получатели.Количество() = 1 Тогда
		Отказ = Истина;
		Получатели[0].Представление = "";
		Получатели[0].Адрес = "";
		Получатели[0].Контакт = Неопределено;
	КонецЕсли;
	
	ОбновитьРезультатыОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВариантОтправки = ВариантыОтправки().Кому;
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Получатели.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Контакт = Неопределено;
	ДанныеСтроки.Адрес = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Если Элементы.Получатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВариантОтправки = Элементы.Получатели.ТекущиеДанные.ВариантОтправки;
	РедактироватьСписокПолучателей(ГруппаПодбораПоВариантуОтправки(ВариантОтправки));

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораДляЭлектронногоПисьма(Текст, 0);
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		ДанныеВыбора = Неопределено
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
		ТекущиеДанные.Адрес = ВыбранноеЗначение.Адрес;
		ТекущиеДанные.Представление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(
			ВыбранноеЗначение.Представление, ВыбранноеЗначение.Адрес, "");
		ТекущиеДанные.Контакт = ВыбранноеЗначение.Контакт;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Получатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.Получатели.ТекущиеДанные.Контакт);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеОтправки

&НаКлиенте
Процедура ДанныеОтправкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДанныеСтроки = ДанныеОтправки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не АдресаПолучателейЗаполнены(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Получатели[0].Контакт) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура(
		"Кандидат,
		|Получатель");
	ПараметрыФормы.Кандидат = ДанныеСтроки.Резюме;
	ПараметрыФормы.Получатель = Получатели[0].Контакт;
	
	ОткрытьФорму("РегистрСведений.ОтправкаРезюме.Форма.РезультатОтправки", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблоны

&НаКлиенте
Процедура ШаблоныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование И Не Группа Тогда
		СоздатьНовыйШаблон(Элемент.ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;

	СоздатьНовыйШаблон();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыбранныйШаблон = Элемент.ТекущиеДанные.Ссылка;

	Если Элемент.ТекущиеДанные.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
		Элементы.СтраницыПредпросмотра.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		ПодключитьОбработчикОжидания("ОбновитьДанныеПредпросмотра", 0.2, Истина);
	Иначе
		Элементы.СтраницыПредпросмотра.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		ПредпросмотрОбычныйТекст.УстановитьТекст(Элемент.ТекущиеДанные.ТекстШаблона);
	КонецЕсли;

	ПодключитьОбработчикОжидания("ПроверитьВидимостьПредупрежденияОбОтсутствииВложенийШаблона", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьШаблон(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьШаблон(Шаблоны.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОтправкуРезюме();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокДоступныхШаблонов()
	
	ВыбранныйШаблон = Неопределено;
	
	Запрос = ШаблоныСообщенийСлужебный.ПодготовитьЗапросДляПолученияСпискаШаблонов(
		"Письмо", Метаданные.Справочники.Кандидаты.ПолноеИмя(), СпособФормированияПисем);
	Шаблоны.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Шаблоны.Сортировать("Представление");
	
	ПерваяСтрока = Шаблоны.Вставить(0);
	ПерваяСтрока.Имя = "<БезШаблона>";
	ПерваяСтрока.Представление = НСтр("ru = '<Без шаблона>'");

	ВыбранныйШаблон = Шаблоны[0].Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйШаблон(ЗначениеКопирования = Неопределено)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидСообщения"          , "Письмо");
	ПараметрыФормы.Вставить("ПолноеИмяТипаОснования", "Справочники.Кандидаты");
	ПараметрыФормы.Вставить("ТолькоДляАвтора",        Истина);
	ПараметрыФормы.Вставить("ВладелецШаблона",        СпособФормированияПисем);
	ПараметрыФормы.Вставить("ЗначениеКопирования",    ЗначениеКопирования);
	ПараметрыФормы.Вставить("Новый",                  Истина);
	
	ОткрытьФорму("Справочник.ШаблоныСообщений.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуРезюме()

	ОчиститьРезультатыОтправки();
	
	ДлительнаяОперация = ДлительнаяОперацияОтправкиРезюме();

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет отправка резюме'");
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Отправлено'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Отправка резюме'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьОтправкуРезюме", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияОтправкиРезюме()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		"Справочники.Кандидаты.ОтправитьРезюмеКандидатов", 
		ВыбранныйШаблон, 
		ДанныеОтправки.Выгрузить().ВыгрузитьКолонку("Резюме"), 
		Получатели.Выгрузить(), 
		УчетнаяЗапись, 
		ВложитьПрисоединенныеФайлы);
		
КонецФункции

&НаКлиенте
Процедура ЗавершитьОтправкуРезюме(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ЗавершитьОтправкуРезюмеНаСервере(Результат.АдресРезультата);
	СообщитьРезультатыОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьРезультатыОтправки()
	
	Отправлено = ДанныеОтправки.НайтиСтроки(Новый Структура("Отправлено", Истина)).Количество();
	Если Отправлено = ДанныеОтправки.Количество() Тогда
		ТекстПредупреждения = НСтр("ru = 'Все резюме успешно отправлены.'");
		Если ИспользуетсяПочтовыйКлиент Тогда 
			ТекстПредупреждения = ТекстПредупреждения 
				+ Символы.ПС 
				+ НСтр("ru = 'Электронные письма можно найти в разделе Взаимодействия кандидата.'");
		КонецЕсли;
		ОбработчикОповещения = Новый ОписаниеОповещения("ЗавершитьРаботуФормы", ЭтотОбъект);
		ПоказатьПредупреждение(ОбработчикОповещения, ТекстПредупреждения, , НСтр("ru = 'Все резюме отправлены'"));
		Возврат;
	КонецЕсли;

	Если Отправлено > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Некоторые резюме не были отправлены.
								   |С причинами можно ознакомиться, выбрав строку с не отправленным письмом в списке резюме.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , НСтр("ru = 'Не все резюме отправлены'"));
		Возврат;
	КонецЕсли;

	ТекстПредупреждения = НСтр("ru = 'Не удалось отправить резюме.
							   |С причинами можно ознакомиться, выбрав строку с не отправленным письмом в списке резюме.'");
	ПоказатьПредупреждение(, ТекстПредупреждения, , НСтр("ru = 'Резюме не отправлены'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьОтправкуРезюмеНаСервере(АдресРезультата)
	
	Если АдресРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРезультатыОтправки(ПолучитьИзВременногоХранилища(АдресРезультата));
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуФормы(ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыОтправки(РезультатыОтправки)
	
	Если РезультатыОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Резюме");
	Для Каждого КлючИЗначение Из РезультатыОтправки Цикл
		ОтборСтрок.Резюме = КлючИЗначение.Ключ;
		РезультатОтправки = КлючИЗначение.Значение;
		НайденныеСтроки = ДанныеОтправки.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Отправлено = РезультатОтправки.Отправлено;
			НайденнаяСтрока.ДатаОтправления = РезультатОтправки.ДатаОтправления;
			НайденнаяСтрока.Комментарий = РезультатОтправки.ОписаниеОшибки;
			НайденнаяСтрока.КартинкаСостояния = КартинкаСостояния(РезультатОтправки.Отправлено);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартинкаСостояния(Состояние)

	Если Состояние = Истина Тогда
		Возврат БиблиотекаКартинок.ЗеленыйСигнал;
	ИначеЕсли Состояние = Ложь Тогда
		Возврат БиблиотекаКартинок.КрасныйШар;
	Иначе
		Возврат БиблиотекаКартинок.СерыйСигнал;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СохранитьПользовательскиеНастройки()
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("ОтправкаРезюме", "Шаблон", ВыбранныйШаблон);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройки()
	ШаблонИзНастроек = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ОтправкаРезюме", "Шаблон"); 
	УстановитьВыбранныйШаблон(ШаблонИзНастроек);
	УстановитьВидимостьПредупрежденияОбОтсутствииВложенийШаблона(ЭтотОбъект, ШаблонИзНастроек);
КонецПроцедуры

&НаСервере
Процедура УстановитьВыбранныйШаблон(Шаблон)
	
	Если Шаблон = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Шаблоны.НайтиСтроки(Новый Структура("Ссылка", Шаблон));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Шаблоны.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	ВыбранныйШаблон = Шаблон;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетнуюЗапись()

	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(
		Элементы.ОтправительПредставление.СписокВыбора, ДоступныеДляОтправкиУчетныеЗаписи);
		
	Если УчетнаяЗапись.Пустая()
		И ДоступныеДляОтправкиУчетныеЗаписи.Количество() > 0 Тогда
		УчетнаяЗапись = ДоступныеДляОтправкиУчетныеЗаписи[0].УчетнаяЗапись;
	КонецЕсли;
	
	ЭлементСписка = Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(УчетнаяЗапись);
	Если ЭлементСписка <> Неопределено Тогда
		ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКандидатов(КандидатыМассив)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ДанныеОтправки, КандидатыМассив, "Резюме");
	Если ДанныеОтправки.Количество() = 1 Тогда
		Элементы.СпособФормированияПисемГруппа.Видимость = Ложь;
		СпособФормированияПисем = Перечисления.ИспользованиеШаблоновСообщенийПриПодбореПерсонала.ОзнакомлениеСКандидатом;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтроковыйКонтактВзаимодействия(Представление)
	Возврат Справочники.СтроковыеКонтактыВзаимодействий.НайтиПоНаименованию(Представление, Истина);
КонецФункции

&НаСервере
Процедура ОбновитьРезультатыОтправки()
	
	ОчиститьРезультатыОтправки();
	
	Если Не АдресаПолучателейЗаполнены(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПолучателя Из Получатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПолучателя.Контакт) Тогда
			СтрокаПолучателя.Контакт = СтроковыйКонтактВзаимодействия(СтрокаПолучателя.Представление);
		КонецЕсли;
	КонецЦикла;
	
	// Запрашиваем данные отправки всем получателям.
	ВыбранныеПолучатели = ОбщегоНазначения.ВыгрузитьКолонку(Получатели, "Контакт", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатели", ВыбранныеПолучатели);
	Запрос.УстановитьПараметр("Кандидаты", ДанныеОтправки.Выгрузить().ВыгрузитьКолонку("Резюме"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтправкаРезюме.Кандидат КАК Кандидат,
		|	ОтправкаРезюме.Получатель КАК Получатель,
		|	ОтправкаРезюме.ДатаОтправления КАК ДатаОтправления,
		|	ОтправкаРезюме.Отправлено,
		|	ОтправкаРезюме.Комментарий
		|ИЗ
		|	РегистрСведений.ОтправкаРезюме ОтправкаРезюме
		|ГДЕ
		|	Кандидат В (&Кандидаты)
		|	И Получатель В (&Получатели)
		|УПОРЯДОЧИТЬ ПО
		|	Кандидат,
		|	ДатаОтправления";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	РезультатыОтправки = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Кандидат") Цикл
		СохраненныеПолучатели = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СохраненныеПолучатели.Добавить(Выборка.Получатель);
		КонецЦикла;
		Если СохраненныеПолучатели.Количество() = ВыбранныеПолучатели.Количество() Тогда
			// Данные этого резюме ранее отправлялись всем получателям.
			РезультатОтправки = РегистрыСведений.ОтправкаРезюме.ОписаниеРезультатаОтправки();
			ЗаполнитьЗначенияСвойств(РезультатОтправки, Выборка);
			РезультатыОтправки.Вставить(Выборка.Кандидат, РезультатОтправки);
		КонецЕсли 
	КонецЦикла;
	
	ЗаполнитьРезультатыОтправки(РезультатыОтправки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АдресаПолучателейЗаполнены(Форма)
	Получатели = Форма.Получатели;
	Возврат Получатели.Количество() > 1 Или Получатели.Количество() = 1 И ЗначениеЗаполнено(Получатели[0].Адрес);
КонецФункции

&НаСервере
Процедура ОчиститьРезультатыОтправки()

	Для Каждого СтрокаКоллекции Из ДанныеОтправки Цикл
		СтрокаКоллекции.Отправлено = Неопределено;
		СтрокаКоллекции.ДатаОтправления = Неопределено;
		СтрокаКоллекции.Комментарий = Неопределено;
		СтрокаКоллекции.КартинкаСостояния = КартинкаСостояния(СтрокаКоллекции.Отправлено);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателей()

	ПолучателиМассив = Новый Массив;
	ЗаполнитьПолучателейЗаявителямиВакансийКандидатов(
		ПолучателиМассив, ДанныеОтправки.Выгрузить().ВыгрузитьКолонку("Резюме"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПолучателиМассив, Получатели);
	
	Если Получатели.Количество() = 0 Тогда
		Получатели.Добавить();
		Получатели[0].ВариантОтправки = ВариантыОтправки().Кому;
		Получатели[0].Представление = "";
		Получатели[0].Адрес = "";
		Получатели[0].Контакт = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейЗаявителямиВакансийКандидатов(Получатели, Кандидаты)

	Вакансии = Справочники.Кандидаты.ДанныеКандидатов(Кандидаты).ВыгрузитьКолонку("Вакансия");
	ЗаявителиПользователи = Справочники.Вакансии.ДанныеВакансий(Вакансии).ВыгрузитьКолонку("Заявитель");
	ЗаявителиФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаявителиПользователи, "ФизическоеЛицо"),
		"Значение"); 

	Для Каждого Заявитель Из ЗаявителиФизическиеЛица Цикл
		ДобавитьПолучателя(Получатели, Заявитель);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателя(Получатели, ФизическоеЛицо)
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтакта = ВзаимодействияВызовСервера.НаименованиеИАдресаЭлектроннойПочтыКонтакта(ФизическоеЛицо);
	
	НоваяСтрока = ПодборПерсоналаКлиентСервер.ОписаниеПолучателяРезюме(); 
	НоваяСтрока.Адрес = ДанныеКонтакта.Адреса[0].Значение;
	НоваяСтрока.Контакт = ФизическоеЛицо;
	НоваяСтрока.Представление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(
		ДанныеКонтакта.Наименование, 
		НоваяСтрока.Адрес,
		"");
	НоваяСтрока.ВариантОтправки = ПодборПерсоналаКлиентСервер.ВариантыОтправкиСообщенияРезюме().Кому; 
	
	Получатели.Добавить(НоваяСтрока);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПредупрежденияОбОтсутствииВложенийШаблона(Форма, ШаблонПисьма)
	
	ПоказыватьПредупреждение = Ложь;
	Если ЗначениеЗаполнено(ШаблонПисьма) И Не ШаблонИмеетВложения(ШаблонПисьма) Тогда
		ПоказыватьПредупреждение = Истина;
	КонецЕсли;

	Форма.Элементы.ПредупреждениеОбОтсутствииВложенийГруппа.Видимость = ПоказыватьПредупреждение;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВидимостьПредупрежденияОбОтсутствииВложенийШаблона()
	УстановитьВидимостьПредупрежденияОбОтсутствииВложенийШаблона(ЭтотОбъект, ЭтотОбъект.ВыбранныйШаблон);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШаблонИмеетВложения(Шаблон)
	ДанныеШаблона = ШаблоныСообщений.ПараметрыШаблона(Шаблон);
	Возврат ДанныеШаблона.ВыбранныеВложения.Количество() > 0;
КонецФункции

&НаКлиенте
Процедура ПриЗаписиШаблонаСообщений(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_ШаблоныСообщений" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр <> ВыбранныйШаблон Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьПредупрежденияОбОтсутствииВложенийШаблона(ЭтотОбъект, ВыбранныйШаблон);
	
КонецПроцедуры

&НаКлиенте
Функция АдресЭлектроннойПочтыИзСтроки(ПредставлениеПолучателя)
	
	Адрес = "";
	
	ПозицияНачало = СтрНайти(ПредставлениеПолучателя, "<");
	Если ПозицияНачало > 0 Тогда
		ПозицияОкончание = СтрНайти(ПредставлениеПолучателя, ">", НаправлениеПоиска.СНачала, ПозицияНачало);
		Если ПозицияОкончание > 0 Тогда
			Адрес = Сред(ПредставлениеПолучателя, ПозицияНачало + 1, ПозицияОкончание - ПозицияНачало - 1);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Тогда
		Адрес = ПредставлениеПолучателя;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНаличиеАдресаВСпискеПолучателей(Отказ, Адрес)

	Отбор = Новый Структура("Адрес", Адрес);
	НайденныеСтроки = Получатели.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Адрес %1 уже есть в списке.'"), Адрес);
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		ТекстСообщения, , 
		"СписокПолучателей[" + Строка(Получатели.Индекс(НайденныеСтроки[0])) + "].Представление", , 
		Отказ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораДляЭлектронногоПисьма(Текст, ИндексВСпискеПолучателей)
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СправочникКонтакт.Ссылка КАК Контакт,
	|	ПРЕДСТАВЛЕНИЕ(СправочникКонтакт.Ссылка) КАК Представление,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК АдресЭП 
	|ИЗ
	|	Справочник.Пользователи КАК СправочникКонтакт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = СправочникКонтакт.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И (ТаблицаКонтактнаяИнформация.АдресЭП <> """"))
	|ГДЕ
	|	(СправочникКонтакт.Наименование ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			УсловиеПолейВводаПоСтроке = "";
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ЭлементМассиваОписания.Тип);
			СписокПолей = МетаданныеОбъекта.ВводПоСтроке;
			Для Каждого Поле Из СписокПолей Цикл
				Если МетаданныеОбъекта.СтандартныеРеквизиты[Поле.Имя].Тип.Типы()[0] = Тип("Строка") Тогда
					УсловиеПолейВводаПоСтроке = УсловиеПолейВводаПоСтроке + " ИЛИ СправочникКонтакт." + Поле.Имя + " ПОДОБНО &ВведеннаяСтрока";
				КонецЕсли;
			КонецЦикла;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СправочникКонтакт.Ссылка                                                           КАК Контакт,
			|	СправочникКонтакт." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Представление,
			|	ТаблицаКонтактнаяИнформация.АдресЭП                                                КАК АдресЭП
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК СправочникКонтакт
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = СправочникКонтакт.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И (ТаблицаКонтактнаяИнформация.АдресЭП <> """"))
			|ГДЕ
			|	(ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
			|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
			|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока 
			|" + УсловиеПолейВводаПоСтроке + ") 
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВведеннаяСтрока", Текст + "%");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Контакт", Выборка.Контакт);
		ЗначениеВыбора.Вставить("Адрес", Выборка.АдресЭП);
		ЗначениеВыбора.Вставить("Представление", Выборка.Представление);
		ЗначениеВыбора.Вставить("ИндексВСпискеПолучателей", ИндексВСпискеПолучателей);
		ВозвращаемыйСписок.Добавить(ЗначениеВыбора, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Выборка.Представление, Выборка.АдресЭП, ""));
		
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ВариантыОтправки()
	Возврат ПодборПерсоналаКлиентСервер.ВариантыОтправкиСообщенияРезюме();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГруппыПодбораПолучателей()
	ГруппыПодбора = Новый Соответствие;
	ГруппыПодбора.Вставить(ВариантыОтправки().Кому, "Кому");
	ГруппыПодбора.Вставить(ВариантыОтправки().Копия, "Копии");
	ГруппыПодбора.Вставить(ВариантыОтправки().СкрытаяКопия, "Скрытые");
	Возврат ГруппыПодбора;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГруппаПодбораПоВариантуОтправки(ВариантОтправки)
	
	ГруппаПодбора = ГруппыПодбораПолучателей()[ВариантОтправки];
	Если ГруппаПодбора = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ГруппаПодбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтправкиПоГруппеПодбора(ГруппаПодбора)
	Возврат ВариантыОтправки().Кому; // Временное решение, пока шаблоны сообщений не поддерживают варианты отправки.
КонецФункции

&НаКлиенте
Функция ОписаниеПолучателя()
	Возврат ПодборПерсоналаКлиентСервер.ОписаниеПолучателяРезюме();
КонецФункции

&НаКлиенте
Процедура РедактироватьСписокПолучателей(ГруппаПодбора = "")
	
	ПолучателиПисьма = Новый Массив;
	ПолучателиКопий = Новый Массив;
	ПолучателиСкрытыхКопий = Новый Массив;
	Для Каждого Получатель Из Получатели Цикл
		НоваяСтрока = ОписаниеПолучателя();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Получатель);
		Если Получатель.ВариантОтправки = ВариантыОтправки().Копия Тогда
			ПолучателиКопий.Добавить(НоваяСтрока);
		ИначеЕсли Получатель.ВариантОтправки = ВариантыОтправки().СкрытаяКопия Тогда
			ПолучателиСкрытыхКопий.Добавить(НоваяСтрока);
		Иначе
			ПолучателиПисьма.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Получим список адресатов
	СоответствиеТабличныхЧастей = Новый Соответствие;
	СоответствиеТабличныхЧастей.Вставить("Кому", ПолучателиПисьма);
	СоответствиеТабличныхЧастей.Вставить("Копии", ПолучателиКопий);
	СоответствиеТабличныхЧастей.Вставить("Скрытые", ПолучателиСкрытыхКопий);
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из СоответствиеТабличныхЧастей Цикл
		СписокВыбранных.Добавить(
			УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(КлючИЗначение.Значение), КлючИЗначение.Ключ);
	КонецЦикла;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", ?(ПустаяСтрока(ГруппаПодбора), НСтр("ru = 'Кому'"), ГруппаПодбора));
	
	// Откроем форму для редактирования списка адресатов.
	ОповещениеПослеЗакрытия = Новый ОписаниеОповещения("ПослеЗаполненияАдреснойКниги", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.АдреснаяКнига", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеПослеЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияАдреснойКниги(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПодобранныхПолучателейПослеВыбора(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателейПослеВыбора(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") И ТипЗнч(ВыбранноеЗначение) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним адресатов
	ЗаполнитьПодобранныхПолучателей(ВыбранноеЗначение);
	
	ОбновитьРезультатыОтправки();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(Результат)
	
	Получатели.Очистить();
	
	МассивРанееДобавленныхАдресов = Новый Массив;
	
	Для Каждого Элемент Из Результат Цикл
		Если МассивРанееДобавленныхАдресов.Найти(Элемент.Адрес) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Получатели.Добавить();
		НоваяСтрока.ВариантОтправки = ВариантОтправкиПоГруппеПодбора(Элемент.Группа);
		НоваяСтрока.Адрес = Элемент.Адрес;
		НоваяСтрока.Контакт = Элемент.Контакт;
		НоваяСтрока.Представление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(
			ОбработанноеПредставлениеАдресата(Элемент.Представление), 
			Элемент.Адрес, 
			"");
		МассивРанееДобавленныхАдресов.Добавить(НоваяСтрока.Адрес);
	КонецЦикла
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработанноеПредставлениеАдресата(ПредставлениеАдресата)

	ПредставлениеАдресата = СтрЗаменить(ПредставлениеАдресата, ",", "");
	ПредставлениеАдресата = СтрЗаменить(ПредставлениеАдресата, ";", "");
	
	Возврат ПредставлениеАдресата;

КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеПредпросмотра()
	
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьHTMLВФорматированныйДокумент(ТекущиеДанные.ТекстШаблона, ТекущиеДанные.Ссылка);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьHTMLВФорматированныйДокумент(ТекстШаблонаПисьмаHTML, СсылкаНаТекущийОбъект);
	
	ПараметрШаблона = Новый Структура("Шаблон, УникальныйИдентификатор");
	ПараметрШаблона.Шаблон = СсылкаНаТекущийОбъект;
	ПараметрШаблона.УникальныйИдентификатор = УникальныйИдентификатор;
	Сообщение = ШаблоныСообщенийСлужебный.КонструкторСообщения();
	Сообщение.Текст = ТекстШаблонаПисьмаHTML;
	ШаблоныСообщенийСлужебный.ОбработатьHTMLДляФорматированногоДокумента(ПараметрШаблона, Сообщение, Истина);
	СтруктураВложений = Новый Структура();
	Для Каждого ВложениеВHTML Из Сообщение.Вложения Цикл
		Изображение = Новый Картинка(ПолучитьИзВременногоХранилища(ВложениеВHTML.АдресВоВременномХранилище));
		СтруктураВложений.Вставить(ВложениеВHTML.Представление, Изображение);
	КонецЦикла;
	ПредпросмотрФорматированныйДокумент.УстановитьHTML(Сообщение.Текст, СтруктураВложений);
	
КонецПроцедуры

&НаСервере
Процедура СпособФормированияПисемПриИзмененииНаСервере()
	ЗаполнитьСписокДоступныхШаблонов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблон(ШаблонПисьма)

	Если Не ЗначениеЗаполнено(ШаблонПисьма) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Ключ", ШаблонПисьма);
	ОткрытьФорму("Справочник.ШаблоныСообщений.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

#КонецОбласти