#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ЗаполнитьНовыйОбъект();
	КонецЕсли;
	
	ЗаполнитьПоПрофилюДолжности(ДанныеЗаполнения);
	ЗаполнитьПоЗаявкеНаПодборПерсонала(ДанныеЗаполнения);
	ЗаполнитьПоСотруднику(ДанныеЗаполнения);
	ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеПозиции(Отказ, ПроверяемыеРеквизиты);
	ПроверитьЗаполнениеДолжности(Отказ, ПроверяемыеРеквизиты);
	ПроверитьЗаполнениеПодразделения(Отказ, ПроверяемыеРеквизиты);
	
	// По одной заявке допустимо создавать только одну вакансию.
	Если ЕстьДругиеВакансииПоЗаявке(Основание, Ссылка) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По заявке %1 уже существуют ранее зарегистрированные вакансии.'"), Основание);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("ЗаписьИзФормы") Или ДополнительныеСвойства["ЗаписьИзФормы"] = Ложь Тогда
		ПроверитьНаличиеВакансийМассовогоНабора(Отказ);
	КонецЕсли;
	
	Если Ссылка.Пустая() Тогда
		Если Не СоответствуетПрофилюДолжности Тогда
			ЭлектронноеИнтервью.СкопироватьНастройкиЭтапов(ЭтотОбъект, "Вакансии");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПризнакиИзмененности();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Изменены") И ДополнительныеСвойства.Изменены.Найти("ЭтапыРаботыСКандидатамиИзменены") <> Неопределено Тогда
		ЭлектронноеИнтервью.ОтменитьАнкетыУдаленныхЭтапов(Ссылка);
	КонецЕсли;
	
	ОбновитьКандидатовПоВакансии();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоПрофилюДолжности(Профиль, ЗаполнятьПозициюШтатногоРасписания = Истина, ДанныеПрофиля = Неопределено) Экспорт
	
	Если ТипЗнч(Профиль) <> Тип("СправочникСсылка.ПрофилиДолжностей") Тогда
		Возврат;
	КонецЕсли;
	
	ПрофильДолжности = Профиль;
	
	Если ДанныеПрофиля = Неопределено Тогда
		ПараметрыПолучения = Справочники.ПрофилиДолжностей.ПараметрыПолученияДанныхПрофиляДолжности();
		ПараметрыПолучения.ЭтапыРаботыСКандидатами = Истина;
		ДанныеПрофиля = Справочники.ПрофилиДолжностей.ДанныеПрофиляДолжности(Профиль, ПараметрыПолучения);
	КонецЕсли;
	
	Если ЗаполнятьПозициюШтатногоРасписания Тогда
		ПодобратьПозициюПодразделениеДолжностьПоПрофилюДолжности(ДанныеПрофиля);
	КонецЕсли;
	
	Если ДанныеПрофиля.Свойство("ХарактеристикиПерсонала") Тогда
		ХарактеристикиПерсонала.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПрофиля.ХарактеристикиПерсонала, ХарактеристикиПерсонала);
	КонецЕсли;
	Если ДанныеПрофиля.Свойство("ДействияСотрудников") Тогда
		ДействияСотрудников.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПрофиля.ДействияСотрудников, ДействияСотрудников);
	КонецЕсли;
	
	Требования = ДанныеПрофиля.Требования;
	Обязанности = ДанныеПрофиля.Обязанности;
	Условия = ДанныеПрофиля.Условия;
	
	ЭтапыРаботыСКандидатами.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПрофиля.ЭтапыРаботыСКандидатами, ЭтапыРаботыСКандидатами);

	СоответствуетПрофилюДолжности = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПоПозицииШтатногоРасписания(ПозицияШтатногоРасписания, ЗаполнятьПрофильДолжности = Истина, ЗаполнятьПоПрофилюДолжности = Истина) Экспорт
	
	Позиция = ПозицияШтатногоРасписания;
	
	ДанныеПозиции = Справочники.ШтатноеРасписание.ДанныеПозицииШтатногоРасписания(ПозицияШтатногоРасписания);
	
	Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
	ПредполагаемыйДоход = ДанныеПозиции.ФОТ;
	Должность = ДанныеПозиции.Должность;
	
	ЗаполнитьЗаявителяРуководителемПодразделения();
	
	Если Не ЗаполнятьПрофильДолжности Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеПозиции.Свойство("ПрофильДолжности") Или Не ЗначениеЗаполнено(ДанныеПозиции.ПрофильДолжности) Тогда
		Возврат;
	КонецЕсли;
	
	ПрофильДолжности = ДанныеПозиции.ПрофильДолжности;
	
	Если ЗаполнятьПоПрофилюДолжности Тогда
		ЗаполнитьПоПрофилюДолжности(ПрофильДолжности, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаявителяРуководителемПодразделения() Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	Заявитель = Неопределено;
	
	ДанныеРуководителя = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		ДанныеРуководителя = Модуль.ДанныеРуководителей(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение))[Подразделение];
	КонецЕсли;	
	
	Если ДанныеРуководителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Заявитель = ФизическиеЛицаЗарплатаКадрыРасширенный.ПользовательФизическогоЛица(ДанныеРуководителя.ФизическоеЛицо);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаПодборПерсонала(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗаявкаНаПодборПерсонала") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, нет ли на основании указанной заявки уже зарегистрированных вакансий
	Если ЕстьДругиеВакансииПоЗаявке(ДокументСсылка, Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'По этой заявке на подбор персонала вакансия уже зарегистрирована.'");
	КонецЕсли;
	
	// Получаем данные заявки для заполнения
	ДанныеЗаявки = Документы.ЗаявкаНаПодборПерсонала.ДанныеЗаявкиНаПодборПерсонала(ДокументСсылка);
	
	// Проверим, согласована ли заявка 
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеВакансий") Тогда
		ДанныеСогласования = СогласованиеВакансий.ДанныеСогласования(ДокументСсылка);
		Если ДанныеСогласования.СостояниеСогласования <> Перечисления.СостоянияСогласования.Согласовано Тогда
			ВызватьИсключение НСтр("ru = 'Заявка не согласована.'");
		КонецЕсли;
	КонецЕсли;
	
	// Проверим, нет ли зарегистрированных вакансий с параметрами заявки
	Если ДанныеЗаявки.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор Тогда
		Если Справочники.Вакансии.ЕстьДругиеВакансииПоКомбинацииДолжностьПодразделение(ДанныеЗаявки.Должность, ДанныеЗаявки.Подразделение, ДокументСсылка, Ссылка) Тогда
			ВызватьИсключение НСтр("ru = 'Существует вакансия с аналогичными должностью и подразделением.'");
		КонецЕсли;
	КонецЕсли;
	
	// Заявка согласована, заполняем вакансию
	Если ЗначениеЗаполнено(ДанныеЗаявки.ПрофильДолжности) Тогда
		ЗаполнитьПоПрофилюДолжности(ДанныеЗаявки.ПрофильДолжности);
	КонецЕсли;
	
	Основание = ДокументСсылка;
	Позиция = ДанныеЗаявки.Позиция;
	Подразделение = ДанныеЗаявки.Подразделение;
	Должность = ДанныеЗаявки.Должность;
	Условия = ДанныеЗаявки.Условия;
	ПредполагаемыйДоход = ДанныеЗаявки.ПредполагаемыйДоход;
	ПланируемаяДатаЗакрытия = ДанныеЗаявки.ПланируемаяДатаЗакрытия;
	Приоритет = ДанныеЗаявки.Приоритет;
	ПричинаОткрытия = ДанныеЗаявки.ПричинаОткрытия;
	Заявитель = ДанныеЗаявки.Ответственный;
	Примечание = ДанныеЗаявки.Комментарий;
	СпособНабора = ДанныеЗаявки.СпособНабора;
	НазначениеНабора = ДанныеЗаявки.НазначениеНабора;
	НоваяПозиция = ДанныеЗаявки.НоваяПозиция;
	Требования = ДанныеЗаявки.Требования;
	Обязанности = ДанныеЗаявки.Обязанности;
	
	Если ДанныеЗаявки.Свойство("ХарактеристикиПерсонала") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаявки.ХарактеристикиПерсонала, ХарактеристикиПерсонала);
	КонецЕсли;
	Если ДанныеЗаявки.Свойство("ДействияСотрудников") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаявки.ДействияСотрудников, ДействияСотрудников);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСотруднику(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат;
	КонецЕсли;

	НоваяПозиция = Ложь;
	СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор;

	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДанныеЗаполнения, "ДолжностьПоШтатномуРасписанию");
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПозицияШтатногоРасписания = КадровыеДанные[0].ДолжностьПоШтатномуРасписанию;;
	ЗаполнитьПоПозицииШтатногоРасписания(ПозицияШтатногоРасписания);

КонецПроцедуры

Процедура ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор И Не ЗначениеЗаполнено(Позиция) Тогда
		НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ДолжностьПодразделение;
	КонецЕсли;
	
	Если НоваяПозиция Тогда
		НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ДолжностьПодразделение;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Наименование") Тогда
		НаименованиеВручную = Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ПрофильДолжности") Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ПрофильДолжности) Тогда
			ЗаполнитьПоПрофилюДолжности(ДанныеЗаполнения["ПрофильДолжности"], Не ДанныеЗаполнения.Свойство("Позиция"));
		КонецЕсли;
	КонецЕсли;

	Если ДанныеЗаполнения.Свойство("Позиция") Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Позиция) Тогда
			ЗаполнитьПоПозицииШтатногоРасписания(ДанныеЗаполнения["Позиция"], Не ДанныеЗаполнения.Свойство("ПрофильДолжности"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДругиеВакансииПоЗаявке(Заявка, Вакансия)
	
	Если Не ЗначениеЗаполнено(Заявка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	Вакансии.Ссылка <> &Вакансия
		|	И Вакансии.Основание = &Основание";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("Основание", Заявка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ОбновитьКандидатовПоВакансии()
	
	Если Не ДополнительныеСвойства.Свойство("Изменены") Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Кандидаты");
	ЭлементБлокировки.УстановитьЗначение("Вакансия", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		КандидатыМассив = Справочники.Кандидаты.КандидатыПоОтбору(Новый Структура("Вакансия", Ссылка));
		Если ОбновлятьКандидатов(ДополнительныеСвойства.Изменены) Тогда
			Для Каждого Кандидат Из КандидатыМассив Цикл
				КандидатОбъект = Кандидат.ПолучитьОбъект();
				Попытка
					КандидатОбъект.Заблокировать();
					КандидатОбъект.Заполнить(Ссылка);
					КандидатОбъект.Записать();
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Требуется обновить кандидата %1. 
	                          |В данный момент изменение невозможно, так как кандидат редактируется другим пользователем или в другой форме программы.'"),
						КандидатОбъект.Наименование);
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
			КонецЦикла;
			Если ДополнительныеСвойства.Изменены.Найти("ЭтапыРаботыСКандидатами") <> Неопределено Тогда
				ПодборПерсонала.ОбновитьТекущийЭтапРаботыКандидатов(КандидатыМассив);
			КонецЕсли;
		КонецЕсли;
		Если ДополнительныеСвойства.Изменены.Найти("ХарактеристикиПерсонала") <> Неопределено Тогда
			ЭлектронноеИнтервью.РассчитатьОценкиКандидатов(Ссылка, КандидатыМассив);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОбновлятьКандидатов(Изменены)
	Возврат Изменены.Найти("Позиция") <> Неопределено 
		Или Изменены.Найти("Подразделение") <> Неопределено 
		Или Изменены.Найти("ЭтапыРаботыСКандидатами") <> Неопределено;
КонецФункции

Процедура ЗаполнитьПризнакиИзмененности()
	
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПрежнийОбъект = Ссылка.ПолучитьОбъект();
	
	ДополнительныеСвойства.Вставить("Изменены", Новый Массив);
	
	Если ПрежнийОбъект.Позиция <> Позиция Тогда
		ДополнительныеСвойства.Изменены.Добавить("Позиция");
	КонецЕсли;

	Если ПрежнийОбъект.Подразделение <> Подразделение Тогда
		ДополнительныеСвойства.Изменены.Добавить("Подразделение");
	КонецЕсли;
	
	ИменаКолонок = "ЭтапРаботы,ШаблонАнкеты,Комментарий";
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ЭтапыРаботыСКандидатами, ПрежнийОбъект.ЭтапыРаботыСКандидатами, ИменаКолонок, , Истина) Тогда
		ДополнительныеСвойства.Изменены.Добавить("ЭтапыРаботыСКандидатами");
	КонецЕсли;
	
	ИменаКолонок = "Характеристика,Значение,Вес,ТребуетсяПроверка,ТребуетсяОбучение,ВесЗначения";
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ХарактеристикиПерсонала, ПрежнийОбъект.ХарактеристикиПерсонала, ИменаКолонок) Тогда
		ДополнительныеСвойства.Изменены.Добавить("ХарактеристикиПерсонала");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПозиции(Отказ, ПроверяемыеРеквизиты)
	
	Если НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ДолжностьПодразделение Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Позиция");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПодразделения(Отказ, ПроверяемыеРеквизиты)
	
	Если СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор Или НоваяПозиция Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДолжности(Отказ, ПроверяемыеРеквизиты)
	
	Если НоваяПозиция Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Должность");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьПозициюПодразделениеДолжностьПоПрофилюДолжности(ДанныеПрофиля)
	
	// Попробуем подобрать позицию штатного расписания, если штатное расписание используется.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		// Штатное расписание не используется, заполняем независимо от позиции подразделение и должность.
		Подразделение = ДанныеПрофиля.Подразделение;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Позиция) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должность", ДанныеПрофиля.Должность);
	Запрос.УстановитьПараметр("Подразделение", ДанныеПрофиля.Подразделение);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.Ссылка,
		|	ПозицииШтатногоРасписания.Приоритет
		|ИЗ
		|	(ВЫБРАТЬ
		|		ШтатноеРасписание.Ссылка КАК Ссылка,
		|		1 КАК Приоритет
		|	ИЗ
		|		Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|			ПО (МестоПозиции.Позиция = ШтатноеРасписание.Ссылка)
		|				И (МестоПозиции.Подразделение = &Подразделение)
		|				И (ШтатноеРасписание.Должность = &Должность)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ШтатноеРасписание.Ссылка,
		|		2
		|	ИЗ
		|		Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|	ГДЕ
		|		ШтатноеРасписание.Должность = &Должность) КАК ПозицииШтатногоРасписания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицииШтатногоРасписания.Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьПоПозицииШтатногоРасписания(Выборка.Ссылка, Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНаличиеВакансийМассовогоНабора(Отказ) Экспорт
	
	ОписаниеСостояния = Справочники.Вакансии.СостояниеВакансии(Ссылка);
	Если ОписаниеСостояния = Неопределено 
		Или Перечисления.СостоянияВакансии.Действующие().Найти(ОписаниеСостояния.Состояние) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор Тогда
		Если Справочники.Вакансии.ЕстьДругиеВакансииПоКомбинацииДолжностьПодразделение(Должность, Подразделение, , Ссылка) Тогда 
			ТекстСообщения = НСтр("ru = 'С такими должностью и подразделением уже есть открытая вакансия.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНовыйОбъект() Экспорт
	
	Если Не Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОткрытия)И Не ЗначениеЗаполнено(ПланируемаяДатаЗакрытия) Тогда
		ДатаОткрытия = ТекущаяДатаСеанса();
		ПланируемаяДатаЗакрытия =
			ПодборПерсонала.ПланируемаяДатаЗакрытияПоУмолчанию(ДатаОткрытия);
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли