#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Отчеты.Кандидаты) Тогда
		Возврат;
	КонецЕсли;
	
	Команда = КомандыОтчетов.Добавить();
	Команда.Представление      = НСтр("ru = 'Кандидаты'");
	Команда.Важность           = "Обычное";
	Команда.ТипПараметра       = Новый ОписаниеТипов("СправочникСсылка.Вакансии");
	Команда.РежимЗаписи        = "ЗаписыватьТолькоНовые";
	Команда.Менеджер           = "Отчет.Кандидаты";
	Команда.КлючВарианта       = "Кандидаты";
	Команда.ИмяПараметраФормы  = "Отбор.Вакансия";
	Команда.СочетаниеКлавиш    = Новый СочетаниеКлавиш(Клавиша.A, Ложь, Истина, Истина);
	Команда.Подменю            = "КандидатыОтчетКандидатыПодменю";
	Команда.Картинка           = БиблиотекаКартинок.Отчет;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов
// 
// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ДополнитьСоставКомандПечати(КомандыПечати);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.Вакансии";
	КомандаПечати.Идентификатор = "Вакансия";
	КомандаПечати.Представление = ?(КомандыПечати.Количество() > 1, НСтр("ru = 'Вакансия'"), НСтр("ru = 'Печать'"));
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Вакансия'");
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Вакансия");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Вакансия'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Справочник.Вакансии.ПФ_MXL_Вакансия";
		ПечатнаяФорма.ТабличныйДокумент = ПечатьВакансии(МассивОбъектов, ОбъектыПечати, ПечатнаяФорма.ПолныйПутьКМакету);
		
	КонецЕсли;
	
	СформироватьДополнительныеПечатныеФормы(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	ЗаполнитьЗначенияРеквизитовШаблонаОтправкиОписания(Сообщение, ПредметСообщения, ДополнительныеПараметры);
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.СогласованиеВакансий

// См. СогласованиеВакансий.ЗаполнитьДанныеСогласованияВакансии
Процедура ЗаполнитьДанныеСогласованияВакансии(ОбъектСогласования, ДанныеСогласования, ТребуетсяСогласование) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектСогласования.Основание) Тогда
		ТребуетсяСогласование = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСогласования, ОбъектСогласования);
	ДанныеСогласования.Вакансия = ОбъектСогласования.Ссылка;
	ДанныеСогласования.Комментарий = ОбъектСогласования.Примечание;
	ДанныеСогласования.Дата = ОбъектСогласования.ДатаОткрытия;
	ДанныеСогласования.Проведен = Истина;
	
	ДанныеСогласования.СостояниеСогласования = Неопределено;
	Если Не ОбъектСогласования.ПометкаУдаления Тогда
		ДанныеСогласования.СостояниеСогласования = Перечисления.СостоянияСогласования.Рассматривается;
	КонецЕсли;
	
КонецПроцедуры

// См. СогласованиеВакансий.ПриУстановкеСостоянияСогласованияВакансии
Процедура ПриУстановкеСостоянияСогласованияВакансии(ОбъектСогласования, ДанныеСогласования) Экспорт
	
	Если ДанныеСогласования.СостояниеСогласования = Перечисления.СостоянияСогласования.Отклонено Тогда
		Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектСогласования.Ссылка);
		ОтменитьНабор(Вакансии, ДанныеСогласования.ДатаРассмотрения);
	КонецЕсли;
	
	Если ДанныеСогласования.СостояниеСогласования = Перечисления.СостоянияСогласования.Согласовано Тогда
		Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектСогласования.Ссылка);
		ВозобновитьНабор(Вакансии, ДанныеСогласования.ДатаРассмотрения);
	КонецЕсли;
	
	Если ДанныеСогласования.СостояниеСогласования = Перечисления.СостоянияСогласования.Рассматривается Тогда
		Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектСогласования.Ссылка);
		ПриостановитьНабор(Вакансии, ДанныеСогласования.ДатаРассмотрения);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.СогласованиеВакансий

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция-конструктор для составления параметра к методу ДанныеВакансии.
// 
// Возвращаемое значение:
//  Структура - структура с полями, описывающих требования к получению данных вакансии.
//
Функция ПараметрыПолученияДанныхВакансии() Экспорт
	
	ПараметрыПолучения = Новый Структура(
		"ХарактеристикиПерсонала,
		|ДействияСотрудников,
		|ЭтапыРаботыСКандидатами,
		|Согласование,
		|ТекущееСостояние");
	
	ПараметрыПолучения.ХарактеристикиПерсонала = Ложь;
	ПараметрыПолучения.ДействияСотрудников = Ложь;
	ПараметрыПолучения.ЭтапыРаботыСКандидатами = Ложь;
	ПараметрыПолучения.Согласование = Ложь;
	ПараметрыПолучения.ТекущееСостояние = Ложь;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Формирует коллекцию, содержащую данные вакансии.
//
// Параметры:
//  Вакансия			 - СправочникСсылка.Вакансия - вакансия, данные которой нужно получить.
//  ПараметрыПолучения	 - Структура - необязательный, см. ПараметрыПолученияДанныхВакансии.
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//  Вакансия
//  Требования
//  Обязанности
//  Условия
//  Позиция
//  НоваяПозиция
//  Должность
//  Подразделение
//  Организация
//  СпособНабора
//  НазначениеНабора
//  ПрофильДолжности
//  ДатаОткрытия
//  ХарактеристикиПерсонала - необязательное поле, наличие определяется значением ПараметрыПолучения.ХарактеристикиПерсонала
//  ДействияСотрудников - необязательное поле, наличие определяется значением ПараметрыПолучения.ДействияСотрудников
//  ЭтапыРаботыСКандидатами - необязательное поле, наличие определяется значением ПараметрыПолучения.ЭтапыРаботыСКандидатами
//  Согласование - необязательное поле, наличие определяется значением ПараметрыПолучения.Согласование
//
Функция ДанныеВакансии(Вакансия, ПараметрыПолучения = Неопределено) Экспорт
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = ПараметрыПолученияДанныхВакансии();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вакансии.Ссылка КАК Вакансия,
		|	Вакансии.Наименование КАК Наименование,
		|	Вакансии.Требования КАК Требования,
		|	Вакансии.Обязанности КАК Обязанности,
		|	Вакансии.Условия КАК Условия,
		|	Вакансии.Позиция КАК Позиция,
		|	Вакансии.НоваяПозиция КАК НоваяПозиция,
		|	Вакансии.Должность КАК Должность,
		|	Вакансии.Подразделение КАК Подразделение,
		|	Вакансии.Позиция.Владелец КАК Организация,
		|	Вакансии.СпособНабора КАК СпособНабора,
		|	Вакансии.НазначениеНабора КАК НазначениеНабора,
		|	Вакансии.ПрофильДолжности КАК ПрофильДолжности,
		|	Вакансии.ДатаОткрытия КАК ДатаОткрытия,
		|	Вакансии.Заявитель КАК Заявитель,
		|	Вакансии.Примечание КАК Примечание,
		|	Вакансии.Основание КАК Основание
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	Вакансии.Ссылка = &Вакансия";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	Колонки = СхемаЗапроса.ПакетЗапросов[0].Колонки;
	
	Если ПараметрыПолучения.ХарактеристикиПерсонала Тогда
		ВыбираемыеПоля.Добавить("Вакансии.ХарактеристикиПерсонала.Характеристика");
		ВыбираемыеПоля.Добавить("Вакансии.ХарактеристикиПерсонала.Значение");
		ВыбираемыеПоля.Добавить("Вакансии.ХарактеристикиПерсонала.Вес");
		ВыбираемыеПоля.Добавить("Вакансии.ХарактеристикиПерсонала.ТребуетсяПроверка");
		ВыбираемыеПоля.Добавить("Вакансии.ХарактеристикиПерсонала.ТребуетсяОбучение");
	КонецЕсли;
	
	Если ПараметрыПолучения.ДействияСотрудников Тогда
		ВыбираемыеПоля.Добавить("Вакансии.ДействияСотрудников.ДействиеСотрудника");
	КонецЕсли;
	
	Если ПараметрыПолучения.ЭтапыРаботыСКандидатами Тогда
		ВыражениеНомерСтроки = "Вакансии.ЭтапыРаботыСКандидатами.НомерСтроки";
		ВыбираемыеПоля.Добавить(ВыражениеНомерСтроки);
		Колонки.Найти(Новый ВыражениеСхемыЗапроса(ВыражениеНомерСтроки)).Псевдоним = "Порядок";
		ВыбираемыеПоля.Добавить("Вакансии.ЭтапыРаботыСКандидатами.ЭтапРаботы");
		ВыбираемыеПоля.Добавить("Вакансии.ЭтапыРаботыСКандидатами.ШаблонАнкеты");
		ВыбираемыеПоля.Добавить("Вакансии.ЭтапыРаботыСКандидатами.Комментарий");
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ДанныеВакансии = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	Если ПараметрыПолучения.Согласование Тогда
		ДанныеВакансии.Вставить("Согласование", ДанныеСогласования(Вакансия));
	КонецЕсли;
	
	Если ПараметрыПолучения.ТекущееСостояние Тогда
		ДанныеВакансии.Вставить("ТекущееСостояние", СостояниеВакансии(Вакансия));
	КонецЕсли;
	
	Возврат ДанныеВакансии;
	
КонецФункции

// Возвращает Истина, в случае, если набор по вакансии является массовым.
//
Функция СпособНабораМассовый(Вакансия) Экспорт
	
	ДанныеВакансии = ДанныеВакансии(Вакансия);
	Если ДанныеВакансии.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Регистрирует факт приостановки набора персонала для указанных вакансий
//
// Параметры
//	- Вакансии, Массив элементов 
//	- ДатаПриостановки, дата
//
Процедура ПриостановитьНабор(Вакансии, ДатаПриостановки) Экспорт
	УстановитьСостояние(Вакансии, ДатаПриостановки, Перечисления.СостоянияВакансии.Приостановлена);
КонецПроцедуры

// Регистрирует факт возобновления набора персонала для указанных вакансий
//
// Параметры
//	- Вакансии, Массив элементов 
//	- ДатаВозобновления, дата
//
Процедура ВозобновитьНабор(Вакансии, ДатаВозобновления) Экспорт
	УдалитьСостояние(Вакансии, ДатаВозобновления);
	УстановитьСостояние(Вакансии, ДатаВозобновления, Перечисления.СостоянияВакансии.Открыта);
	ОбновитьДатуОткрытия(Вакансии, ДатаВозобновления);
КонецПроцедуры

// Отменяет набор по вакансиям
//
// Параметры
//	- Вакансии, Массив
//	- ДатаОтмены, дата
//
Процедура ОтменитьНабор(Вакансии, ДатаОтмены) Экспорт
	УстановитьСостояние(Вакансии, ДатаОтмены, Перечисления.СостоянияВакансии.Отменена);
КонецПроцедуры

// Закрывает вакансию (кандидат подобран).
//
// Параметры
//	- Вакансии, Массив
//	- ДатаЗакрытия, дата
//
Процедура ЗакрытьВакансии(Вакансии, ДатаЗакрытия) Экспорт
	УстановитьСостояние(Вакансии, ДатаЗакрытия, Перечисления.СостоянияВакансии.Закрыта);
КонецПроцедуры

// Массив вакансий, соответствующих указанному отбору.
//
// Параметры 
// - Отбор - структура, где ключ имя поля (реквизита справочника).
//
// Возвращаемое значение - массив вакансий.
//
Функция ВакансииПоОтбору(Отбор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВакансииПоОтбору(Запрос.МенеджерВременныхТаблиц, Отбор);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вакансии.Вакансия
		|ИЗ
		|	ВТВакансииПоОтбору КАК Вакансии";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вакансия");
	
КонецФункции

// Формирует временную таблицу с вакансиями, соответствующими отбору.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, Неопределено - Описание
// 	Отбор - Структура - значения отбора,
// 	ТолькоРазрешенные - Булево - Описание, если Истина, в таблицу будут включены вакансии, доступные текущему пользователю.
//
Процедура СоздатьВТВакансииПоОтбору(МенеджерВременныхТаблиц, Отбор, ТолькоРазрешенные = Истина) Экспорт
	
	СтруктураОтбора = Новый Структура;
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		СтруктураОтбора = Отбор;
	ИначеЕсли ТипЗнч(Отбор) = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"Справочник.Вакансии.СоздатьВТВакансииПоОтбору", 
			"Отбор", 
			Отбор, 
			ОбщегоНазначенияБЗККлиентСервер.ЗначенияВМассиве(
				Тип("Структура"), Тип("КоллекцияЭлементовОтбораКомпоновкиДанных")));
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Вакансии.Ссылка КАК Вакансия
		|ПОМЕСТИТЬ ВТВакансииПоОтбору
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВакансий.СрезПоследних КАК ТекущееСостояние
		|		ПО ТекущееСостояние.Вакансия = Вакансии.Ссылка
		|		И ТекущееСостояние.Состояние В (&Состояние)}
		|ГДЕ
		|	&УСЛОВИЕ";
	
	Если Не ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	ИспользоватьОтборПоСостоянию = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Условие = "";
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если КлючИЗначение.Ключ = "Состояние" Тогда
			ИспользоватьОтборПоСостоянию = Истина;
			Продолжить;
		КонецЕсли;
		ФрагментУсловия = "";
		Если Не ПустаяСтрока(Условие) Тогда
			ФрагментУсловия	= " И ";
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			ШаблонУсловия = "Вакансии.%1 В (&%1)";
		Иначе
			ШаблонУсловия = "Вакансии.%1 = &%1";
		КонецЕсли;
		ФрагментУсловия = ФрагментУсловия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, КлючИЗначение.Ключ);
		Условие = Условие + ФрагментУсловия;
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ", "");
	КонецЕсли;

	Если Не ИспользоватьОтборПоСостоянию Тогда
		НачалоФрагмента = СтрНайти(ТекстЗапроса, "{");
		КонецФрагмента = СтрНайти(ТекстЗапроса, "}", , НачалоФрагмента);
		Фрагменты = Новый Массив;
		Фрагменты.Добавить(Лев(ТекстЗапроса, НачалоФрагмента - 1));
		Фрагменты.Добавить(Сред(ТекстЗапроса, КонецФрагмента + 1, СтрДлина(ТекстЗапроса) - КонецФрагмента));
		ТекстЗапроса = СтрСоединить(Фрагменты);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УСЛОВИЕ", Условие);
	
	Запрос.Текст = ТекстЗапроса;
	Если Не ТолькоРазрешенные Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбновитьОписаниеВакансийПоПрофилюДолжности(ПрофильДолжности, ДанныеПрофиля) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Вакансии");
	ЭлементБлокировки.УстановитьЗначение("ПрофильДолжности", ПрофильДолжности);
	ЭлементБлокировки.УстановитьЗначение("СоответствуетПрофилюДолжности", Истина);
	
	ОтборВакансий = Новый Структура(
		"ПрофильДолжности,
		|СоответствуетПрофилюДолжности,
		|Состояние");
	ОтборВакансий.ПрофильДолжности = ПрофильДолжности;
	ОтборВакансий.СоответствуетПрофилюДолжности = Истина;
	ОтборВакансий.Состояние = Перечисления.СостоянияВакансии.Действующие();

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ВакансииПоОтбору = ВакансииПоОтбору(ОтборВакансий);
		Для Каждого Вакансия Из ВакансииПоОтбору Цикл
			ВакансияОбъект = Вакансия.ПолучитьОбъект();
			Если ОписаниеВакансииСоответствуетПрофилю(ВакансияОбъект, ДанныеПрофиля) Тогда
				Продолжить;
			КонецЕсли;
			ВакансияОбъект.ЗаполнитьПоПрофилюДолжности(ПрофильДолжности, Ложь, ДанныеПрофиля);
			Попытка
				ВакансияОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Требуется внести изменение в описание вакансии «%1». 
					|В данный момент изменение невозможно, так как вакансия редактируется другим пользователем или в другой форме программы.'"),
					ВакансияОбъект.Наименование);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			ВакансияОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ОписаниеВакансииДляПубликации() Экспорт
	
	Структура = Новый Структура(
		"Наименование,
		|СпособНабора,
		|НоваяПозиция,
		|Позиция, 
		|Должность, 
		|Подразделение,
		|ПрофильДолжности, 
		|ПредполагаемыйДоход, 
		|Ответственный, 
		|Заявитель, 
		|ДатаОткрытия, 
		|ПланируемаяДатаЗакрытия, 
		|Обязанности, 
		|Требования, 
		|Условия, 
		|ПричинаОткрытия");
	
	Структура.Наименование = "";
	Структура.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.ПустаяСсылка();
	Структура.НоваяПозиция = Ложь;
	Структура.Позиция = Справочники.ШтатноеРасписание.ПустаяСсылка();
	Структура.Должность = Справочники.Должности.ПустаяСсылка();
	Структура.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	Структура.ПрофильДолжности = Справочники.ПрофилиДолжностей.ПустаяСсылка();
	Структура.ПредполагаемыйДоход = 0;
	Структура.Ответственный = Справочники.Пользователи.ПустаяСсылка();
	Структура.Заявитель = Справочники.Пользователи.ПустаяСсылка();
	Структура.ДатаОткрытия = Дата(1, 1, 1);
	Структура.ПланируемаяДатаЗакрытия = Дата(1, 1, 1);
	Структура.Обязанности = "";
	Структура.Требования = "";
	Структура.Условия = "";
	Структура.ПричинаОткрытия = Справочники.ПричиныОткрытияВакансий.ПустаяСсылка();
	
	Возврат Структура;
	
КонецФункции

Функция СоответствиеИмениИСинонимаРеквизитовВакансий() Экспорт
	
	Соответствие = Новый Соответствие;
	
	Для Каждого МетаданныеРеквизита Из Метаданные.Справочники.Вакансии.Реквизиты Цикл
		Соответствие.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Синоним);
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из Метаданные.Справочники.Вакансии.СтандартныеРеквизиты Цикл
		Синоним = МетаданныеРеквизита.Синоним;
		Если ПустаяСтрока(Синоним) Тогда
			Синоним = МетаданныеРеквизита.Имя;
		КонецЕсли;
		Соответствие.Вставить(МетаданныеРеквизита.Имя, Синоним);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеВакансий(Вакансии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Вакансии.Ссылка КАК Вакансия,
		|	Вакансии.ВерсияДанных КАК ВерсияДанных,
		|	Вакансии.ПометкаУдаления КАК ПометкаУдаления,
		|	Вакансии.Код КАК Код,
		|	Вакансии.Наименование КАК Наименование,
		|	Вакансии.Позиция КАК Позиция,
		|	Вакансии.Подразделение КАК Подразделение,
		|	Вакансии.ПрофильДолжности КАК ПрофильДолжности,
		|	Вакансии.ПредполагаемыйДоход КАК ПредполагаемыйДоход,
		|	Вакансии.Ответственный КАК Ответственный,
		|	Вакансии.Заявитель КАК Заявитель,
		|	Вакансии.ДатаОткрытия КАК ДатаОткрытия,
		|	Вакансии.ПланируемаяДатаЗакрытия КАК ПланируемаяДатаЗакрытия,
		|	Вакансии.Основание КАК Основание,
		|	Вакансии.Примечание КАК Примечание,
		|	Вакансии.СоответствуетПрофилюДолжности КАК СоответствуетПрофилюДолжности,
		|	Вакансии.Требования КАК Требования,
		|	Вакансии.Обязанности КАК Обязанности,
		|	Вакансии.Условия КАК Условия,
		|	Вакансии.Сложность КАК Сложность,
		|	Вакансии.Приоритет КАК Приоритет,
		|	Вакансии.ПричинаОткрытия КАК ПричинаОткрытия,
		|	Вакансии.УточнениеНаименования КАК УточнениеНаименования,
		|	Вакансии.Должность КАК Должность,
		|	Вакансии.СпособНабора КАК СпособНабора,
		|	Вакансии.НазначениеНабора КАК НазначениеНабора,
		|	Вакансии.НоваяПозиция КАК НоваяПозиция,
		|	Вакансии.НаименованиеВручную КАК НаименованиеВручную
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	Вакансии.Ссылка В(&Вакансии)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеСогласования(Вакансия) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Основание");
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Возврат СогласованиеВакансий.ДанныеСогласования(Основание);
	КонецЕсли;
	
	Возврат СогласованиеВакансий.ДанныеСогласования(Вакансия);
	
КонецФункции

Функция СостояниеВакансии(Вакансия) Экспорт
	Возврат РегистрыСведений.СостоянияВакансий.ТекущееСостояниеВакансий(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вакансия))[Вакансия];
КонецФункции

Функция ЕстьДругиеВакансииПоКомбинацииДолжностьПодразделение(Должность, Подразделение, Заявка = Неопределено, Вакансия = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(Должность) Или Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("Основание", Заявка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВакансий.СрезПоследних КАК ТекущиеСостоянияВакансий
		|		ПО (ТекущиеСостоянияВакансий.Вакансия = Вакансии.Ссылка)
		|ГДЕ
		|	Вакансии.СпособНабора = ЗНАЧЕНИЕ(Перечисление.СпособНабораПерсоналаНаВакансию.МассовыйНабор)
		|	И НЕ ТекущиеСостоянияВакансий.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Закрыта), ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Отменена))
		|	И Вакансии.Должность = &Должность
		|	И Вакансии.Подразделение = &Подразделение
		|	И Вакансии.Ссылка <> &Вакансия
		|	И Вакансии.Основание <> &Основание";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ВыполнитьЗаписьОбъекта(ДанныеОбъекта, ДанныеФормы) Экспорт
	
	СправочникОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ДанныеОбъекта);
	ДесериализоватьДанныеФормы(ДанныеФормы);
	
	НачатьТранзакцию();
	Попытка
		СправочникОбъект.Записать();
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			ДанныеФормы, 
			"СостоянияВакансий", 
			СправочникОбъект.Ссылка);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Подбор персонала.Запись вакансии'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(СправочникОбъект);
	
КонецФункции

Функция СериализоватьДанныеФормы(Форма) Экспорт
	
	Данные = Новый Структура(
		"СостоянияВакансий,
		|СостоянияВакансийНаборЗаписей,
		|СостоянияВакансийНаборЗаписейПрочитан,
		|СостоянияВакансийНоваяЗапись,
		|СостоянияВакансийПрежняя");
	
	ЗаполнитьЗначенияСвойств(Данные, Форма);
	
	МенеджерЗаписи = ДанныеФормыВЗначение(Форма["СостоянияВакансий"], Тип("РегистрСведенийМенеджерЗаписи.СостоянияВакансий"));
	Данные["СостоянияВакансий"] = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, Метаданные.РегистрыСведений.СостоянияВакансий);
	
	НаборЗаписей = ДанныеФормыВЗначение(Форма["СостоянияВакансийНаборЗаписей"], Тип("РегистрСведенийНаборЗаписей.СостоянияВакансий"));
	Данные["СостоянияВакансийНаборЗаписей"] = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(НаборЗаписей);
	
	Возврат Данные;
	
КонецФункции

Процедура ДесериализоватьДанныеФормы(ДанныеФормы)
	
	НаборЗаписей = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ДанныеФормы["СостоянияВакансийНаборЗаписей"]);
	ДанныеФормы["СостоянияВакансийНаборЗаписей"] = НаборЗаписей.Выгрузить();
	
КонецПроцедуры

Функция ПечатьВакансии(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОписаниеВакансии";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	ДанныеПечати = ПодборПерсонала.ОписанияВакансийПоУмолчанию(МассивОбъектов);
	
	Для Каждого СтрокаДанных Из ДанныеПечати Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		Макет.Параметры.Заполнить(СтрокаДанных);
		
		ТабличныйДокумент.Вывести(Макет);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаДанных.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьВариантаВакансии(ИдентификаторОписания, МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = СтрШаблон("ПараметрыПечати_ОписаниеВакансии_%1", ИдентификаторОписания);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	
	Выборка = ПодборПерсонала.ВыборкаДанныхОписанияВакансии(ИдентификаторОписания, МассивОбъектов);
	
	Пока Выборка.СледующийПоЗначениюПоля("Вакансия") Цикл
		
		ДанныеПечати = Новый Структура();
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Пока Выборка.Следующий() Цикл
			ДанныеПечати.Вставить(Выборка.ПолеДанных, Выборка.Значение);
		КонецЦикла;
		
		Макет.Параметры.Заполнить(ДанныеПечати);
		
		ТабличныйДокумент.Вывести(Макет);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Вакансия);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура УстановитьСостояние(Вакансии, Дата, Состояние) Экспорт
	
	ДатаСостояния = НачалоДня(Дата);
	Если Состояние <> Перечисления.СостоянияВакансии.Открыта Тогда
		ДатаСостояния = КонецДня(Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	Запрос.УстановитьПараметр("Дата", ДатаСостояния);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияВакансий.Период,
		|	СостоянияВакансий.Вакансия,
		|	СостоянияВакансий.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияВакансий КАК СостоянияВакансий
		|ГДЕ
		|	СостоянияВакансий.Период <> &Дата
		|	И СостоянияВакансий.Вакансия В(&Вакансии)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияВакансий.Вакансия,
		|	СостоянияВакансий.Период";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОсталисьВакансии = ОбщегоНазначения.СкопироватьРекурсивно(Вакансии);
	
	НаборЗаписей = РегистрыСведений.СостоянияВакансий.СоздатьНаборЗаписей();
	// Добавляем строку в наборы для тех вакансий, для которых они уже существуют
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Вакансия") Цикл
		НаборЗаписей.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Период = ДатаСостояния;
		СтрокаНабора.Вакансия = Выборка.Вакансия;
		СтрокаНабора.Состояние = Состояние;
		НаборЗаписей.Отбор.Вакансия.Установить(Выборка.Вакансия);
		НаборЗаписей.Записать();
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ОсталисьВакансии, Выборка.Вакансия);
	КонецЦикла;
	
	// Для всех остальных вакансий, добавляем единственную строку о состоянии в набор и записываем его.
	Для Каждого Вакансия Из ОсталисьВакансии Цикл
		НаборЗаписей.Очистить();
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Период = ДатаСостояния;
		СтрокаНабора.Вакансия = Вакансия;
		СтрокаНабора.Состояние = Состояние;
		НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСостояние(Вакансии, Дата, Состояние = Неопределено) Экспорт
	
	ДатаСостояния = НачалоДня(Дата);
	Если Состояние <> Перечисления.СостоянияВакансии.Открыта Тогда
		ДатаСостояния = КонецДня(Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	Запрос.УстановитьПараметр("Дата", ДатаСостояния);
	Запрос.УстановитьПараметр("Состояние", Состояние);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияВакансий.Период КАК Период,
		|	СостоянияВакансий.Вакансия КАК Вакансия,
		|	СостоянияВакансий.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияВакансий КАК СостоянияВакансий
		|ГДЕ
		|	СостоянияВакансий.Период = &Дата
		|	И СостоянияВакансий.Вакансия В(&Вакансии)
		|	И СостоянияВакансий.Состояние = &Состояние
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияВакансий.Вакансия,
		|	СостоянияВакансий.Период";
	Если Состояние = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СостоянияВакансий.Состояние = &Состояние", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СостоянияВакансий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Вакансия.Установить(Выборка.Вакансия);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДатуОткрытия(Вакансии, ДатаВозобновления)
	
	Отбор = Новый Структура(
		"Ссылка, 
		|ДатаОткрытия");
	Отбор.ДатаОткрытия = ДатаВозобновления;
	Отбор.Ссылка = Вакансии;
	
	ИсточникДляБлокировки = Новый ТаблицаЗначений;
	ИсточникДляБлокировки.Колонки.Добавить("Вакансия", Новый ОписаниеТипов("СправочникСсылка.Вакансии"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ИсточникДляБлокировки, Вакансии, "Вакансия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Вакансии");
	ЭлементБлокировки.ИсточникДанных = ИсточникДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Вакансия");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ВакансииДатаСовпадает = ВакансииПоОтбору(Отбор);
		ВакансииДатаОтличается = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Вакансии, ВакансииДатаСовпадает);
		Для Каждого Вакансия Из ВакансииДатаОтличается Цикл
			ВакансияОбъект = Вакансия.ПолучитьОбъект();
			ВакансияОбъект.ДатаОткрытия = ДатаВозобновления;
			ВакансияОбъект.Записать();
		КонецЦикла;
	ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ДополнитьСоставКомандПечати(КомандыПечати)
	
	Выборка = ПодборПерсонала.ВыборкаСоставаОписанийВакансий(, Истина);
	
	Номер = 1;
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторОписания") Цикл
		
		Вакансии = Новый Массив;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.Вакансии";
		КомандаПечати.Идентификатор = Выборка.ИдентификаторОписания;
		КомандаПечати.Представление = Выборка.МестоПубликации;
		КомандаПечати.ЗаголовокФормы = КомандаПечати.Представление;
		КомандаПечати.Порядок = 10 * Номер;
		
		Пока Выборка.Следующий() Цикл
			Вакансии.Добавить(Выборка.Вакансия);
		КонецЦикла;
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Ссылка", Вакансии, ВидСравненияКомпоновкиДанных.ВСписке);
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДополнительныеПечатныеФормы(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати)
	
	Выборка = ПодборПерсонала.ВыборкаСоставаОписанийВакансий(МассивОбъектов);
	
	Пока Выборка.Следующий() Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Выборка.ИдентификаторОписания);
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.СинонимМакета = Выборка.МестоПубликации;
			ПечатнаяФорма.ПолныйПутьКМакету = "Справочник.Вакансии.ПФ_MXL_Вакансия";
			ПечатнаяФорма.ТабличныйДокумент = ПечатьВариантаВакансии(Выборка.ИдентификаторОписания, МассивОбъектов, ОбъектыПечати, ПечатнаяФорма.ПолныйПутьКМакету);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаИнформационныхСтрокЗанятостиПоВакансиям() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Вакансия", Новый ОписаниеТипов("СправочникСсылка.Вакансии"));
	Таблица.Колонки.Добавить("СпособНабора", Новый ОписаниеТипов("ПеречислениеСсылка.СпособНабораПерсоналаНаВакансию"));
	Таблица.Колонки.Добавить("НазначениеНабора", Новый ОписаниеТипов("ПеречислениеСсылка.НазначениеНабораПерсоналаНаВакансию"));
	Таблица.Колонки.Добавить("НоваяПозиция", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Колонки.Добавить("ПозицииВакансии", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("КоличествоПозиций", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ЗанятоСтавок", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ЗанятоСотрудниками", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("ИнформационнаяСтрокаЗанятости", Новый ОписаниеТипов("ФорматированнаяСтрока"));
	Таблица.Колонки.Добавить("ИнформационнаяСтрокаКандидатов", Новый ОписаниеТипов("ФорматированнаяСтрока"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьИнформационныеСтрокиЗанятостиПоВакансиям(ТаблицаИнформационныхСтрок) Экспорт
	
	ТаблицаИнформационныхСтрок.Сортировать("НоваяПозиция,НазначениеНабора,СпособНабора,Позиция,Должность,Подразделение");
	
	ЗаполнитьСведенияШтатногоРасписания(ТаблицаИнформационныхСтрок);
	
	ПозицииВакансий = НоваяТаблицаПозицииВакансий();
	ЗаполнитьТаблицуПозицииВакансий(ТаблицаИнформационныхСтрок, ПозицииВакансий);
	
	ТаблицаИнформационныхСтрок.Индексы.Добавить("Позиция");
	
	ЗаполнитьЗанятоСтавокПоПозициямВакансий(ТаблицаИнформационныхСтрок, ПозицииВакансий);
	ЗаполнитьЗанятыСотрудниками(ТаблицаИнформационныхСтрок, ПозицииВакансий);
	
	Для Каждого СтрокаТаблицы Из ТаблицаИнформационныхСтрок Цикл
		Если СтрокаТаблицы.НоваяПозиция Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьИнформационнуюСтрокуЗанятости(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Функция ИнформационнаяСтрокаЗанятостиПоДаннымВакансии(ДанныеВакансии) Экспорт

	ТаблицаИнформационныхСтрок = ТаблицаИнформационныхСтрокЗанятостиПоВакансиям();
	ЗаполнитьЗначенияСвойств(ТаблицаИнформационныхСтрок.Добавить(), ДанныеВакансии);
	ЗаполнитьИнформационныеСтрокиЗанятостиПоВакансиям(ТаблицаИнформационныхСтрок);

	Если ТаблицаИнформационныхСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаИнформационныхСтрок[0]);
	
КонецФункции

Функция ИнформационнаяСтрокаКандидатовПоВакансии(Вакансия, ТолькоКандидатыВРаботе) Экспорт

	ТаблицаИнформационныхСтрок = ТаблицаИнформационныхСтрокЗанятостиПоВакансиям();
	ЗаполнитьЗначенияСвойств(ТаблицаИнформационныхСтрок.Добавить(), Справочники.Вакансии.ДанныеВакансии(Вакансия));
	ЗаполнитьСтатистикуСостоянийКандидатов(ТаблицаИнформационныхСтрок, ТолькоКандидатыВРаботе);
	
	Если ТаблицаИнформационныхСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаИнформационныхСтрок[0]);
	
КонецФункции

Процедура ЗаполнитьСведенияШтатногоРасписанияПоПозициям(ДанныеВакансий)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные по вакансиям, у которых набор на позицию.
	ОтборСтрок = Новый Структура("НазначениеНабора, НоваяПозиция");
	ОтборСтрок.НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания;
	ОтборСтрок.НоваяПозиция = Ложь;
	НайденныеСтроки = ДанныеВакансий.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(ТекущаяДатаСеанса());
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Позиция");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ПозицияШтатногоРасписания", "В", Позиции);
	
	УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
		МенеджерВТ, Истина, ПараметрыПостроения, "КоличествоСтавок", "ВТШтатноеРасписаниеПоПозициям");
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.ПозицияШтатногоРасписания КАК Позиция,
		|	СУММА(ШтатноеРасписание.КоличествоСтавок) КАК КоличествоСтавок
		|ИЗ
		|	ВТШтатноеРасписаниеПоПозициям КАК ШтатноеРасписание
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтатноеРасписание.ПозицияШтатногоРасписания
		|
		|ИМЕЮЩИЕ
		|	СУММА(ШтатноеРасписание.КоличествоСтавок) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция";
	ДанныеСтавок = Запрос.Выполнить().Выгрузить();
	Если ДанныеСтавок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтавок.Индексы.Добавить("Позиция");
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОтборСтрок = Новый Структура("Позиция");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, НайденнаяСтрока);
		ДанныеСтавокПоПозиции = ДанныеСтавок.НайтиСтроки(ОтборСтрок);
		НайденнаяСтрока.КоличествоСтавок = 0;
		НайденнаяСтрока.КоличествоПозиций = 1;
		Для Каждого СтрокаПозиции Из ДанныеСтавокПоПозиции Цикл
			НайденнаяСтрока.КоличествоСтавок = НайденнаяСтрока.КоличествоСтавок + СтрокаПозиции.КоличествоСтавок;
			НайденнаяСтрока.ПозицииВакансии.Добавить(СтрокаПозиции.Позиция);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатистикуСостоянийКандидатов(ДанныеВакансий, ТолькоКандидатыВРаботе = Истина) Экспорт
	
	Если ДанныеВакансий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеВакансий", ДанныеВакансий);
	Запрос.УстановитьПараметр("СостоянияРешениеПринято", Перечисления.СостоянияСогласования.СостоянияРешениеПринято());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеВакансий.Вакансия КАК Вакансия,
		|	ДанныеВакансий.Позиция КАК Позиция,
		|	ДанныеВакансий.Должность КАК Должность,
		|	ДанныеВакансий.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТДанныеВакансий
		|ИЗ
		|	&ДанныеВакансий КАК ДанныеВакансий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	Кандидаты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Кандидаты.Вакансия КАК Вакансия,
		|	Кандидаты.Состояние КАК Состояние,
		|	ДанныеВакансий.Позиция КАК Позиция,
		|	ДанныеВакансий.Должность КАК Должность,
		|	ДанныеВакансий.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТКандидаты
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеВакансий КАК ДанныеВакансий
		|		ПО Кандидаты.Вакансия = ДанныеВакансий.Вакансия
		|		И &ТолькоКандидатыВРаботе";
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТолькоКандидатыВРаботе", 
		?(ТолькоКандидатыВРаботе, 
			"НЕ Кандидаты.Состояние В (&СостоянияРешениеПринято)", "ИСТИНА"));
	
	Запрос.Выполнить();
	
	ПодборПерсонала.СоздатьВТСостоянияКандидатов(Запрос.МенеджерВременныхТаблиц, ТекущаяДатаСеанса());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СостоянияКандидатов.Кандидат) КАК КоличествоКандидатов,
		|	Кандидаты.Вакансия КАК Вакансия,
		|	СостоянияКандидатов.Приоритет КАК Приоритет,
		|	СостоянияКандидатов.НомерЭтапа КАК НомерЭтапа,
		|	СостоянияКандидатов.ТекущееСостояние КАК ТекущееСостояние
		|ИЗ
		|	ВТСостоянияКандидатов КАК СостоянияКандидатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКандидаты КАК Кандидаты
		|		ПО (Кандидаты.Кандидат = СостоянияКандидатов.Кандидат)
		|
		|СГРУППИРОВАТЬ ПО
		|	Кандидаты.Вакансия,
		|	СостоянияКандидатов.ТекущееСостояние,
		|	СостоянияКандидатов.Приоритет,
		|	СостоянияКандидатов.НомерЭтапа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Кандидаты.Вакансия,
		|	СостоянияКандидатов.Приоритет,
		|	СостоянияКандидатов.НомерЭтапа УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Вакансия") Цикл
		ЧастиНадписи = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если ЧастиНадписи.Количество() > 0 Тогда
				ЧастиНадписи.Добавить(", ");
			КонецЕсли;
			ТекстСостояния = ?(Не ЗначениеЗаполнено(Выборка.ТекущееСостояние), 
				НСтр("ru = '<Этап не указан>'"), 
				Строка(Выборка.ТекущееСостояние)) 
				+ " " + Выборка.КоличествоКандидатов;
			НавигационнаяСтрока = СтрокаНавигационнойСсылкиСостоянияКандидатов(Выборка.ТекущееСостояние);
			ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстСостояния, , , , НавигационнаяСтрока));
		КонецЦикла;
		ИнформационнаяСтрока = Новый ФорматированнаяСтрока(ЧастиНадписи);
		ОтборСтрок = Новый Структура("Вакансия");
		ОтборСтрок.Вакансия = Выборка.Вакансия;
		НайденныеСтроки = ДанныеВакансий.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ИнформационнаяСтрокаКандидатов = ИнформационнаяСтрока;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияШтатногоРасписанияПоДолжностиПодразделению(ДанныеВакансий)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;

	// Получаем данные по вакансиям, у которых массовый набор, и они на должность в подразделение.
	ОтборСтрок = Новый Структура("НазначениеНабора, СпособНабора");
	ОтборСтрок.НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ДолжностьПодразделение;
	ОтборСтрок.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор;
	НайденныеСтроки = ДанныеВакансий.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(ТекущаяДатаСеанса());
	
	Должности = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Должность");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Должность", "В", Должности);
	
	УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
		МенеджерВТ, Истина, ПараметрыПостроения, "КоличествоСтавок", "ВТШтатноеРасписаниеПоДолжностям");
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Должность КАК Должность,
		|	ШтатноеРасписание.Подразделение КАК Подразделение,
		|	ШтатноеРасписание.Позиция КАК Позиция,
		|	СУММА(ШтатноеРасписание.КоличествоСтавок) КАК КоличествоСтавок
		|ИЗ
		|	(ВЫБРАТЬ
		|		ШтатноеРасписание.Должность КАК Должность,
		|		ШтатноеРасписание.ПозицияШтатногоРасписания КАК Позиция,
		|		ВышестоящиеПодразделения.ВышестоящаяСтруктурнаяЕдиница КАК Подразделение,
		|		ШтатноеРасписание.КоличествоСтавок КАК КоличествоСтавок
		|	ИЗ
		|		ВТШтатноеРасписаниеПоДолжностям КАК ШтатноеРасписание
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|			ПО (МестоПозиции.Позиция = ШтатноеРасписание.ПозицияШтатногоРасписания)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК ВышестоящиеПодразделения
		|			ПО (ВышестоящиеПодразделения.СтруктурнаяЕдиница = МестоПозиции.Подразделение)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ШтатноеРасписание.Должность,
		|		ШтатноеРасписание.ПозицияШтатногоРасписания,
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|		ШтатноеРасписание.КоличествоСтавок
		|	ИЗ
		|		ВТШтатноеРасписаниеПоДолжностям КАК ШтатноеРасписание) КАК ШтатноеРасписание
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтатноеРасписание.Должность,
		|	ШтатноеРасписание.Подразделение,
		|	ШтатноеРасписание.Позиция
		|
		|ИМЕЮЩИЕ
		|	СУММА(ШтатноеРасписание.КоличествоСтавок) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтатноеРасписание.Должность,
		|	ШтатноеРасписание.Подразделение,
		|	ШтатноеРасписание.Позиция";
	ДанныеСтавок = Запрос.Выполнить().Выгрузить();
	Если ДанныеСтавок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтавок.Индексы.Добавить("Должность,Подразделение");
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОтборСтрок = Новый Структура("Должность, Подразделение");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, НайденнаяСтрока);
		ДанныеСтавокПоДолжностиПодразделению = ДанныеСтавок.НайтиСтроки(ОтборСтрок);
		НайденнаяСтрока.КоличествоПозиций = 0;
		НайденнаяСтрока.КоличествоСтавок = 0;
		Для Каждого СтрокаПозиции Из ДанныеСтавокПоДолжностиПодразделению Цикл
			НайденнаяСтрока.КоличествоПозиций = НайденнаяСтрока.КоличествоПозиций + 1;
			НайденнаяСтрока.КоличествоСтавок = НайденнаяСтрока.КоличествоСтавок + СтрокаПозиции.КоличествоСтавок;
			НайденнаяСтрока.ПозицииВакансии.Добавить(СтрокаПозиции.Позиция);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияШтатногоРасписания(ДанныеВакансий)
	
	ЗаполнитьСведенияШтатногоРасписанияПоПозициям(ДанныеВакансий);
	ЗаполнитьСведенияШтатногоРасписанияПоДолжностиПодразделению(ДанныеВакансий);
	
КонецПроцедуры

Функция НоваяТаблицаПозицииВакансий()
	
	ПозицииВакансий = Новый ТаблицаЗначений;
	ПозицииВакансий.Колонки.Добавить("Вакансия", Новый ОписаниеТипов("СправочникСсылка.Вакансии"));
	ПозицииВакансий.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ПозицииВакансий.Колонки.Добавить("СпособНабора", Новый ОписаниеТипов("ПеречислениеСсылка.СпособНабораПерсоналаНаВакансию"));
	ПозицииВакансий.Колонки.Добавить("НоваяПозиция", Новый ОписаниеТипов("Булево"));
	
	Возврат ПозицииВакансий;
	
КонецФункции

Процедура ЗаполнитьТаблицуПозицииВакансий(ДанныеВакансий, ПозицииВакансий)
	
	ОтборСтрок = Новый Структура("НазначениеНабора, СпособНабора");
	ОтборСтрок.НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ДолжностьПодразделение;
	ОтборСтрок.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор;
	НайденныеСтроки = ДанныеВакансий.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаДанных Из НайденныеСтроки Цикл
		Для Каждого Позиция Из СтрокаДанных.ПозицииВакансии Цикл
			НоваяСтрока = ПозицииВакансий.Добавить();
			НоваяСтрока.Вакансия = СтрокаДанных.Вакансия;
			НоваяСтрока.Позиция = Позиция;
			НоваяСтрока.СпособНабора = СтрокаДанных.СпособНабора;
		КонецЦикла;
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("НазначениеНабора, НоваяПозиция");
	ОтборСтрок.НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания;
	ОтборСтрок.НоваяПозиция = Ложь;
	НайденныеСтроки = ДанныеВакансий.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаДанных Из НайденныеСтроки Цикл
		НоваяСтрока = ПозицииВакансий.Добавить();
		НоваяСтрока.Вакансия = СтрокаДанных.Вакансия;
		НоваяСтрока.Позиция = СтрокаДанных.Позиция;
		НоваяСтрока.СпособНабора = СтрокаДанных.СпособНабора;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗанятоСтавокПоПозициямВакансий(ДанныеВакансий, ПозицииВакансий)
	
	ПозицииМассив = ПозицииВакансий.ВыгрузитьКолонку("Позиция");
	
	Если ПозицииМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗанятоСтавокПоПозициям = УправлениеШтатнымРасписанием.ЗанятостьПозицийШтатногоРасписания(ПозицииМассив);
	
	Если ЗанятоСтавокПоПозициям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗанятоСтавокПоПозициям.Индексы.Добавить("ПозицияШтатногоРасписания");
	
	ОтборСтрок = Новый Структура("ПозицияШтатногоРасписания");
	Для Каждого СтрокаВакансии Из ДанныеВакансий Цикл
		СтрокаВакансии.ЗанятоСтавок = 0;
		Для Каждого Позиция Из СтрокаВакансии.ПозицииВакансии Цикл
			ОтборСтрок.ПозицияШтатногоРасписания = Позиция;
			НайденныеСтроки = ЗанятоСтавокПоПозициям.НайтиСтроки(ОтборСтрок);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СтрокаВакансии.ЗанятоСтавок = СтрокаВакансии.ЗанятоСтавок + НайденнаяСтрока.КоличествоСтавок;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗанятыСотрудниками(ДанныеВакансий, ПозицииВакансий)
	
	ОтборСтрок = Новый Структура("СпособНабора, НоваяПозиция");
	ОтборСтрок.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор;
	ОтборСтрок.НоваяПозиция = Ложь;
	
	ПозицииЕдиничногоНабора = ПозицииВакансий.Скопировать(ОтборСтрок, "Вакансия, Позиция");
	Если ПозицииЕдиничногоНабора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыЗапроса.НачалоПериода = ТекущаяДатаСеанса();
	ПараметрыЗапроса.ОкончаниеПериода = ТекущаяДатаСеанса();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыЗапроса.Отборы, "ДолжностьПоШтатномуРасписанию", "В", ПозицииЕдиничногоНабора.ВыгрузитьКолонку("Позиция"));
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, Истина, ПараметрыЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Сотрудник КАК Сотрудник,
		|	РабочиеМеста.ДолжностьПоШтатномуРасписанию КАК Позиция
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл
		ОтборСтрок = Новый Структура("Позиция");
		ОтборСтрок.Позиция = Выборка.Позиция;
		НайденныеСтроки = ДанныеВакансий.НайтиСтроки(ОтборСтрок);
		Пока Выборка.Следующий() Цикл
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ЗанятоСотрудниками.Добавить(Выборка.Сотрудник);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформационнуюСтрокуЗанятости(СтрокаТаблицы)
		
	ВакантноСтавок = СтрокаТаблицы.КоличествоСтавок - СтрокаТаблицы.ЗанятоСтавок;
	
	ЧастиНадписи = Новый Массив;
	
	ТекстВакантноСтавок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';Вакантна %1 ставка;;Вакантно %1 ставки;Вакантно %1 ставок;Вакантно %1 ставки'"), 
		ВакантноСтавок);
	ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстВакантноСтавок, Новый Шрифт(, , Истина)));
	
	Если СтрокаТаблицы.НазначениеНабора <> Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания Тогда
		ТекстПозиций = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';по %1 позиции;;по %1 позициям;по %1 позициям;по %1 позициям'"), 
			СтрокаТаблицы.КоличествоПозиций);
		ЧастиНадписи.Добавить(" ");	
		ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстПозиций, Новый Шрифт(, , Истина), , , "ПозицииВакансии"));
	КонецЕсли;
	
	ТекстКоличествоСтавок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';запланирована %1 ставка;;запланировано %1 ставки;запланировано %1 ставок;запланировано %1 ставки'"), 
		СтрокаТаблицы.КоличествоСтавок);
	ЧастиНадписи.Добавить(" (");	
	ЧастиНадписи.Добавить(ТекстКоличествоСтавок);
	
	ТекстЗанятоСтавок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';занята %1 ставка;;занято %1 ставки;занято %1 ставок;занято %1 ставки'"), 
		СтрокаТаблицы.ЗанятоСтавок);
	ЧастиНадписи.Добавить(", ");	
	ЧастиНадписи.Добавить(ТекстЗанятоСтавок);
	
	Сотрудников = СтрокаТаблицы.ЗанятоСотрудниками.Количество();
	Если Сотрудников > 0 Тогда
		ЧастиНадписи.Добавить(" ");
		ЧастиНадписи.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';сотрудником;;сотрудниками;сотрудниками;сотрудниками'"), 
			Сотрудников));
		ЧастиНадписи.Добавить(" ");
		СотрудниковВключено = 0;
		Для Каждого Сотрудник Из СтрокаТаблицы.ЗанятоСотрудниками Цикл
			Если СотрудниковВключено = 3 Тогда
				Прервать;
			КонецЕсли;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Сотрудник));
			Если СотрудниковВключено > 0 Тогда
				ЧастиНадписи.Добавить(", ");
			КонецЕсли;
			ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ФамилияИнициалы, , , , ПолучитьНавигационнуюСсылку(Сотрудник)));
			СотрудниковВключено = СотрудниковВключено + 1;
		КонецЦикла;
		ЕщеОсталось = Сотрудников - СотрудниковВключено;
		Если ЕщеОсталось > 0 Тогда
			ЧастиНадписи.Добавить(" ");
			ЧастиНадписи.Добавить(НСтр("ru = 'и'"));
			ЧастиНадписи.Добавить(" ");
			ТекстЕщеСотрудники = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'еще %1'"), 
				ЕщеОсталось);
			ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстЕщеСотрудники, , , , "СотрудникиПозиции"));
		КонецЕсли;
	КонецЕсли;
	
	ЧастиНадписи.Добавить(")");	
		
	СтрокаТаблицы.ИнформационнаяСтрокаЗанятости = Новый ФорматированнаяСтрока(ЧастиНадписи);
	
КонецПроцедуры

Функция СтрокаНавигационнойСсылкиСостоянияКандидатов(СостояниеКандидата)
	
	Если ТипЗнч(СостояниеКандидата) = Тип("СправочникСсылка.ЭтапыРаботыСКандидатами") Тогда
		Если СостояниеКандидата.Пустая() Тогда
			Возврат Строка("СостояниеКандидата_Этап_ПустаяСсылка");
		КонецЕсли;
		Возврат Строка("СостояниеКандидата_Этап_" + СостояниеКандидата.УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТипЗнч(СостояниеКандидата) = Тип("ПеречислениеСсылка.СостоянияСогласования") Тогда
		Возврат Строка("СостояниеКандидата_Решение_" + ОбщегоНазначения.ИмяЗначенияПеречисления(СостояниеКандидата));
	КонецЕсли;
	
	Если ТипЗнч(СостояниеКандидата) = Тип("Строка") Тогда
		Возврат Строка("СостояниеКандидата_Сотрудники_" + СостояниеКандидата);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьЗначенияРеквизитовШаблонаОтправкиОписания(Сообщение, ПредметСообщения, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ВладелецШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОписания = "";
	Если Не Сообщение.ДополнительныеПараметры.Свойство("ИдентификаторОписания", ИдентификаторОписания) 
		Или ИдентификаторОписания = "Вакансия" Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = Сообщение.ЗначенияРеквизитов;
	Выборка = ПодборПерсонала.ВыборкаДанныхОписанияВакансии(ИдентификаторОписания, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредметСообщения));
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПолеДанных = "КонтактноеЛицо" Тогда
			
			Ответственный = ЗначенияРеквизитов.Получить("Ответственный");
			Если ЗначениеЗаполнено(Ответственный) И ЗначениеЗаполнено(Ответственный.Получить("Наименование")) Тогда
				Ответственный.Вставить("Наименование", Выборка.Значение);
			КонецЕсли;
			
		ИначеЕсли Выборка.ПолеДанных = "Позиция" Тогда
			
			Позиция = ЗначенияРеквизитов.Получить("Позиция");
			Если ЗначениеЗаполнено(Позиция) И ЗначениеЗаполнено(Позиция.Получить("Наименование")) Тогда
				Позиция.Вставить("Наименование", Выборка.Значение);
			КонецЕсли;
			
		ИначеЕсли Выборка.ПолеДанных = "НаименованиеВакансии" Тогда
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Получить("Наименование")) Тогда
				ЗначенияРеквизитов.Вставить("Наименование", Выборка.Значение);
			ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.Получить("УточнениеНаименования")) Тогда
				ЗначенияРеквизитов.Вставить("УточнениеНаименования", Выборка.Значение);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Получить(Выборка.ПолеДанных)) Тогда
				ЗначенияРеквизитов.Вставить(Выборка.ПолеДанных, Выборка.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеВакансииСоответствуетПрофилю(ВакансияОбъект, ДанныеПрофиля = Неопределено) Экспорт

	Если ДанныеПрофиля = Неопределено Тогда
		ДанныеПрофиля = Справочники.ПрофилиДолжностей.ДанныеПрофиляДолжности(ВакансияОбъект.ПрофильДолжности);
	КонецЕсли;

	Если ВакансияОбъект.Требования <> ДанныеПрофиля.Требования Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВакансияОбъект.Обязанности <> ДанныеПрофиля.Обязанности Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВакансияОбъект.Условия <> ДанныеПрофиля.Условия Тогда
		Возврат Ложь;
	КонецЕсли;

	ИменаКолонок = "ЭтапРаботы,Комментарий";
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ВакансияОбъект.ЭтапыРаботыСКандидатами, ДанныеПрофиля.ЭтапыРаботыСКандидатами, ИменаКолонок, , Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью") Тогда
		ИменаКолонок = "Характеристика,Значение,Вес,ТребуетсяПроверка,ТребуетсяОбучение,ВесЗначения";
		Если Не ОбщегоНазначения.КоллекцииИдентичны(ВакансияОбъект.ХарактеристикиПерсонала, ДанныеПрофиля.ХарактеристикиПерсонала, ИменаКолонок) Тогда
			Возврат Ложь;
		КонецЕсли;
		ИменаКолонок = "ДействиеСотрудника";
		Если Не ОбщегоНазначения.КоллекцииИдентичны(ВакансияОбъект.ДействияСотрудников, ДанныеПрофиля.ДействияСотрудников, ИменаКолонок, , Истина) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

#КонецОбласти

#КонецЕсли