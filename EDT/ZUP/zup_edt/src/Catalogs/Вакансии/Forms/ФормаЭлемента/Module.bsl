#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПослеЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "ГруппаКнопокРаботаСФайлами";
	ПараметрыГиперссылки.Владелец = "Объект.Ссылка";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГлобальныеКомандыФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКомандыФормы");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		// Заявку сбрасываем при копировании.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Основание = Неопределено;
		КонецЕсли;
		// Проверка наличия заявки.
		Если ПолучитьФункциональнуюОпцию("ОткрытиеВакансииТребуетСогласования") И Не ЗначениеЗаполнено(Объект.Основание) Тогда
			ВызватьИсключение НСтр("ru = 'Открытие новой вакансии доступно только по согласованной заявке на подбор персонала.'");
		КонецЕсли;
		// Устанавливаем ссылку нового
		ВакансияСсылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
		
		ЗаполнитьНаименование(ЭтаФорма);
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка);
		
		// Заполняем реквизиты значениями по умолчанию.
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		// Заполняем умолчательное состояние Открыта для новой вакансии.
		СостоянияВакансий.Вакансия = ВакансияСсылка;
		СостоянияВакансий.Период = ТекущаяДатаСеанса();
		СостоянияВакансий.Состояние = Перечисления.СостоянияВакансии.Открыта;
		Объект.ДатаОткрытия = СостоянияВакансий.Период;
		
		Если Не ЗначениеЗаполнено(Объект.ПланируемаяДатаЗакрытия) Тогда
			Объект.ПланируемаяДатаЗакрытия =
				ПодборПерсонала.ПланируемаяДатаЗакрытияПоУмолчанию(Объект.ДатаОткрытия);
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	ДоступноДобавлениеИзменение = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.АнкетыКандидатов);
	ДоступностьОписания = СоответствуетПрофилюДолжностиЧисло = 0;
	Элементы.Характеристики.ТолькоПросмотр = Не (ДоступностьОписания И ДоступноДобавлениеИзменение);
	Элементы.ХарактеристикиПерсоналаОткрытьПодборХарактеристикПерсонала.Доступность = ДоступностьОписания И ДоступноДобавлениеИзменение;
	
	ПодборПерсоналаФормы.УстановитьВидимостьЭлементаФормы(Элементы.ОткликиКандидатовЗагрузитьОткликиССайта);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОткликиКандидатов.Отбор, "Вакансия", ВакансияСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Публикации.Отбор, "Вакансия", ВакансияСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Оплаты, "Вакансия", ВакансияСсылка);
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.РасходыНаИсточникИнформацииОКандидатах) Тогда
		Элементы.Оплаты.Видимость = Ложь;
	КонецЕсли;
	
	НастроитьСписокКандидатов();
	
	УстановитьАктивнуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НачатьЗаполнениеИнформацииЗанятости();
	НачатьЗаполнениеИнформационнойСтрокиКандидатов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВакансияСсылка = Объект.Ссылка;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтаФорма, ВакансияСсылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "Проведение_Анкета" Тогда
		Элементы.Кандидаты.Обновить();
	ИначеЕсли ИмяСобытия = "СохранениеНастроекВопросовДляСобеседования" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьОтображениеНастроекАнкет(); 
	ИначеЕсли ИмяСобытия = "ЗаписьВариантаПечати" Тогда
		ОбновитьСоставПодключаемыхКомандНаСервере();
	КонецЕсли;
	
	ОбработатьОповещениеРедактированияИстории(ИмяСобытия, Параметр, Источник);
	
	ОбработатьОповещенияПубликацииВакансий(ИмяСобытия, Параметр, Источник);
	ОбработатьОповещенияЭтаповРаботыСКандидатами(ИмяСобытия, Параметр, Источник);
	ОбработатьОповещенияИзмененияКандидата(ИмяСобытия, Параметр, Источник);
	
	ОбработатьОповещениеСогласованияВакансий(ИмяСобытия, Параметр, Источник);
	ОбработатьОповещениеИзмененияПозиции(ИмяСобытия, Параметр, Источник);
	ОбработатьОповещениеИзмененияДанныхМестаРаботы(ИмяСобытия, Параметр, Источник);
	
	ОбработатьОповещениеИзмененияПрофиляДолжности(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка, Отказ);
	
	Если ДополнятьПредставление И Не ЗначениеЗаполнено(Объект.УточнениеНаименования) Тогда
		ТекстСообщения = НСтр("ru = 'Дополнение представления не заполнено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.УточнениеНаименования", , Отказ);
	КонецЕсли;
	
	ХарактеристикиПерсоналаФормы.ОбработкаПроверкиЗаполненияТабличныхЧастейХарактеристик(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиПозицияМассовогоНабора(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработкаНавигационнойСсылкиСостоянияКандидатов(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработкаНавигационнойСсылкиСотрудникиПозиции(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПроверитьЗаполнениеЭтаповРаботыСКандидатами();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСостоянияВакансий(ТекущийОбъект);
	ТекущийОбъект.ПроверитьНаличиеВакансийМассовогоНабора(Отказ);

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОЗаписиВакансии();

	Если ЗакрыватьПослеЗаписи Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	НачатьЗаполнениеИнформацииЗанятости();
	НачатьЗаполнениеИнформационнойСтрокиКандидатов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПозицияПредыдущееЗначение = Неопределено;
	ПричинаОткрытияПредыдущееЗначение = Неопределено;
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособНабораПриИзменении(Элемент)
	
	УстановитьДоступностьНазначенияНабора(ЭтаФорма);
	УстановитьВидимостьИнформационнойСтрокиЗанятости(ЭтаФорма);
	УстановитьВидимостьПричиныОткрытия(ЭтаФорма);
	УстановитьВидимостьНоваяСуществующаяПозиция(ЭтаФорма);
	НачатьЗаполнениеИнформацииЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяПозицияПриИзменении(Элемент)
	
	УстановитьДоступностьНазначенияНабора(ЭтаФорма);
	УстановитьВидимостьПричиныОткрытия(ЭтаФорма);
	УстановитьВидимостьИнформационнойСтрокиЗанятости(ЭтаФорма);
	УстановитьНаименованиеВручную(ЭтаФорма);
	НачатьЗаполнениеИнформацииЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеНабораПозицияПриИзменении(Элемент)
	
	УстановитьДоступностьПозиции(ЭтаФорма);
	УстановитьДоступностьДолжностиПодразделения(ЭтаФорма);
	НачатьЗаполнениеИнформацииЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияПриИзменении(Элемент)
	
	ПрежнийПрофиль = Объект.ПрофильДолжности;
	
	Если Не ЗначениеЗаполнено(Объект.Позиция) Тогда
		Объект.Подразделение = Неопределено;
		Объект.ПредполагаемыйДоход = Неопределено;
		Объект.Должность = Неопределено;
	Иначе
		ЗаполнитьПоПозицииШтатногоРасписания();
	КонецЕсли;
	
	ЗаполнитьНаименование(ЭтотОбъект);
	ЗаполнитьАльтернативныеНаименования(ЭтотОбъект);
	
	УстановитьВидимостьИнформационнойСтрокиЗанятости(ЭтотОбъект);
	НачатьЗаполнениеИнформацииЗанятости();
	
	Если ПрежнийПрофиль <> Объект.ПрофильДолжности Тогда
		ЗаполнитьПрофильДолжностиИзПозиции();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеНабораДолжностьПодразделениеПриИзменении(Элемент)
	
	УстановитьДоступностьПозиции(ЭтаФорма);
	УстановитьДоступностьДолжностиПодразделения(ЭтаФорма);
	НачатьЗаполнениеИнформацииЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ОчиститьПредыдущееЗначениеПозиции();
	ЗаполнитьНаименование(ЭтаФорма);
	УстановитьНаименованиеВручную(ЭтаФорма);
	ЗаполнитьАльтернативныеНаименования(ЭтотОбъект);
	УстановитьВидимостьИнформационнойСтрокиЗанятости(ЭтотОбъект);
	НачатьЗаполнениеИнформацииЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОчиститьПредыдущееЗначениеПозиции();
	
	ЗаполнитьПоПодразделению();
	
	ЗаполнитьНаименование(ЭтаФорма);
	УстановитьНаименованиеВручную(ЭтаФорма);
	ЗаполнитьАльтернативныеНаименования(ЭтотОбъект);
	УстановитьВидимостьИнформационнойСтрокиЗанятости(ЭтотОбъект);
	НачатьЗаполнениеИнформацииЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		ОчиститьДанныеСогласования();
		УстановитьПанельСостояния();
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Заполнить вакансию по выбранной заявке?'");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаЗакрытияПриИзменении(Элемент)
	УстановитьПодсказкуДатыЗакрытия(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
КонецПроцедуры

&НаКлиенте
Процедура КандидатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Перед созданием кандидата необходимо записать вакансию.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбрабатываемыеСсылки = Новый Массив;
	ОбрабатываемыеСсылки.Добавить("ДатаЗакрытия");
	ОбрабатываемыеСсылки.Добавить("ДатаОтмены");
	ОбрабатываемыеСсылки.Добавить("ДатаПриостановки");
	
	Если ОбрабатываемыеСсылки.Найти(НавигационнаяСсылкаФорматированнойСтроки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Предложим пользователю выбрать дату.
	ПараметрыВыбораДаты = Новый Структура("НачальноеЗаполнение, Заголовок, ПоясняющийТекст");
	ПараметрыВыбораДаты.НачальноеЗаполнение = СостоянияВакансий.Период;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ДатаПриостановки" Тогда
		ПараметрыВыбораДаты.Заголовок = НСтр("ru = 'Дата приостановки'");
		ПараметрыВыбораДаты.ПоясняющийТекст = НСтр("ru = 'Выберите дату, с которой следует приостановить набор персонала по вакансии.'");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДатаОтмены" Тогда
		ПараметрыВыбораДаты.Заголовок = НСтр("ru = 'Дата отмены набора'");
		ПараметрыВыбораДаты.ПоясняющийТекст = НСтр("ru = 'Выберите дату, с которой набор персонала отменен по вакансии.'");
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура(
		"Состояние, 
		|ДатаСостояния");
	ПараметрыОповещения.Состояние = СостоянияВакансий.Состояние;
	ПараметрыОповещения.ДатаСостояния = СостоянияВакансий.Период;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДатыСостоянияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыВыбораДаты, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствуетПрофилюДолжностиЧислоПриИзменении(Элемент)
	
	Если СоответствуетПрофилюДолжностиЧисло = 1 Тогда
		НачатьЗаполнениеПоДаннымПрофиля();
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьЭлектронноеИнтервью Тогда
		Если Объект.Ссылка.Пустая() Тогда
			ТекстПредупреждения = НСтр("ru = 'Произвольное описание вакансии
		                                |возможно только после записи данных.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			СоответствуетПрофилюДолжностиЧисло = 1;
			Возврат;
		КонецЕсли;
		СкопироватьШаблоныАнкетЭтаповРаботыСКандидатами();
	КонецЕсли;
	
	УстановитьДоступностьОписанияВакансии(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильДолжностиПриИзменении(Элемент)
	
	Если СоответствуетПрофилюДолжностиЧисло = 1 Тогда
		// Заполняем по данным профиля.
		ЗаполнитьОписаниеИзПрофиляДолжности();
	Иначе
		УстановитьПредупреждениеОРазличияхСПрофилем();
	КонецЕсли;
	
	УстановитьДоступностьТумблераСоответствия(ЭтаФорма);
	ЗаполнитьАльтернативныеНаименования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнятьПредставлениеПриИзменении(Элемент)
	УстановитьСвойстваУточненияНаименования(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УточнениеНаименованияПриИзменении(Элемент)
	ЗаполнитьНаименование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВручнуюПриИзменении(Элемент)
	УстановитьСвойстваПоляНаименование(ЭтаФорма);
КонецПроцедуры

#Область ИнтеграцияРекрутинговыхСайтов

&НаКлиенте
Процедура ПубликацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПубликацииАдресПубликации" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Элемент.ТекущиеДанные.АдресПубликации);
		Возврат;
	КонецЕсли;
	
	ИнтеграцияРекрутинговыхСайтовКлиент.ОткрытьФормуНастройкиПубликацииАвторизация(
		ЭтотОбъект, 
		Объект.Ссылка, 
		ТекущиеДанные.МестоПубликации, 
		ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПубликацииПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыРаботыСПубликацией");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыРаботыСПубликацией", 0.2, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПубликацииПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ИнтеграцияРекрутинговыхСайтовРедакция3.ПубликацииПриПолученииДанныхНаСервере(Настройки, Строки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДействияСотрудниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияДействий(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ДействияСотрудниковПередУдалением(Элемент, Отказ)
	
	Если Элементы.ДействияСотрудников.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеДействия = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элементы.ДействияСотрудников.ВыделенныеСтроки Цикл
		СтрокаДействия = Объект.ДействияСотрудников.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаДействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеДействия.Добавить(СтрокаДействия.ДействиеСотрудника);
	КонецЦикла;
	
	ПрочиеДействия = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.ДействияСотрудников Цикл
		Если УдаляемыеДействия.Найти(ТекущаяСтрока.ДействиеСотрудника) = Неопределено Тогда
			ПрочиеДействия.Добавить(ТекущаяСтрока.ДействиеСотрудника);
		КонецЕсли;
	КонецЦикла;
	МассивХарактеристик = Новый Массив;
	Для Каждого ТекущаяСтрока Из Характеристики Цикл
		МассивХарактеристик.Добавить(ТекущаяСтрока.Характеристика);
	КонецЦикла;
	МассивЗначенийХарактеристик = Новый Массив;
	Для Каждого ТекущаяСтрока Из ЗначенияХарактеристики Цикл
		МассивЗначенийХарактеристик.Добавить(ТекущаяСтрока.Значение);
	КонецЦикла;
	
	ЭлектронноеИнтервьюКлиент.УдалитьДействияСотрудника(ЭтаФорма, УдаляемыеДействия, ПрочиеДействия, МассивХарактеристик, МассивЗначенийХарактеристик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ДействияСотрудников.ТекущиеДанные.ДействиеСотрудника);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияХарактеристик(ЭтаФорма, Копирование, Отказ, Новый ОписаниеОповещения("ДобавитьХарактеристикиПерсоналаНаКлиенте", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПередУдалением(Элемент, Отказ)
	
	Если Элементы.Характеристики.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Модифицированность = Истина;
	
	ИзменяемыеХарактеристики = Новый Структура;
	УдаляемыеХарактеристики = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элементы.Характеристики.ВыделенныеСтроки Цикл
		СтрокаХарактеристики = Характеристики.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаХарактеристики = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеХарактеристики.Добавить(СтрокаХарактеристики.Характеристика);
	КонецЦикла;
	ИзменяемыеХарактеристики.Вставить("УдаляемыеХарактеристики", УдаляемыеХарактеристики);
	ИзменяемыеХарактеристики.Вставить("ДобавляемыеХарактеристики", Новый Массив);
	
	ЭлектронноеИнтервьюКлиент.ИзменитьСоставХарактеристик(Объект, Характеристики, ЗначенияХарактеристики, ИзменяемыеХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ХарактеристикиЗначенияСтрокой" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДоступноДобавлениеИзменение Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Характеристики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиПерсоналаКлиент.ОткрытьНастройкуЗначенийХарактеристик(ЭтаФорма, ТекущиеДанные.Характеристика);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.Характеристики.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ХарактеристикаРедактируемойСтроки = Элементы.Характеристики.ТекущиеДанные.Характеристика;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Характеристики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеИнтервьюКлиент.ОбработатьИзменениеХарактеристики(ЭтаФорма, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	НачатьДобавлениеРасходовНаПубликацию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыРаботыСКандидатами

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЭтапыРаботыСКандидатамиНастройкаАнкеты" Тогда
		СтандартнаяОбработка = Ложь;
		НачатьНастройкуВопросовДляСобеседования(Элементы.ЭтапыРаботыСКандидатами.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	НачатьПодборЭтапов();
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиПослеУдаления(Элемент)
	УстановитьПредупреждениеЗаполненностиЭтаповРаботыСКандидатами(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(
		Объект.ЭтапыРаботыСКандидатами, ВыбранноеЗначение, "ЭтапРаботы");
	
	ЗаполнитьОтображениеНастроекАнкет();
	УстановитьПредупреждениеЗаполненностиЭтаповРаботыСКандидатами(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ЗакрыватьПослеЗаписи = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНеЗакрывать(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРаботы(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("СостоянияВакансий", ВакансияСсылка, ЭтаФорма, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура Возобновить(Команда)
	НачатьВозобновлениеНабораПоВакансии();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПрофилюДолжности(Команда)
	НачатьЗаполнениеПоДаннымПрофиля();
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПечатиОписания(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Варианты описания будут доступны только после записи данных.
			|Данные будут записаны.'");
		
		Оповещение = Новый ОписаниеОповещения("ВариантыПечатиОписанияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВариантыПечатиОписанияЗавершение(КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ИнтеграцияРекрутинговыхСайтов

&НаКлиенте
Процедура ПолучитьОтклики(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ПолучитьОткликиССайтов();
		Возврат;
	КонецЕсли;
	
	// Если элемент пока не записан, получить отклики невозможно.
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Получение откликов возможно только после записи данных.
			|Данные будут записаны.'");
			
	Оповещение = Новый ОписаниеОповещения("ПолучитьОткликиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьОткликиРассмотренными(Команда)
	
	ВыбранныеОтклики = Элементы.ОткликиКандидатов.ВыделенныеСтроки;
	Если ВыбранныеОтклики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтметитьОткликиРассмотреннымиНаСервере(ВыбранныеОтклики);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОткликиКандидатов"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОпубликоватьНаСайте(Кнопка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", Кнопка.Имя);
	
	Если Не Модифицированность И Не Параметры.Ключ.Пустая()Тогда
		ОпубликоватьВакансиюНаСайте(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Если элемент пока не записан, получить отклики невозможно.
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Публикация вакансии возможна только после записи данных.
			|Данные будут записаны.'");
	
	Оповещение = Новый ОписаниеОповещения("ОпубликоватьНаСайтеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПубликацию(Команда)
	
	ИнтеграцияРекрутинговыхСайтовКлиент.ОбновитьПубликациюНаСайте(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСПубликации(Команда)
	
	ИнтеграцияРекрутинговыхСайтовКлиент.СнятьСПубликацииНаСайте(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьПодборХарактеристикПерсонала(Команда)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуПодбораХарактеристик(ЭтаФорма, Истина, Новый ОписаниеОповещения("ДобавитьХарактеристикиПерсоналаНаКлиенте", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАнкеты(Команда)
	
	ТекущиеДанные = Элементы.ЭтапыРаботыСКандидатами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ШаблонАнкеты) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеИнтервьюКлиент.ПечатьАнкеты(ТекущиеДанные.ШаблонАнкеты);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФункциям(Команда)
	
	ЭлектронноеИнтервьюКлиент.ЗаполнитьПоФункциям(Объект, Характеристики, ЗначенияХарактеристики);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДействияДеревом(Команда)
	
	Если Элементы.ГруппаДействияСотрудников.ТекущаяСтраница = Элементы.СтраницаДействияСотрудниковСписком Тогда
		СписокДействий = Новый Массив;
		Для Каждого ТекущаяСтрока Из Объект.ДействияСотрудников Цикл
			СписокДействий.Добавить(ТекущаяСтрока.ДействиеСотрудника);
		КонецЦикла;
		ЗаполнитьДеревоДействийСотрудников(СписокДействий);
		Элементы.ГруппаДействияСотрудников.ТекущаяСтраница = Элементы.СтраницаДействияСотрудниковДеревом;
	Иначе
		Элементы.ГруппаДействияСотрудников.ТекущаяСтраница = Элементы.СтраницаДействияСотрудниковСписком;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОдобренныхОтклоненныхКандидатов(Команда)
	
	ТолькоКандидатыВРаботе = Элементы.ПоказыватьОдобренныхОтклоненныхКандидатов.Пометка;
	
	УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(ЭтаФорма, ТолькоКандидатыВРаботе);
	НачатьЗаполнениеИнформационнойСтрокиКандидатов();
	
	ПодключитьОбработчикОжидания("ПриИзмененииСохраняемойНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоСравнениюХарактеристик(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	Если Не Объект.Ссылка.Пустая() Тогда
		ПараметрыОткрытия.Вставить("Вакансия", Объект.Ссылка);	
		ВыделенныеСтроки = Элементы.Кандидаты.ВыделенныеСтроки;
		СписокФизЛиц = Новый Массив;
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			ФизЛицо = ФизическоеЛицоКандидата(ТекущаяСтрока);
			Если СписокФизЛиц.Найти(ФизЛицо) = Неопределено Тогда
				СписокФизЛиц.Добавить(ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		Если СписокФизЛиц.Количество() = 1 Тогда
			СписокФизЛиц.Очистить();
		КонецЕсли;
		ПараметрыОткрытия.Вставить("СписокФизЛиц", СписокФизЛиц);
	КонецЕсли;
	ОткрытьФорму("Обработка.СравнениеХарактеристикКандидатов.Форма", ПараметрыОткрытия,, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЭтапов(Команда)
	НачатьПодборЭтапов();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	СоответствуетПрофилюДолжностиЧисло = ТекущийОбъект.СоответствуетПрофилюДолжности;
	ДополнятьПредставление = ЗначениеЗаполнено(ТекущийОбъект.УточнениеНаименования);
	
	Если Не Параметры.Ключ.Пустая() Тогда
		СостоянияВакансийНаборЗаписейПрочитан = Ложь;
		ПрочитатьСостоянияВакансий();
	КонецЕсли;
	
	ПрочитатьСогласованиеВакансии(ТекущийОбъект);
	
	УстановитьПанельСостояния(ТекущийОбъект);
	УстановитьДоступностьОписанияВакансии(ЭтаФорма);
	УстановитьДоступностьТумблераСоответствия(ЭтаФорма);
	УстановитьСвойстваУточненияНаименования(ЭтаФорма);
	УстановитьВидимостьКомандыВариантовПечати();
	
	УстановитьДоступностьНазначенияНабора(ЭтаФорма);
	УстановитьДоступностьПозиции(ЭтаФорма);
	УстановитьДоступностьДолжностиПодразделения(ЭтаФорма);
	УстановитьВидимостьИнформационнойСтрокиЗанятости(ЭтаФорма);
	УстановитьВидимостьНоваяСуществующаяПозиция(ЭтаФорма);
	УстановитьВидимостьПричиныОткрытия(ЭтаФорма);
	УстановитьСвойстваПоляНаименование(ЭтаФорма);
	
	УстановитьПредупреждениеЗаполненностиЭтаповРаботыСКандидатами(ЭтаФорма);
	УстановитьПредупреждениеОРазличияхСПрофилем();
	
	ЗапомнитьЦветаОформления();
	УстановитьПодсказкуДатыЗакрытия(ЭтаФорма, ТекущаяДатаСеанса());
	
	ИнтеграцияРекрутинговыхСайтов.ВакансииПриПолученииДанныхНаСервере(ЭтотОбъект);
	
	УстановитьВидимостьЭлементовЭлектронногоИнтервью();
	
	ЗаполнитьОтображениеНастроекАнкет();
	ХарактеристикиПерсоналаФормы.ПрочитатьХарактеристикиВТаблицы(ТекущийОбъект.ХарактеристикиПерсонала, Характеристики, ЗначенияХарактеристики);
	ХарактеристикиПерсоналаФормы.ЗаполнитьКартинкуИВидХарактеристикиТаблицыХарактеристик(Характеристики);
	
	УстановитьСвойстваПоляОснование();
	ЗаполнитьАльтернативныеНаименования(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(ВакансияСсылка);
	КонецЕсли;
	ТекущийОбъект.СоответствуетПрофилюДолжности = СоответствуетПрофилюДолжностиЧисло;
	
	ХарактеристикиПерсоналаФормы.ПеренестиХарактеристикиВТабличнуюЧасть(ТекущийОбъект.ХарактеристикиПерсонала, Характеристики, ЗначенияХарактеристики);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы", Истина);
	
КонецПроцедуры

#Область ДлительнаяОперация

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСКлиента()
	
	ДлительнаяОперация = НачатьЗаписьДлительнойОперацией();
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьЗаписьДлительнойОперацией", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьЗаписьДлительнойОперацией()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СправочникОбъект = Неопределено;
	
	// Преобразовываем данные формы в объект.
	Если Модифицированность Тогда
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыВДанные(СправочникОбъект);
		ДанныеОбъекта = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(СправочникОбъект);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запись вакансии'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Справочники.Вакансии.ВыполнитьЗаписьОбъекта", ДанныеОбъекта, ДанныеФормыДляЗаписи());
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗаписьДлительнойОперацией(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ЗаписьПослеВыполненияДлительнойОперацииНаСервере(Результат.АдресРезультата);
	
	ОповеститьОЗаписиВакансии();
	
	Если ЗакрыватьПослеЗаписи Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Возврат;
	КонецЕсли;

	НачатьЗаполнениеИнформацииЗанятости();
	НачатьЗаполнениеИнформационнойСтрокиКандидатов();
	
	Если ПараметрыПослеЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПослеЗаписи.Свойство("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыПослеЗаписи["ОписаниеОповещения"]);
	КонецЕсли;
	
	ПараметрыПослеЗаписи = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьПослеВыполненияДлительнойОперацииНаСервере(АдресРезультата)
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(АдресРезультата);
	ПрочитатьДанныеОбъектаВФорму(ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ДанныеОбъекта));
	
КонецПроцедуры

&НаСервере
Функция ДанныеФормыДляЗаписи()
	Возврат Справочники.Вакансии.СериализоватьДанныеФормы(ЭтаФорма);
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповеститьОЗаписиВакансии()

	ПараметрыОповещения = Новый Структура("Вакансии, ПрофилиДолжностей");
	ПараметрыОповещения.Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВакансияСсылка);
	ПараметрыОповещения.ПрофилиДолжностей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПрофильДолжности);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(ВакансияСсылка, ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЭтаповРаботыСКандидатами()

	Если Объект.ЭтапыРаботыСКандидатами.Количество() > 0 Тогда
		ЗаписатьСКлиента();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеПользовательскойНастройки(ВакансияСсылка, "ЗадаватьВопросОНеЗаполненныхЭтапах", Истина) Тогда
		ЗаписатьСКлиента();
		Возврат;
	КонецЕсли;
	
	ОбработчикОтвета = Новый ОписаниеОповещения("ПроверитьЗаполнениеЭтаповРаботыСКандидатамиПослеОтветаНаВопрос", ЭтотОбъект);
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Этапы работы с кандидатами не заполнены'");
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;

	ТекстВопроса = НСтр("ru = 'Пока этапы работы не заполнены, работа с кандидатами будет недоступна.
						|Заполнение этапов работы определяет состав и последовательность рассмотрения кандидатов на эту вакансию.'");
	
	КнопкиОтвета = Новый СписокЗначений();
	КнопкиОтвета.Добавить(Истина, НСтр("ru = 'Все равно записать'"));
	КнопкиОтвета.Добавить(Ложь, НСтр("ru = 'Отмена'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОбработчикОтвета, ТекстВопроса, КнопкиОтвета, ПараметрыВопроса);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЭтаповРаботыСКандидатамиПослеОтветаНаВопрос(Ответ, ПараметрыВопроса) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ.БольшеНеЗадаватьЭтотВопрос Тогда
		СохранитьЗначениеПользовательскойНастройки(
			ВакансияСсылка, 
			"ЗадаватьВопросОНеЗаполненныхЭтапах", 
			Не Ответ.БольшеНеЗадаватьЭтотВопрос);
	КонецЕсли;
	
	Если Ответ.Значение <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСКлиента();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗначениеПользовательскойНастройки(Вакансия, ИмяНастройки, ЗначениеНастройки)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Вакансия, ИмяНастройки, ЗначениеНастройки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеПользовательскойНастройки(Вакансия, ИмяНастройки, ЗначениеПоУмолчанию = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Вакансия, ИмяНастройки, ЗначениеПоУмолчанию);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваУточненияНаименования(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.УточнениеНаименования.Доступность = Форма.ДополнятьПредставление;
	Элементы.УточнениеНаименования.АвтоОтметкаНезаполненного = Форма.ДополнятьПредставление;
	Элементы.УточнениеНаименования.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Форма.Объект.УточнениеНаименования);
	
	Если Не Форма.ДополнятьПредставление Тогда
		Форма.Объект.УточнениеНаименования = Неопределено;
		ЗаполнитьНаименование(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСостоянияВакансий()
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостоянияВакансий(ТекущийОбъект)
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляОснование()
	
	// Если создание вакансии требует согласования, то основание отображаем, иначе — нет.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаПодборПерсонала") Тогда
		Элементы.ОснованиеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ОснованиеГруппа.Видимость = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ОткрытиеВакансииТребуетСогласования") Тогда
		Элементы.Основание.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеВакансий") Тогда
		ОтборОснования = Новый Массив(Элементы.Основание.ПараметрыВыбора);
		ОтборОснования.Добавить(Новый ПараметрВыбора("ТолькоДляСозданияВакансий", Истина));
		Элементы.Основание.ПараметрыВыбора = Новый ФиксированныйМассив(ОтборОснования);
	КонецЕсли;
	
	Если Не Перечисления.СостоянияСогласования.РешениеПринято(Согласование.СостояниеСогласования) Тогда
		Элементы.ОснованиеСтраницы.ТекущаяСтраница = Элементы.ОснованиеЗаполненоСтраница;
	Иначе
		Если ЗначениеЗаполнено(Объект.Основание) Тогда
			Элементы.ОснованиеСтраницы.ТекущаяСтраница = Элементы.ОснованиеЗаполненоСтраница;
		Иначе
			Элементы.ОснованиеСтраницы.ТекущаяСтраница = Элементы.ОснованиеНеЗаполненоСтраница;
			Элементы.Рассмотрел.Заголовок = Согласование.СостояниеСогласования;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПанельСостояния(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	ПоказыватьПанель = Ложь;
	
	ОтображаемыеСостояния = Новый Массив;
	ОтображаемыеСостояния.Добавить(Перечисления.СостоянияВакансии.Закрыта);
	ОтображаемыеСостояния.Добавить(Перечисления.СостоянияВакансии.Отменена);
	ОтображаемыеСостояния.Добавить(Перечисления.СостоянияВакансии.Приостановлена);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеВакансий") Тогда
		Если Согласование.СостояниеСогласования <> Перечисления.СостоянияСогласования.Согласовано Тогда
			ПоказыватьПанель = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтображаемыеСостояния.Найти(СостоянияВакансий.Состояние) <> Неопределено Тогда
		ПоказыватьПанель = Истина;
	КонецЕсли;
	
	Если Не ПоказыватьПанель Тогда
		Элементы.СостояниеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеГруппа.Видимость = Истина;
	Элементы.СостояниеГруппа.ЦветТекстаЗаголовка = Новый Цвет;
	Элементы.ВозобновитьНабор.Видимость = Ложь;
	
	ПредставлениеСостояния = "";
	ЧастиПояснения = Новый Массив;
	Если СостоянияВакансий.Состояние = Перечисления.СостоянияВакансии.Закрыта Тогда
		ПредставлениеСостояния = НСтр("ru = 'Вакансия закрыта'");
		ЧастиПояснения.Добавить(НСтр("ru = 'Набор персонала на вакансию завершен'"));
		ЧастиПояснения.Добавить(" ");
		ЧастиПояснения.Добавить(Новый ФорматированнаяСтрока(Формат(СостоянияВакансий.Период, "ДЛФ=D"), , , , "ДатаЗакрытия"));
		Элементы.ВозобновитьНабор.Видимость = Истина;
	ИначеЕсли СостоянияВакансий.Состояние = Перечисления.СостоянияВакансии.Отменена Тогда
		ПредставлениеСостояния = НСтр("ru = 'Вакансия отменена'");
		ЧастиПояснения.Добавить(НСтр("ru = 'Набор персонала на вакансию отменен'"));
		ЧастиПояснения.Добавить(" ");
		ЧастиПояснения.Добавить(Новый ФорматированнаяСтрока(Формат(СостоянияВакансий.Период, "ДЛФ=D"), , , , "ДатаОтмены"));
		Элементы.ВозобновитьНабор.Видимость = Истина;
	ИначеЕсли СостоянияВакансий.Состояние = Перечисления.СостоянияВакансии.Приостановлена Тогда
		ПредставлениеСостояния = НСтр("ru = 'Набор приостановлен'");
		ЧастиПояснения.Добавить(НСтр("ru = 'Работа с вакансией приостановлена'"));
		ЧастиПояснения.Добавить(" ");
		ЧастиПояснения.Добавить(Новый ФорматированнаяСтрока(Формат(СостоянияВакансий.Период, "ДЛФ=D"), , , , "ДатаПриостановки"));
		Элементы.ВозобновитьНабор.Видимость = Истина;
	Иначе
		Если Согласование.СостояниеСогласования <> Перечисления.СостоянияСогласования.Согласовано Тогда
			Элементы.СостояниеГруппа.ЦветТекстаЗаголовка = ЦветаСтиля.ПросроченныеДанныеЦвет;
			Если Согласование.СостояниеСогласования = Перечисления.СостоянияСогласования.Отклонено Тогда
				ПредставлениеСостояния = НСтр("ru = 'Вакансия отклонена'");
				ЧастиПояснения.Добавить(НСтр("ru = 'Работа с кандидатами недоступна.'"));
			Иначе
				ПредставлениеСостояния = НСтр("ru = 'Вакансия не согласована'");
				ЧастиПояснения.Добавить(НСтр("ru = 'Работа с кандидатами доступна, но для одобрения кандидата требуется согласовать вакансию.'"));
				Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаПодборПерсонала") Тогда
					ЧастиПояснения.Добавить(" ");
					ЧастиПояснения.Добавить(НСтр("ru = 'Или выбрать согласованную заявку в качестве основания.'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СостояниеГруппа.Заголовок = ПредставлениеСостояния;
	Элементы.СостояниеДекорация.Заголовок = Новый ФорматированнаяСтрока(ЧастиПояснения);
	
	// Заполняем одобренного кандидата.
	ОдобренныйКандидат = Неопределено;
	Если СостоянияВакансий.Состояние = Перечисления.СостоянияВакансии.Закрыта Тогда
		// Формируем условие.
		ОтборКандидатов = Новый Структура("Вакансия, Состояние");
		ОтборКандидатов.Вакансия = ВакансияСсылка;
		ОтборКандидатов.Состояние = Перечисления.СостоянияСогласования.Согласовано;
		// Запрашиваем кандидатов.
		УстановитьПривилегированныйРежим(Истина);
		МассивКандидатов = Справочники.Кандидаты.КандидатыПоОтбору(ОтборКандидатов);
		УстановитьПривилегированныйРежим(Ложь);
		Если МассивКандидатов.Количество() > 0 Тогда
			ОдобренныйКандидат = МассивКандидатов[0];
		КонецЕсли;
	КонецЕсли;
	Элементы.ОдобренныйКандидат.Видимость = ЗначениеЗаполнено(ОдобренныйКандидат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьТумблераСоответствия(Форма)
	
	ТумблерДоступен = ЗначениеЗаполнено(Форма.Объект.ПрофильДолжности);
	
	Форма.Элементы.СоответствуетПрофилюДолжностиЧисло.Доступность = ТумблерДоступен;
	
	Если Не ТумблерДоступен Тогда 
		Форма.СоответствуетПрофилюДолжностиЧисло = 0;
		УстановитьДоступностьОписанияВакансии(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОписанияВакансии(Форма)
	
	ДоступностьОписания = Форма.СоответствуетПрофилюДолжностиЧисло = 0;
	
	Форма.Элементы.Требования.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.Обязанности.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.Условия.ТолькоПросмотр = Не ДоступностьОписания;
	
	Форма.Элементы.Характеристики.ТолькоПросмотр = Не (ДоступностьОписания И Форма.ДоступноДобавлениеИзменение);
	Форма.Элементы.ДействияСотрудников.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.ЭтапыРаботыСКандидатами.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.ЭтапыРаботыСКандидатамиПодборЭтапов.Доступность = ДоступностьОписания;
	Форма.Элементы.ХарактеристикиПерсоналаОткрытьПодборХарактеристикПерсонала.Доступность = ДоступностьОписания И Форма.ДоступноДобавлениеИзменение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредупреждениеЗаполненностиЭтаповРаботыСКандидатами(Форма) 
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	ЭтапыЗаполнены = Объект.ЭтапыРаботыСКандидатами.Количество() > 0;
	
	Если ЭтапыЗаполнены Тогда
		Элементы.ЭтапыРаботыСКандидатамиСтраница.Картинка = Новый Картинка();
		Элементы.ЭтапыНеЗаполненыПредупреждениеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Элементы.ЭтапыРаботыСКандидатамиСтраница.Картинка = БиблиотекаКартинок.Предупреждение;
	Элементы.ЭтапыНеЗаполненыПредупреждениеГруппа.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеПоДаннымПрофиля()
	
	ЗаголовокВопроса = НСтр("ru = 'Заполнение по данным профиля должности'");
	
	ТекстВопроса = НСтр("ru = 'Обязанности, требования, условия, этапы работы с кандидатами, - будут заменены аналогичными сведениями из профиля.
                         |Продолжить?'");
	
	Если ИспользоватьЭлектронноеИнтервью Тогда
		ТекстВопроса = НСтр("ru = 'Обязанности, требования, условия, функции и требования к характеристикам, этапы работы с кандидатами, - будут заменены аналогичными сведениями из профиля.
	                         |Продолжить?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗаполнениеПоДаннымПрофиля", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеПоДаннымПрофиля(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// Пользователь отказался от замены описания из профиля.
		СоответствуетПрофилюДолжностиЧисло = 0;
		УстановитьДоступностьОписанияВакансии(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОписаниеИзПрофиляДолжности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредупреждениеОРазличияхСПрофилем()
	
	Элементы.РазличияСПрофилемГруппа.Видимость = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ПрофильДолжности) Тогда
		Возврат;
	КонецЕсли;

	Если Не Справочники.Вакансии.ОписаниеВакансииСоответствуетПрофилю(Объект) Тогда
		Элементы.РазличияСПрофилемГруппа.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеИзПрофиляДолжности()

	Если Не ЗначениеЗаполнено(Объект.ПрофильДолжности) Тогда
		Возврат;
	КонецЕсли;
	
	ВакансияОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ВакансияОбъект);
	ВакансияОбъект.ЗаполнитьПоПрофилюДолжности(Объект.ПрофильДолжности, Ложь);
	ПрочитатьДанныеОбъектаВФорму(ВакансияОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПозицииШтатногоРасписания(Позиция)
	Возврат Справочники.ШтатноеРасписание.ДанныеПозицииШтатногоРасписания(Позиция);
КонецФункции

&НаСервере
Процедура ОтметитьОткликиРассмотреннымиНаСервере(ВыбранныеОтклики)
	
	Отклики = ПодборПерсонала.ПустаяТаблицаОткликиКандидатов();
	
	Для Каждого ВыбранныйОтклик Из ВыбранныеОтклики Цикл
		ЗаполнитьЗначенияСвойств(Отклики.Добавить(), ВыбранныйОтклик);
	КонецЦикла;
	
	ПодборПерсонала.УстановитьОткликамКандидатовОтметкуРассмотрено(Отклики);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВозобновлениеНабораПоВакансии()
	
	Если ЕстьПубликации() Тогда
		ТекстВопроса = НСтр("ru = 'Ранее вакансия была опубликована на рекрутинговых сайтах. Перейти к разделу публикации вакансии?'");
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаЕстьПубликации", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		ВозобновитьНаборНаСервере();
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВозобновитьНаборПослеВопросаЗаписать", ЭтотОбъект);
	ПоказатьВопросЗаписиВакансии(ОбработчикОповещения);

КонецПроцедуры

&НаСервере
Функция ЕстьПубликации()
	
	ПубликацииВакансий = ИнтеграцияРекрутинговыхСайтов.СайтыСПубликациейВакансии(Объект.Ссылка);
	Возврат Не (ПубликацииВакансий.Количество() = 0);
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаЕстьПубликации(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПубликацииСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаписиВакансии(ОбработчикОповещения)
	
	ТекстВопроса = НСтр("ru = 'Вакансия не записана.
                         |Для продолжения данные вакансии необходимо записать.'");
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьНаборПослеВопросаЗаписать(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;

	ВозобновитьНаборНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВозобновитьНаборНаСервере()
	
	Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	Справочники.Вакансии.ВозобновитьНабор(Вакансии, НачалоДня(ТекущаяДатаСеанса()));
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатыСостоянияЗавершение(ВыбраннаяДата, ПараметрыОповещения) Экспорт
	
	Если ВыбраннаяДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяДата = ПараметрыОповещения.ДатаСостояния Тогда
		Возврат;
	КонецЕсли;
	
	НачатьИзменениеДатыСостояния(ВыбраннаяДата, СостоянияВакансий.Состояние, ПараметрыОповещения.ДатаСостояния);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИзменениеДатыСостояния(ДатаСостояния, Состояние, ПрежняяДатаСостояния)
	
	Если Не Модифицированность Тогда
		ИзменитьДатуСостоянияНаСервере(ДатаСостояния, Состояние, ПрежняяДатаСостояния);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура(
		"Состояние, 
		|ДатаСостояния, 
		|ПрежняяДатаСостояния");
	ПараметрыОповещения.Состояние = Состояние;
	ПараметрыОповещения.ДатаСостояния = ДатаСостояния;
	ПараметрыОповещения.ПрежняяДатаСостояния = ПрежняяДатаСостояния;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ИзменитьДатуСостоянияПослеВопросаЗаписать", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопросЗаписиВакансии(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуСостоянияПослеВопросаЗаписать(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьДатуСостоянияНаСервере(ПараметрыОповещения.ДатаСостояния, ПараметрыОповещения.Состояние, ПараметрыОповещения.ПрежняяДатаСостояния);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуСостоянияНаСервере(ДатаСостояния, Состояние, ПрежняяДатаСостояния)
	
	Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	
	Справочники.Вакансии.УдалитьСостояние(Вакансии, ПрежняяДатаСостояния, Состояние);
	Справочники.Вакансии.УстановитьСостояние(Вакансии, ДатаСостояния, Состояние);
	
	Прочитать();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименование(Форма)
	
	Если Форма.Объект.НаименованиеВручную Тогда
		Возврат;
	КонецЕсли;
	
	ПодборПерсоналаКлиентСервер.ЗаполнитьНаименованиеВакансии(Форма.Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаименованиеВручную(Форма)
	
	Если ПустаяСтрока(Форма.Объект.Наименование) Тогда
		Форма.Объект.НаименованиеВручную = Истина;
		УстановитьСвойстваПоляНаименование(Форма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнятьСодержимое = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнятьСодержимое = Истина;
	КонецЕсли;
	
	ЗаполнитьПоОснованиюНаСервере(ЗаполнятьСодержимое);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере(ЗаполнятьСодержимое = Ложь)
	
	Если Не ЗаполнятьСодержимое Тогда
		ПрочитатьСогласованиеВакансии();
		УстановитьПанельСостояния();
		Возврат;
	КонецЕсли;
	
	ВакансияОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ВакансияОбъект);
	Попытка
		ВакансияОбъект.ЗаполнитьПоЗаявкеНаПодборПерсонала(ВакансияОбъект.Основание);
	Исключение
		Объект.Основание = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	ПрочитатьДанныеОбъектаВФорму(ВакансияОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПозицииШтатногоРасписания()
	
	ВакансияОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ВакансияОбъект);
	ВакансияОбъект.ЗаполнитьПоПозицииШтатногоРасписания(Объект.Позиция, Истина, Ложь);
	ПрочитатьДанныеОбъектаВФорму(ВакансияОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПодразделению()

	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Заявитель = Неопределено;
		Возврат;
	КонецЕсли;

	ВакансияОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ВакансияОбъект);
	ВакансияОбъект.ЗаполнитьЗаявителяРуководителемПодразделения();
	ПрочитатьДанныеОбъектаВФорму(ВакансияОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрофильДолжностиИзПозиции()
	
	УстановитьДоступностьТумблераСоответствия(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.ПрофильДолжности) Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствуетПрофилюДолжностиЧисло = 1 Тогда
		ЗаполнитьОписаниеИзПрофиляДолжности();
	Иначе
		СоответствуетПрофилюДолжностиЧисло = 1;
		НачатьЗаполнениеПоДаннымПрофиля();
	КонецЕсли;
	
КонецПроцедуры

#Область ИнтеграцияРекрутинговыхСайтов

&НаКлиенте
Процедура ПолучитьОткликиССайтов()
	
	ИнтеграцияРекрутинговыхСайтовКлиент.ПолучитьОтклики(Объект.Ссылка);
	
	Элементы.ОткликиКандидатов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОткликиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОткликиССайтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьВакансиюНаСайте(ДополнительныеПараметры)
	
	ИнтеграцияРекрутинговыхСайтовКлиент.ОпубликоватьНаСайте(ЭтотОбъект, ДополнительныеПараметры.ИмяКоманды, СоответствиеКомандИСайтов, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьНаСайтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОпубликоватьВакансиюНаСайте(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыПубликацииВакансии()
	
	ИнтеграцияРекрутинговыхСайтов.ОбновитьКомандыПубликацииВакансии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещенияПубликацииВакансий(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПубликацияВакансии" 
		Или ИмяСобытия = "ИзмененыНастройкиДоступаКСайтам" Тогда
		
		ОбновитьКомандыПубликацииВакансии();
		
		Если ИмяСобытия = "ПубликацияВакансии" Тогда
			Элементы.Публикации.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СнятиеВакансии" Тогда
		
		Элементы.Публикации.Обновить();
		ПубликацииПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыРаботыСПубликацией()
	
	ИнтеграцияРекрутинговыхСайтовКлиент.ОбновитьКомандыРаботыСПубликацией(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НачатьДобавлениеРасходовНаПубликацию()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		СоздатьРасходыНаПубликацию();
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьРасходыНаПубликациюПослеВопросаЗаписи", ЭтотОбъект);
	ПоказатьВопросЗаписиВакансии(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходыНаПубликациюПослеВопросаЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьРасходыНаПубликациюПослеЗаписи", ЭтотОбъект);
	НачатьЗапись(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗапись(ОбработчикОповещения)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	ПараметрыПослеЗаписи = Новый Структура("ОписаниеОповещения");
	ПараметрыПослеЗаписи.ОписаниеОповещения = ОбработчикОповещения;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходыНаПубликациюПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьРасходыНаПубликацию();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходыНаПубликацию()
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения");
	ПараметрыФормы.ЗначенияЗаполнения = Новый Структура("МассивВакансий", Новый Массив);
	ПараметрыФормы.ЗначенияЗаполнения.МассивВакансий.Добавить(ВакансияСсылка);
	
	ОткрытьФорму("Документ.РасходыНаИсточникИнформацииОКандидатах.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#Область ДобавлениеХарактеристик

&НаСервере
Процедура ДобавитьХарактеристикиИзДействийНаСервере(МассивДобавленныхДействий) Экспорт
	
	ДобавляемыеХарактеристики = ХарактеристикиПерсонала.МассивСтруктурХарактеристикСоЗначениямиИзДействий(МассивДобавленныхДействий);
	ХарактеристикиПерсоналаФормы.ДобавитьХарактеристикиСоЗначениями(Характеристики, ЗначенияХарактеристики, ДобавляемыеХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикиПерсоналаНаКлиенте(НовыеХарактеристики, ДополнительныеПараметры = Неопределено) Экспорт
	ДобавитьХарактеристикиПерсоналаНаСервере(НовыеХарактеристики, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьХарактеристикиПерсоналаНаСервере(НовыеХарактеристики, ДополнительныеПараметры)
	ХарактеристикиПерсоналаФормы.ДобавитьХарактеристикиВТабличнуюЧасть(ЭтаФорма, НовыеХарактеристики, ДополнительныеПараметры);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НачатьНастройкуВопросовДляСобеседования(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствуетПрофилюДолжностиЧисло = 0 Тогда	// Произвольный
		Если Объект.Ссылка.Пустая() Тогда
			ТекстПредупреждения = НСтр("ru = 'Переход к настройке вопросов для собеседования
				           					 |возможен только после записи данных.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения("ЗавершитьНастройкуВопросовДляСобеседования", ЭтаФорма, ПараметрыОповещения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ШаблонАнкеты", ТекущиеДанные.ШаблонАнкеты);
	ПараметрыФормы.Вставить("ЭтапРаботы", ТекущиеДанные.ЭтапРаботы);
	
	Если СоответствуетПрофилюДолжностиЧисло = 1 Тогда
		ПараметрыФормы.Вставить("Объект", Объект.ПрофильДолжности);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	Иначе
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.НастройкаВопросовДляСобеседования", 
		ПараметрыФормы, 
		ЭтаФорма, 
		Строка(УникальныйИдентификатор) + "_" + ТекущиеДанные.НомерСтроки, , ,
		Оповещение);	
	
КонецПроцедуры

// Обработчик оповещения о закрытии формы настройки вопросов для собеседования.
// Устанавливает сформированный шаблон анкеты для текущей строки этапов работы с кандидатами.
//
// Параметры 
//	Результат - СправочникСсылка.ШаблоныАнкет, Неопределено - ссылка на сформированный шаблон анкеты. 
//	ДополнительныеПараметры - Структура - структура дополнительных параметров, содержит текущую строку этапа работы с кандидатами.
//
&НаКлиенте
Процедура ЗавершитьНастройкуВопросовДляСобеседования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущиеДанные.ШаблонАнкеты = Результат;
	ПредставлениеАнкеты = НСтр("ru = 'Без анкеты'");
	Если ЗначениеЗаполнено(Результат) Тогда
		ВопросовВШаблоне = ВопросовВШаблонеАнкеты(Результат);
		ПредставлениеАнкеты = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Анкета (%1 вопрос);;Анкета (%1 вопроса);Анкета (%1 вопросов);Анкета (%1 вопроса)'"), 
			ВопросовВШаблоне);
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущиеДанные.НастройкаАнкеты = ПредставлениеАнкеты;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьШаблоныАнкетЭтаповРаботыСКандидатами()
	
	Для каждого СтрокаЭтапаРаботы Из Объект.ЭтапыРаботыСКандидатами Цикл
		Если Не ЗначениеЗаполнено(СтрокаЭтапаРаботы.ШаблонАнкеты) Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлементСсылка = КопияШаблонаАнкеты(СтрокаЭтапаРаботы.ШаблонАнкеты, Объект.ПрофильДолжности, Объект.Ссылка);
		СтрокаЭтапаРаботы.ШаблонАнкеты = НовыйЭлементСсылка;
	КонецЦикла;
	
КонецПроцедуры

// Копирует шаблон анкеты и настройки вопросов для собеседования из профиля должности.
// Функция вызывается при переходе к произвольному заполнению вакансии, заполнявшейся из профиля.
//
// Параметры 
//	ЭлементКопирования - СправочникСсылка.ШаблоныАнкет - копируемый шаблон анкеты. 
//	ПрофильДолжности - СправочникСсылка.ПрофилиДолжностей - профиль должности, из которого копируется шаблон анкеты и настройки.
//	Вакансия - СправочникСсылка.Вакансии - ссылка на текущий объект.
//
// ВозвращаемоеЗначение:
//   СправочникСсылка.ШаблоныАнкет - ссылка на новый шаблон анкеты.
//
&НаСервереБезКонтекста
Функция КопияШаблонаАнкеты(ЭлементКопирования, ПрофильДолжности, Вакансия)
	
	НачатьТранзакцию();
	
	Попытка
	
		ШаблонАнкетыОбъект = Справочники.ШаблоныАнкет.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(ШаблонАнкетыОбъект, ЭлементКопирования, "ПометкаУдаления, Наименование, Заголовок, Вступление, Заключение");
		ШаблонАнкетыОбъект.УстановитьСсылкуНового(Справочники.ШаблоныАнкет.ПолучитьСсылку());
		ШаблонАнкетыОбъект.РедактированиеШаблонаЗавершено = Ложь;
		ШаблонАнкетыОбъект.Записать();
		
		ДобавитьВопросыАнкеты(ШаблонАнкетыОбъект, ЭлементКопирования, ПрофильДолжности, Вакансия);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ШаблонАнкетыОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьВопросыАнкеты(ШаблонАнкетыОбъект, ЭлементКопирования, ПрофильДолжности, Вакансия)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонАнкеты", ЭлементКопирования);
	Запрос.УстановитьПараметр("Объект", ПрофильДолжности);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыШаблонаАнкеты.Ссылка КАК Ссылка,
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования,
		|	ВопросыШаблонаАнкеты.ЭлементарныйВопрос
		|ПОМЕСТИТЬ ВТВопросы
		|ИЗ
		|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет КАК ВопросыДляСобеседованияВопросовШаблоновАнкет
		|		ПО ВопросыШаблонаАнкеты.Ссылка = ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты
		|ГДЕ
		|	ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вопросы.Ссылка КАК Ссылка,
		|	Вопросы.Ссылка.Владелец КАК Владелец,
		|	Вопросы.Ссылка.Родитель КАК Родитель,
		|	Вопросы.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
		|	Вопросы.Ссылка.Код КАК Код,
		|	Вопросы.Ссылка.Наименование КАК Наименование,
		|	Вопросы.Ссылка.Формулировка КАК Формулировка,
		|	Вопросы.Ссылка.Обязательный КАК Обязательный,
		|	Вопросы.Ссылка.ТипВопроса КАК ТипВопроса,
		|	Вопросы.Ссылка.ТипТабличногоВопроса КАК ТипТабличногоВопроса,
		|	Вопросы.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	Вопросы.Ссылка.РодительВопрос КАК РодительВопрос,
		|	Вопросы.Ссылка.Заметки КАК Заметки,
		|	Вопросы.Ссылка.Подсказка КАК Подсказка,
		|	Вопросы.Ссылка.СпособОтображенияПодсказки КАК СпособОтображенияПодсказки,
		|	Вопросы.Ссылка.СоставТабличногоВопроса.(
		|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК СоставТабличногоВопроса,
		|	Вопросы.Ссылка.ПредопределенныеОтветы.(
		|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|		Ответ КАК Ответ,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК ПредопределенныеОтветы,
		|	Вопросы.Ссылка.СоставКомплексногоВопроса.(
		|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК СоставКомплексногоВопроса,
		|	Вопросы.ВопросДляСобеседования
		|ИЗ
		|	ВТВопросы КАК Вопросы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ,
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Вакансия КАК Объект,
		|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопрос,
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала,
		|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики,
		|	НастройкаВопросовДляСобеседования.Балл,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопросВопросаДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопросВопросаДляСобеседования
		|ИЗ
		|	ВТВопросы КАК Вопросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаВопросовДляСобеседования КАК НастройкаВопросовДляСобеседования
		|		ПО (ВЫБОР
		|				КОГДА Вопросы.ВопросДляСобеседования ЕСТЬ NULL 
		|					ТОГДА Вопросы.ЭлементарныйВопрос = НастройкаВопросовДляСобеседования.ЭлементарныйВопрос
		|							И НастройкаВопросовДляСобеседования.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка)
		|				ИНАЧЕ Вопросы.ВопросДляСобеседования = НастройкаВопросовДляСобеседования.ВопросДляСобеседования
		|			КОНЕЦ)
		|			И (НастройкаВопросовДляСобеседования.Объект = &Объект)
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопрос,
		|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики,
		|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос,
		|	НастройкаВопросовДляСобеседования.Балл,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопросВопросаДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопросВопросаДляСобеседования";
	
	Результаты = Запрос.ВыполнитьПакет();
	Если Результаты[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	НастройкаВопросовДляСобеседования = Результаты[2].Выгрузить();
	
	ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(ШаблонАнкетыОбъект.Ссылка, Выборка, НастройкаВопросовДляСобеседования);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(Ссылка, Выборка, НастройкаВопросовДляСобеседования, Родитель = Неопределено)
	
	ВопросыСУсловием = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			
			НовыйЭлемент = Справочники.ВопросыШаблонаАнкеты.СоздатьГруппу();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка, "Наименование, Код, Формулировка");
			
		Иначе
			
			НовыйЭлемент = Справочники.ВопросыШаблонаАнкеты.СоздатьЭлемент();
			
			СсылкаНового = Справочники.ВопросыШаблонаАнкеты.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
			
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка,, "Владелец, Родитель, СоставТабличногоВопроса, ПредопределенныеОтветы, Код, РодительВопрос");
			СоставТабличногоВопроса = Выборка.СоставТабличногоВопроса.Выгрузить();
			СоставТабличногоВопроса.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.СоставТабличногоВопроса.Загрузить(СоставТабличногоВопроса);
			ПредопределенныеОтветы = Выборка.ПредопределенныеОтветы.Выгрузить();
			ПредопределенныеОтветы.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.ПредопределенныеОтветы.Загрузить(ПредопределенныеОтветы);
			СоставКомплексногоВопроса = Выборка.СоставКомплексногоВопроса.Выгрузить();
			СоставКомплексногоВопроса.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.СоставКомплексногоВопроса.Загрузить(СоставКомплексногоВопроса);
			
			Если Выборка.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.ВопросСУсловием Тогда
				ВопросыСУсловием.Вставить(Выборка.Ссылка, СсылкаНового);
			КонецЕсли;
			
			Если НЕ Выборка.РодительВопрос.Пустая() Тогда
				НовыйЭлемент.РодительВопрос = ВопросыСУсловием.Получить(Выборка.РодительВопрос);
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйЭлемент.Владелец = Ссылка;
		НовыйЭлемент.Родитель = ?(Родитель = Неопределено, Справочники.ВопросыШаблонаАнкеты.ПустаяСсылка(), Родитель);
		НовыйЭлемент.Записать();
		
		Если ЗначениеЗаполнено(Выборка.ВопросДляСобеседования) Тогда
			
			// Запись настроек вопросов для собеседования
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВопросДляСобеседования", Выборка.ВопросДляСобеседования);
			СтрокиНастройкаВопросовДляСобеседования = НастройкаВопросовДляСобеседования.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНастройкаВопросовДляСобеседования.Количество() > 0 Тогда
			
				НаборЗаписей = РегистрыСведений.НастройкаВопросовДляСобеседования.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(СтрокиНастройкаВопросовДляСобеседования[0].Объект);
				НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(Выборка.ВопросДляСобеседования);
				Для каждого СтрокаТаблицы Из СтрокиНастройкаВопросовДляСобеседования Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
					НоваяЗапись.Подразделение = НоваяЗапись.Объект.Подразделение;
				КонецЦикла;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			// Запись вопросов для собеседования шаблонов анкет
			Запись = РегистрыСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет.СоздатьМенеджерЗаписи();
			Запись.ВопросШаблонаАнкеты = НовыйЭлемент.Ссылка;
			Запись.ВопросДляСобеседования = Выборка.ВопросДляСобеседования;
			Запись.Записать();
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ЭлементарныйВопрос) Тогда
			
			// Запись настроек вопросов для собеседования
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВопросДляСобеседования", Справочники.ВопросыДляСобеседования.ПустаяСсылка());
			СтруктураПоиска.Вставить("ЭлементарныйВопрос", Выборка.ЭлементарныйВопрос);
			СтрокиНастройкаВопросовДляСобеседования = НастройкаВопросовДляСобеседования.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНастройкаВопросовДляСобеседования.Количество() > 0 Тогда
			
				НаборЗаписей = РегистрыСведений.НастройкаВопросовДляСобеседования.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(СтрокиНастройкаВопросовДляСобеседования[0].Объект);
				НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(Справочники.ВопросыДляСобеседования.ПустаяСсылка());
				НаборЗаписей.Отбор.ЭлементарныйВопрос.Установить(Выборка.ЭлементарныйВопрос);
				Для каждого СтрокаТаблицы Из СтрокиНастройкаВопросовДляСобеседования Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
					НоваяЗапись.Подразделение = НоваяЗапись.Объект.Подразделение;
				КонецЦикла;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПодчиненнаяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если ПодчиненнаяВыборка.Количество() > 0 Тогда
			ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(Ссылка, ПодчиненнаяВыборка, НастройкаВопросовДляСобеседования, НовыйЭлемент.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизическоеЛицоКандидата(Кандидат)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Кандидат, "ФизическоеЛицо");
КонецФункции

&НаСервереБезКонтекста
Функция ВопросовВШаблонеАнкеты(ШаблонАнкеты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВопросыШаблонаАнкеты.Ссылка) КАК КоличествоВопросов,
		|	ВопросыШаблонаАнкеты.Владелец КАК ШаблонАнкеты
		|ИЗ
		|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
		|ГДЕ
		|	ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты
		|	И НЕ ВопросыШаблонаАнкеты.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВопросыШаблонаАнкеты.Владелец";
	Запрос.УстановитьПараметр("ШаблонАнкеты", ШаблонАнкеты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоВопросов;
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтображениеНастроекАнкет(ВыбранныеСтроки = Неопределено)
	
	Если Не ИспользоватьЭлектронноеИнтервью Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВыбранныеСтроки = Неопределено Тогда
		ВыбранныеСтроки = Объект.ЭтапыРаботыСКандидатами;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
		ТекущаяСтрока.НастройкаАнкеты = НСтр("ru = 'Без анкеты'");
		Если ЗначениеЗаполнено(ТекущаяСтрока.ШаблонАнкеты) Тогда
			ВопросовВШаблоне = ВопросовВШаблонеАнкеты(ТекущаяСтрока.ШаблонАнкеты);
			ТекущаяСтрока.НастройкаАнкеты = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';Анкета (%1 вопрос);;Анкета (%1 вопроса);Анкета (%1 вопросов);Анкета (%1 вопроса)'"), 
				ВопросовВШаблоне);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНазначенияНабора(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	МассовыйНабор = ЭтоМассовыйНабор(Объект.СпособНабора);
	
	Если Не МассовыйНабор Тогда 
		Если Не Объект.НоваяПозиция Тогда
			Объект.НазначениеНабора = ПредопределенноеЗначение("Перечисление.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания");
		Иначе
			Объект.НазначениеНабора = ПредопределенноеЗначение("Перечисление.НазначениеНабораПерсоналаНаВакансию.ДолжностьПодразделение");
		КонецЕсли;
	КонецЕсли;

	УстановитьДоступностьПозиции(Форма);
	УстановитьДоступностьДолжностиПодразделения(Форма);
	
	Если МассовыйНабор Тогда
		Элементы.НазначениеНабораПозиция.Видимость = Истина;
		Элементы.НазначениеНабораДолжностьПодразделение.Видимость = Истина;
		Элементы.Позиция.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.Должность.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элементы.НазначениеНабораПозиция.Видимость = Ложь;
		Элементы.НазначениеНабораДолжностьПодразделение.Видимость = Ложь;
		Элементы.Позиция.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.Должность.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПозиции(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НаборНаПозицию = Объект.НазначениеНабора = ПредопределенноеЗначение("Перечисление.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания");
	Элементы.Позиция.Доступность = НаборНаПозицию;

	Если ЭтоМассовыйНабор(Объект.СпособНабора) Тогда
		Элементы.Позиция.Видимость = Истина;
	Иначе
		Элементы.Позиция.Видимость = НаборНаПозицию;
	КонецЕсли;
	
	Если Не НаборНаПозицию И ЗначениеЗаполнено(Объект.Позиция) Тогда 
		Форма.ПозицияПредыдущееЗначение = Объект.Позиция;
		Объект.Позиция = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если НаборНаПозицию И ЗначениеЗаполнено(Форма.ПозицияПредыдущееЗначение) Тогда
		Объект.Позиция = Форма.ПозицияПредыдущееЗначение;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДолжностиПодразделения(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НаборНаДолжностьПодразделение = Ложь;
	Если Объект.НазначениеНабора = ПредопределенноеЗначение("Перечисление.НазначениеНабораПерсоналаНаВакансию.ДолжностьПодразделение") Тогда
		НаборНаДолжностьПодразделение = Истина;
	КонецЕсли;
	
	МассовыйНабор = ЭтоМассовыйНабор(Объект.СпособНабора);

	Элементы.Должность.Видимость = НаборНаДолжностьПодразделение Или МассовыйНабор;
	Элементы.Подразделение.Видимость = НаборНаДолжностьПодразделение Или МассовыйНабор;

	Элементы.Должность.ТолькоПросмотр = Не НаборНаДолжностьПодразделение И МассовыйНабор;
	Элементы.Подразделение.ТолькоПросмотр = Не НаборНаДолжностьПодразделение И МассовыйНабор;
	
	Элементы.Должность.АвтоОтметкаНезаполненного = Не Объект.НоваяПозиция;
	Элементы.Должность.ОтметкаНезаполненного = Не Объект.НоваяПозиция И Не ЗначениеЗаполнено(Объект.Должность);
	
	Элементы.Подразделение.АвтоОтметкаНезаполненного = Не Объект.НоваяПозиция И Не МассовыйНабор;
	Элементы.Подразделение.ОтметкаНезаполненного = Не Объект.НоваяПозиция И Не МассовыйНабор И Не ЗначениеЗаполнено(Объект.Подразделение);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьПредыдущееЗначениеПозиции()
	
	Если Не ЗначениеЗаполнено(ПозицияПредыдущееЗначение) Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеПозиции = ДанныеПозицииШтатногоРасписания(ПозицияПредыдущееЗначение);
	
	Если ДанныеПозиции.Должность <> Объект.Должность Или ДанныеПозиции.МестоВСтруктуреПредприятия <> Объект.Подразделение Тогда 
		ПозицияПредыдущееЗначение = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДействийСотрудников(СписокДействий)
	
	ДеревоДействий = ЭлектронноеИнтервью.ДеревоДействийСотрудников(СписокДействий);
	ЗначениеВДанныеФормы(ДеревоДействий, ДействияСотрудниковДерево);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПечатиОписанияЗавершение(Ответ, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вакансия", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Вакансии.Форма.ВариантыОписания", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставПодключаемыхКомандНаСервере()
	
	ПараметрыПодключаемыхКоманд = Неопределено;
	ОбновитьПовторноИспользуемыеЗначения();
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Элемент = Элементы.Найти(Команда.Имя);
		Если Элемент <> Неопределено И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		Команды.Удалить(Команда);
	КонецЦикла;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыВариантовПечати()
	
	Элементы.ВариантыПечатиОписания.Видимость = ПодборПерсонала.ОписанияВакансийДоступны();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИнформационнойСтрокиЗанятости(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ВидимостьИнформационнойСтрокиЗанятости(Форма) Тогда
		Элементы.ИнформацияЗанятостиГруппа.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.ИнформацияЗанятости.Заголовок = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидимостьИнформационнойСтрокиЗанятости(Форма)
	
	Объект = Форма.Объект;
	
	Если ЭтоМассовыйНабор(Объект.СпособНабора) Тогда
		Возврат ЗначениеЗаполнено(Объект.Должность) Или ЗначениеЗаполнено(Объект.Подразделение);
	КонецЕсли;
	
	Возврат Не Объект.НоваяПозиция И ЗначениеЗаполнено(Объект.Позиция); 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьНоваяСуществующаяПозиция(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	МассовыйНабор = ЭтоМассовыйНабор(Объект.СпособНабора);
	
	Элементы.НоваяПозиция.Видимость = Не МассовыйНабор;
	Если МассовыйНабор Тогда
		Объект.НоваяПозиция = Ложь;
		УстановитьДоступностьДолжностиПодразделения(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПричиныОткрытия(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЭтоМассовыйНабор(Объект.СпособНабора) Тогда
		Элементы.ПричинаОткрытияГруппа.Видимость = Ложь;
		Форма.ПричинаОткрытияПредыдущееЗначение = Объект.ПричинаОткрытия;
		Объект.ПричинаОткрытия = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Объект.НоваяПозиция Тогда
		Элементы.ПричинаОткрытияГруппа.Видимость = Ложь;
		Форма.ПричинаОткрытияПредыдущееЗначение = Объект.ПричинаОткрытия;
		Объект.ПричинаОткрытия = Неопределено;
		Возврат;
	КонецЕсли;
	
	Элементы.ПричинаОткрытияГруппа.Видимость = Истина;
	Если ЗначениеЗаполнено(Форма.ПричинаОткрытияПредыдущееЗначение) Тогда
		Объект.ПричинаОткрытия = Форма.ПричинаОткрытияПредыдущееЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляНаименование(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Наименование.Доступность = Объект.НаименованиеВручную;
	Элементы.Наименование.АвтоОтметкаНезаполненного = Объект.НаименованиеВручную;
	Элементы.Наименование.ОтметкаНезаполненного = Объект.НаименованиеВручную И ЗначениеЗаполнено(Объект.Наименование);
	
	Элементы.ДополнятьПредставлениеГруппа.Видимость = Не Объект.НаименованиеВручную;
	Элементы.ДополнятьПредставление.Доступность = Не Объект.НаименованиеВручную;
	
	Если Не Объект.НаименованиеВручную Тогда
		ЗаполнитьНаименование(Форма);
	Иначе
		Форма.ДополнятьПредставление = Ложь;
		УстановитьСвойстваУточненияНаименования(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАльтернативныеНаименования(Форма)

	Объект = Форма.Объект;

	ВозможныеНаименования = Новый Массив;

	ВозможныеНаименования.Добавить(
		ПодборПерсоналаКлиентСервер.НаименованиеПоДолжностиПодразделению(Объект.ПрофильДолжности, Объект.Подразделение));
	ВозможныеНаименования.Добавить(
		ПодборПерсоналаКлиентСервер.НаименованиеПоДолжностиПодразделению(Объект.Должность, Объект.Подразделение));
	Если ЗначениеЗаполнено(Объект.ПрофильДолжности) Тогда
		ВозможныеНаименования.Добавить(Строка(Объект.ПрофильДолжности));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Должность) Тогда
		ВозможныеНаименования.Добавить(Строка(Объект.Должность));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ВозможныеНаименования, "");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ВозможныеНаименования, Неопределено);
	ВозможныеНаименования = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВозможныеНаименования);
	Форма.Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(ВозможныеНаименования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуОткрытия(Форма, ТекущаяДата)

	Объект = Форма.Объект;

	Форма.СостоянияВакансийНаборЗаписей.Сортировать("Период");
	
	Объект.ДатаОткрытия = Неопределено;
	Для Каждого СтрокаКоллекции Из Форма.СостоянияВакансийНаборЗаписей Цикл
		Если СтрокаКоллекции.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Открыта") Тогда
			Объект.ДатаОткрытия = СтрокаКоллекции.Период;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	УстановитьПодсказкуДатыОткрытия(Форма, ТекущаяДата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуДатыОткрытия(Форма, ТекущаяДата)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ДатаОткрытия = Объект.ДатаОткрытия;
	ДатаСегодня = НачалоДня(ТекущаяДата);
	
	Если Не ЗначениеЗаполнено(ДатаОткрытия) Тогда
		Элементы.ДатаОткрытия.Подсказка = Неопределено;
		Возврат; 
	КонецЕсли;
	
	Если ДатаОткрытия < ДатаСегодня Тогда
		ПросроченоДней = ЗарплатаКадрыКлиентСервер.ПредставлениеВременногоИнтервала(ДатаСегодня, ДатаОткрытия);
		Элементы.ДатаОткрытия.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Открыта %1 назад'"), 
			ПросроченоДней);
		Возврат;
	КонецЕсли;
	
	Если ДатаОткрытия = ДатаСегодня Тогда
		Элементы.ДатаОткрытия.Подсказка = НСтр("ru = 'Открыта сегодня'");
		Возврат;
	КонецЕсли;
	
	ОсталосьДней = ЗарплатаКадрыКлиентСервер.ПредставлениеВременногоИнтервала(ДатаОткрытия, ДатаСегодня);
	Элементы.ДатаОткрытия.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Откроется через %1'"), 
		ОсталосьДней);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуДатыЗакрытия(Форма, ТекущаяДата)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДатаЗакрытия = Объект.ПланируемаяДатаЗакрытия;
	ДатаСегодня = НачалоДня(ТекущаяДата);
	
	Если ДатаЗакрытия < ДатаСегодня Тогда
		ПросроченоДней = ЗарплатаКадрыКлиентСервер.ПредставлениеВременногоИнтервала(ДатаСегодня, ДатаЗакрытия);
		Элементы.ПланируемаяДатаЗакрытия.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Просрочено на %1'"), 
			ПросроченоДней);
		Элементы.ПланируемаяДатаЗакрытия.ЦветТекста = Форма.ЦветаОформления.ПросроченныеДанныеЦвет;
		Возврат;
	КонецЕсли;
	
	Элементы.ПланируемаяДатаЗакрытия.ЦветТекста = Форма.ЦветаОформления.ЦветТекстаПоля;
	
	Если ДатаЗакрытия = ДатаСегодня Тогда
		Элементы.ПланируемаяДатаЗакрытия.Подсказка = НСтр("ru = 'Сегодня вакансия должна быть закрыта'");
		Возврат;
	КонецЕсли;
	
	ОсталосьДней = ЗарплатаКадрыКлиентСервер.ПредставлениеВременногоИнтервала(ДатаЗакрытия, ДатаСегодня);
	Элементы.ПланируемаяДатаЗакрытия.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Остается %1'"), 
		ОсталосьДней);
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьЦветаОформления()
	
	ЦветаСтруктура = Новый Структура(
		"ПросроченныеДанныеЦвет, 
		|ЦветТекстаПоля");
	ЦветаСтруктура.ПросроченныеДанныеЦвет = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЦветаСтруктура.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	ЦветаОформления = Новый ФиксированнаяСтруктура(ЦветаСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеИнформацииЗанятости()
	
	Если Не ВидимостьИнформационнойСтрокиЗанятости(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ИнформацияЗанятости.Заголовок = Неопределено;
	Элементы.ИнформацияЗанятостиЗаполняется.Видимость = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗаполнениеИнформацииЗанятости", ЭтотОбъект);
	ПодборПерсоналаКлиент.НачатьЗаполнениеИнформацииЗанятостиПоДаннымВакансии(
		ДанныеВакансии(ЭтотОбъект), ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеИнформацииЗанятости(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ИнформацияЗанятостиЗаполняется.Видимость = Ложь;

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ИнформацияЗанятости.Заголовок = ПолучитьИзВременногоХранилища(Результат.АдресРезультата).ИнформационнаяСтрокаЗанятости;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеВакансии(Форма)
	
	Объект = Форма.Объект;
	
	ДанныеВакансии = Новый Структура(
		"Вакансия,
		|СпособНабора, 
		|НазначениеНабора,
		|НоваяПозиция,
		|Позиция,
		|Должность,
		|Подразделение");
	
	ДанныеВакансии.Вакансия = Форма.ВакансияСсылка;
	ДанныеВакансии.СпособНабора = Объект.СпособНабора;
	ДанныеВакансии.НазначениеНабора = Объект.НазначениеНабора;
	ДанныеВакансии.НоваяПозиция = Объект.НоваяПозиция;
	ДанныеВакансии.Позиция = Объект.Позиция;
	ДанныеВакансии.Должность = Объект.Должность;
	ДанныеВакансии.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеВакансии;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоМассовыйНабор(СпособНабора)
	
	Если СпособНабора = ПредопределенноеЗначение("Перечисление.СпособНабораПерсоналаНаВакансию.МассовыйНабор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиПозицияМассовогоНабора(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ПозицииВакансии" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДляОтбораПоМестуВСтруктуреПредприятия");
	ПараметрыФормы.Отбор = Новый Структура("Должность, МестоВСтруктуреПредприятия");
	ПараметрыФормы.Отбор.Должность = Объект.Должность;
	ПараметрыФормы.Отбор.МестоВСтруктуреПредприятия = Объект.Подразделение;
	
	ОткрытьФорму("Справочник.ШтатноеРасписание.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиСостоянияКандидатов(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор");
	ПараметрыФормы.Отбор = Новый Структура("Вакансия");
	ПараметрыФормы.Отбор.Вакансия = Объект.Ссылка;
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Этап_") <> 0 Тогда
		ПараметрыФормы.Отбор.Вставить("ЭтапРаботы", СостояниеКандидатаЭтапСсылкаПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки));
	КонецЕсли;
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Решение_") <> 0 Тогда
		ПараметрыФормы.Отбор.Вставить("Состояние", СостояниеКандидатаРешениеПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Кандидаты.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиСотрудникиПозиции(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "СотрудникиПозиции") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор");
	ПараметрыФормы.Отбор = Новый Структура("ДолжностьПоШтатномуРасписанию");
	ПараметрыФормы.Отбор.ДолжностьПоШтатномуРасписанию = Объект.Позиция;
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеКандидатаЭтапСсылкаПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки)
	Возврат ПодборПерсоналаФормы.СостояниеКандидатаЭтапСсылкаПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки);
КонецФункции

&НаСервереБезКонтекста
Функция СостояниеКандидатаРешениеПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки)
	Возврат Перечисления.СостоянияСогласования[СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Решение_", "")];
КонецФункции

&НаКлиенте
Процедура НачатьЗаполнениеИнформационнойСтрокиКандидатов()

	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ИнформацияКандидатов.Заголовок = Неопределено;
	Элементы.ИнформацияКандидатовЗаполняется.Видимость = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗаполнениеИнформационнойСтрокиКандидатов", ЭтотОбъект);
	ПодборПерсоналаКлиент.НачатьЗаполнениеСчетчиковКандидатовПоВакансии(
		ВакансияСсылка, ТолькоКандидатыВРаботе, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеИнформационнойСтрокиКандидатов(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ИнформацияКандидатовЗаполняется.Видимость = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ИнформацияКандидатов.Заголовок = ПолучитьИзВременногоХранилища(Результат.АдресРезультата).ИнформационнаяСтрокаКандидатов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещенияЭтаповРаботыСКандидатами(ИмяСобытия, Параметр, Источник)
	
	ОбрабатываемыеСобытия = Новый Массив;
	ОбрабатываемыеСобытия.Добавить("ИзмененЭтапРаботыСКандидатом");
	ОбрабатываемыеСобытия.Добавить("РешениеПоКандидату");
	
	Если ОбрабатываемыеСобытия.Найти(ИмяСобытия) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметр.Свойство("Кандидаты") Или Не Параметр.Свойство("Вакансии") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Вакансии.Найти(Объект.Ссылка) <> Неопределено Тогда
		НачатьЗаполнениеИнформацииЗанятости();
		НачатьЗаполнениеИнформационнойСтрокиКандидатов();
		Элементы.Кандидаты.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещенияИзмененияКандидата(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_Кандидаты" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметр.Свойство("Кандидаты") Или Не Параметр.Свойство("Вакансии") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Вакансии.Найти(Объект.Ссылка) <> Неопределено Тогда
		НачатьЗаполнениеИнформационнойСтрокиКандидатов();
		Элементы.Кандидаты.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокКандидатов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Кандидаты.Отбор, "Вакансия", ВакансияСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Кандидаты, "Пользователь", Пользователи.АвторизованныйПользователь());
	Справочники.Кандидаты.УстановитьУсловноеОформлениеСпискаКандидатов(Кандидаты);
	
	ТолькоКандидатыВРаботе = Не ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Вакансия", "ПоказыватьОдобренныхОтклоненныхКандидатов", Ложь);
	УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(ЭтаФорма, ТолькоКандидатыВРаботе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСохраняемойНастройки()
	
	Настройки = СохраняемыеНастройки();
	Настройки.ПоказыватьОдобренныхОтклоненныхКандидатов = Не ТолькоКандидатыВРаботе;
	СохранитьНастройкиНаСервере(Настройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СохраняемыеНастройки()
	
	Настройки = Новый Структура("ПоказыватьОдобренныхОтклоненныхКандидатов");
	Возврат Настройки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	Для Каждого КлючИЗначение Из Настройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Вакансия", КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(Форма, Использование)
	
	Элементы = Форма.Элементы;
	
	Кнопки = Новый Массив;
	Кнопки.Добавить(Элементы.ПоказыватьОдобренныхОтклоненныхКандидатов);
	Кнопки.Добавить(Элементы.КандидатыКонтекстноеМенюПоказыватьОдобренныхОтклоненныхКандидатов);
	
	ПодборПерсоналаКлиентСервер.УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(Форма.Кандидаты, Использование, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеРедактированияИстории(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "ОтредактированаИстория" Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник <> ВакансияСсылка Или Параметр.ИмяРегистра <> "СостоянияВакансий" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПанельСостояния();
	
	ЗаполнитьДатуОткрытия(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеИзмененияПозиции(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_ПозицияШтатногоРасписания" Тогда
		Возврат;
	КонецЕсли;

	Если Параметр <> Объект.Позиция Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗаполнениеИнформацииЗанятости();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеИзмененияДанныхМестаРаботы(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "ИзменениеДанныхМестаРаботы" Тогда
		Возврат;
	КонецЕсли;

	НачатьЗаполнениеИнформацииЗанятости();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеИзмененияПрофиляДолжности(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_ПрофилиДолжностей" Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствуетПрофилюДолжностиЧисло = 1 И Объект.ПрофильДолжности = Источник Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеОбъектаВФорму(ТекущийОбъект)
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодборЭтапов()

	ПараметрыФормы = Новый Структура("РежимВыбора, МножественныйВыбор, АдресПодобранных");
	ПараметрыФормы.РежимВыбора = Истина;
	ПараметрыФормы.МножественныйВыбор = Истина;
	ПараметрыФормы.АдресПодобранных = АдресПодобранныхЭтаповРаботы();
	ОткрытьФорму("Справочник.ЭтапыРаботыСКандидатами.ФормаВыбора", ПараметрыФормы, Элементы.ЭтапыРаботыСКандидатами);

КонецПроцедуры

&НаСервере
Функция АдресПодобранныхЭтаповРаботы()
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыРаботыСКандидатами.Выгрузить().ВыгрузитьКолонку("ЭтапРаботы"));
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовЭлектронногоИнтервью()

	ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
	// Отобразим элементы в зависимости от функциональной опции
	Элементы.ГруппаФункцииТребованияКХарактеристикам.Видимость = ИспользоватьЭлектронноеИнтервью;
	Элементы.ЭтапыРаботыСКандидатамиПечатьАнкеты.Видимость = ИспользоватьЭлектронноеИнтервью;
	Элементы.КандидатыОтчетПоКомпетенциям.Видимость = ИспользоватьЭлектронноеИнтервью;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАктивнуюСтраницу()
	
	Если Не Параметры.Свойство("Поле") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Найти(Параметры.Поле) <> Неопределено Тогда
		ТекущийЭлемент = Элементы[Параметры.Поле];
	КонецЕсли;
	
КонецПроцедуры

#Область СогласованиеВакансий

&НаСервере
Процедура ПрочитатьСогласованиеВакансии(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	СогласованиеСсылка = ТекущийОбъект.Ссылка;
	Если ЗначениеЗаполнено(ТекущийОбъект.Основание) Тогда
		СогласованиеСсылка = ТекущийОбъект.Основание;
	КонецЕсли;
	
	Если СогласованиеСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СогласованиеВакансий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Вакансия.Установить(СогласованиеСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Согласование, НаборЗаписей[0]);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеСогласования()
	
	Согласование.СостояниеСогласования = Неопределено;
	Согласование.Рассмотрел = Неопределено;
	Согласование.ДатаРассмотрения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеСогласованияВакансий(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "СогласованиеВакансий_Завершено" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Найти(Объект.Ссылка) = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПрочитатьСогласованиеВакансии();
	УстановитьПанельСостояния();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеСвойствами

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти
