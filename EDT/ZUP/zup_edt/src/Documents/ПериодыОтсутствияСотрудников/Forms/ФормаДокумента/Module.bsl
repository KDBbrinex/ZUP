#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Месяц", "Объект.ПериодРегистрации");
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// Работа с месяцем "строкой".

&НаКлиенте
Процедура ПериодРегистрацииСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиПредставлениеПериода" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеПериода = Новый Структура("ПериодРегистрации,ПериодВвода,ДатаНачала,ДатаОкончания,ЧастьСмены,КоличествоЧасов");
		ЗаполнитьЗначенияСвойств(ОписаниеПериода, Объект);
		ЗаполнитьЗначенияСвойств(ОписаниеПериода, Элементы.Сотрудники.ТекущиеДанные);
		
		Оповещение = Новый ОписаниеОповещения("СотрудникиВыборПериодаОтсутствияСотрудниковЗавершение", ЭтотОбъект);
		ОтсутствияСотрудниковКлиент.ОткрытьФормуВыбораПериода(ЭтотОбъект, ОписаниеПериода, Оповещение, ТолькоПросмотр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыборПериодаОтсутствияСотрудниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		ЗаполнитьПредставлениеПериода(ЭтотОбъект, Элементы.Сотрудники.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если Не Копирование Тогда
				УстановитьВидОтсутствияСтрокиСотрудника(ЭтотОбъект, Элементы.Сотрудники.ТекущаяСтрока);
			КонецЕсли;
			
			УстановитьДатыНачалаОкончанияТекущейСтроки();
			
		Иначе
			ЗаполнитьПредставлениеПериода(ЭтотОбъект, Элементы.Сотрудники.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСотрудников(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	УстановитьДатыНачалаОкончанияТекущейСтроки();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подбор(Команда)
	
	ДатыВводаДокумента = ОтсутствияСотрудниковКлиентСервер.ПериодВводаДокумента(Объект.ПериодВвода, Объект.ПериодРегистрации);
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники, Объект.Организация, Объект.Подразделение,
		ДатыВводаДокумента.НачалоПериода, ДатыВводаДокумента.ОкончаниеПериода,
		Истина, АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	ЗаполнитьПредставленияПериодовСотрудников();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СотрудникиСписокДокументыНачислений",
		"Видимость",
		ЗначениеЗаполнено(Объект.Ссылка));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СотрудникиПодбор",
		"Видимость",
		Не ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеПериода(Форма, ИдентификаторСтроки)
	
	ДанныеСтроки = Форма.Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДанныеСтроки.ПредставлениеПериода = ОтсутствияСотрудниковКлиентСервер.ПредставлениеПериодаОтсутствия(
		ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.ЧастьСмены, ДанныеСтроки.КоличествоЧасов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставленияПериодовСотрудников()
	
	Для Каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
		ЗаполнитьПредставлениеПериода(ЭтотОбъект, СтрокаСотрудники.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УстановитьДатыНачалаОкончанияТекущейСтроки()
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		
		УстановитьДатыНачалаОкончанияСтрокиСотрудника(ЭтотОбъект, Элементы.Сотрудники.ТекущаяСтрока, ОбщегоНазначенияКлиент.ДатаСеанса());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДатыНачалаОкончанияСтрокиСотрудника(Форма, ИдентификаторСтроки, ДатаСеанса)
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекущиеДанные = Форма.Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			
			ТекущиеДанные.ДатаНачала = ДатаНачалаНовогоОтсутствияСотрудника(Форма, ТекущиеДанные.Сотрудник, ДатаСеанса);
			
			Если ТекущиеДанные.ДатаОкончания < ТекущиеДанные.ДатаНачала Тогда
				ТекущиеДанные.ДатаОкончания = ТекущиеДанные.ДатаНачала;
			КонецЕсли;
			
			ЗаполнитьПредставлениеПериода(Форма, ИдентификаторСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДатаНачалаНовогоОтсутствияСотрудника(Форма, Сотрудник, Знач ДатаСеанса)
	
	ДатаСеанса = НачалоДня(ДатаСеанса);
	
	ДатыВводаДокумента = ОтсутствияСотрудниковКлиентСервер.ПериодВводаДокумента(Форма.Объект.ПериодВвода, Форма.Объект.ПериодРегистрации);
	ДатаНачалаСотрудника = Мин(Макс(ДатаСеанса, ДатыВводаДокумента.НачалоПериода), ДатыВводаДокумента.ОкончаниеПериода);
	
	Для Каждого СтрокаСотрудника Из Форма.Объект.Сотрудники Цикл
		
		Если СтрокаСотрудника.Сотрудник <> Сотрудник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДатаНачалаСотрудника <= СтрокаСотрудника.ДатаОкончания Тогда
			ДатаНачалаСотрудника = КонецДня(СтрокаСотрудника.ДатаОкончания) + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДатаНачалаСотрудника > ДатыВводаДокумента.ОкончаниеПериода Тогда
		ДатаНачалаСотрудника = Макс(ДатаСеанса, ДатыВводаДокумента.НачалоПериода);
	КонецЕсли;
	
	Возврат ДатаНачалаСотрудника;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидОтсутствияСтрокиСотрудника(Форма, ИдентификаторСтроки)
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекущиеДанные = Форма.Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник)
				И Форма.Объект.Сотрудники.Количество() > 2
				И ЗначениеЗаполнено(Форма.Объект.Сотрудники[Форма.Объект.Сотрудники.Количество() - 2].ВидОтсутствия) Тогда
				
				ТекущиеДанные.ВидОтсутствия = Форма.Объект.Сотрудники[Форма.Объект.Сотрудники.Количество() - 2].ВидОтсутствия;
				
			Иначе
				ТекущиеДанные.ВидОтсутствия = ПредопределенноеЗначение("Перечисление.ВидыПериодовОтсутствияСотрудников.ПричинаНеИзвестна");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудников(ВыбранныеСотрудники)
	
	Для Каждого ВыбранныйСотрудник Из ВыбранныеСотрудники Цикл
		
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = ВыбранныйСотрудник;
		
		УстановитьВидОтсутствияСтрокиСотрудника(ЭтотОбъект, НоваяСтрока.ПолучитьИдентификатор());
		УстановитьДатыНачалаОкончанияСтрокиСотрудника(ЭтотОбъект, НоваяСтрока.ПолучитьИдентификатор(), ТекущаяДатаСеанса());
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
