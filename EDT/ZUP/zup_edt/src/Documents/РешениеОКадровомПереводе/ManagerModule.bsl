#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке();
КонецФункции

Функция ДанныеОПереводе(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументРешение.Ссылка КАК Ссылка,
		|	ДокументРешение.Организация КАК Организация,
		|	ДокументРешение.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДокументРешение.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	ДокументРешение.ДатаНачала КАК ДатаНачала,
		|	ДокументРешение.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.РешениеОКадровомПереводе КАК ДокументРешение
		|ГДЕ
		|	ДокументРешение.Ссылка = &ДокументСсылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

#Область ОбработчикиРегистрацииФизическихЛиц

Функция ПринадлежностиОбъекта() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация");
КонецФункции

#КонецОбласти

#Область ОбработчикиПравилРегистрации

Процедура ЗарегистрироватьИзмененияПослеОбработки(ИмяПланаОбмена, ПРО, Объект, Отказ, Получатели, Выгрузка) Экспорт
	
	Если Выгрузка Или Объект.ОбменДанными.Загрузка Или (Объект.ДополнительныеСвойства.Свойство("Выгрузка") И Объект.ДополнительныеСвойства.Выгрузка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) И ОбщегоНазначения.СсылкаСуществует(Объект.Сотрудник) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Объект.Сотрудник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) И ОбщегоНазначения.СсылкаСуществует(Объект.ФизическоеЛицо) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Объект.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПравилаРегистрацииРегистров(ИмяПланаОбмена, Отказ, Получатели, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

// Регистрирует изменение организации или структурного подразделения для сотрудников и физических лиц
//
// Параметры:
//		МассивДокументов - Массив - Массив объектов заполненный при загрузке сообщения обмена
//
Процедура ЗарегистрироватьЗависимыеОбъектыПослеЗагрузкиОбменаДанными(МассивДокументов) Экспорт
	
	// Зарегистрируем сотрудников по виду документа, изменяющего принадлежность к организации
	Для Каждого ДокументОбъект Из МассивДокументов Цикл
		
		Если ЗначениеЗаполнено(ДокументОбъект.Сотрудник) И ОбщегоНазначения.СсылкаСуществует(ДокументОбъект.Сотрудник) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(ДокументОбъект.ОбменДанными.Получатели, ДокументОбъект.Сотрудник);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ФизическоеЛицо) И ОбщегоНазначения.СсылкаСуществует(ДокументОбъект.ФизическоеЛицо) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(ДокументОбъект.ОбменДанными.Получатели, ДокументОбъект.ФизическоеЛицо);
		КонецЕсли;
		
		СинхронизацияДанныхЗарплатаКадрыСервер.ПринадлежностьФизлицаОрганизацииПриЗаписи(ДокументОбъект);
		СинхронизацияДанныхЗарплатаКадрыСервер.ОрганизацииСотрудниковПриЗаписи(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыЗаполненияМероприятий(Объект) Экспорт
	
	ПараметрыЗаполнения = АдаптацияУвольнение.ПараметрыЗаполненияМероприятий();
	
	ПараметрыЗаполнения.Организация = Объект.ОбособленноеПодразделение;
	ПараметрыЗаполнения.ФизическоеЛицо = Объект.ФизическоеЛицо;
	ПараметрыЗаполнения.Позиция = Объект.ДолжностьПоШтатномуРасписанию;
	ПараметрыЗаполнения.ВидСобытия = ВидСобытияАдаптацииУвольнения();
	ПараметрыЗаполнения.ДатаСобытия = Объект.ДатаНачала;
	ПараметрыЗаполнения.ДатаОкончанияСобытия = Объект.ДатаОкончания;
	ПараметрыЗаполнения.ПредыдущаяОрганизация = Объект.Организация;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Поля = "ДолжностьПоШтатномуРасписанию, Подразделение, Должность, ВидСобытия";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, Объект.ДатаНачала, Неопределено, Ложь);
	
	Если КадровыеДанные.Количество() > 0 Тогда
		
		ТекущиеКадровыеДанныеСотрудника = КадровыеДанные[0];
		
		ПараметрыЗаполнения.ПредыдущаяПозиция = ТекущиеКадровыеДанныеСотрудника.ДолжностьПоШтатномуРасписанию;
		ПараметрыЗаполнения.ПредыдущееПодразделение = ТекущиеКадровыеДанныеСотрудника.Подразделение;
		ПараметрыЗаполнения.ПредыдущаяДолжность = ТекущиеКадровыеДанныеСотрудника.Должность;
		ПараметрыЗаполнения.ПредыдущийВидКадровогоСобытия = ТекущиеКадровыеДанныеСотрудника.ВидСобытия;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ВидСобытияАдаптацииУвольнения() Экспорт
	
	Возврат АдаптацияУвольнение.СобытиеПеремещение();
	
КонецФункции

Функция ПоляПроверкиУникальности() Экспорт
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить("Организация");
	ПоляПроверки.Добавить("ДатаНачала");
	ПоляПроверки.Добавить("Сотрудник");
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция СоответствиеРеквизитовОтбораРеквизитамПриказа() Экспорт
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
