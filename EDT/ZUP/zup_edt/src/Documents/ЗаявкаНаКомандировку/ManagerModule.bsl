#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	// Ограничения доступа в ролях:
	// Чтение / Изменение
	// #ПоЗначениямРасширенный( "Документ.<ИмяДокумента>", "", "",
	// "ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Т1 ПО Т1.ФизическоеЛицо = Т.ФизическоеЛицо",
	// "",
	// "ГруппыФизическихЛиц", "Т.ФизическоеЛицо","ИЛИ",
	// "Условие", "Т1.Ссылка = &АвторизованныйПользователь", "", "","","", "","","", "","","", "","","", "","","",
	// "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","")
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Т1
	|	ПО Т1.ФизическоеЛицо = Т.ФизическоеЛицо
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т.ФизическоеЛицо)
	|	ИЛИ ЭтоАвторизованныйПользователь(Т1.Ссылка)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ПредставлениеДокумента = Метаданные.Документы.ЗаявкаНаКомандировку.Представление();
	
	ОписаниеКоманды = ЗарплатаКадрыРасширенный.ОписаниеКомандыСозданияДокумента(
		"Документ.ЗаявкаНаКомандировку",
		ПредставлениеДокумента);
		
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокумента(
		КомандыСозданияДокументов, ОписаниеКоманды);
		
	Если Не ДополнительныеПараметры.ЗаявкиТекущегоПользователя  
		И Пользователи.РолиДоступны("ИспользованиеГрупповоеСозданиеЗаявокСотрудников") Тогда 	
		
		ПредставлениеКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 списком'"), ПредставлениеДокумента);
		
		ОписаниеКоманды = ЗарплатаКадрыРасширенный.ОписаниеКомандыСозданияДокумента(
			"Обработка.ГрупповоеСозданиеЗаявокСотрудников",
			ПредставлениеКоманды,
			ПредставлениеДокумента + 1,
			"Форма");
		
		Параметры = Новый Структура;
		Параметры.Вставить("ВидЗаявки", "ЗаявкаНаКомандировку"); 
		Параметры.Вставить("Заголовок", НСтр("ru = 'Создание заявок на командировку'"));
		
		ОписаниеКоманды.Параметры = Параметры; 
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокумента(
			КомандыСозданияДокументов, ОписаниеКоманды);
			
	КонецЕсли; 
	
КонецПроцедуры

Функция ДоступноСогласованиеДокумента() Экспорт 
	
	Возврат Пользователи.РолиДоступны("СогласованиеЗаявокНаКомандировку", , Ложь);
	
КонецФункции

Процедура ЗаполнитьДанныеДляБронирования(ДанныеБронирования, ЗаявкиНаКомандировку) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", ЗаявкиНаКомандировку);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заявка.Ссылка КАК Ссылка,
		|	Заявка.Статус КАК Статус,
		|	Заявка.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Заявка.Ответственный КАК Ответственный,
		|	Заявка.ДатаНачала КАК ДатаНачала,
		|	Заявка.ДатаОкончания КАК ДатаОкончания,
		|	Заявка.Организация КАК Организация,
		|	Заявка.СистемаБронирования КАК СистемаБронирования,
		|	Заявка.БронироватьБилеты КАК БронироватьБилеты,
		|	Заявка.ВидТранспорта КАК ВидТранспорта,
		|	Заявка.КлассПерелета КАК КлассПерелета,
		|	Заявка.ГородВылета КАК ГородВылета,
		|	Заявка.ГородПрилета КАК ГородПрилета,
		|	Заявка.СтанцияОтправления КАК СтанцияОтправления,
		|	Заявка.СтанцияПрибытия КАК СтанцияПрибытия,
		|	Заявка.ДатаОтправленияТуда КАК ДатаОтправленияТуда,
		|	Заявка.ДатаОтправленияОбратно КАК ДатаОтправленияОбратно,
		|	Заявка.БилетВОдинКонец КАК БилетВОдинКонец,
		|	Заявка.БронироватьПроживание КАК БронироватьПроживание,
		|	Заявка.МестоПроживания КАК МестоПроживания,
		|	Заявка.ВидЗапросаМестаПроживания КАК ВидЗапросаМестаПроживания,
		|	Заявка.ДатаЗаездаПроживания КАК ДатаЗаездаПроживания,
		|	Заявка.ДатаВыездаПроживания КАК ДатаВыездаПроживания,
		|	Заявка.ФамилияВПаспорте КАК ФамилияВПаспорте,
		|	Заявка.ИмяВПаспорте КАК ИмяВПаспорте,
		|	Заявка.ОтчествоВПаспорте КАК ОтчествоВПаспорте,
		|	Заявка.ВидПаспорта КАК ВидПаспорта,
		|	Заявка.НомерПаспорта КАК НомерПаспорта,
		|	Заявка.СрокДействияПаспорта КАК СрокДействияПаспорта,
		|	Заявка.ФамилияЛатиницей КАК ФамилияЛатиницей,
		|	Заявка.ИмяЛатиницей КАК ИмяЛатиницей,
		|	Заявка.ДатаРождения КАК ДатаРождения,
		|	Заявка.Пол КАК Пол,
		|	Заявка.Гражданство КАК Гражданство,
		|	Заявка.Телефон КАК Телефон,
		|	Заявка.EMail КАК EMail,
		|	Заявка.Пожелания КАК Пожелания
		|ИЗ
		|	Документ.ЗаявкаНаКомандировку КАК Заявка
		|ГДЕ
		|	Заявка.Ссылка В(&Заявки)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяПоездка = ДобавитьПоездкуКДаннымБронирования(ДанныеБронирования, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьПоездкуКДаннымБронирования(ДанныеБронирования, ДанныеЗаявки) Экспорт
	
	Если Не ДанныеЗаявки.БронироватьБилеты И Не ДанныеЗаявки.БронироватьПроживание Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяПоездка = БронированиеКомандировок.ДобавитьНовуюПоездку(ДанныеБронирования);
	НоваяПоездка.СистемаБронирования = ДанныеЗаявки.СистемаБронирования;
	НоваяПоездка.Заявка = ДанныеЗаявки.Ссылка;
	НоваяПоездка.ДатаНачала = ДанныеЗаявки.ДатаНачала;
	НоваяПоездка.ДатаОкончания = ДанныеЗаявки.ДатаОкончания;
	НоваяПоездка.Пожелания = ДанныеЗаявки.Пожелания;
	НоваяПоездка.Организация = ДанныеЗаявки.Организация;
	Если ЗначениеЗаполнено(ДанныеЗаявки.Организация) Тогда
		НоваяПоездка.ИННОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаявки.Организация, "ИНН");
	КонецЕсли;
	Если ДанныеЗаявки.Статус <> Перечисления.СтатусыЗаявокСотрудников.Согласовано Тогда
		НоваяПоездка.Отменена = Истина;
	КонецЕсли;
	
	ДобавитьФизическоеЛицоКДаннымБронирования(НоваяПоездка, ДанныеЗаявки);
	
	Если ДанныеЗаявки.БронироватьБилеты Тогда
		Если ДанныеЗаявки.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Самолет Тогда
			Билет = БронированиеКомандировок.ДобавитьАвиаБилет(НоваяПоездка);
			ДобавитьФизическоеЛицоКДаннымБронирования(Билет, ДанныеЗаявки);
			Билет.Содержимое.КлассПерелета = ДанныеЗаявки.КлассПерелета;
			СегментМаршрута = Билет.Содержимое.Маршрут.Добавить();
			СегментМаршрута.ДатаОтправления = ДанныеЗаявки.ДатаОтправленияТуда;
			СегментМаршрута.ПунктОтправления = ДанныеЗаявки.ГородВылета;
			СегментМаршрута.ПунктПрибытия = ДанныеЗаявки.ГородПрилета;
			Если Не ДанныеЗаявки.БилетВОдинКонец Тогда
				СегментМаршрута = Билет.Содержимое.Маршрут.Добавить();
				СегментМаршрута.ДатаОтправления = ДанныеЗаявки.ДатаОтправленияОбратно;
				СегментМаршрута.ПунктОтправления = ДанныеЗаявки.ГородПрилета;
				СегментМаршрута.ПунктПрибытия = ДанныеЗаявки.ГородВылета;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеЗаявки.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Поезд Тогда
			Билет = БронированиеКомандировок.ДобавитьБилетНаПоезд(НоваяПоездка);
			ДобавитьФизическоеЛицоКДаннымБронирования(Билет, ДанныеЗаявки);
			Билет.Содержимое.ДатаОтправления = ДанныеЗаявки.ДатаОтправленияТуда;
			Билет.Содержимое.ПунктОтправления = ДанныеЗаявки.СтанцияОтправления;
			Билет.Содержимое.ПунктПрибытия = ДанныеЗаявки.СтанцияПрибытия;
			Если Не ДанныеЗаявки.БилетВОдинКонец Тогда
				Билет = БронированиеКомандировок.ДобавитьБилетНаПоезд(НоваяПоездка);
				ДобавитьФизическоеЛицоКДаннымБронирования(Билет, ДанныеЗаявки);
				Билет.Содержимое.ДатаОтправления = ДанныеЗаявки.ДатаОтправленияОбратно;
				Билет.Содержимое.ПунктОтправления = ДанныеЗаявки.СтанцияПрибытия;
				Билет.Содержимое.ПунктПрибытия = ДанныеЗаявки.СтанцияОтправления;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаявки.БронироватьПроживание Тогда
		БроньОтеля = БронированиеКомандировок.ДобавитьУслугуПроживание(НоваяПоездка);
		ДобавитьФизическоеЛицоКДаннымБронирования(БроньОтеля, ДанныеЗаявки);
		БроньОтеля.Содержимое.МестоПроживания = ДанныеЗаявки.МестоПроживания;
		БроньОтеля.Содержимое.ВидЗапроса = ДанныеЗаявки.ВидЗапросаМестаПроживания;
		БроньОтеля.Содержимое.ДатаЗаезда = ДанныеЗаявки.ДатаЗаездаПроживания;
		БроньОтеля.Содержимое.ДатаВыезда = ДанныеЗаявки.ДатаВыездаПроживания;
	КонецЕсли;
	
	Возврат НоваяПоездка;
	
КонецФункции

Процедура ДобавитьФизическоеЛицоКДаннымБронирования(ПоездкаУслуга, ДанныеЗаявки)
	
	НовоеФизическоеЛицо = БронированиеКомандировок.ДобавитьФизическоеЛицо(ПоездкаУслуга);
	НовоеФизическоеЛицо.Ссылка = ДанныеЗаявки.ФизическоеЛицо;
	НовоеФизическоеЛицо.Фамилия = ДанныеЗаявки.ФамилияВПаспорте;
	НовоеФизическоеЛицо.ФамилияЛатиницей = ДанныеЗаявки.ФамилияЛатиницей;
	НовоеФизическоеЛицо.Имя = ДанныеЗаявки.ИмяВПаспорте;
	НовоеФизическоеЛицо.ИмяЛатиницей = ДанныеЗаявки.ИмяЛатиницей;
	НовоеФизическоеЛицо.Отчество = ДанныеЗаявки.ОтчествоВПаспорте;
	НовоеФизическоеЛицо.ДатаРождения = ДанныеЗаявки.ДатаРождения;
	НовоеФизическоеЛицо.Пол = ДанныеЗаявки.Пол;
	НовоеФизическоеЛицо.Гражданство = ДанныеЗаявки.Гражданство;
	НовоеФизическоеЛицо.Телефон = ДанныеЗаявки.Телефон;
	НовоеФизическоеЛицо.EMail = ДанныеЗаявки.EMail;
	
	НовыйПаспорт = НовоеФизическоеЛицо.Документы.Добавить();
	НовыйПаспорт.ВидДокумента = ДанныеЗаявки.ВидПаспорта;
	НовыйПаспорт.НомерДокумента = ДанныеЗаявки.НомерПаспорта;
	НовыйПаспорт.СрокДействияДокумента = ДанныеЗаявки.СрокДействияПаспорта;
	
КонецПроцедуры

Функция ПоследниеИспользованныеЗначенияБронирования(ФизическоеЛицо, ВидТранспорта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ВидТранспорта", ВидТранспорта);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаявкаНаКомандировку.ВидТранспорта КАК ВидТранспорта,
		|	ЗаявкаНаКомандировку.КлассПерелета КАК КлассПерелета,
		|	ЗаявкаНаКомандировку.ГородВылета КАК ГородВылета,
		|	ЗаявкаНаКомандировку.ГородВылетаПредставление КАК ГородВылетаПредставление,
		|	ЗаявкаНаКомандировку.СтанцияОтправления КАК СтанцияОтправления,
		|	ЗаявкаНаКомандировку.СтанцияОтправленияПредставление КАК СтанцияОтправленияПредставление,
		|	ЗаявкаНаКомандировку.ФамилияВПаспорте КАК ФамилияВПаспорте,
		|	ЗаявкаНаКомандировку.ИмяВПаспорте КАК ИмяВПаспорте,
		|	ЗаявкаНаКомандировку.ОтчествоВПаспорте КАК ОтчествоВПаспорте,
		|	ЗаявкаНаКомандировку.ВидПаспорта КАК ВидПаспорта,
		|	ЗаявкаНаКомандировку.НомерПаспорта КАК НомерПаспорта,
		|	ЗаявкаНаКомандировку.СрокДействияПаспорта КАК СрокДействияПаспорта,
		|	ЗаявкаНаКомандировку.ФамилияЛатиницей КАК ФамилияЛатиницей,
		|	ЗаявкаНаКомандировку.ИмяЛатиницей КАК ИмяЛатиницей,
		|	ЗаявкаНаКомандировку.ОтчествоЛатиницей КАК ОтчествоЛатиницей,
		|	ЗаявкаНаКомандировку.ДатаРождения КАК ДатаРождения,
		|	ЗаявкаНаКомандировку.Пол КАК Пол,
		|	ЗаявкаНаКомандировку.Гражданство КАК Гражданство,
		|	ЗаявкаНаКомандировку.Телефон КАК Телефон,
		|	ЗаявкаНаКомандировку.EMail КАК EMail
		|ИЗ
		|	Документ.ЗаявкаНаКомандировку КАК ЗаявкаНаКомандировку
		|ГДЕ
		|	ЗаявкаНаКомандировку.ФизическоеЛицо = &ФизическоеЛицо
		|	И ЗаявкаНаКомандировку.БронироватьБилеты
		|	И ЗаявкаНаКомандировку.ВидТранспорта = &ВидТранспорта
		|	И НЕ ЗаявкаНаКомандировку.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаНаКомандировку.Дата УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

#КонецОбласти

#КонецЕсли