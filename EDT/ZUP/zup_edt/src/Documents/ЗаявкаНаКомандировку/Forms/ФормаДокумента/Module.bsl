
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, Новый Структура("Ответственный", "Объект.Ответственный"));
		ИнициализироватьФорму();
		Объект.СистемаБронирования = Перечисления.СистемыБронированияКомандировок.Smartway;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализироватьФорму();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НачатьОграничениеВыбораОрганизацииБронирования();
	НачатьПолучениеРезультатовБронирования();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("Запись_ЗаявкаНаКомандировку", Объект.Ссылка, ЭтаФорма);
	
	НачатьОжиданиеОбновленияСостоянияЗаявкиНаБронирование();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	ЗапуститьОтложеннуюОбработкуДанных(ТекущийОбъект);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаявкаНаКомандировку" И Источник = ЭтаФорма
		Или ИмяСобытия = "ЗаписанДокументОтменаЗаявкиНаКомандировку" И Источник.ВладелецФормы = ЭтаФорма
		Или ИмяСобытия = "ЗаписьДокументаКомандировка" И Источник = ЭтаФорма Тогда
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработатьСообщениеОНеправильныхДанных(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработатьКомандуОтправитьВСистемуБронирования(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработатьКомандуОбновитьСтатусВСистемеБронирования(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработатьКомандуОбновитьРезультатыБронирования(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработатьКомандуОбновитьПолучитьБронь(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	УстановитьДоступностьЛичныхДанныхДляБронирования(ЭтаФорма);
	УстановитьДоступностьОрганизацииБронирования(ЭтаФорма);
	
	ОчиститьОбщиеПоляБронированияКомандировки(ЭтаФорма);
	ЗаполнитьДанныеДляБронирования();
	
	ЗаполнитьПоследниеИспользованныеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоНазначенияПриИзменении(Элемент)
	
	НачатьУточнениеГородаПрилета();
	НачатьУточнениеСтанцииПрибытия();
	НачатьУточнениеМестаПроживания();
	
	УстановитьДоступностьПодбораАэропорта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ЗаполнитьДатуОтправленияТуда();
	ЗаполнитьДатуЗаездаПроживания();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ЗаполнитьДатуОтправленияОбратно();
	ЗаполнитьДатуВыездаПроживания();
	
КонецПроцедуры

#Область БронированиеКомандировки

&НаКлиенте
Процедура БронироватьБилетыПриИзменении(Элемент)
	
	УстановитьДоступностьБронированияБилетов(ЭтаФорма);
	УстановитьДоступностьЛичныхДанныхДляБронирования(ЭтаФорма);
	УстановитьДоступностьОрганизацииБронирования(ЭтаФорма);
	
	ЗаполнитьДатуОтправленияТуда();
	ЗаполнитьДатуОтправленияОбратно();
	
	Если Не Объект.БронироватьПроживание Тогда
		ЗаполнитьДанныеДляБронирования();
	КонецЕсли;
	
	ЗаполнитьПоследниеИспользованныеЗначения();
	
	Если Не Объект.БронироватьБилеты Тогда
		ОчиститьПоляБронированияБилетов(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТранспортаПриИзменении(Элемент)
	
	Если Объект.ВидТранспорта <> ПредопределенноеЗначение("Перечисление.ВидыТранспортаБронированияБилетов.Самолет") Тогда
		ОчиститьПоляБронированияАвиабилетов(ЭтаФорма);
	КонецЕсли;
	
	Если Объект.ВидТранспорта <> ПредопределенноеЗначение("Перечисление.ВидыТранспортаБронированияБилетов.Поезд") Тогда
		ОчиститьПоляБронированияБилетовНаПоезд(ЭтаФорма);
	КонецЕсли;
	
	УстановитьВидТранспортаБронированияБилетов(ЭтаФорма);
	
	ЗаполнитьПоследниеИспользованныеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГородВылетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПриОбработкеВыбораАвтоПодбора("Объект.ГородВылета", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГородВылетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПриАвтоПодбореАэропорта(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГородВылетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПриАвтоПодбореАэропорта(Элемент, Текст, ДанныеВыбора, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГородПрилетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПриАвтоПодбореАэропорта(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГородПрилетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПриАвтоПодбореАэропорта(Элемент, Текст, ДанныеВыбора, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГородПрилетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПриОбработкеВыбораАвтоПодбора("Объект.ГородПрилета", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтправленияТудаПриИзменении(Элемент)
	ЗаполнитьДатуОтправленияТуда();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтправленияОбратноПриИзменении(Элемент)
	ЗаполнитьДатуОтправленияОбратно();
КонецПроцедуры

&НаКлиенте
Процедура АвиаОбратныйБилетПриИзменении(Элемент)
	УстановитьВидимостьОбратногоМаршрутаПриБронировании(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоездОбратныйБилетПриИзменении(Элемент)
	УстановитьВидимостьОбратногоМаршрутаПриБронировании(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтанцияОтправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПриАвтоПодбореЖДСтанции(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтанцияОтправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПриАвтоПодбореЖДСтанции(Элемент, Текст, ДанныеВыбора, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтанцияОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПриОбработкеВыбораАвтоПодбора("Объект.СтанцияОтправления", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтанцияПрибытияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПриАвтоПодбореЖДСтанции(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтанцияПрибытияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПриАвтоПодбореЖДСтанции(Элемент, Текст, ДанныеВыбора, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтанцияПрибытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПриОбработкеВыбораАвтоПодбора("Объект.СтанцияПрибытия", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура БронироватьПроживаниеПриИзменении(Элемент)
	
	УстановитьДоступностьПолейПроживания(ЭтаФорма);
	УстановитьДоступностьЛичныхДанныхДляБронирования(ЭтаФорма);
	УстановитьДоступностьОрганизацииБронирования(ЭтаФорма);
		
	ЗаполнитьДатуЗаездаПроживания();
	ЗаполнитьДатуВыездаПроживания();
	
	Если Не Объект.БронироватьБилеты Тогда
		ЗаполнитьДанныеДляБронирования();
	КонецЕсли;
	
	Если Не Объект.БронироватьПроживание Тогда
		ОчиститьПоляБронированияПроживания(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроживанияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПриАвтоПодбореГостиницы(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестоПроживанияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПриАвтоПодбореГостиницы(Элемент, Текст, ДанныеВыбора, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестоПроживанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПриОбработкеВыбораАвтоПодбораМестаПроживания(ВыбранноеЗначение, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПроживанияПриИзменении(Элемент)
	ЗаполнитьДатуЗаездаПроживания();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПроживанияПриИзменении(Элемент)
	ЗаполнитьДатуВыездаПроживания();
КонецПроцедуры

&НаКлиенте
Процедура ВидПаспортаПриИзменении(Элемент)
	
	НачатьЗаполнениеДанныхУдостоверенияЛичности();
	УстановитьСвойстваПолейТребуемыхДляЗагранпаспорта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Пожелания");
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОформитьКомандировку(Команда)
	
	СамообслуживаниеСотрудниковКлиент.ОформитьКадровыйПриказ(ЭтаФорма, "Командировка", ДанныеЗаявкиСотрудника(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКомандировку(Команда)
	
	СамообслуживаниеСотрудниковКлиент.ОткрытьКадровыйПриказ(ЭтаФорма, "Командировка");
	
КонецПроцедуры

#Область ИсправлениеДокументов

&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Отменить(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ЗаявкаСотрудника, ФизическоеЛицо", Объект.Ссылка, Объект.ФизическоеЛицо);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ОтменаЗаявкиНаКомандировку.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКДокументуОтмены(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ", ЭтотОбъект.ДокументОтменаЗаявки);
	ОткрытьФорму("Документ.ОтменаЗаявкиНаКомандировку.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Отозвать(Команда)
	
	ОтозватьЗаявкуНаСервере();
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Согласовать(Команда)
	
	СогласоватьЗаявкуНаСервере();
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	НачатьОжиданиеОбновленияСостоянияЗаявкиНаБронирование();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Отклонить(Команда)
	
	ОтклонитьЗаявкуНаСервере();
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	НачатьОжиданиеОбновленияСостоянияЗаявкиНаБронирование();
	
КонецПроцедуры

#КонецОбласти

#Область БронированиеКомандировок

&НаКлиенте
Процедура ПодобратьГородПрилета(Команда)
	НачатьПодборГородаПрилета();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМестоПроживания(Команда)
	НачатьПодборМестаПроживания();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСтанциюПрибытия(Команда)
	НачатьПодборСтанцииПрибытия();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ИнициализироватьФорму()
	
	Параметры.Свойство("РежимМоиЗаявки", РежимМоиЗаявки);
	
	ИспользоватьБронированиеКомандировок = ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеКомандировок");
	Элементы.БронированиеГруппа.Видимость = ИспользоватьБронированиеКомандировок;
	
	ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(ЭтаФорма);
	СамообслуживаниеСотрудников.ГруппаИсправлениеДополнитьФорму(ЭтаФорма);
	
	ЗаполнитьПредопределенныеЗначения();
	
	ПриПолученииДанныхНаСервере();
	
	УстановитьДоступностьБронированияБилетов(ЭтаФорма);
	УстановитьВидТранспортаБронированияБилетов(ЭтаФорма);
	УстановитьВидимостьОбратногоМаршрутаПриБронировании(ЭтаФорма);
	УстановитьДоступностьПолейПроживания(ЭтаФорма);
	УстановитьДоступностьПодбораАэропорта(ЭтаФорма);
	УстановитьДоступностьЛичныхДанныхДляБронирования(ЭтаФорма);
	УстановитьДоступностьОрганизацииБронирования(ЭтаФорма);
	УстановитьСвойстваПолейТребуемыхДляЗагранпаспорта(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма, "ПериодическиеСведения");
	Если Не ЭтаФорма.Параметры.Ключ.Пустая() Тогда
		СамообслуживаниеСотрудников.ПрочитатьРеквизитыИсправления(ЭтаФорма);
	КонецЕсли;
	ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(ЭтаФорма, "ПериодическиеСведения");
	
	СамообслуживаниеСотрудников.УстановитьКадровыйПриказЗаявки(ЭтаФорма);
	СамообслуживаниеСотрудников.УстановитьПоляИсправления(ЭтаФорма, КадровыйПриказ);
	
	УстановитьВидимостьЭлементов();
	УстановитьЗначенияНадписей();
	
	ОбновитьСостояниеЗаявкиНаБронирование(ЭтаФорма);
	
	УстановитьДоступностьРедактированияФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ПриказОформлен = ЗначениеЗаполнено(КадровыйПриказ);
	ЕстьИсправленныйДокумент = ЗначениеЗаполнено(Объект.ИсправленныйДокумент);
	
	ДоступноДобавлениеКомандировок = ПравоДоступа("Добавление", Метаданные.Документы.Командировка);
	ДоступноЧтениеКомандировок = ПравоДоступа("Чтение", Метаданные.Документы.Командировка);
	
	Если Объект.Статус <> Перечисления.СтатусыЗаявокСотрудников.Согласовано Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
			"КадровыйПриказСтраницы", "ТекущаяСтраница", Элементы.КадровыйПриказПустаяСтраница);
	ИначеЕсли ПриказОформлен И ДоступноЧтениеКомандировок Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
			"КадровыйПриказСтраницы", "ТекущаяСтраница", Элементы.КадровыйПриказСтраница);
	ИначеЕсли Не ПриказОформлен И ДоступноДобавлениеКомандировок И Не ЭтаФорма.ДокументОтменен Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
			"КадровыйПриказСтраницы", "ТекущаяСтраница", Элементы.ВводКадровогоПриказаСтраница);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
			"КадровыйПриказСтраницы", "ТекущаяСтраница", Элементы.КадровыйПриказПустаяСтраница);
	КонецЕсли;
	
	СамообслуживаниеСотрудников.УстановитьВидимостьЭлементовЗаявки(ЭтотОбъект, КадровыйПриказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРедактированияФормы()
	
	Если Не ДоступностьБронирования.Изменение Тогда
		ЗаблокироватьРедактированиеБронирования(ЭтаФорма, Элементы);
		Возврат;
	КонецЕсли;
	
	РешениеПринято = Новый Массив;
	РешениеПринято.Добавить(Перечисления.СтатусыЗаявокСотрудников.Согласовано);
	РешениеПринято.Добавить(Перечисления.СтатусыЗаявокСотрудников.Отклонено);
	
	Если РешениеПринято.Найти(Объект.Статус) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Документы.ЗаявкаНаКомандировку.ДоступноСогласованиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьРедактированиеБронирования(ЭтаФорма, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияНадписей()
	
	Элементы.ОткрытьКомандировку.Заголовок = Строка(КадровыйПриказ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаявкиСотрудника(Форма)
	
	Объект = Форма.Объект;
	
	ДанныеЗаявки = Новый Структура;
	ДанныеЗаявки.Вставить("ЗаявкаСотрудника", Объект.Ссылка);
	ДанныеЗаявки.Вставить("ФизическоеЛицо", Объект.ФизическоеЛицо);
	ДанныеЗаявки.Вставить("ДатаНачала", Объект.ДатаНачала);
	ДанныеЗаявки.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ДанныеЗаявки.Вставить("МестоНазначения", Объект.МестоНазначения);
	ДанныеЗаявки.Вставить("ОрганизацияНазначения", Объект.ОрганизацияНазначения);
	ДанныеЗаявки.Вставить("Цель", Объект.Цель);
	ДанныеЗаявки.Вставить("КадровыйПриказИсправленногоДокумента", Форма.КадровыйПриказИсправленногоДокумента);
	
	Возврат ДанныеЗаявки;
	
КонецФункции

&НаСервере
Процедура ОтозватьЗаявкуНаСервере()
	
	СамообслуживаниеСотрудников.ОтозватьЗаявку(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьЗаявкуНаСервере()
	
	СамообслуживаниеСотрудников.СогласоватьЗаявку(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтклонитьЗаявкуНаСервере()
	
	СамообслуживаниеСотрудников.ОтклонитьЗаявку(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьОтложеннуюОбработкуДанных(ТекущийОбъект)
	
	БронированиеКомандировок.ЗапуститьОтложеннуюОбработкуЗаявкиНаКомандировку(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

#Область БронированиеКомандировок

&НаКлиенте
Процедура ЗаполнитьДатуОтправленияТуда()
	
	Если Не Объект.БронироватьБилеты Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОтправленияТуда) Тогда
		Объект.ДатаОтправленияТуда = Объект.ДатаНачала;
		Возврат;
	КонецЕсли;
	
	// Если дата заполнена, сдвигаем ее только в случае, если она не удовлетворяет периоду командировки.
	// При этом отправление на 1 день раньше считаем допустимым.
	
	ДатаОдинДеньДоКомандировки = Объект.ДатаНачала - ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах();
	
	Если Объект.ДатаОтправленияТуда >= ДатаОдинДеньДоКомандировки 
		И Объект.ДатаОтправленияТуда <= КонецДня(Объект.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
		
	Объект.ДатаОтправленияТуда = Объект.ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтправленияОбратно()
	
	Если Не Объект.БронироватьБилеты Или Объект.БилетВОдинКонец Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОтправленияОбратно) Тогда
		Объект.ДатаОтправленияОбратно = Объект.ДатаОкончания;
		Возврат;
	КонецЕсли;
		
	Объект.ДатаОтправленияОбратно = Мин(Объект.ДатаОкончания, Объект.ДатаОтправленияОбратно);
	Объект.ДатаОтправленияОбратно = Макс(Объект.ДатаНачала, Объект.ДатаОтправленияОбратно);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуЗаездаПроживания()
	
	Если Не Объект.БронироватьПроживание Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаЗаездаПроживания) Тогда
		Объект.ДатаЗаездаПроживания = Объект.ДатаНачала;
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаЗаездаПроживания >= Объект.ДатаНачала 
		И Объект.ДатаЗаездаПроживания <= КонецДня(Объект.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
		
	Объект.ДатаЗаездаПроживания = Объект.ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВыездаПроживания()
	
	Если Не Объект.БронироватьПроживание Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаВыездаПроживания) Тогда
		Объект.ДатаВыездаПроживания = Объект.ДатаОкончания;
		Возврат;
	КонецЕсли;
		
	Объект.ДатаВыездаПроживания = Мин(Объект.ДатаОкончания, Объект.ДатаВыездаПроживания);
	Объект.ДатаВыездаПроживания = Макс(Объект.ДатаНачала, Объект.ДатаВыездаПроживания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодборГородаПрилета()
	
	ДанныеВыбора = Новый СписокЗначений;
	ПриАвтоПодбореАэропорта(Элементы.ГородПрилета, Объект.МестоНазначения, ДанныеВыбора);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подобрать аэропорт по месту «%1». Попробуйте выбрать другой город прилета вручную.'"),
			Объект.МестоНазначения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ДанныеВыбора.Количество() = 1 И Не ЗначениеЗаполнено(Объект.ГородПрилетаПредставление) Тогда
		ПриОбработкеВыбораАвтоПодбора("Объект.ГородПрилета", ДанныеВыбора[0].Значение);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ГородаПрилетаПослеВыбораИзСписка", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОбработчикОповещения, ДанныеВыбора, Элементы.ГородПрилета);
	
КонецПроцедуры

&НаКлиенте
Процедура ГородаПрилетаПослеВыбораИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриОбработкеВыбораАвтоПодбора("Объект.ГородПрилета", Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУточнениеГородаПрилета()
	
	Если Не Объект.БронироватьБилеты Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидТранспорта <> ПредопределенноеЗначение("Перечисление.ВидыТранспортаБронированияБилетов.Самолет") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.МестоНазначения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ГородПрилетаПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для бронирования билетов городом прилета выбран «%1».
				|Это соответствует месту командировки «%2», или очистить город прилета для последующего уточнения вручную?'"),
		Объект.ГородПрилетаПредставление, 
		Объект.МестоНазначения);
	
	ВариантыОтвета = Новый СписокЗначений;
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, соответствует'"));
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет, очистить'"));
	
	ОбработчикОтвета = Новый ОписаниеОповещения("УточнениеГородаПрилетаПослеОтвета", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, ВариантыОтвета);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеГородаПрилетаПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ГородПрилета = Неопределено;
	Объект.ГородПрилетаПредставление = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУточнениеСтанцииПрибытия()
	
	Если Не Объект.БронироватьБилеты Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидТранспорта <> ПредопределенноеЗначение("Перечисление.ВидыТранспортаБронированияБилетов.Поезд") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.МестоНазначения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СтанцияПрибытияПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для бронирования билетов станцией прибытия выбрана «%1».
				|Это соответствует месту командировки «%2», или очистить станцию прибытия для последующего уточнения вручную?'"),
		Объект.СтанцияПрибытияПредставление, 
		Объект.МестоНазначения);
	
	ВариантыОтвета = Новый СписокЗначений;
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, соответствует'"));
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет, очистить'"));
	
	ОбработчикОтвета = Новый ОписаниеОповещения("УточнениеСтанцииПрибытияПослеОтвета", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, ВариантыОтвета);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеСтанцииПрибытияПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СтанцияПрибытия = Неопределено;
	Объект.СтанцияПрибытияПредставление = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУточнениеМестаПроживания()
	
	Если Не Объект.БронироватьПроживание Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.МестоНазначения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.МестоПроживанияПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для бронирования проживания местом выбрано «%1».
				|Это соответствует месту командировки «%2», или очистить место проживания для последующего уточнения вручную?'"),
		Объект.МестоПроживанияПредставление, 
		Объект.МестоНазначения);
	
	ВариантыОтвета = Новый СписокЗначений;
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, соответствует'"));
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет, очистить'"));
	
	ОбработчикОтвета = Новый ОписаниеОповещения("УточнениеМестаПроживанияПослеОтвета", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, ВариантыОтвета);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеМестаПроживанияПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.МестоПроживания = Неопределено;
	Объект.МестоПроживанияПредставление = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеВыбораАвтоПодбора(ИмяРеквизита, ВыбранноеЗначение, СтандартнаяОбработка = Неопределено)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, ИмяРеквизита, ВыбранноеЗначение.Код);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, ИмяРеквизита + "Представление", ВыбранноеЗначение.Представление);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеВыбораАвтоПодбораМестаПроживания(ВыбранноеЗначение, СтандартнаяОбработка = Неопределено)
	
	ПриОбработкеВыбораАвтоПодбора("Объект.МестоПроживания", ВыбранноеЗначение, СтандартнаяОбработка);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВидЗапроса") Тогда
		Объект.ВидЗапросаМестаПроживания = ВыбранноеЗначение.ВидЗапроса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАвтоПодбореАэропорта(Элемент, Текст, ДанныеВыбора, Ожидание = 1, СтандартнаяОбработка = Неопределено)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	АвтоПодборАэропортаНаСервере(Текст, ДанныеВыбора);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АвтоПодборАэропортаНаСервере(Текст, ДанныеВыбора)
	БронированиеКомандировок.АвтоПодборАэропорта(Текст, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПриАвтоПодбореЖДСтанции(Элемент, Текст, ДанныеВыбора, Ожидание = 1, СтандартнаяОбработка = Неопределено)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	АвтоПодборЖДСтанцииНаСервере(Текст, ДанныеВыбора);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АвтоПодборЖДСтанцииНаСервере(Текст, ДанныеВыбора)
	БронированиеКомандировок.АвтоПодборЖДСтанции(Текст, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодборМестаПроживания()
	
	ДанныеВыбора = Новый СписокЗначений;
	ПриАвтоПодбореГостиницы(Элементы.МестоПроживания, Объект.МестоНазначения, ДанныеВыбора);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подобрать гостиницу по месту «%1». Попробуйте выбрать место проживания вручную.'"),
			Объект.МестоНазначения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ДанныеВыбора.Количество() = 1 И Не ЗначениеЗаполнено(Объект.МестоПроживанияПредставление) Тогда
		ПриОбработкеВыбораАвтоПодбораМестаПроживания(ДанныеВыбора[0].Значение);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("МестоПроживанияПослеВыбораИзСписка", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОбработчикОповещения, ДанныеВыбора, Элементы.МестоПроживания);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроживанияПослеВыбораИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриОбработкеВыбораАвтоПодбораМестаПроживания(Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАвтоПодбореГостиницы(Элемент, Текст, ДанныеВыбора, Ожидание = 1, СтандартнаяОбработка = Неопределено)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	МестоПроживанияАвтоПодборНаСервере(Текст, ДанныеВыбора);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура МестоПроживанияАвтоПодборНаСервере(Текст, ДанныеВыбора)
	БронированиеКомандировок.АвтоПодборГостиницы(Текст, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодборСтанцииПрибытия()
	
	ДанныеВыбора = Новый СписокЗначений;
	ПриАвтоПодбореЖДСтанции(Элементы.СтанцияПрибытия, Объект.МестоНазначения, ДанныеВыбора);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подобрать станцию прибытия по месту «%1». Попробуйте выбрать станцию прибытия вручную.'"),
			Объект.МестоНазначения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ДанныеВыбора.Количество() = 1 И Не ЗначениеЗаполнено(Объект.СтанцияПрибытияПредставление) Тогда
		ПриОбработкеВыбораАвтоПодбора("Объект.СтанцияПрибытия", ДанныеВыбора[0].Значение);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СтанцияПрибытияПослеВыбораИзСписка", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОбработчикОповещения, ДанныеВыбора, Элементы.ГородПрилета);
	
КонецПроцедуры

&НаКлиенте
Процедура СтанцияПрибытияПослеВыбораИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриОбработкеВыбораАвтоПодбора("Объект.СтанцияПрибытия", Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоследниеИспользованныеЗначения()
	
	Если Не Объект.БронироватьБилеты Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Или Не ЗначениеЗаполнено(Объект.ВидТранспорта) Тогда
		Возврат;
	КонецЕсли;
	
	ПоследниеЗначения = ПоследниеИспользованныеЗначенияБронирования(Объект.ФизическоеЛицо, Объект.ВидТранспорта);
	Если ПоследниеЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаБронированияБилетов.Самолет") Тогда
		Если Не ЗначениеЗаполнено(Объект.ГородВылета) И ЗначениеЗаполнено(ПоследниеЗначения.ГородВылета) Тогда
			Объект.ГородВылета = ПоследниеЗначения.ГородВылета;
			Объект.ГородВылетаПредставление = ПоследниеЗначения.ГородВылетаПредставление;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаБронированияБилетов.Поезд") Тогда
		Если Не ЗначениеЗаполнено(Объект.СтанцияОтправления) И ЗначениеЗаполнено(ПоследниеЗначения.СтанцияОтправления) Тогда
			Объект.СтанцияОтправления = ПоследниеЗначения.СтанцияОтправления;
			Объект.СтанцияОтправленияПредставление = ПоследниеЗначения.СтанцияОтправленияПредставление;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидПаспорта) Или Объект.ВидПаспорта = ПоследниеЗначения.ВидПаспорта Тогда
		Объект.ВидПаспорта = ПоследниеЗначения.ВидПаспорта;
		Объект.НомерПаспорта = ПоследниеЗначения.НомерПаспорта;
		Объект.СрокДействияПаспорта = ПоследниеЗначения.СрокДействияПаспорта;
		Объект.ФамилияВПаспорте = ПоследниеЗначения.ФамилияВПаспорте;
		Объект.ИмяВПаспорте = ПоследниеЗначения.ИмяВПаспорте;
		Объект.ОтчествоВПаспорте = ПоследниеЗначения.ОтчествоВПаспорте;
	КонецЕсли;
	
	ЗаполняемыеРеквизиты = Новый Массив;
	ЗаполняемыеРеквизиты.Добавить("ДатаРождения");
	ЗаполняемыеРеквизиты.Добавить("Пол");
	ЗаполняемыеРеквизиты.Добавить("Гражданство");
	ЗаполняемыеРеквизиты.Добавить("ФамилияЛатиницей");
	ЗаполняемыеРеквизиты.Добавить("ИмяЛатиницей");
	ЗаполняемыеРеквизиты.Добавить("Телефон");
	ЗаполняемыеРеквизиты.Добавить("EMail");
	
	Для Каждого ИмяРеквизита Из ЗаполняемыеРеквизиты Цикл
		Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			Объект[ИмяРеквизита] = ПоследниеЗначения[ИмяРеквизита];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследниеИспользованныеЗначенияБронирования(ФизическоеЛицо, ВидТранспорта)
	
	ПоследниеЗначения = Документы.ЗаявкаНаКомандировку.ПоследниеИспользованныеЗначенияБронирования(ФизическоеЛицо, ВидТранспорта);
	Если ПоследниеЗначения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ОбщегоНазначения.ФиксированныеДанные(ПоследниеЗначения);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьБронированияБилетов(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.Элементы.ВидТранспорта.Доступность = Объект.БронироватьБилеты;
	Форма.Элементы.МаршрутГруппа.Доступность = Объект.БронироватьБилеты;
	
	УстановитьСостояниеЗаказаБилетов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеЗаказаБилетов(Форма)
	Форма.Элементы.СостояниеБилетовГруппа.Доступность = Форма.Объект.БронироватьБилеты;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидТранспортаБронированияБилетов(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаБронированияБилетов.Поезд") Тогда
		Элементы.БилетыСтраницы.ТекущаяСтраница = Элементы.ПоездБилетыСтраница;
	Иначе
		Элементы.БилетыСтраницы.ТекущаяСтраница = Элементы.АвиабилетыСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейПроживания(Форма)
	Форма.Элементы.ПроживаниеГруппа.Доступность = Форма.Объект.БронироватьПроживание;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОбратногоМаршрутаПриБронировании(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.Объект.БилетВОдинКонец Тогда
		Элементы.АвиаОбратныйБилетСтраницы.ТекущаяСтраница = Элементы.АвиаОбратныйБилетНеНуженСтраница;
		Элементы.ПоездОбратныйБилетСтраницы.ТекущаяСтраница = Элементы.ПоездОбратныйБилетНеНуженСтраница;
	Иначе
		Элементы.АвиаОбратныйБилетСтраницы.ТекущаяСтраница = Элементы.АвиаОбратныйБилетНуженСтраница;
		Элементы.ПоездОбратныйБилетСтраницы.ТекущаяСтраница = Элементы.ПоездОбратныйБилетНуженСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПодбораАэропорта(Форма)
	
	ДоступностьПодбора = Ложь;
	Если Не Форма.РедактированиеБронированияЗаблокировано Тогда
		Если СтрДлина(СокрЛП(Форма.Объект.МестоНазначения)) > 1 Тогда
			ДоступностьПодбора = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.ПодобратьГородПрилета.Доступность = ДоступностьПодбора;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПолейТребуемыхДляЗагранпаспорта(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоЗагранпаспорт = Ложь;
	Если Объект.ВидПаспорта = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ") Тогда
		ЭтоЗагранпаспорт = Истина;
	КонецЕсли;
	
	Элементы.ФамилияЛатиницей.АвтоОтметкаНезаполненного = ЭтоЗагранпаспорт;
	Элементы.ФамилияЛатиницей.ОтметкаНезаполненного = ЭтоЗагранпаспорт И Не ЗначениеЗаполнено(Объект.ФамилияЛатиницей);
	
	Элементы.ИмяЛатиницей.АвтоОтметкаНезаполненного = ЭтоЗагранпаспорт;
	Элементы.ИмяЛатиницей.ОтметкаНезаполненного = ЭтоЗагранпаспорт И Не ЗначениеЗаполнено(Объект.ИмяЛатиницей);
	
	Элементы.СрокДействияПаспорта.АвтоОтметкаНезаполненного = ЭтоЗагранпаспорт;
	Элементы.СрокДействияПаспорта.ОтметкаНезаполненного = ЭтоЗагранпаспорт И Не ЗначениеЗаполнено(Объект.СрокДействияПаспорта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЛичныхДанныхДляБронирования(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Доступность = Ложь;
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) 
		И (Объект.БронироватьБилеты Или Объект.БронироватьПроживание) Тогда
		Доступность = Истина;
	КонецЕсли;
	
	Элементы.ДанныеДляБронированияГруппа.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОрганизацииБронирования(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Доступность = Ложь;
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) 
		И (Объект.БронироватьБилеты Или Объект.БронироватьПроживание) Тогда
		Доступность = Истина;
	КонецЕсли;
	
	Элементы.Организация.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляБронирования()
	
	Если Не Объект.БронироватьБилеты И Не Объект.БронироватьПроживание Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактированиеБронированияЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляБронированияЗаполнены(ЭтотОбъект) Тогда
		ЗапроситьПерезаполнениеДанныхДляБронирования();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеДляБронированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПерезаполнениеДанныхДляБронирования()
	
	ТекстСообщения = НСтр("ru = 'Личные данные для бронирования будут перезаполнены.
							|Продолжить?'");
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗаполнитьДанныеДляБронированияПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляБронированияПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеДляБронированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляБронированияНаСервере()
	
	ЗаполнитьЛичныеДанные();
	ЗаполнитьДанныеПаспорта();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛичныеДанные()
	
	Объект.Пол = Неопределено;
	Объект.ДатаРождения = Неопределено;
	Объект.Гражданство = Неопределено;
	
	Объект.ФамилияВПаспорте = Неопределено;
	Объект.ИмяВПаспорте = Неопределено;
	Объект.ОтчествоВПаспорте = Неопределено;
	
	Объект.Телефон = Неопределено;
	Объект.EMail = Неопределено;
	
	КадровыеДанные = 
		"Пол,
		|ДатаРождения,
		|Страна,
		|Фамилия,
		|Имя,
		|Отчество,
		|ТелефонМобильныйПредставление,
		|EMailПредставление";
	
	СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ФизическоеЛицо);
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизическихЛиц, КадровыеДанные);
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = ТаблицаДанных[0];
	
	Объект.Пол = СтрокаДанных.Пол;
	Объект.ДатаРождения = СтрокаДанных.ДатаРождения;
	Объект.Гражданство = СтрокаДанных.Страна;
	
	Объект.ФамилияВПаспорте = СтрокаДанных.Фамилия;
	Объект.ИмяВПаспорте = СтрокаДанных.Имя;
	Объект.ОтчествоВПаспорте = СтрокаДанных.Отчество;
	
	Объект.Телефон = СтрокаДанных.ТелефонМобильныйПредставление;
	Объект.EMail = СтрокаДанных.EMailПредставление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьФамилиюИмяЛатиницей(Форма)
	
	Объект = Форма.Объект;
	
	#Если Клиент Тогда
		Объект.ФамилияЛатиницей = СтроковыеФункцииКлиент.СтрокаЛатиницей(Объект.ФамилияВПаспорте);
		Объект.ИмяЛатиницей = СтроковыеФункцииКлиент.СтрокаЛатиницей(Объект.ИмяВПаспорте);
	#Иначе
		Объект.ФамилияЛатиницей = СтроковыеФункции.СтрокаЛатиницей(Объект.ФамилияВПаспорте);
		Объект.ИмяЛатиницей = СтроковыеФункции.СтрокаЛатиницей(Объект.ИмяВПаспорте);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеДляБронированияЗаполнены(Форма)
	
	Объект = Форма.Объект;
	
	Если Не ПустаяСтрока(Объект.ФамилияВПаспорте) Или Не ПустаяСтрока(Объект.ИмяВПаспорте) Или Не ПустаяСтрока(Объект.ОтчествоВПаспорте) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.НомерПаспорта) Или ЗначениеЗаполнено(Объект.СрокДействияПаспорта) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаРождения) Или ЗначениеЗаполнено(Объект.Гражданство) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Или ЗначениеЗаполнено(Объект.EMail) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НачатьЗаполнениеДанныхУдостоверенияЛичности()
	
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидПаспорта) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеПаспортаПоВидуПаспорта(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПаспорта()
	
	ЗаполнитьВидПаспорта();
	ЗаполнитьДанныеПаспортаПоВидуПаспорта(ЭтаФорма);
	СформироватьФамилиюИмяЛатиницей(ЭтаФорма);
	
	УстановитьСвойстваПолейТребуемыхДляЗагранпаспорта(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидПаспорта()
	
	Объект.ВидПаспорта = Неопределено;
	
	ВидыДокумента = Новый Массив;
	ВидыДокумента.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ"));
	ВидыДокумента.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ВидыДокумента", ВидыДокумента);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ВТВидыДокументов
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			Физлицо = &ФизическоеЛицо
		|				И ВидДокумента В (&ВидыДокумента)) КАК ДокументыФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументов.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	ВТВидыДокументов КАК ВидыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК СправочникВидыДокументов
		|		ПО (СправочникВидыДокументов.Ссылка = ВидыДокументов.ВидДокумента)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СправочникВидыДокументов.КодМВД";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Объект.ВидПаспорта = Выборка.ВидДокумента;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПаспортаПоВидуПаспорта(Форма)
	
	Объект = Форма.Объект;
	
	Объект.СрокДействияПаспорта = Неопределено;
	Объект.НомерПаспорта = Неопределено;
	
	Объект.ФамилияЛатиницей = Неопределено;
	Объект.ИмяЛатиницей = Неопределено;
	
	ДанныеДокумента = ДанныеДокументаФизическогоЛица(Объект.ФизическоеЛицо, Объект.ВидПаспорта);
	Если ДанныеДокумента = Неопределено Тогда
		СформироватьФамилиюИмяЛатиницей(Форма);
		Возврат;
	КонецЕсли;
	
	Объект.СрокДействияПаспорта = ДанныеДокумента.СрокДействия;
	
	НомерПаспорта = СокрЛП(ДанныеДокумента.Серия) + СокрЛП(ДанныеДокумента.Номер);
	Объект.НомерПаспорта = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("- ", НомерПаспорта, "");
	
	Объект.ФамилияЛатиницей = ДанныеДокумента.ФамилияЛатиницей;
	Объект.ИмяЛатиницей = ДанныеДокумента.ИмяЛатиницей;
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ФамилияЛатиницей) Тогда
		СформироватьФамилиюИмяЛатиницей(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДокументаФизическогоЛица(ФизическоеЛицо, ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыФизическихЛиц.Серия КАК Серия,
		|	ДокументыФизическихЛиц.Номер КАК Номер,
		|	ДокументыФизическихЛиц.СрокДействия КАК СрокДействия,
		|	ДокументыФизическихЛиц.ФамилияЛатиницей КАК ФамилияЛатиницей,
		|	ДокументыФизическихЛиц.ИмяЛатиницей КАК ИмяЛатиницей
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			Физлицо = &ФизическоеЛицо
		|				И ВидДокумента = &ВидДокумента) КАК ДокументыФизическихЛиц";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоляБронированияБилетов(Форма)
	
	Объект = Форма.Объект;
	
	Объект.ДатаОтправленияТуда = Неопределено;
	Объект.ДатаОтправленияОбратно = Неопределено;
	Объект.БилетВОдинКонец = Неопределено;
	
	ОчиститьПоляБронированияАвиабилетов(Форма);
	ОчиститьПоляБронированияБилетовНаПоезд(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоляБронированияАвиабилетов(Форма)
	
	Объект = Форма.Объект;
	
	Объект.КлассПерелета = Неопределено;
	Объект.ГородВылета = Неопределено;
	Объект.ГородВылетаПредставление = Неопределено;
	Объект.ГородПрилета = Неопределено;
	Объект.ГородПрилетаПредставление = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоляБронированияБилетовНаПоезд(Форма)
	
	Объект = Форма.Объект;
	
	Объект.СтанцияОтправления = Неопределено;
	Объект.СтанцияОтправленияПредставление = Неопределено;
	Объект.СтанцияПрибытия = Неопределено;
	Объект.СтанцияПрибытияПредставление = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьОбщиеПоляБронированияКомандировки(Форма)
	
	Объект = Форма.Объект;
	
	Объект.ФамилияВПаспорте = Неопределено;
	Объект.ИмяВПаспорте = Неопределено;
	Объект.ОтчествоВПаспорте = Неопределено;
	Объект.ВидПаспорта = Неопределено;
	Объект.НомерПаспорта = Неопределено;
	Объект.СрокДействияПаспорта = Неопределено;
	Объект.ФамилияЛатиницей = Неопределено;
	Объект.ИмяЛатиницей = Неопределено;
	Объект.ОтчествоЛатиницей = Неопределено;
	Объект.ДатаРождения = Неопределено;
	Объект.Пол = Неопределено;
	Объект.Гражданство = Неопределено;
	Объект.Телефон = Неопределено;
	Объект.EMail = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоляБронированияПроживания(Форма)
	
	Объект = Форма.Объект;
	
	Объект.МестоПроживания = Неопределено;
	Объект.МестоПроживанияПредставление = Неопределено;
	Объект.ДатаЗаездаПроживания = Неопределено;
	Объект.ДатаВыездаПроживания = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержимоеСообщенияОНеправильныхДанных(Описание)
	
	ЛичныеДанные = ЛичныеДанныеСтруктура(Объект);
	
	Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		НСтр("ru = 'Фамилия: [ФамилияВПаспорте]
              |Имя: [ИмяВПаспорте]
              |Отчество: [ОтчествоВПаспорте]
              |
              |Дата рождения: [ДатаРождения]
              |Гражданство: [Гражданство]
              |
              |Телефон: [Телефон]
              |E-mail: [EMail]
              |
              |Данные паспорта
              |Вид: [ВидПаспорта], номер: [НомерПаспорта], действует до: [СрокДействияПаспорта]
              |
              |ФИО латиницей
              |Фамилия: [ФамилияЛатиницей]
              |Имя: [ИмяЛатиницей]
              |Отчество: [ОтчествоЛатиницей]'"), 
		ЛичныеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЛичныеДанныеСтруктура(Объект)
	
	ЛичныеДанные = Новый Структура(
		"ФамилияВПаспорте, 
		|ИмяВПаспорте,
		|ОтчествоВПаспорте,
		|ДатаРождения,
		|Гражданство,
		|Телефон,
		|EMail,
		|ВидПаспорта,
		|НомерПаспорта,
		|СрокДействияПаспорта,
		|ФамилияЛатиницей,
		|ИмяЛатиницей,
		|ОтчествоЛатиницей");
	ЗаполнитьЗначенияСвойств(ЛичныеДанные, Объект);
	
	ЛичныеДанные.ДатаРождения = Формат(Объект.ДатаРождения, "ДЛФ=D");
	ЛичныеДанные.СрокДействияПаспорта = Формат(Объект.СрокДействияПаспорта, "ДЛФ=D");
	
	Возврат ЛичныеДанные;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСообщениеОНеправильныхДанных(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "СообщениеОНеправильныхДанных" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура(
		"ФизическоеЛицо,
		|ОписаниеИзменений");
	ЗначенияЗаполнения.ФизическоеЛицо = Объект.ФизическоеЛицо;
	ЗаполнитьСодержимоеСообщенияОНеправильныхДанных(ЗначенияЗаполнения.ОписаниеИзменений);

	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения");
	ПараметрыФормы.ЗначенияЗаполнения = ЗначенияЗаполнения;
	
	ОткрытьФорму("Документ.СообщениеОНеправильныхДанныхСотрудника.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуОтправитьВСистемуБронирования(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ОтправитьВСистемуБронирования" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОтправитьВСистемуБронированияНаСервере();
	
	НачатьОжиданиеОбновленияСостоянияЗаявкиНаБронирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуОбновитьСтатусВСистемеБронирования(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ОбновитьСтатусВСистемеБронирования" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПолучитьСостояниеБронированияЗаявкиНаСервере();
	НачатьПолучениеРезультатовБронирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуОбновитьРезультатыБронирования(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ОбновитьРезультатыБронирования" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПолучениеРезультатовБронирования();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработатьКомандуОбновитьПолучитьБронь(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ПолучитьБронь_") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторСтрокой = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ПолучитьБронь_", "");
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИдентификаторСтрокой) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПолучениеБрони(Число(ИдентификаторСтрокой));
	
КонецПроцедуры
	
&НаКлиенте
Процедура НачатьПолучениеБрони(ИдентификаторБрони)
	
	ДлительнаяОперация = НачатьПолучениеБрониНаСервере(ИдентификаторБрони, УникальныйИдентификатор, Объект.СистемаБронирования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение подтверждения бронирования'");
	
	ПараметрыОповещения = Новый Структура("ИдентификаторБрони");
	ПараметрыОповещения.ИдентификаторБрони = ИдентификаторБрони;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПолучениеФайлаБрони", ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьПолучениеБрониНаСервере(ИдентификаторБрони, ИдентификаторФормы, СистемаБронирования)
	
	ПараметрыПроцедуры = Новый Структура(
		"ИдентификаторБрони, 
		|СистемаБронирования");
	ПараметрыПроцедуры.ИдентификаторБрони = ИдентификаторБрони;
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение подтверждения бронирования'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("БронированиеКомандировок.ПолучитьПодтверждениеБронированияДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПолучениеФайлаБрони(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При получении файла брони возникла ошибка:
                      |%1
                      |Подробнее, см. в Журнале регистрации.'"), 
			Результат.КраткоеПредставлениеОшибки));
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеФайла.Хранение = Результат.АдресРезультата;
	ЗаполнитьИмяФайлаБрони(ОписаниеФайла.Имя, ДополнительныеПараметры.ИдентификаторБрони, ЭтаФорма);	
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ОписаниеФайла);
	
	ПараметрыОповещения = Новый Структура("ПолучаемыеФайлы");
	ПараметрыОповещения.ПолучаемыеФайлы = ПолучаемыеФайлы;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьБроньПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОповещения);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьБроньПослеУстановкиРасширения(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	ПолучаемыеФайлы = ДополнительныеПараметры.ПолучаемыеФайлы;
	
	Если Не РасширениеПодключено Тогда
		Для Каждого ОписаниеФайла Из ПолучаемыеФайлы Цикл
			ПолучитьФайл(ОписаниеФайла.Хранение, ОписаниеФайла.Имя);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗавершитьПолучениеБрони", ЭтотОбъект);
	НачатьПолучениеФайлов(ОбработчикОповещения, ПолучаемыеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеБрони(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сохранено в файл %1'"),
		ПолученныеФайлы[0].Имя);
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИмяФайлаБрони(ИмяФайла, ИдентификаторБрони, Форма)
	
	ОписаниеБронирования = Форма.РезультатыБронирования[ИдентификаторБрони];
	
	ПараметрыИмени = Новый Структура(
		"ВидУслуги,
		|Номер,
		|ФамилияИнициалы");
	ЗаполнитьЗначенияСвойств(ПараметрыИмени, ОписаниеБронирования);
	
	ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Форма.Объект.ФизическоеЛицо));
	ПараметрыИмени.ФамилияИнициалы = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" .-", ФамилияИнициалы, "");
	
	ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("[ВидУслуги]_[Номер]_[ФамилияИнициалы].pdf", ПараметрыИмени);
	
КонецПроцедуры	

&НаСервере
Процедура ОтправитьВСистемуБронированияНаСервере()
	
	БронированиеКомандировок.УстановитьСостояниеЗаявкиПодготовлена(Объект);
	
	ОбновитьСостояниеЗаявкиНаБронирование(ЭтаФорма);
	БронированиеКомандировок.ЗапуститьОтправкуЗаявокБронированияКомандировок(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеБронированияЗаявкиНаСервере()
	
	БронированиеКомандировок.ПолучитьСостояниеБронированияПоЗаявке(Объект);
	ОбновитьСостояниеЗаявкиНаБронирование(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеЗаявкиНаБронирование(ЗаявкаНаКомандировку)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеКомандировок") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗаявкаНаКомандировку.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерСостояния = РегистрыСведений.БронированиеКомандировок.СоздатьМенеджерЗаписи();
	МенеджерСостояния.ЗаявкаНаКомандировку = ЗаявкаНаКомандировку;
	МенеджерСостояния.Прочитать();
	
	Если Не МенеджерСостояния.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерСостояния, Метаданные.РегистрыСведений.БронированиеКомандировок);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСостояниеЗаявкиНаБронирование(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.СостояниеБронирования = Неопределено;
	
	Если Не Форма.ИспользоватьБронированиеКомандировок Тогда
		Элементы.СостояниеБронированияГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ДоступностьБронирования.Чтение Тогда
		Элементы.СостояниеБронированияГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МенеджерСостояния = СостояниеЗаявкиНаБронирование(Объект.Ссылка);
	
	Если МенеджерСостояния = Неопределено Тогда
		Элементы.СостояниеБронированияГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.СостояниеБронирования = МенеджерСостояния.Состояние;
	
	ОтображаемыеСостояния = Новый Массив;
	ОтображаемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.ПустаяСсылка"));
	ОтображаемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Подготовлено"));
	ОтображаемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Отправлено"));
	ОтображаемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Обработано"));
	ОтображаемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Отменено"));
	
	Если ОтображаемыеСостояния.Найти(МенеджерСостояния.Состояние) = Неопределено Тогда
		Элементы.СостояниеБронированияГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ОтобразитьСостояниеБронированияПодготовлено(Форма, МенеджерСостояния, Элементы);
	ОтобразитьСостояниеБронированияОшибка(Форма, МенеджерСостояния, Элементы);
	ОтобразитьСостояниеБронированияОтправлено(Форма, МенеджерСостояния, Элементы);
	ОтобразитьСостояниеБронированияОбработано(Форма, МенеджерСостояния, Элементы);
	ОтобразитьСостояниеБронированияОтменено(Форма, МенеджерСостояния, Элементы);
	
	УстановитьДоступностьИзмененияБронированияПоСостоянию(Форма, МенеджерСостояния, Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеБронированияПодготовлено(Форма, МенеджерСостояния, Элементы)
	
	Если МенеджерСостояния.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Подготовлено") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заявка отправляется в систему бронирования с %1'"),
		Формат(МенеджерСостояния.ДатаСостояния, "ДЛФ=DT"));
		
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	Элементы.СостояниеБронированияКартинка.Картинка = Форма.КартинкиБронирования["ДлительнаяОперация"];
	Элементы.СостояниеБронированияГруппа.ЦветФона = Форма.ЦветаФона["Информация"];
	Элементы.СостояниеБронированияПояснение.Заголовок = Новый ФорматированнаяСтрока(ТекстСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеБронированияОшибка(Форма, МенеджерСостояния, Элементы)
	
	Если МенеджерСостояния.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При отправке заявки в систему бронирования %1 возникла ошибка:
              |%2'"),
		Формат(МенеджерСостояния.ДатаСостояния, "ДЛФ=DT"),
		МенеджерСостояния.Комментарий));
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Отправить повторно'"), , , , "ОтправитьВСистемуБронирования"));
	
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	Элементы.СостояниеБронированияКартинка.Картинка = Форма.КартинкиБронирования["Предупреждение"];
	Элементы.СостояниеБронированияГруппа.ЦветФона = Форма.ЦветаФона["Отказ"];
	Элементы.СостояниеБронированияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеБронированияОтправлено(Форма, МенеджерСостояния, Элементы)
	
	Если МенеджерСостояния.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Отправлено") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заявка отправлена в систему бронирования %1 и находится в обработке.'"),
		Формат(МенеджерСостояния.ДатаСостояния, "ДЛФ=DT")));
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обновить статус обработки'"), , , , "ОбновитьСтатусВСистемеБронирования"));
	
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	Элементы.СостояниеБронированияКартинка.Картинка = Форма.КартинкиБронирования["Информация"];
	Элементы.СостояниеБронированияГруппа.ЦветФона = Форма.ЦветаФона["Информация"];
	Элементы.СостояниеБронированияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеБронированияОбработано(Форма, МенеджерСостояния, Элементы)
	
	Если МенеджерСостояния.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Обработано") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заявка полностью (или частично) обработана в системе бронирования.'"),
		Формат(МенеджерСостояния.ДатаСостояния, "ДЛФ=DT")));
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обновить статус обработки'"), , , , "ОбновитьСтатусВСистемеБронирования"));
	
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	Элементы.СостояниеБронированияКартинка.Картинка = Форма.КартинкиБронирования["Информация"];
	Элементы.СостояниеБронированияГруппа.ЦветФона = Форма.ЦветаФона["Информация"];
	Элементы.СостояниеБронированияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеБронированияОтменено(Форма, МенеджерСостояния, Элементы)
	
	Если МенеджерСостояния.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Отменено") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Бронирование по заявке отменено в системе бронирования %1.'"),
		Формат(МенеджерСостояния.ДатаСостояния, "ДЛФ=DT")));
	
	Элементы.СостояниеБронированияГруппа.Видимость = Истина;
	Элементы.СостояниеБронированияКартинка.Картинка = Форма.КартинкиБронирования["Предупреждение"];
	Элементы.СостояниеБронированияГруппа.ЦветФона = Форма.ЦветаФона["Отказ"];
	Элементы.СостояниеБронированияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьИзмененияБронированияПоСостоянию(Форма, МенеджерСостояния, Элементы)
	
	СостоянияБронированиеНедоступно = Новый Массив;
	СостоянияБронированиеНедоступно.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Обработано"));
	СостоянияБронированиеНедоступно.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Отменено"));
	
	Если СостоянияБронированиеНедоступно.Найти(МенеджерСостояния.Состояние) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьРедактированиеБронирования(Форма, Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаблокироватьРедактированиеБронирования(Форма, Элементы)
	
	Форма.РедактированиеБронированияЗаблокировано = Истина;
	
	Элементы.БронированиеГруппа.ТолькоПросмотр = Истина;
	Элементы.ПодобратьГородПрилета.Доступность = Ложь;
	Элементы.ПодобратьСтанциюПрибытия.Доступность = Ложь;
	Элементы.ПодобратьМестоПроживания.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеОбновленияСостоянияЗаявкиНаБронирование()
	
	Если Не ИспользоватьБронированиеКомандировок Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеЗаявкиНаБронирование", 3, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОжиданиеОбновленияСостоянияЗаявкиНаБронирование()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеЗаявкиНаБронирование");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСостояниеЗаявкиНаБронирование()
	
	ОбновитьСостояниеЗаявкиНаБронирование(ЭтаФорма);
	
	Если СостояниеБронирования <> ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Подготовлено") Тогда
		ЗавершитьОжиданиеОбновленияСостоянияЗаявкиНаБронирование();
	КонецЕсли;
	
КонецПроцедуры

#Область ОграничениеВыбораОрганизации

&НаКлиенте
Процедура НачатьОграничениеВыбораОрганизацииБронирования()
	
	Если Не ИспользоватьБронированиеКомандировок Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДоступностьБронирования.Чтение Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьОграничениеВыбораОрганизацииБронированияНаСервере(УникальныйИдентификатор, Объект.СистемаБронирования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьОграничениеВыбораОрганизацииБронирования", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьОграничениеВыбораОрганизацииБронированияНаСервере(ИдентификаторФормы, СистемаБронирования)
	
	ПараметрыПроцедуры = Новый Структура("СистемаБронирования");
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение списка активных организаций системы бронирования'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("БронированиеКомандировок.ПолучитьОрганизацииСистемыБронированияДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОграничениеВыбораОрганизацииБронирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При попытке получить список организаций, доступных для оформления бронирования, возникла ошибка:
                      |%1
                      |Подробнее, см. в Журнале регистрации.'"), 
			Результат.КраткоеПредставлениеОшибки));
		Возврат;
	КонецЕсли;
	
	ОграничитьВыборОрганизацииБронирования(Результат.АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВыборОрганизацииБронирования(АдресРезультата)
	
	Организации = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Элементы.Организация.РежимВыбораИзСписка = Истина;
	Элементы.Организация.СписокВыбора.Очистить();
	
	Если Организации.Количество() = 0 Тогда
		ЗаблокироватьРедактированиеБронирования(ЭтаФорма, Элементы);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить ни одной доступной организации, связанной с учетной записью в системе бронирования %1.
                  |Бронирование командировок недоступно. Обратитесь к администратору.'"),
			Объект.СистемаБронирования);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Организации Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
			Элементы.Организация.СписокВыбора.Добавить(СтрокаТаблицы.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Организация.ТолькоПросмотр = Ложь;
	Если Элементы.Организация.СписокВыбора.Количество() = 1 Тогда
		ЕдинственнаяОрганизация = Элементы.Организация.СписокВыбора[0].Значение;
		Если Объект.Организация = ЕдинственнаяОрганизация Тогда
			Элементы.Организация.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Элементы.Организация.ТолькоПросмотр = Истина;
			Объект.Организация = ЕдинственнаяОрганизация;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПолучениеРезультатаБронирования

&НаКлиенте
Процедура НачатьПолучениеРезультатовБронирования()
	
	РезультатыБронирования = Неопределено;
	
	Если Не ИспользоватьБронированиеКомандировок Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДоступностьБронирования.Чтение Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеБронирования <> ПредопределенноеЗначение("Перечисление.СостоянияБронированияКомандировки.Обработано") Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьПолучениеРезультатовБронированияНаСервере(УникальныйИдентификатор, Объект.Ссылка, Объект.СистемаБронирования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Результаты бронирования'");
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Данные бронирования обновлены'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПолучениеРезультатовБронирования", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьПолучениеРезультатовБронированияНаСервере(ИдентификаторФормы, ЗаявкаСсылка, СистемаБронирования)
	
	ПараметрыПроцедуры = Новый Структура(
		"ЗаявкаСсылка,
		|СистемаБронирования");
	ПараметрыПроцедуры.ЗаявкаСсылка = ЗаявкаСсылка;
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение результатов бронирования командировок'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("БронированиеКомандировок.ПолучитьРезультатыБронированияПоЗаявкеДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПолучениеРезультатовБронирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При попытке получить результаты бронирования, возникла ошибка:
                      |%1
                      |Подробнее, см. в Журнале регистрации.'"), 
			Результат.КраткоеПредставлениеОшибки));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРезультатыБронирования(Результат.АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыБронирования(АдресРезультата)
	
	Бронирование = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ЗаполнитьБилеты(Бронирование.Билеты);
	ЗаполнитьБроньПроживания(Бронирование.Проживание);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБилеты(Билеты)
	
	Если Не Объект.БронироватьБилеты Тогда
		Возврат;
	КонецЕсли;
	
	Если Билеты.Количество() = 0 Тогда
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Информация о результатах бронировании недоступна.'"));
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обновить'"), , , , "ОбновитьРезультатыБронирования"));
		Элементы.СостояниеБилетовНадпись.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Элементы.СостояниеБилетовКартинка.Картинка = БиблиотекаКартинок.ИнформацияПоНедоступнымПолям;
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеБилетовКартинка.Картинка = БиблиотекаКартинок.Информация;
	
	Если Билеты.Количество() = 1 Тогда
		Билет = Билеты[0];
		ДобавитьРезультатБронирования(Билет.Идентификатор, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Билет));
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Билет'"));
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Билет.Номер, , , , "ПолучитьБронь_" + Формат(Билет.Идентификатор, "ЧГ=")));
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(НСтр("ru = 'забронирован'"));
		Если Билет.Сумма > 0 Тогда
			ЧастиСтроки.Добавить(", ");
			ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'стоимость %1'"), Формат(Билет.Сумма, "ЧДЦ=0")));
		КонецЕсли;
		Элементы.СостояниеБилетовНадпись.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Возврат;
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(НСтр("ru = 'Билеты'"));
	ЧастиСтроки.Добавить(" ");
	
	ИдентификаторыБилетов = Новый Соответствие;
	Для Каждого Билет Из Билеты Цикл
		Если ИдентификаторыБилетов[Билет.Идентификатор] = Неопределено Тогда
			ДобавитьРезультатБронирования(Билет.Идентификатор, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Билет));
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Билет.Номер, , , , "ПолучитьБронь_" + Формат(Билет.Идентификатор, "ЧГ=")));
			ЧастиСтроки.Добавить(", ");
			ИдентификаторыБилетов.Вставить(Билет.Идентификатор, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЧастиСтроки.Удалить(ЧастиСтроки.ВГраница());
	
	ЧастиСтроки.Добавить(" ");
	ЧастиСтроки.Добавить(НСтр("ru = 'забронированы'"));
	Если Билеты.Итог("Сумма") > 0 Тогда
		ЧастиСтроки.Добавить(", ");
		ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'общая стоимость %1'"), Формат(Билеты.Итог("Сумма"), "ЧДЦ=0")));
	КонецЕсли;
	Элементы.СостояниеБилетовНадпись.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБроньПроживания(Проживание)
	
	Если Не Объект.БронироватьПроживание Тогда
		Возврат;
	КонецЕсли;
	
	Если Проживание.Количество() = 0 Тогда
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Информация о результатах бронировании недоступна.'"));
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обновить'"), , , , "ОбновитьРезультатыБронирования"));
		Элементы.СостояниеПроживанияНадпись.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Элементы.СостояниеПроживанияКартинка.Картинка = БиблиотекаКартинок.ИнформацияПоНедоступнымПолям;
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеПроживанияКартинка.Картинка = БиблиотекаКартинок.Информация;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(НСтр("ru = 'Проживание забронировано,'"));
	ЧастиСтроки.Добавить(" ");
	ЧастиСтроки.Добавить(НСтр("ru = 'номер брони'"));
	ЧастиСтроки.Добавить(" ");
	
	ИдентификаторыБрони = Новый Соответствие;
	Для Каждого Бронь Из Проживание Цикл
		Если ИдентификаторыБрони[Бронь.Идентификатор] = Неопределено Тогда
			ДобавитьРезультатБронирования(Бронь.Идентификатор, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Бронь));
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Бронь.Номер, , , , "ПолучитьБронь_" + Формат(Бронь.Идентификатор, "ЧГ=")));
			ЧастиСтроки.Добавить(", ");
			ИдентификаторыБрони.Вставить(Бронь.Идентификатор, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если Проживание.Итог("Сумма") > 0 Тогда
		ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'стоимость %1'"), Формат(Проживание.Итог("Сумма"), "ЧДЦ=0")));
	Иначе
		ЧастиСтроки.Удалить(ЧастиСтроки.ВГраница());
	КонецЕсли;
	Элементы.СостояниеПроживанияНадпись.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРезультатБронирования(Идентификатор, Результат)
	
	Соответствие = Новый Соответствие;
	Если РезультатыБронирования <> Неопределено Тогда
		Соответствие = Новый Соответствие(РезультатыБронирования);
	КонецЕсли;
	
	ОписаниеРезультата = Новый Структура(
		"ВидУслуги,
		|Номер");
	ЗаполнитьЗначенияСвойств(ОписаниеРезультата, Результат);
	
	Соответствие.Вставить(Идентификатор, ОписаниеРезультата);
	
	РезультатыБронирования = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПредопределенныеЗначения()
	
	ЦветаСтруктура = Новый Структура(
		"Отказ,
		|Информация");
	ЦветаСтруктура.Отказ = ЦветаСтиля.ОшибкиБронированияКомандировокФонЦвет;
	ЦветаСтруктура.Информация = ЦветаСтиля.АльтернативныйЦветФонаПоля;
	
	ЦветаФона = Новый ФиксированнаяСтруктура(ЦветаСтруктура);
	
	КартинкиСтруктура = Новый Структура(
		"ДлительнаяОперация,
		|Информация,
		|Предупреждение");
	
	КартинкиСтруктура.ДлительнаяОперация = БиблиотекаКартинок.ДлительнаяОперация16;
	КартинкиСтруктура.Информация = БиблиотекаКартинок.Информация;
	КартинкиСтруктура.Предупреждение = БиблиотекаКартинок.Предупреждение;
	
	КартинкиБронирования = Новый ФиксированнаяСтруктура(КартинкиСтруктура);
	
	ДоступСтруктура = Новый Структура(
		"Чтение,
		|Изменение");
	ДоступСтруктура.Чтение = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.БронированиеКомандировок);
	ДоступСтруктура.Изменение = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БронированиеКомандировок);
	
	ДоступностьБронирования = Новый ФиксированнаяСтруктура(ДоступСтруктура);
	
КонецПроцедуры

#КонецОбласти
