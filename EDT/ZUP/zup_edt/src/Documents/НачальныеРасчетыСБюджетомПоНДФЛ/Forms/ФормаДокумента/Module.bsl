#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
	
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный",
			"Объект.Организация",
			"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОстатков) Тогда
			Объект.ДатаОстатков = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере(Объект);
		
	КонецЕсли;
	
	ПрочитатьГоловнуюОрганизацию();
	ПрочитатьФинансированиеОрганизации();
	СтатьяРасходов = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасходов211();
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДанныеВРеквизиты();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОстатковПриИзменении(Элемент)
	
	ПрочитатьФинансированиеОрганизации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыПоПолучателям

&НаКлиенте
Процедура РасчетыПоПолучателямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "ПредставлениеРаспределения") <> 0 Тогда
		ТекущиеДанные = Элементы.РасчетыПоПолучателям.ТекущиеДанные;
		РедактироватьСтроку(ТекущиеДанные, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоПолучателямСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоПолучателям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРезультатРаспределения(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОчиститьСообщения();
	ЗаполнитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	ДанныеВРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	Если Не ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.РаспределениеПоСтатьям.Очистить();
	
	Для каждого СтрокаТЧ Из Объект.РасчетыПоПолучателям Цикл
		
		ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		СтрокаТЧ.ИдентификаторСтроки = ИдентификаторСтроки;
		ТекущийОбъект.РасчетыПоПолучателям[Объект.РасчетыПоПолучателям.Индекс(СтрокаТЧ)].ИдентификаторСтроки = ИдентификаторСтроки;
		
		РезультатРаспределения = СтрокаТЧ.РезультатРаспределения;
		Если РезультатРаспределения <> Неопределено Тогда
			Для Каждого СтрокаРаспределения Из РезультатРаспределения Цикл
				НоваяСтрока = ТекущийОбъект.РаспределениеПоСтатьям.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
		
	Если Не ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	ДанныеРаспределения   = Объект.РаспределениеПоСтатьям.Выгрузить();
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ДанныеРаспределения);
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("СтатьяФинансирования", Истина);
	ПроверяемыеПоля.Вставить("СтатьяРасходов", РаботаВБюджетномУчреждении);
	ПроверяемыеПоляРаспределения = Новый ФиксированнаяСтруктура(ПроверяемыеПоля);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	Для каждого СтрокаТЧ Из Объект.РасчетыПоПолучателям Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		РаспределениеСтроки = ДанныеРаспределения.Скопировать(Отбор);
		СтрокаТЧ.РезультатРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(РаспределениеСтроки);
		СтрокаТЧ.ПредставлениеРаспределения = ПредставлениеРаспределения(СтрокаТЧ, РаспределениеСтроки, ПроверяемыеПоляРаспределения, РаботаВБюджетномУчреждении);
	
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРаспределения(СтрокаДанных, РаспределениеСтроки, ПроверяемыеПоляРаспределения, РаботаВБюджетномУчреждении)

	ЕстьОшибкиЗаполнения = Ложь;
	ЕстьОшибкиРаспределения = Ложь;
	
	РезультатРаспределения = 0;
	ЕстьОшибкиЗаполнения = Ложь;
	Для каждого СтрокаРаспределения Из РаспределениеСтроки Цикл
		РезультатРаспределения = РезультатРаспределения + СтрокаРаспределения.Результат;
		Для Каждого КлючИЗначение Из ПроверяемыеПоляРаспределения Цикл
			Если КлючИЗначение.Значение И Не ЗначениеЗаполнено(СтрокаРаспределения[КлючИЗначение.Ключ]) Тогда
				ЕстьОшибкиЗаполнения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если СтрокаДанных.Сумма = 0 И РезультатРаспределения = 0 Тогда
		ЕстьОшибкиРаспределения = Ложь;
		ЕстьОшибкиЗаполнения = Ложь;
	Иначе
		ЕстьОшибкиРаспределения = СтрокаДанных.Сумма <> РезультатРаспределения;
	КонецЕсли;
	
	РаспределениеСодержитОшибки = ЕстьОшибкиРаспределения Или ЕстьОшибкиЗаполнения;
	
	Возврат ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПредставлениеРаспределения(РаспределениеСтроки, РаспределениеСодержитОшибки, РаботаВБюджетномУчреждении);

КонецФункции

&НаКлиенте
Процедура РедактироватьСтроку(ДанныеСтроки, ВыбраннаяСтрока)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", 				ЭтаФорма.ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("РегистрацияВНалоговомОргане", 	ДанныеСтроки.РегистрацияВНалоговомОргане);
	ПараметрыОткрытия.Вставить("РаспределяемаяСумма", 			ДанныеСтроки.Сумма);
	ПараметрыОткрытия.Вставить("РаспределениеПоСтатьям", 		ДанныеСтроки.РезультатРаспределения);
	ПараметрыОткрытия.Вставить("ПроверяемыеПоляРаспределения", 	ПроверяемыеПоляРаспределения);
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ВыбраннаяСтрока);
	Оповещение = Новый ОписаниеОповещения("РедактироватьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.НачальныеРасчетыСБюджетомПоНДФЛ.Форма.РедактированиеРаспределения",
				ПараметрыОткрытия, ЭтаФорма, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
			
&НаКлиенте
Процедура РедактироватьСтрокуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Объект.РасчетыПоПолучателям.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ТекущиеДанные.РезультатРаспределения = Результат.РаспределениеПоСтатьям;
	ТекущиеДанные.ПредставлениеРаспределения = ПредставлениеРаспределения(ТекущиеДанные, ТекущиеДанные.РезультатРаспределения, ПроверяемыеПоляРаспределения, РаботаВБюджетномУчреждении);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГоловнуюОрганизацию()
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПрочитатьГоловнуюОрганизацию();
	ПрочитатьФинансированиеОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФинансированиеОрганизации()

	Если Не ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(ЗначениеЗаполнено(Объект.ДатаОстатков), Объект.ДатаОстатков, Объект.Дата));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетЗарплатыОрганизацийСрезПоследних.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетЗарплатыОрганизацийСрезПоследних.СтатьяФинансирования.Код КАК Код
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних(&ДатаАктуальности, Организация = &Организация) КАК БухучетЗарплатыОрганизацийСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтатьяФинансирования    = Выборка.СтатьяФинансирования;
		КодСтатьиФинансирования = Выборка.Код;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()

	Если НЕ ФормаДокументаГотоваДляЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасчетыПоПолучателям.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", Объект.ДатаОстатков);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТРегистрации
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТРегистрации КАК Регистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистраций
	|		ПО Регистрации.Ссылка = ИсторияРегистраций.РегистрацияВНалоговомОргане
	|ГДЕ
	|	&ДатаАктуальности МЕЖДУ ИсторияРегистраций.ДатаНачала И ИсторияРегистраций.ДатаОкончания
	|	И ВЫБОР
	|			КОГДА ИсторияРегистраций.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|				ТОГДА ИсторияРегистраций.СтруктурнаяЕдиница
	|			ИНАЧЕ ИсторияРегистраций.СтруктурнаяЕдиница.Владелец
	|		КОНЕЦ = &Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.РасчетыПоПолучателям.Добавить(), Выборка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ФормаДокументаГотоваДляЗаполнения()
	
	ФормаДокументаГотова = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ФормаДокументаГотова = Ложь;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо указать организацию.'"), , "Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОстатков) Тогда
		ФормаДокументаГотова = Ложь;		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать дату остатков.'"), , "ДатаОстатков");
	КонецЕсли;
	
	Возврат ФормаДокументаГотова;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРезультатРаспределения(ТекущиеДанные)

	Если Не ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Сумма = 0 Тогда
		
		ТекущиеДанные.РезультатРаспределения = Неопределено;
		ТекущиеДанные.ПредставлениеРаспределения = "";
		
	ИначеЕсли ТекущиеДанные.РезультатРаспределения = Неопределено Или ТекущиеДанные.РезультатРаспределения.Количество() = 0 Тогда
		
		СтрокаРаспределения = Новый Структура("КодСтатьиФинансирования,СтатьяФинансирования,СтатьяРасходов,Результат");
		СтрокаРаспределения.КодСтатьиФинансирования = СОКРЛП(КодСтатьиФинансирования);
		СтрокаРаспределения.СтатьяФинансирования 	= СтатьяФинансирования;
		СтрокаРаспределения.СтатьяРасходов 			= СтатьяРасходов;
		СтрокаРаспределения.Результат 				= ТекущиеДанные.Сумма;
		
		РезультатРаспределения = Новый Массив;
		РезультатРаспределения.Добавить(Новый ФиксированнаяСтруктура(СтрокаРаспределения));
		ТекущиеДанные.РезультатРаспределения = Новый ФиксированныйМассив(РезультатРаспределения);
		ТекущиеДанные.ПредставлениеРаспределения = ПредставлениеРаспределения(ТекущиеДанные, РезультатРаспределения, ПроверяемыеПоляРаспределения, РаботаВБюджетномУчреждении);
		
	Иначе
		
		ВсегоРаспределено = 0;
		РезультатРаспределения = Новый Массив;
		Для каждого СтрокаРаспределения Из ТекущиеДанные.РезультатРаспределения Цикл
			ВсегоРаспределено = ВсегоРаспределено + СтрокаРаспределения.Результат;
			РезультатРаспределения.Добавить(СтрокаРаспределения);
		КонецЦикла;
		
		Если ВсегоРаспределено <> ТекущиеДанные.Сумма Тогда
			
			ТекущиеДанные.РезультатРаспределения = ОтражениеЗарплатыВБухучетеРасширенныйВызовСервера.РезультатРаспределенияСуммыПоБазе(ТекущиеДанные.Сумма, РезультатРаспределения, "Результат", 0);
			ТекущиеДанные.ПредставлениеРаспределения = ПредставлениеРаспределения(ТекущиеДанные, ТекущиеДанные.РезультатРаспределения, ПроверяемыеПоляРаспределения, РаботаВБюджетномУчреждении);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти