#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийИдентификаторСтрокиЗаседаниеКомиссии; 

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект, Документы.ПриказОбАттестацииСотрудников.ОписаниеПодписейДокумента());
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");   		
		ЗначенияДляЗаполнения.Вставить("ВидАттестации", "Объект.ВидАттестации");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		Объект.НачалоПериода = НачалоГода(ТекущаяДатаСеанса());
		Объект.КонецПериода = КонецГода(Объект.НачалоПериода);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтотОбъект, "СотрудникиСотрудник,АттестуемыеСотрудникиСотрудник");
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ПриказОбАттестацииСотрудников", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры
	
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьДанныеФормыПоОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ВидАттестацииПриИзменении(Элемент)
	ВидАттестацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	НачалоПериодаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	КонецПериодаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодАттестацииГодПриИзменении(Элемент)
	ПериодАттестацииГодПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаседания

&НаКлиенте
Процедура ЗаседанияКомиссииПриАктивизацииСтроки(Элемент)
	УстановитьОтборСтрокПоЗаседанию();
КонецПроцедуры

&НаКлиенте
Процедура ЗаседанияКомиссииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ЗаседанияКомиссииПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаседанияКомиссииПередУдалением(Элемент, Отказ)
	ТекущийИдентификаторСтрокиЗаседаниеКомиссии = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии;
КонецПроцедуры

&НаКлиенте
Процедура ЗаседанияКомиссииПослеУдаления(Элемент)
	ЗаседанияКомиссииПослеУдаленияНаСервере(ТекущийИдентификаторСтрокиЗаседаниеКомиссии);
	ОбновитьДатуВремяКомиссииАттестуемыхСотрудников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаседанияКомиссииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		УстановитьНовыйИдентификаторЗаседания();
		УстановитьПродолжительностьАттестации();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаседанияКомиссииМестоПроведенияЗаседанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ТекущаяСтрока", ЭтотОбъект, Элементы.ЗаседанияКомиссии.ТекущаяСтрока);
	ОповещениеОЗакрытии 	= Новый ОписаниеОповещения("ЗаседанияКомиссииМестоПроведенияЗаседанияОкончаниеВвода", ЭтотОбъект, ДополнительныеПараметры);
	МногострочныйТекст		= Элементы.ЗаседанияКомиссии.ТекущиеДанные.МестоПроведенияЗаседания;
	ТекстЗаголовка			= НСтр("ru = 'Укажите место проведения заседания'");
	ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, ТекстЗаголовка, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаседанияКомиссииМестоПроведенияЗаседанияОкончаниеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если ДополнительныеПараметры.Свойство("ФормаВладелец") 
		И НЕ ДополнительныеПараметры.ФормаВладелец = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТекущаяСтрока") Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.ЗаседанияКомиссии.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	Если НЕ Строка = Неопределено Тогда
		Строка.МестоПроведенияЗаседания = ВведенныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДатуВремяКомиссииАттестуемыхСотрудников(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Если Не ЗначениеЗаполнено(Элементы.Сотрудники.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии) Тогда
			Элементы.Сотрудники.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии; 
		КонецЕсли;
		Элементы.Сотрудники.ТекущиеДанные.ВремяАттестации = НачалоСледующейАттестации(Элементы.Сотрудники.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	СотрудникиСотрудникПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	ОбновитьДатуВремяКомиссииАттестуемыхСотрудников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ДобавитьВыбранныхСотрудниковКЗаседанию(ПараметрыПеретаскивания.Значение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВремяАттестацииПриИзменении(Элемент)
	НачалоСледующейАттестации = Элементы.Сотрудники.ТекущиеДанные.ВремяАттестации + ПродолжительностьАттестацииТекущегоЗаседания();
	СдвинутьНачалоПоследующихАттестаций(Элементы.Сотрудники.ТекущиеДанные.НомерСтроки, НачалоСледующейАттестации)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАттестуемыеСотрудники

&НаКлиенте
Процедура АттестуемыеСотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьВыбранныхСотрудниковКЗаседанию(ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ПриПолученииДанныхНаСервере

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ОбновитьДополнительныеДанныеФормы();
	УстановитьДоступностьЭлементовФормы();
	НастроитьФормуПоВидуАттестации();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеДанныеФормы()
	ОбновитьТипАттестации();
	ОбновитьАттестуемыхСотрудников();
	ОбновитьДатуВремяКомиссииАттестуемыхСотрудников(ЭтотОбъект);
	УстановитьПродолжительностьПоУмолчанию();
КонецПроцедуры	

&НаСервере
Процедура УстановитьПродолжительностьПоУмолчанию()
	ПродолжительностьАттестацииПоУмолчанию = АттестацииСотрудниковФормы.ПродолжительностьАттестацииОдногоСотрудникаПоУмолчанию(); 
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиСобытийФормы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	ОбновитьАттестуемыхСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ВидАттестацииПриИзмененииНаСервере()
	ОбновитьТипАттестации();
	НастроитьФормуПоВидуАттестации();
	ОбновитьАттестуемыхСотрудников();
КонецПроцедуры

&НаСервере
Процедура НачалоПериодаПриИзмененииНаСервере()
	ОбновитьАттестуемыхСотрудников();
КонецПроцедуры

&НаСервере
Процедура КонецПериодаПриИзмененииНаСервере()
	ОбновитьАттестуемыхСотрудников();
КонецПроцедуры

&НаСервере
Процедура ПериодАттестацииГодПриИзмененииНаСервере()
	Объект.КонецПериода = КонецГода(Объект.НачалоПериода);
	ОбновитьАттестуемыхСотрудников();
КонецПроцедуры

&НаСервере
Процедура ЗаседанияКомиссииПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	УстановитьДоступностьСписковСотрудников(); 
КонецПроцедуры

#Область ЗаседанияКомиссииПослеУдаленияНаСервере

&НаСервере
Процедура ЗаседанияКомиссииПослеУдаленияНаСервере(ТекущийИдентификаторСтрокиЗаседаниеКомиссии)
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	УдалитьСотрудниковЗаседания(ТекущийИдентификаторСтрокиЗаседаниеКомиссии);
	УдалитьОтветственныхЗаседания(ТекущийИдентификаторСтрокиЗаседаниеКомиссии);
	УстановитьДоступностьСписковСотрудников();
КонецПроцедуры

&НаСервере
Функция УдалитьСотрудниковЗаседания(ТекущийИдентификаторСтрокиЗаседаниеКомиссии)
	Строки = Объект.Сотрудники.НайтиСтроки(Новый Структура("ИдентификаторСтрокиЗаседаниеКомиссии", ТекущийИдентификаторСтрокиЗаседаниеКомиссии));
	Для каждого Строка Из Строки Цикл
		Объект.Сотрудники.Удалить(Строка); 
	КонецЦикла;
КонецФункции

&НаСервере
Функция УдалитьОтветственныхЗаседания(ТекущийИдентификаторСтрокиЗаседаниеКомиссии)
	Строки = Объект.ГрафикПредоставленияДокументов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиЗаседаниеКомиссии", ТекущийИдентификаторСтрокиЗаседаниеКомиссии));
	Для каждого Строка Из Строки Цикл
		Объект.ГрафикПредоставленияДокументов.Удалить(Строка); 
	КонецЦикла;
КонецФункции

#КонецОбласти

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка 					= Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	Строка.Подразделение 	= Неопределено;
	Строка.Должность 		= Неопределено;
	
	Если ЗначениеЗаполнено(Строка.Сотрудник) Тогда
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка.Сотрудник), "Подразделение, Должность");	
		Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
			Строка.Подразделение 	= КадровыеДанныеСотрудника[0].Подразделение;
			Строка.Должность 		= КадровыеДанныеСотрудника[0].Должность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	УстановитьДоступностьСписковСотрудников();
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСписковСотрудников()
	ДоступностьСписков = Объект.ЗаседанияКомиссии.Количество()>0;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"АттестуемыеСотрудники",
		"Доступность",
		ДоступностьСписков);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"Сотрудники",
		"Доступность",
		ДоступностьСписков);
КонецПроцедуры

#Область НастроитьФормуПоВидуАттестации

&НаСервере
Процедура НастроитьФормуПоВидуАттестации()
	
	УстановитьВидимостьКомиссии();
	УстановитьТекущуюСтраницуПериодаАттестации();
	
	НастроитьФормуПоТипуАттестации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомиссии()
	ОтображатьКомиссию = НеобходимоОтображатьКомиссию();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ПриказОФормированииКомиссии", "Видимость", ОтображатьКомиссию);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СтраницаСоставКомиссии",	"Видимость", ОтображатьКомиссию);
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуПериодаАттестации()
	Если АттестацииСотрудниковФормы.ДлительностьАттестационнойКампанииГод(Объект.ВидАттестации) Тогда
		Элементы.СтраницыПериодаАттестации.ТекущаяСтраница = Элементы.СтраницыПериодаАттестации.ПодчиненныеЭлементы.СтраницаПериодАттестацииГод;
	Иначе
		Элементы.СтраницыПериодаАттестации.ТекущаяСтраница = Элементы.СтраницыПериодаАттестации.ПодчиненныеЭлементы.СтраницаПроизвольныйПериодАттестации;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НеобходимоОтображатьКомиссию()
	Возврат НЕ АттестацииСотрудников.ЭтоВнешняяАттестация(Объект.ВидАттестации);
КонецФункции

&НаСервере
Процедура НастроитьФормуПоТипуАттестации()
	
	УстановитьВидимостьДолжности();
	УстановитьВидимостьСпециальности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДолжности()
	ОтображатьДолжность = НеобходимоОтображатьДолжность();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиДолжность", "Видимость", ОтображатьДолжность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "АттестуемыеСотрудникиДолжность", "Видимость", ОтображатьДолжность);
КонецПроцедуры

&НаСервере
Функция НеобходимоОтображатьДолжность()
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСпециальности()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиСпециальность", "Видимость", ТипАттестацииИспользуетСпециальность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиКатегория", "Видимость", ТипАттестацииИспользуетСпециальность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "АттестуемыеСотрудникиСпециальность", "Видимость", ТипАттестацииИспользуетСпециальность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "АттестуемыеСотрудникиКатегория", "Видимость", ТипАттестацииИспользуетСпециальность);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Массив.Добавить("Объект.ГрафикПредоставленияДокументов");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации'")));
	Возврат Массив
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАттестуемыхСотрудников()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) 
		Или НЕ ЗначениеЗаполнено(Объект.ВидАттестации)  Тогда
		Возврат;
	КонецЕсли; 
	
	СотрудникиПодлежащиеАттестации = АттестацииСотрудников.СотрудникиПодлежащиеАттестации(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ВидАттестации), Объект.Организация, Объект.НачалоПериода, Объект.КонецПериода);
	
	АттестуемыеСотрудники.Загрузить(СотрудникиПодлежащиеАттестации);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипАттестации()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидАттестации)  Тогда
		Возврат;
	КонецЕсли; 
	
	ТипАттестации = АттестацииСотрудников.ТипАттестации(Объект.ВидАттестации);
	ТипАттестацииИспользуетСпециальность = ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности;
	ТипАттестацииИспользуетДолжность = ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДатуВремяКомиссииАттестуемыхСотрудников(Форма)
	
	Если Форма.АттестуемыеСотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для каждого АттестуемыйСотрудник Из Форма.АттестуемыеСотрудники Цикл
		АттестуемыйСотрудник.ДатаЗаседания 		= Неопределено;
		АттестуемыйСотрудник.ВремяАттестации 	= Неопределено;
		
		СтрокаСотрудника = Неопределено;
		
		Для каждого Строка Из Форма.Объект.Сотрудники Цикл
			Если Строка.Сотрудник = АттестуемыйСотрудник.Сотрудник 
				И ((Форма.ТипАттестацииИспользуетСпециальность И Строка.Специальность = АттестуемыйСотрудник.Специальность) 
				ИЛИ (Форма.ТипАттестацииИспользуетДолжность И Строка.Должность = АттестуемыйСотрудник.Должность)) Тогда
				СтрокаСотрудника = Строка;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСотрудника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Строка Из Форма.Объект.ЗаседанияКомиссии Цикл
			Если Строка.ИдентификаторСтрокиЗаседаниеКомиссии = СтрокаСотрудника.ИдентификаторСтрокиЗаседаниеКомиссии Тогда
				АттестуемыйСотрудник.ДатаЗаседания 		= Строка.ДатаЗаседания;
				АттестуемыйСотрудник.ВремяАттестации 	= СтрокаСотрудника.ВремяАттестации;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область УстановитьНовыйИдентификаторЗаседания

&НаКлиенте
Процедура УстановитьНовыйИдентификаторЗаседания()
	Строка =  Элементы.ЗаседанияКомиссии.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Строка.ИдентификаторСтрокиЗаседаниеКомиссии = СледующийИдентификаторЗаседания(); 
КонецПроцедуры

&НаКлиенте
Функция СледующийИдентификаторЗаседания()
	Возврат МаксимальныйИдентификаторЗаседания() + 1;
КонецФункции

&НаКлиенте
Функция МаксимальныйИдентификаторЗаседания()
	МаксимальныйИдентификатор = 0;
	Для каждого Заседание Из Объект.ЗаседанияКомиссии Цикл
		МаксимальныйИдентификатор = Макс(МаксимальныйИдентификатор, Заседание.ИдентификаторСтрокиЗаседаниеКомиссии); 
	КонецЦикла;
	Возврат МаксимальныйИдентификатор;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УстановитьПродолжительностьАттестации()
	Строка = Элементы.ЗаседанияКомиссии.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Строка.ПродолжительностьАттестации = ПродолжительностьАттестацииПоУмолчанию; 
КонецПроцедуры

&НаКлиенте
Функция НачалоСледующейАттестации(ТекущаяАттестация = Неопределено)
	
	НачалоПоследнейАттестации = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ВремяНачала;
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		Возврат НачалоПоследнейАттестации;
	КонецЕсли;
	
	ЕстьАттестация = Ложь;
	
	Для каждого Аттестация Из Объект.Сотрудники Цикл
		Если Аттестация.ИдентификаторСтрокиЗаседаниеКомиссии = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии Тогда
			
			Если Аттестация = ТекущаяАттестация Тогда
			    Продолжить;
			КонецЕсли;
			
			НачалоПоследнейАттестации = Макс(НачалоПоследнейАттестации, Аттестация.ВремяАттестации); 
			ЕстьАттестация = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	НачалоСледующейАттестации = НачалоПоследнейАттестации + ?(ЕстьАттестация, Элементы.ЗаседанияКомиссии.ТекущиеДанные.ПродолжительностьАттестации * 60, 0);
	
	Возврат НачалоСледующейАттестации;
	
КонецФункции

&НаКлиенте
Процедура СдвинутьНачалоПоследующихАттестаций(НомерСтроки, НачалоСледующейАттестации)
	
	Если НЕ Объект.Сотрудники.Количество() > НомерСтроки Тогда
		Возврат
	КонецЕсли;
	
	Объект.Сотрудники[НомерСтроки].ВремяАттестации = НачалоСледующейАттестации;
	
	НачалоСледующейАттестации = НачалоСледующейАттестации + ПродолжительностьАттестацииТекущегоЗаседания();
	
	СдвинутьНачалоПоследующихАттестаций(НомерСтроки + 1, НачалоСледующейАттестации);
	
КонецПроцедуры

&НаКлиенте
Функция ПродолжительностьАттестацииТекущегоЗаседания()
	
	ПродолжительностьАттестации = 0;
	Если НЕ Элементы.ЗаседанияКомиссии.ТекущиеДанные = Неопределено Тогда
		ПродолжительностьАттестации = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ПродолжительностьАттестации;
	КонецЕсли;
	
	Возврат ПродолжительностьАттестации * 60;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборСтрокПоЗаседанию()
	
	Если Элементы.ЗаседанияКомиссии.ТекущиеДанные = Неопределено Тогда
		ОтборСтрок = Неопределено;
	Иначе	
		ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиЗаседаниеКомиссии", Элементы.ЗаседанияКомиссии.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии);
	КонецЕсли;
	Элементы.Сотрудники.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбранныхСотрудниковКЗаседанию(МассивСтрок, СтандартнаяОбработка)
	
	Если Элементы.ЗаседанияКомиссии.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо сначала выбрать заседание'"));
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	НачалоСледующейАттестации = НачалоСледующейАттестации();
	
	Для каждого Строка Из МассивСтрок Цикл
		Если ТипЗнч(Строка) = Тип("Число") Тогда
			СтрокаАттестуемого = АттестуемыеСотрудники.НайтиПоИдентификатору(Строка);
		Иначе
			СтрокаАттестуемого = Строка;
		КонецЕсли;
		
		// Если сотрудник уже добавлен к какому-то заседанию в документе - пропускаем его.
		Если ЗначениеЗаполнено(СтрокаАттестуемого.ДатаЗаседания) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 									= Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник 							= СтрокаАттестуемого.Сотрудник;
		НоваяСтрока.Подразделение 						= СтрокаАттестуемого.Подразделение;
		НоваяСтрока.Должность 							= СтрокаАттестуемого.Должность;
		НоваяСтрока.Специальность 						= СтрокаАттестуемого.Специальность;
		НоваяСтрока.Категория 							= СтрокаАттестуемого.Категория;
		НоваяСтрока.ВремяАттестации 					= НачалоСледующейАттестации;
		НоваяСтрока.ИдентификаторСтрокиЗаседаниеКомиссии = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии;		
		
		НачалоСледующейАттестации = НачалоСледующейАттестации + ПродолжительностьАттестацииТекущегоЗаседания();
		
		ПодходящаяСтрокаОтветственного = Неопределено;
		
		Для каждого СтрокаОтветственного Из Объект.ГрафикПредоставленияДокументов Цикл
			Если НЕ СтрокаОтветственного.ИдентификаторСтрокиЗаседаниеКомиссии = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОтветственного.Подразделение = СтрокаАттестуемого.Подразделение Тогда
				ПодходящаяСтрокаОтветственного = СтрокаОтветственного;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодходящаяСтрокаОтветственного = Неопределено Тогда
			ПодходящаяСтрокаОтветственного = Объект.ГрафикПредоставленияДокументов.Добавить();
			ПодходящаяСтрокаОтветственного.Подразделение = СтрокаАттестуемого.Подразделение;
			ПодходящаяСтрокаОтветственного.ИдентификаторСтрокиЗаседаниеКомиссии = Элементы.ЗаседанияКомиссии.ТекущиеДанные.ИдентификаторСтрокиЗаседаниеКомиссии;  
			ПодходящаяСтрокаОтветственного.ДатаПредставленияДокументов = ДобавитьМесяц(Элементы.ЗаседанияКомиссии.ТекущиеДанные.ДатаЗаседания, -1);  
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьДатуВремяКомиссииАттестуемыхСотрудников(ЭтотОбъект);
	УстановитьОтборСтрокПоЗаседанию();
	
КонецПроцедуры

#КонецОбласти
