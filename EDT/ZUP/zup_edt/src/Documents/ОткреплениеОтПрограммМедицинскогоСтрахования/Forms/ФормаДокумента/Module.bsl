
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		МассивСотрудников = Неопределено;
		Если Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("Сотрудники") Тогда
				ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения, , "Сотрудники");
			Иначе
				ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
			КонецЕсли;
			Если Параметры.ЗначенияЗаполнения.Свойство("Сотрудники") И ТипЗнч(Параметры.ЗначенияЗаполнения.Сотрудники) = Тип("Массив") Тогда
				МассивСотрудников = Параметры.ЗначенияЗаполнения.Сотрудники;
			КонецЕсли;
		Иначе
			ЗначенияДляЗаполнения = Новый Структура;
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
			Если Не Параметры.Свойство("ЗначенияЗаполнения") Или Не Параметры.ЗначенияЗаполнения.Свойство("Подразделение") Тогда
				// Подразделение (пустое значение) может быть передано как параметр заполнения из обработки.
				ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
			КонецЕсли;
			ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		СотрудникиЗаполнитьНаСервере(МассивСотрудников);
		
	Иначе
		
		// Если это открытие уже существующего документа, 
		// то оно может выполняться в режиме добавления строк.
		Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Сотрудники") Тогда
			МассивСотрудников = Новый Массив;
			Для Каждого ПараметрСотрудник Из Параметры.ЗначенияЗаполнения.Сотрудники Цикл
				НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ПараметрСотрудник));
				Если НайденныеСтроки.Количество() = 0 Тогда
					МассивСотрудников.Добавить(ПараметрСотрудник);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивСотрудников.Количество() > 0 Тогда
				СотрудникиЗаполнитьНаСервере(МассивСотрудников);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьУдержания(ТекущийОбъект);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийОбъект.ДатаОтправки = Дата(Год(ТекущийОбъект.Дата), Месяц(ТекущийОбъект.Дата), День(ТекущийОбъект.Дата), Час(ТекущаяДата), Минута(ТекущаяДата), Секунда(ТекущаяДата));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ОткреплениеОтПрограммМедицинскогоСтрахования", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборФорматаВложений") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			ПараметрыОтправки = ПараметрыОтправкиПисьма(ВыбранноеЗначение);
			
			МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
			МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОсновныхПолейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтраховаяКомпанияПриИзменении(Элемент)
	ПриИзмененииОсновныхПолейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПриИзмененииОсновныхПолейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьУдержанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	СотрудникиПриАктивизацииСтрокиНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено И Объект.Сотрудники.Количество() > 0 Тогда
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	КонецЕсли;
	СотрудникиПриАктивизацииСтрокиНаКлиенте(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	ОбновитьУдержания();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиОбработкаВыбораНаСервере(ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаОткрепленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиДатаПриИзмененииНаСервере(ТекущиеДанные.Сотрудник, ТекущиеДанные.ДатаОткрепления, ТекущиеДанные.ДатаРождения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРодственники

&НаКлиенте
Процедура РодственникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанныеОткрепления = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанныеОткрепления = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ФизическоеЛицо = ТекущиеДанныеОткрепления.ФизическоеЛицо;
		ТекущиеДанные.ДатаОткрепления = ТекущиеДанныеОткрепления.ДатаОткрепления;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодственникиОбработкаВыбораНаСервере(ВыбранноеЗначение, ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиРодственникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец", ТекущиеДанные.ФизическоеЛицо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.РодственникиФизическихЛиц.ФормаВыбора", ПараметрыОткрытия, Элементы.Родственники);
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиДатаОткрепленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодственникиДатаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиДатаРожденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодственникиДатаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиПрограммыСтрахованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Родственник) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("РодственникиПрограммыСтрахованияЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.ПрограммыСтрахованияРедактировать(
		ЭтотОбъект, ТекущиеДанные, "ПрограммыСтрахованияРодственников", "Родственник", ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиРасширенияПрограммСтрахованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Родственник) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("РодственникиРасширенияПрограммСтрахованияЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.РасширенияПрограммСтрахованияРедактировать(
		ЭтотОбъект, ТекущиеДанные, "РасширенияПрограммСтрахованияРодственников", "Родственник", ОповещениеЗавершения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СотрудникиЗаполнить(Команда)
	СотрудникиЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация,
		Объект.Подразделение,
		Объект.Дата,
		Истина,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПрограммыСтрахованияРедактировать(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СотрудникиПрограммыСтрахованияЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.ПрограммыСтрахованияРедактировать(
		ЭтотОбъект, ТекущиеДанные, "ПрограммыСтрахованияСотрудников", "Сотрудник", ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиРасширенияПрограммСтрахованияРедактировать(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СотрудникиРасширенияПрограммЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.РасширенияПрограммСтрахованияРедактировать(
		ЭтотОбъект, ТекущиеДанные, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", ОповещениеЗавершения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ИмяОткрываемойФормы = "ОбщаяФорма.ВыборФорматаВложений";
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОтправкиПисьма(ВыбранноеЗначение)
	Возврат МедицинскоеСтрахование.ПараметрыОтправкиПисьма(ЭтотОбъект, ВыбранноеЗначение, Получатели, НСтр("ru = 'Открепление сотрудников'"));
КонецФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	ПриИзмененииОсновныхПолейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОсновныхПолейНаСервере()
	МедицинскоеСтрахованиеФормы.ОткреплениеПрочитатьНастройки(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементов(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиДокументОснование", "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиДокументОснование", "Доступность", ТекущиеДанные.ПрекратитьУдержания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтрокиНаКлиенте(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	УстановитьОтборСтрокРодственников(Элементы, ТекущиеДанные);
	УстановитьОтборСтрокУдержаний(Элементы, ТекущиеДанные);
	
	УстановитьНадписьПрограммСтрахования(ТекущиеДанные);
	УстановитьНадписьРасширенийПрограммСтрахования(ТекущиеДанные);
	
	УстановитьДоступностьЭлементов(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУдержания(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	МассивФизическихЛицДляУдаления = Новый Массив;
	Для каждого СтрокаТаблицы Из ТекущийОбъект.Удержания Цикл
		Если МассивФизическихЛицДляУдаления.Найти(СтрокаТаблицы.ФизическоеЛицо) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		НайденныеСтроки = ТекущийОбъект.Сотрудники.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			МассивФизическихЛицДляУдаления.Добавить(СтрокаТаблицы.ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ФизическоеЛицоДляУдаления Из МассивФизическихЛицДляУдаления Цикл
		СтруктураОтбора = Новый Структура("ФизическоеЛицо", ФизическоеЛицоДляУдаления);
		НайденныеСтроки = ТекущийОбъект.Удержания.НайтиСтроки(СтруктураОтбора);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекущийОбъект.Удержания.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтраховуюПремиюСотрудников(Сотрудники = Неопределено)
	
	СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
	СтруктураИменТаблиц.ИмяТаблицыСотрудники = "Сотрудники";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников = "ПрограммыСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников = "РасширенияПрограммСтрахованияСотрудников";
	МедицинскоеСтрахованиеФормы.РассчитатьСтраховуюПремиюСотрудников(Объект, СтруктураИменТаблиц, Сотрудники);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиЗаполнитьНаСервере(Сотрудники = Неопределено)
	
	Если Сотрудники = Неопределено Тогда
		Объект.Сотрудники.Очистить();
		Объект.ПрограммыСтрахованияСотрудников.Очистить();
		Объект.РасширенияПрограммСтрахованияСотрудников.Очистить();
		Объект.Родственники.Очистить();
		Объект.ПрограммыСтрахованияРодственников.Очистить();
		Объект.РасширенияПрограммСтрахованияРодственников.Очистить();
		Объект.Удержания.Очистить();
	Иначе
		Для Каждого СотрудникМассива Из Сотрудники Цикл
			
			СтруктураОтбора = Новый Структура("Сотрудник", СотрудникМассива);
			НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Сотрудники.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("Сотрудник", СотрудникМассива);
			НайденныеСтроки = Объект.ПрограммыСтрахованияСотрудников.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.ПрограммыСтрахованияСотрудников.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("Сотрудник", СотрудникМассива);
			НайденныеСтроки = Объект.РасширенияПрограммСтрахованияСотрудников.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.РасширенияПрограммСтрахованияСотрудников.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			ФизическоеЛицоСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникМассива, "ФизическоеЛицо", Истина);
			
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ФизическоеЛицоСотрудника);
			НайденныеСтроки = Объект.Родственники.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Родственники.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ФизическоеЛицоСотрудника);
			НайденныеСтроки = Объект.ПрограммыСтрахованияРодственников.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.ПрограммыСтрахованияРодственников.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ФизическоеЛицоСотрудника);
			НайденныеСтроки = Объект.РасширенияПрограммСтрахованияРодственников.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.РасширенияПрограммСтрахованияРодственников.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ФизическоеЛицоСотрудника);
			НайденныеСтроки = Объект.Удержания.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Удержания.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтраховаяКомпания", Объект.СтраховаяКомпания);
	Запрос.УстановитьПараметр("ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком", ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком);
	Запрос.УстановитьПараметр("ДатаОкончанияСтрахования", Объект.ДатаОкончанияСтрахования);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ПараметрыПолученияСотрудников.Подразделение = Объект.Подразделение;
	КонецЕсли;
	ПараметрыПолученияСотрудников.НачалоПериода 	= Объект.ДатаНачалаСтрахования;
	ПараметрыПолученияСотрудников.ОкончаниеПериода	= Объект.ДатаОкончанияСтрахования;
	ПараметрыПолученияСотрудников.КадровыеДанные	= "Организация, ДатаУвольнения, ДатаРождения";
	Если Сотрудники <> Неопределено Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = Новый Массив;
		РеквизитыСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо", Истина);
		Для Каждого ЭлементСоответствия Из РеквизитыСотрудников Цикл
			ПараметрыПолученияСотрудников.СписокФизическихЛиц.Добавить(ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ОтборНеУстановлен", Сотрудники = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА &ОтборНеУстановлен
	|			ТОГДА СотрудникиОрганизации.ДатаУвольнения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДатаОкончанияСтрахования < &ТекущаяДата
	|					ТОГДА &ДатаОкончанияСтрахования
	|				ИНАЧЕ &ТекущаяДата
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОткрепления,
	|	СотрудникиОрганизации.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ ВТСотрудникиСОтбором
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ГДЕ
	|	(&ОтборНеУстановлен = ИСТИНА
	|			ИЛИ СотрудникиОрганизации.Сотрудник В (&Сотрудники))";
	Запрос.Выполнить();
	
	Если ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиСОтбором.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиСОтбором КАК СотрудникиСОтбором";
		
		МассивСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
		Состояния = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
		СостоянияСотрудников.СоздатьВТСостоянияСотрудников(
			Запрос.МенеджерВременныхТаблиц, МассивСотрудников, Состояния, Объект.ДатаНачалаСтрахования, Объект.ДатаОкончанияСтрахования);
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	NULL КАК Начало
		|ПОМЕСТИТЬ ВТСостоянияСотрудников";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МИНИМУМ(Сотрудники.ДатаОткрепления) КАК ДатаОткрепления,
	|	Сотрудники.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ ВТОткрепляемыеСотрудники
	|ИЗ
	|	(ВЫБРАТЬ
	|		СотрудникиСОтбором.Сотрудник КАК Сотрудник,
	|		СотрудникиСОтбором.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СотрудникиСОтбором.ДатаОткрепления КАК ДатаОткрепления,
	|		СотрудникиСОтбором.ДатаРождения КАК ДатаРождения
	|	ИЗ
	|		ВТСотрудникиСОтбором КАК СотрудникиСОтбором
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА СотрудникиСОтбором.ДатаОткрепления = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА НЕ &ОтборНеУстановлен
	|				ИНАЧЕ СотрудникиСОтбором.ДатаОткрепления <> ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СостоянияСотрудников.Сотрудник,
	|		СостоянияСотрудников.Сотрудник.ФизическоеЛицо,
	|		СостоянияСотрудников.Начало,
	|		СотрудникиОрганизации.ДатаРождения
	|	ИЗ
	|		ВТСостоянияСотрудников КАК СостоянияСотрудников
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|			ПО СостоянияСотрудников.Сотрудник = СотрудникиОрганизации.Сотрудник) КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ДатаОткрепления <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ФизическоеЛицо,
	|	Сотрудники.ДатаРождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиНеПрикрепленные.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТОтложенныеСотрудники
	|ИЗ
	|	ВТОткрепляемыеСотрудники КАК СотрудникиНеПрикрепленные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтложенноеМедицинскоеСтрахованиеСотрудников КАК ОтложенноеМедицинскоеСтрахованиеСотрудников
	|		ПО СотрудникиНеПрикрепленные.Сотрудник = ОтложенноеМедицинскоеСтрахованиеСотрудников.Сотрудник
	|			И (ОтложенноеМедицинскоеСтрахованиеСотрудников.Организация = &Организация)
	|			И (ОтложенноеМедицинскоеСтрахованиеСотрудников.СтраховаяКомпания = &СтраховаяКомпания)
	|ГДЕ
	|	&ОтборНеУстановлен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрограммыМедицинскогоСтрахованияСотрудников.Организация КАК Организация,
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ПрограммыМедицинскогоСтрахованияСотрудников.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыПрограммСтрахования
	|ИЗ
	|	ВТОткрепляемыеСотрудники КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммыМедицинскогоСтрахованияСотрудников КАК ПрограммыМедицинскогоСтрахованияСотрудников
	|		ПО (ПрограммыМедицинскогоСтрахованияСотрудников.Организация = &Организация)
	|			И СотрудникиОрганизации.ФизическоеЛицо = ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо
	|			И (ПрограммыМедицинскогоСтрахованияСотрудников.Регистратор <> &ИсключаемыйРегистратор)
	|ГДЕ
	|	ПрограммыМедицинскогоСтрахованияСотрудников.Период <= &ДатаОкончанияСтрахования
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрограммыМедицинскогоСтрахованияСотрудников.Организация,
	|	СотрудникиОрганизации.Сотрудник,
	|	ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.Организация КАК Организация,
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(РасширенияПрограммМедицинскогоСтрахованияСотрудников.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыРасширенийСтрахования
	|ИЗ
	|	ВТОткрепляемыеСотрудники КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасширенияПрограммМедицинскогоСтрахованияСотрудников КАК РасширенияПрограммМедицинскогоСтрахованияСотрудников
	|		ПО (РасширенияПрограммМедицинскогоСтрахованияСотрудников.Организация = &Организация)
	|			И СотрудникиОрганизации.ФизическоеЛицо = РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо
	|			И (РасширенияПрограммМедицинскогоСтрахованияСотрудников.Регистратор <> &ИсключаемыйРегистратор)
	|ГДЕ
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.Период <= &ДатаОкончанияСтрахования
	|
	|СГРУППИРОВАТЬ ПО
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.Организация,
	|	СотрудникиОрганизации.Сотрудник,
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизации.ДатаОткрепления КАК ДатаОткрепления,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПрограммыМедицинскогоСтрахованияСотрудников.Родственник ПОДОБНО """"
	|			ТОГДА СотрудникиОрганизации.ДатаРождения
	|		ИНАЧЕ СведенияРодственников.СведениеЗначение
	|	КОНЕЦ КАК ДатаРождения,
	|	ПрограммыМедицинскогоСтрахованияСотрудников.ПрограммаСтрахования КАК ПрограммаСтрахования,
	|	ПрограммыМедицинскогоСтрахованияСотрудников.СтраховаяПремия КАК СтраховаяПремия,
	|	ПрограммыМедицинскогоСтрахованияСотрудников.Родственник КАК Родственник,
	|	ПрограммыМедицинскогоСтрахованияСотрудников.ДействуетДо КАК ДатаОкончания,
	|	ПрограммыМедицинскогоСтрахованияСотрудников.Регистратор КАК ДокументОснование
	|ПОМЕСТИТЬ ВТПрограммыСтрахования
	|ИЗ
	|	ВТОткрепляемыеСотрудники КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммыМедицинскогоСтрахованияСотрудников КАК ПрограммыМедицинскогоСтрахованияСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныеПериодыПрограммСтрахования КАК МаксимальныеПериодыПрограммСтрахования
	|			ПО ПрограммыМедицинскогоСтрахованияСотрудников.Период = МаксимальныеПериодыПрограммСтрахования.Период
	|				И ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо = МаксимальныеПериодыПрограммСтрахования.ФизическоеЛицо
	|				И ПрограммыМедицинскогоСтрахованияСотрудников.Организация = МаксимальныеПериодыПрограммСтрахования.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммыМедицинскогоСтрахованияСотрудников КАК ПрограммыМедицинскогоСтрахованияСотрудниковУвольнение
	|			ПО (ПрограммыМедицинскогоСтрахованияСотрудников.Организация = &Организация)
	|				И ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо = ПрограммыМедицинскогоСтрахованияСотрудниковУвольнение.ФизическоеЛицо
	|				И ПрограммыМедицинскогоСтрахованияСотрудников.Период = ПрограммыМедицинскогоСтрахованияСотрудниковУвольнение.Период
	|				И (ПрограммыМедицинскогоСтрахованияСотрудниковУвольнение.Регистратор ССЫЛКА Документ.ОткреплениеОтПрограммМедицинскогоСтрахования)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.СведенияРодственников КАК СведенияРодственников
	|			ПО ПрограммыМедицинскогоСтрахованияСотрудников.Регистратор = СведенияРодственников.Ссылка
	|				И ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо = СведенияРодственников.ФизическоеЛицо
	|				И ПрограммыМедицинскогоСтрахованияСотрудников.Родственник = СведенияРодственников.Родственник
	|				И (СведенияРодственников.СведениеИмя = ""ДатаРождения"")
	|		ПО (ПрограммыМедицинскогоСтрахованияСотрудников.Организация = &Организация)
	|			И СотрудникиОрганизации.ФизическоеЛицо = ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо
	|			И СотрудникиОрганизации.ДатаОткрепления > ПрограммыМедицинскогоСтрахованияСотрудников.Период
	|			И (ПрограммыМедицинскогоСтрахованияСотрудников.Регистратор <> &ИсключаемыйРегистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтложенныеСотрудники КАК ОтложенныеСотрудники
	|		ПО СотрудникиОрганизации.Сотрудник = ОтложенныеСотрудники.Сотрудник
	|ГДЕ
	|	ПрограммыМедицинскогоСтрахованияСотрудников.ПрограммаСтрахования ЕСТЬ НЕ NULL 
	|	И (ОтложенныеСотрудники.Сотрудник ЕСТЬ NULL
	|				И ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|				И ПрограммыМедицинскогоСтрахованияСотрудниковУвольнение.ФизическоеЛицо ЕСТЬ NULL
	|			ИЛИ НЕ &ОтборНеУстановлен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизации.ДатаОткрепления КАК ДатаОткрепления,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА РасширенияПрограммМедицинскогоСтрахованияСотрудников.Родственник ПОДОБНО """"
	|			ТОГДА СотрудникиОрганизации.ДатаРождения
	|		ИНАЧЕ СведенияРодственников.СведениеЗначение
	|	КОНЕЦ КАК ДатаРождения,
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.РасширениеПрограммСтрахования КАК РасширениеПрограммСтрахования,
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.СтраховаяПремия КАК СтраховаяПремия,
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.Родственник КАК Родственник,
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.ДействуетДо КАК ДатаОкончания,
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.Регистратор КАК ДокументОснование
	|ПОМЕСТИТЬ ВТРасширенияПрограммСтрахования
	|ИЗ
	|	ВТОткрепляемыеСотрудники КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасширенияПрограммМедицинскогоСтрахованияСотрудников КАК РасширенияПрограммМедицинскогоСтрахованияСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныеПериодыРасширенийСтрахования КАК МаксимальныеПериодыРасширенийСтрахования
	|			ПО РасширенияПрограммМедицинскогоСтрахованияСотрудников.Период = МаксимальныеПериодыРасширенийСтрахования.Период
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо = МаксимальныеПериодыРасширенийСтрахования.ФизическоеЛицо
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудников.Организация = МаксимальныеПериодыРасширенийСтрахования.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасширенияПрограммМедицинскогоСтрахованияСотрудников КАК РасширенияПрограммМедицинскогоСтрахованияСотрудниковУвольнение
	|			ПО (РасширенияПрограммМедицинскогоСтрахованияСотрудников.Организация = &Организация)
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо = РасширенияПрограммМедицинскогоСтрахованияСотрудниковУвольнение.ФизическоеЛицо
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудников.Период = РасширенияПрограммМедицинскогоСтрахованияСотрудниковУвольнение.Период
	|				И (РасширенияПрограммМедицинскогоСтрахованияСотрудниковУвольнение.Регистратор ССЫЛКА Документ.ОткреплениеОтПрограммМедицинскогоСтрахования)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.СведенияРодственников КАК СведенияРодственников
	|			ПО РасширенияПрограммМедицинскогоСтрахованияСотрудников.Регистратор = СведенияРодственников.Ссылка
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо = СведенияРодственников.ФизическоеЛицо
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудников.Родственник = СведенияРодственников.Родственник
	|				И (СведенияРодственников.СведениеИмя = ""ДатаРождения"")
	|		ПО (РасширенияПрограммМедицинскогоСтрахованияСотрудников.Организация = &Организация)
	|			И СотрудникиОрганизации.ФизическоеЛицо = РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо
	|			И СотрудникиОрганизации.ДатаОткрепления > РасширенияПрограммМедицинскогоСтрахованияСотрудников.Период
	|			И (РасширенияПрограммМедицинскогоСтрахованияСотрудников.Регистратор <> &ИсключаемыйРегистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтложенныеСотрудники КАК ОтложенныеСотрудники
	|		ПО СотрудникиОрганизации.Сотрудник = ОтложенныеСотрудники.Сотрудник
	|ГДЕ
	|	РасширенияПрограммМедицинскогоСтрахованияСотрудников.РасширениеПрограммСтрахования ЕСТЬ НЕ NULL 
	|	И (ОтложенныеСотрудники.Сотрудник ЕСТЬ NULL
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудников.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|				И РасширенияПрограммМедицинскогоСтрахованияСотрудниковУвольнение.ФизическоеЛицо ЕСТЬ NULL
	|			ИЛИ НЕ &ОтборНеУстановлен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ДокументыОснования.ДатаОткрепления КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТОтборУдержаний
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрограммыСтрахования.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ПрограммыСтрахования.ДокументОснование КАК ДокументОснование,
	|		ПрограммыСтрахования.ДатаОткрепления КАК ДатаОткрепления
	|	ИЗ
	|		ВТПрограммыСтрахования КАК ПрограммыСтрахования
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасширенияПрограммСтрахования.ФизическоеЛицо,
	|		РасширенияПрограммСтрахования.ДокументОснование,
	|		РасширенияПрограммСтрахования.ДатаОткрепления
	|	ИЗ
	|		ВТРасширенияПрограммСтрахования КАК РасширенияПрограммСтрахования) КАК ДокументыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрограммыСтрахования.Сотрудник КАК Сотрудник,
	|	ПрограммыСтрахования.ДатаОткрепления КАК ДатаОткрепления,
	|	ПрограммыСтрахования.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрограммыСтрахования.ДатаРождения КАК ДатаРождения,
	|	ПрограммыСтрахования.ПрограммаСтрахования КАК ПрограммаСтрахования,
	|	ПрограммыСтрахования.СтраховаяПремия КАК СтраховаяПремия,
	|	ПрограммыСтрахования.Родственник КАК Родственник,
	|	ПрограммыСтрахования.ДатаОкончания КАК ДатаОкончания,
	|	ПрограммыСтрахования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТПрограммыСтрахования КАК ПрограммыСтрахования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрограммыСтрахования.Сотрудник,
	|	ПрограммыСтрахования.Родственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасширенияПрограммСтрахования.Сотрудник КАК Сотрудник,
	|	РасширенияПрограммСтрахования.ДатаОткрепления КАК ДатаОткрепления,
	|	РасширенияПрограммСтрахования.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасширенияПрограммСтрахования.ДатаРождения КАК ДатаРождения,
	|	РасширенияПрограммСтрахования.РасширениеПрограммСтрахования КАК РасширениеПрограммСтрахования,
	|	РасширенияПрограммСтрахования.СтраховаяПремия КАК СтраховаяПремия,
	|	РасширенияПрограммСтрахования.Родственник КАК Родственник,
	|	РасширенияПрограммСтрахования.ДатаОкончания КАК ДатаОкончания,
	|	РасширенияПрограммСтрахования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТРасширенияПрограммСтрахования КАК РасширенияПрограммСтрахования
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасширенияПрограммСтрахования.Сотрудник,
	|	РасширенияПрограммСтрахования.Родственник";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РасчетЗарплатыРасширенныйФормы.СоздатьВТУдержанияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Объект.Организация, "ВТОтборУдержаний");
	
	// Заполняем таблицу удержаний, которые были введены документом ПрикреплениеКПрограммамМедицинскогоСтрахования и
	// действуют по сотрудникам
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание
	|ИЗ
	|	ВТУдержания КАК Удержания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	// Добавляем сотрудников, родственников и их программы страхования
	ВыборкаПрограммыСтрахования = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выбрать();
	Пока ВыборкаПрограммыСтрахования.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока ВыборкаПрограммыСтрахования.СледующийПоЗначениюПоля("Родственник") Цикл
			МассивСтруктурПрограмм = Новый Массив;
			Если Не ЗначениеЗаполнено(ВыборкаПрограммыСтрахования.Родственник) Тогда
				// Заполняем данные по сотруднику.
				НоваяСтрока = Объект.Сотрудники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПрограммыСтрахования);
				// Установим прекращение удержаний, если они есть
				СтруктураОтбора = Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо);
				НайденныеСтроки = Объект.Удержания.НайтиСтроки(СтруктураОтбора);
				НоваяСтрока.ПрекратитьУдержания = НайденныеСтроки.Количество() > 0;
				
				Пока ВыборкаПрограммыСтрахования.СледующийПоЗначениюПоля("ПрограммаСтрахования") Цикл
					Если Не ЗначениеЗаполнено(ВыборкаПрограммыСтрахования.ПрограммаСтрахования) Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПрограммы = Новый Структура;
					СтруктураПрограммы.Вставить("ПрограммаСтрахования", ВыборкаПрограммыСтрахования.ПрограммаСтрахования);
					СтруктураПрограммы.Вставить("ДатаНачала", ВыборкаПрограммыСтрахования.ДатаОткрепления + ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
					СтруктураПрограммы.Вставить("ДатаОкончания", ВыборкаПрограммыСтрахования.ДатаОкончания);
					ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
					ПараметрыРасчета.ДатаНачала = СтруктураПрограммы.ДатаНачала;
					ПараметрыРасчета.ДатаОкончания = СтруктураПрограммы.ДатаОкончания;
					ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
					ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
					ПараметрыРасчета.ДатаРождения = ВыборкаПрограммыСтрахования.ДатаРождения;
					ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
					ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияСотрудника(ВыборкаПрограммыСтрахования.ПрограммаСтрахования);
					СтруктураПрограммы.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета));
					МассивСтруктурПрограмм.Добавить(СтруктураПрограммы);
				КонецЦикла;
				МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, НоваяСтрока, "ПрограммыСтрахованияСотрудников", "Сотрудник", МассивСтруктурПрограмм);
			Иначе
				// Заполняем данные по родственникам сотрудника.
				НоваяСтрока = Объект.Родственники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПрограммыСтрахования);
				
				Пока ВыборкаПрограммыСтрахования.СледующийПоЗначениюПоля("ПрограммаСтрахования") Цикл
					Если Не ЗначениеЗаполнено(ВыборкаПрограммыСтрахования.ПрограммаСтрахования) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураПрограммы = Новый Структура;
					СтруктураПрограммы.Вставить("ПрограммаСтрахования", ВыборкаПрограммыСтрахования.ПрограммаСтрахования);
					СтруктураПрограммы.Вставить("ДатаНачала", ВыборкаПрограммыСтрахования.ДатаОткрепления + ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
					СтруктураПрограммы.Вставить("ДатаОкончания", ВыборкаПрограммыСтрахования.ДатаОкончания);
					ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
					ПараметрыРасчета.ДатаНачала = СтруктураПрограммы.ДатаНачала;
					ПараметрыРасчета.ДатаОкончания = СтруктураПрограммы.ДатаОкончания;
					ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
					ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
					ПараметрыРасчета.ДатаРождения = ВыборкаПрограммыСтрахования.ДатаРождения;
					ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
					ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияРодственника(ВыборкаПрограммыСтрахования.ПрограммаСтрахования);
					СтруктураПрограммы.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета));
					МассивСтруктурПрограмм.Добавить(СтруктураПрограммы);
				КонецЦикла;
				МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, НоваяСтрока, "ПрограммыСтрахованияРодственников", "Родственник", МассивСтруктурПрограмм, "ФизическоеЛицо");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавляем сотрудников, родственников и их расширения программ страхования
	ВыборкаРасширенияСтрахования = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока ВыборкаРасширенияСтрахования.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока ВыборкаРасширенияСтрахования.СледующийПоЗначениюПоля("Родственник") Цикл
			МассивСтруктурРасширений = Новый Массив;
			Если Не ЗначениеЗаполнено(ВыборкаРасширенияСтрахования.Родственник) Тогда
				ПараметрыОтбора = Новый Структура("Сотрудник", ВыборкаРасширенияСтрахования.Сотрудник);
				НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = Объект.Сотрудники.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасширенияСтрахования);
					// Установим прекращение удержаний, если они есть
					СтруктураОтбора = Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо);
					НайденныеСтроки = Объект.Удержания.НайтиСтроки(СтруктураОтбора);
					НоваяСтрока.ПрекратитьУдержания = НайденныеСтроки.Количество() > 0;
				Иначе
					НоваяСтрока = НайденныеСтроки[0];
				КонецЕсли;
				
				Пока ВыборкаРасширенияСтрахования.СледующийПоЗначениюПоля("РасширениеПрограммСтрахования") Цикл
					Если Не ЗначениеЗаполнено(ВыборкаРасширенияСтрахования.РасширениеПрограммСтрахования) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураРасширения = Новый Структура;
					СтруктураРасширения.Вставить("РасширениеСтрахования", ВыборкаРасширенияСтрахования.РасширениеПрограммСтрахования);
					СтруктураРасширения.Вставить("ДатаНачала", ВыборкаРасширенияСтрахования.ДатаОткрепления + ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
					СтруктураРасширения.Вставить("ДатаОкончания", ВыборкаРасширенияСтрахования.ДатаОкончания);
					ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
					ПараметрыРасчета.ДатаНачала = СтруктураРасширения.ДатаНачала;
					ПараметрыРасчета.ДатаОкончания = СтруктураРасширения.ДатаОкончания;
					ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
					ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
					ПараметрыРасчета.ДатаРождения = ВыборкаРасширенияСтрахования.ДатаРождения;
					ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
					ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияСотрудника(ВыборкаРасширенияСтрахования.РасширениеПрограммСтрахования);
					СтруктураРасширения.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета));
					МассивСтруктурРасширений.Добавить(СтруктураРасширения);
				КонецЦикла;
				МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, НоваяСтрока, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", МассивСтруктурРасширений);
			Иначе
				ПараметрыОтбора = Новый Структура("Родственник", ВыборкаРасширенияСтрахования.Родственник);
				НайденныеСтроки = Объект.Родственники.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = Объект.Родственники.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасширенияСтрахования);
				Иначе
					НоваяСтрока = НайденныеСтроки[0];
				КонецЕсли;
				
				Пока ВыборкаРасширенияСтрахования.СледующийПоЗначениюПоля("РасширениеПрограммСтрахования") Цикл
					Если Не ЗначениеЗаполнено(ВыборкаРасширенияСтрахования.РасширениеПрограммСтрахования) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураРасширения = Новый Структура;
					СтруктураРасширения.Вставить("РасширениеСтрахования", ВыборкаРасширенияСтрахования.РасширениеПрограммСтрахования);
					СтруктураРасширения.Вставить("ДатаНачала", ВыборкаРасширенияСтрахования.ДатаОткрепления + ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
					СтруктураРасширения.Вставить("ДатаОкончания", ВыборкаРасширенияСтрахования.ДатаОкончания);
					ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
					ПараметрыРасчета.ДатаНачала = СтруктураРасширения.ДатаНачала;
					ПараметрыРасчета.ДатаОкончания = СтруктураРасширения.ДатаОкончания;
					ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
					ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
					ПараметрыРасчета.ДатаРождения = ВыборкаРасширенияСтрахования.ДатаРождения;
					ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
					ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияРодственника(ВыборкаРасширенияСтрахования.РасширениеПрограммСтрахования);
					СтруктураРасширения.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета));
					МассивСтруктурРасширений.Добавить(СтруктураРасширения);
				КонецЦикла;
				МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, НоваяСтрока, "РасширенияПрограммСтрахованияРодственников", "Родственник", МассивСтруктурРасширений, "ФизическоеЛицо");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РассчитатьСтраховуюПремиюРодственников();
	РассчитатьСтраховуюПремиюСотрудников(Сотрудники);
	
	Объект.Сотрудники.Сортировать("Сотрудник");
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ВыбранныеСотрудники)

	Если ТипЗнч(ВыбранныеСотрудники) = Тип("Массив") Тогда
		МассивСотрудников = ВыбранныеСотрудники;
	Иначе
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеСотрудники);
	КонецЕсли;
	
	Если МассивСотрудников.Количество() > 0 Тогда
		
		СотрудникиЗаполнитьНаСервере(МассивСотрудников);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиДатаПриИзмененииНаСервере(Сотрудник, ДатаНачала, ДатаРождения)
	
	ПараметрыОтбора = Новый Структура("Сотрудник", Сотрудник);
	СтрокиПрограмм = Объект.ПрограммыСтрахованияСотрудников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиПрограмм Цикл
		СтрокаТаблицы.ДатаНачала = ДатаНачала;
		СтрокаТаблицы.ДатаОкончания = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
		ПараметрыРасчета.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		ПараметрыРасчета.ДатаОкончания = СтрокаТаблицы.ДатаОкончания;
		ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
		ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета.ДатаРождения = ДатаРождения;
		ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
		ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияСотрудника(СтрокаТаблицы.ПрограммаСтрахования);
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета);
	КонецЦикла;
	СтрокиРасширений = Объект.РасширенияПрограммСтрахованияСотрудников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиРасширений Цикл
		СтрокаТаблицы.ДатаНачала = ДатаНачала;
		СтрокаТаблицы.ДатаОкончания = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
		ПараметрыРасчета.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		ПараметрыРасчета.ДатаОкончания = СтрокаТаблицы.ДатаОкончания;
		ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
		ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета.ДатаРождения = ДатаРождения;
		ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
		ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияСотрудника(СтрокаТаблицы.РасширениеСтрахования);
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета);
	КонецЦикла;
	
	РассчитатьСтраховуюПремиюСотрудников(Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПрограммыСтрахованияЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		СотрудникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, СтрокаСотрудника, "ПрограммыСтрахованияСотрудников", "Сотрудник", Результат);
		
		РассчитатьСтраховуюПремиюСотрудников(СтрокаСотрудника.Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиРасширенияПрограммЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		СотрудникиРасширенияПрограммЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиРасширенияПрограммЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, СтрокаСотрудника, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", Результат);
		
		РассчитатьСтраховуюПремиюСотрудников(СтрокаСотрудника.Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьПрограммСтрахования(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		СотрудникиПрограммыСтрахования = "";
	Иначе
		СотрудникиПрограммыСтрахования = ТекущиеДанные.ПрограммыСтрахования;
		Если ПустаяСтрока(СотрудникиПрограммыСтрахования) Тогда
			СотрудникиПрограммыСтрахования = НСтр("ru = '<Не указаны>'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасширенийПрограммСтрахования(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		СотрудникиРасширенияПрограммСтрахования = "";
	Иначе
		СотрудникиРасширенияПрограммСтрахования = ТекущиеДанные.РасширенияПрограммСтрахования;
		Если ПустаяСтрока(СотрудникиРасширенияПрограммСтрахования) Тогда
			СотрудникиРасширенияПрограммСтрахования = НСтр("ru = '<Не указаны>'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокУдержаний(Элементы, ТекущиеДанные)
	
	СтруктураОтбора = ?(ТекущиеДанные = Неопределено, Неопределено, Новый ФиксированнаяСтруктура("ФизическоеЛицо", ТекущиеДанные.ФизическоеЛицо));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Удержания", "ОтборСтрок", СтруктураОтбора);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтраховуюПремиюРодственников(Родственник = Неопределено)
	
	СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
	СтруктураИменТаблиц.ИмяТаблицыРодственники = "Родственники";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников = "ПрограммыСтрахованияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников = "РасширенияПрограммСтрахованияРодственников";
	МедицинскоеСтрахованиеФормы.РассчитатьСтраховуюПремиюРодственников(Объект, СтруктураИменТаблиц, Родственник);
	
КонецПроцедуры

&НаСервере
Процедура РодственникиОбработкаВыбораНаСервере(Родственник, ИдентификаторСтроки)
	
	СтрокаРодственника = Объект.Родственники.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаРодственника.Родственник = Строка(Родственник);
	СтрокаРодственника.ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родственник, "ДатаРождения");
	РодственникиЗаполнитьДанныеСтрахования(СтрокаРодственника);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокРодственников(Элементы, ТекущиеДанные)
	
	СтруктураОтбора = ?(ТекущиеДанные = Неопределено, Неопределено, Новый ФиксированнаяСтруктура("ФизическоеЛицо", ТекущиеДанные.ФизическоеЛицо));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Родственники", "ОтборСтрок", СтруктураОтбора);
	
КонецПроцедуры

&НаСервере
Функция РодственникиЗаполнитьДанныеСтрахования(ДанныеСтроки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеСтроки.ФизическоеЛицо);
	Запрос.УстановитьПараметр("Родственник", ДанныеСтроки.Родственник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрограммыМедицинскогоСтрахования.ПрограммаСтрахования КАК ПрограммаСтрахования,
	|	ПрограммыМедицинскогоСтрахования.ДействуетДо КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ПрограммыМедицинскогоСтрахованияСотрудников.СрезПоследних(
	|			,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Родственник = &Родственник
	|				И НЕ Регистратор ССЫЛКА Документ.ОткреплениеОтПрограммМедицинскогоСтрахования) КАК ПрограммыМедицинскогоСтрахования";
	
	МассивСтруктурПрограмм = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПрограммаСтрахования") Цикл
		Если Не ЗначениеЗаполнено(Выборка.ПрограммаСтрахования) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПрограммы = Новый Структура;
		СтруктураПрограммы.Вставить("ПрограммаСтрахования", Выборка.ПрограммаСтрахования);
		СтруктураПрограммы.Вставить("ДатаНачала", ДанныеСтроки.ДатаОткрепления + ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
		СтруктураПрограммы.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
		ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
		ПараметрыРасчета.ДатаНачала = СтруктураПрограммы.ДатаНачала;
		ПараметрыРасчета.ДатаОкончания = СтруктураПрограммы.ДатаОкончания;
		ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
		ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета.ДатаРождения = ДанныеСтроки.ДатаРождения;
		ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
		ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияРодственника(Выборка.ПрограммаСтрахования);
		СтруктураПрограммы.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета));
		МассивСтруктурПрограмм.Добавить(СтруктураПрограммы);
	КонецЦикла;
	МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, ДанныеСтроки, "ПрограммыСтрахованияРодственников", "Родственник", МассивСтруктурПрограмм, "ФизическоеЛицо");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасширенияПрограммМедицинскогоСтрахования.РасширениеПрограммСтрахования КАК РасширениеПрограммСтрахования,
	|	РасширенияПрограммМедицинскогоСтрахования.ДействуетДо КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.РасширенияПрограммМедицинскогоСтрахованияСотрудников.СрезПоследних(
	|			,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Родственник = &Родственник
	|				И НЕ Регистратор ССЫЛКА Документ.ОткреплениеОтПрограммМедицинскогоСтрахования) КАК РасширенияПрограммМедицинскогоСтрахования";
	
	МассивСтруктурРасширений = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("РасширениеПрограммСтрахования") Цикл
		Если Не ЗначениеЗаполнено(Выборка.РасширениеПрограммСтрахования) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураРасширения = Новый Структура;
		СтруктураРасширения.Вставить("РасширениеСтрахования", Выборка.РасширениеПрограммСтрахования);
		СтруктураРасширения.Вставить("ДатаНачала", ДанныеСтроки.ДатаОткрепления + ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
		СтруктураРасширения.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
		ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
		ПараметрыРасчета.ДатаНачала = СтруктураРасширения.ДатаНачала;
		ПараметрыРасчета.ДатаОкончания = СтруктураРасширения.ДатаОкончания;
		ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
		ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета.ДатаРождения = ДанныеСтроки.ДатаРождения;
		ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
		ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияРодственника(Выборка.РасширениеПрограммСтрахования);
		СтруктураРасширения.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета));
		МассивСтруктурРасширений.Добавить(СтруктураРасширения);
	КонецЦикла;
	МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, ДанныеСтроки, "РасширенияПрограммСтрахованияРодственников", "Родственник", МассивСтруктурРасширений, "ФизическоеЛицо");
	
	РассчитатьСтраховуюПремиюРодственников(ДанныеСтроки.Родственник);
	
КонецФункции

&НаСервере
Процедура РодственникиДатаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеСтроки = Объект.Родственники.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПараметрыОтбора = Новый Структура("ФизическоеЛицо, Родственник", ДанныеСтроки.ФизическоеЛицо, ДанныеСтроки.Родственник);
	
	СтрокиПрограмм = Объект.ПрограммыСтрахованияРодственников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиПрограмм Цикл
		СтрокаТаблицы.ДатаНачала = ДанныеСтроки.ДатаОткрепления;
		ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
		ПараметрыРасчета.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		ПараметрыРасчета.ДатаОкончания = СтрокаТаблицы.ДатаОкончания;
		ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
		ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета.ДатаРождения = ДанныеСтроки.ДатаРождения;
		ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
		ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияРодственника(СтрокаТаблицы.ПрограммаСтрахования);
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета);
	КонецЦикла;
	МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, ДанныеСтроки, "ПрограммыСтрахованияРодственников", "Родственник", СтрокиПрограмм, "ФизическоеЛицо");
	
	СтрокиРасширений = Объект.РасширенияПрограммСтрахованияРодственников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиРасширений Цикл
		СтрокаТаблицы.ДатаНачала = ДанныеСтроки.ДатаОткрепления;
		ПараметрыРасчета = МедицинскоеСтрахование.ПараметрыРасчетаСтраховойПремии();
		ПараметрыРасчета.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		ПараметрыРасчета.ДатаОкончания = СтрокаТаблицы.ДатаОкончания;
		ПараметрыРасчета.ДатаНачалаСтрахования = Объект.ДатаНачалаСтрахования;
		ПараметрыРасчета.ДатаОкончанияСтрахования = Объект.ДатаОкончанияСтрахования;
		ПараметрыРасчета.ДатаРождения = ДанныеСтроки.ДатаРождения;
		ПараметрыРасчета.ШкалаВозрастов = ШкалаВозрастов;
		ПараметрыРасчета.СтраховаяПремияСтрахователя = МедицинскоеСтрахование.СтраховаяПремияРодственника(СтрокаТаблицы.РасширениеСтрахования);
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(ПараметрыРасчета);
	КонецЦикла;
	МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, ДанныеСтроки, "РасширенияПрограммСтрахованияРодственников", "Родственник", СтрокиРасширений, "ФизическоеЛицо");
	
	РассчитатьСтраховуюПремиюРодственников(ДанныеСтроки.Родственник);
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиПрограммыСтрахованияЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		РодственникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РодственникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаРодственника = Объект.Родственники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, СтрокаРодственника, "ПрограммыСтрахованияРодственников", "Родственник", Результат, "ФизическоеЛицо");
		
		РассчитатьСтраховуюПремиюРодственников(СтрокаРодственника.Родственник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиРасширенияПрограммСтрахованияЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		РодственникиРасширенияПрограммСтрахованияЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РодственникиРасширенияПрограммСтрахованияЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаРодственника = Объект.Родственники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, СтрокаРодственника, "РасширенияПрограммСтрахованияРодственников", "Родственник", Результат, "ФизическоеЛицо");
		
		РассчитатьСтраховуюПремиюРодственников(СтрокаРодственника.Родственник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
