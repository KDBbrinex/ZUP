
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда 
		Если Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
			Шаблон = Неопределено;
			Параметры.Свойство("Шаблон", Шаблон);
			Если Шаблон = Неопределено Тогда
				ДополнительныйПараметр = Неопределено;
				Параметры.Свойство("ДополнительныйПараметр", ДополнительныйПараметр);
				Если ТипЗнч(ДополнительныйПараметр) = Тип("УникальныйИдентификатор") Тогда
					Шаблон = Справочники.ШаблоныПроизвольныхКадровыхПриказов.ПолучитьСсылку(ДополнительныйПараметр);
				Иначе
					Шаблон = Справочники.ШаблоныПроизвольныхКадровыхПриказов.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			Объект.Шаблон = Шаблон;
		КонецЕсли;
		
		Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если Объект.Шаблон.НесколькоСотрудников Тогда
				НоваяСтрока = Объект.Сотрудники.Добавить();
				НоваяСтрока.Сотрудник = Параметры.Основание;
			Иначе
				Объект.Сотрудник = Параметры.Основание;
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", 
									"Объект.Организация",
									"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере(Объект);
	КонецЕсли;
	
	ЗаполнитьЗаголовокФормы(Объект);
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	Если НастройкиДокумента.НесколькоСотрудников
		И ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Объект.Сотрудник;
		Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	Если Не НастройкиДокумента.ПоказыватьПодразделение Тогда
		Объект.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ЗначенияРеквизитов.Очистить();
	СохранитьЗначенияРеквизитовШапки(ТекущийОбъект);
	СохранитьЗначенияРеквизитовСпискаСотрудников(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для	Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
		ПутьКРеквизиту = КлючИЗначение.Ключ;
		ИмяПоляФормы = КлючИЗначение.Значение;
		ЧастиПутиКРеквизиту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКРеквизиту, ".");
		Если ЧастиПутиКРеквизиту[0] = "Объект" Тогда
			Если Найти(ИмяПоляФормы, "Объект") Тогда
				ЧастиПоляФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоляФормы, ".");
				ИмяРеквизита = ЧастиПоляФормы[1];
				ЗначениеРеквизита = ЭтаФорма["Объект"][ИмяРеквизита];
			Иначе
				ИмяРеквизита = ИмяПоляФормы;
				ЗначениеРеквизита = ЭтаФорма[ИмяПоляФормы]; 
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле ""%1"" не заполнено'"), Элементы[ИмяРеквизита].Заголовок);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
			КонецЕсли;
		ИначеЕсли ЧастиПутиКРеквизиту[0] = "Сотрудники" Тогда
			ИмяРеквизита = ЧастиПутиКРеквизиту[1];
			Для Каждого СтрокаКоллекции Из Объект.Сотрудники Цикл
				ЗначениеРеквизита = Неопределено;
				СтрокаКоллекции.Свойство(ИмяРеквизита, ЗначениеРеквизита);
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					    НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Сотрудники""'"), Элементы[ИмяПоляФормы].Заголовок,					
						СтрокаКоллекции.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.Сотрудники.АвтоОтметкаНезаполненного И Объект.Сотрудники.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена таблица ""Сотрудники""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	ЗаполнитьЗаголовокФормы(ТекущийОбъект);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьДанныеФормыПоОрганизации();
КонецПроцедуры

#Область ОбработчикиПодсистемыПодписиДокументов

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	
	ЗадаватьВопрос = Объект.Сотрудники.Количество() > 0;
	
	Если ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица документа будет очищена. 
	                         |Продолжить?'");
							 
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе 
		
		ЗаполнитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекОбъект)
	
	СтруктураНастроек = Справочники.ШаблоныПроизвольныхКадровыхПриказов.НастройкиВидаДокумента(ТекОбъект.Шаблон);

	НастройкиДокумента = Новый ФиксированнаяСтруктура(СтруктураНастроек);

	СоответствиеПроверяемыхРеквизитов = Новый Соответствие;
	
	НастроитьЭлементыФормы(СоответствиеПроверяемыхРеквизитов);

	ОтобразитьДополнительныеРеквизитыШапки(СоответствиеПроверяемыхРеквизитов);
	
	ПрочитатьДополнительныеРеквизитыШапки();	
	
	ОтобразитьДополнительныеКолонкиТабличнойЧасти(СоответствиеПроверяемыхРеквизитов);
	
	ПрочитатьДополнительныеКолонкиТабличнойЧасти();
	
	ПроверяемыеПоля = Новый ФиксированноеСоответствие(СоответствиеПроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокФормы(ТекОбъект)
	
	АвтоЗаголовок = Не ЗначениеЗаполнено(ТекОбъект.Шаблон);
	
	Если Не АвтоЗаголовок Тогда
		ПредставлениеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекОбъект.Шаблон, "Наименование");
		Если Параметры.Ключ.Пустая() Тогда
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 (создание)'"), ПредставлениеДокумента);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 %2 от %3'"), ПредставлениеДокумента, ТекОбъект.Номер, ТекОбъект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы(СоответствиеПроверяемыхРеквизитов)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудник",
			"Видимость",
			НЕ НастройкиДокумента.НесколькоСотрудников);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудник",
			"АвтоОтметкаНезаполненного",
			НЕ НастройкиДокумента.НесколькоСотрудников);
				
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудники",
			"Видимость",
			НастройкиДокумента.НесколькоСотрудников);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудники",
			"АвтоОтметкаНезаполненного",
			НастройкиДокумента.НесколькоСотрудников);
			
	Если НастройкиДокумента.НесколькоСотрудников Тогда
		СоответствиеПроверяемыхРеквизитов.Вставить("Сотрудники.Сотрудник", "СотрудникиСотрудник");
	Иначе
		СоответствиеПроверяемыхРеквизитов.Вставить("Объект.Сотрудник", "Объект.Сотрудник");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаРуководитель",
			"Видимость",
			НастройкиДокумента.ПодписываетРуководитель);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаГлавныйБухгалтер",
			"Видимость",
			НастройкиДокумента.ПодписываетГлавныйБухгалтер);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаКассир",
			"Видимость",
			НастройкиДокумента.ПодписываетКассир);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаРуководительКадровойСлужбы",
			"Видимость",
			НастройкиДокумента.ПодписываетРуководительКадровойСлужбы);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаБухгалтер",
			"Видимость",
			НастройкиДокумента.ПодписываетБухгалтер);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Подразделение",
			"Видимость",
			НастройкиДокумента.ПоказыватьПодразделение);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Подразделение",
			"АвтоОтметкаНезаполненного",
			НастройкиДокумента.ПроверятьЗаполнениеПодразделения);
			
	Если НастройкиДокумента.ПроверятьЗаполнениеПодразделения Тогда
		СоответствиеПроверяемыхРеквизитов.Вставить("Объект.Подразделение", "Объект.Подразделение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ЗаполнитьДанныеФормыПоОрганизации();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеРеквизитыШапки(СоответствиеПроверяемыхРеквизитов)
	
	РеквизитыФормы = ПолучитьРеквизиты();
	ТаблицаРеквизитовШапки = ТаблицаРеквизитов(Объект.Шаблон);
	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
		
	Для каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		ИмяРеквизита = ИмяРеквизита(ОписаниеРеквизита.Ссылка);
		Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеРеквизита.ТипЗначения, , ОписаниеРеквизита.Наименование, Истина);
		
		Если РеквизитСуществует(РеквизитыФормы, Реквизит) Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Если ОписаниеРеквизита.ОбязательноДляЗаполнения Тогда
			СоответствиеПроверяемыхРеквизитов.Вставить("Объект."+ИмяРеквизита, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Создание элементов формы.
	ЭлементРазмещения = Элементы.ДополнительныеРеквизиты;
	
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		ИмяРеквизита = ИмяРеквизита(ОписаниеРеквизита.Ссылка);
		Если ЭтаФорма.Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ЭлементРазмещения);
		Если ОписаниеРеквизита.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ОбязательноДляЗаполнения;
		КонецЕсли;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.Заголовок = ОписаниеРеквизита.Наименование;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеКолонкиТабличнойЧасти(СоответствиеПроверяемыхРеквизитов)
	
	РеквизитыФормы = ПолучитьРеквизиты("Объект.Сотрудники");
	ТаблицаРеквизитовСпискаСотрудников = ТаблицаРеквизитов(Объект.Шаблон, Истина);
	
	ДобавляемыеРеквизиты = Новый Массив();
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл
		ИмяРеквизита = ИмяРеквизита(ОписаниеРеквизита.Ссылка);
		Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеРеквизита.ТипЗначения, "Объект.Сотрудники", ОписаниеРеквизита.Наименование, Истина);
		Если Не РеквизитСуществует(РеквизитыФормы, Реквизит) Тогда
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		Если ОписаниеРеквизита.ОбязательноДляЗаполнения Тогда
			СоответствиеПроверяемыхРеквизитов.Вставить("Сотрудники."+ИмяРеквизита, "Сотрудники"+ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создание элементов формы.
	ЭлементРазмещения = Элементы.Сотрудники;
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл
		ИмяРеквизита = ИмяРеквизита(ОписаниеРеквизита.Ссылка);
		Элемент = ЭтаФорма.Элементы.Найти("Сотрудники"+ИмяРеквизита);
		Если Элемент = Неопределено Тогда
			Элемент = Элементы.Добавить("Сотрудники"+ИмяРеквизита, Тип("ПолеФормы"), ЭлементРазмещения);
			Элемент.ПутьКДанным = "Объект.Сотрудники."+ИмяРеквизита;
		КонецЕсли;
		Если ОписаниеРеквизита.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ОбязательноДляЗаполнения;
		КонецЕсли;
		Элемент.Заголовок = ОписаниеРеквизита.Наименование;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияРеквизитовШапки(ТекущийОбъект)
	
	ТаблицаРеквизитовШапки = ТаблицаРеквизитов(Объект.Шаблон);	
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		ЗначениеРеквизита = ЭтаФорма[ИмяРеквизита(ОписаниеРеквизита.Ссылка)];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НоваяСтрокаЗначенияРеквизитов 			= ТекущийОбъект.ЗначенияРеквизитов.Добавить();
			НоваяСтрокаЗначенияРеквизитов.Реквизит	= ОписаниеРеквизита.Ссылка;
			НоваяСтрокаЗначенияРеквизитов.Значение  = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияРеквизитовСпискаСотрудников(ТекущийОбъект)
	
	ТаблицаРеквизитовСпискаСотрудников = ТаблицаРеквизитов(Объект.Шаблон, Истина);	
	
	ИдентификаторСтроки = 0;
	Для Каждого СтрокаСотрудник Из Объект.Сотрудники Цикл
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл
			ЗначениеРеквизита = Неопределено;
			СтрокаСотрудник.Свойство(ИмяРеквизита(ОписаниеРеквизита.Ссылка), ЗначениеРеквизита);
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				НоваяСтрокаЗначенияРеквизитов 						= ТекущийОбъект.ЗначенияРеквизитов.Добавить();
				НоваяСтрокаЗначенияРеквизитов.Реквизит 				= ОписаниеРеквизита.Ссылка;
				НоваяСтрокаЗначенияРеквизитов.ИдентификаторСтроки	= ИдентификаторСтроки;
				НоваяСтрокаЗначенияРеквизитов.Значение 				= ЗначениеРеквизита;
				СтрокаОбъектаПоНомеру = ТекущийОбъект.Сотрудники.Найти(СтрокаСотрудник.НомерСтроки, "НомерСтроки");
				Если СтрокаОбъектаПоНомеру <> Неопределено Тогда
					СтрокаОбъектаПоНомеру.ИдентификаторСтроки = ИдентификаторСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДополнительныеРеквизитыШапки()
	
	Если Объект.ЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитовШапки = ТаблицаРеквизитов(Объект.Шаблон);	
	
	Для каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Реквизит", ОписаниеРеквизита.Ссылка);
		ПараметрыОтбора.Вставить("ИдентификаторСтроки", 0);
		СтрокиСоЗначениемРеквизита = Объект.ЗначенияРеквизитов.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиСоЗначениемРеквизита.Количество() > 0 Тогда
			ЭтаФорма[ИмяРеквизита(ОписаниеРеквизита.Ссылка)] = СтрокиСоЗначениемРеквизита[0].Значение;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДополнительныеКолонкиТабличнойЧасти()
	
	Если Объект.ЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитовСпискаСотрудников = ТаблицаРеквизитов(Объект.Шаблон, Истина);	
	ТаблицаСотрудники = Объект.Сотрудники.Выгрузить();
	
	Для Каждого СтрокаСотрудник Из ТаблицаСотрудники Цикл
		Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Реквизит", ОписаниеРеквизита.Ссылка);
			ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаСотрудник.НомерСтроки);
			СтрокиСоЗначениемРеквизита = Объект.ЗначенияРеквизитов.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиСоЗначениемРеквизита.Количество() > 0 Тогда
				СтрокаСотрудник[ИмяРеквизита(ОписаниеРеквизита.Ссылка)] = СтрокиСоЗначениемРеквизита[0].Значение;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Объект.Сотрудники.Загрузить(ТаблицаСотрудники);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеквизита(Ссылка)
	Возврат "Реквизит_" + СтрЗаменить(Строка(Ссылка.УникальныйИдентификатор()), "-", "_");
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаРеквизитов(Шаблон, РеквизитыСпискаСотрудников = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	Запрос.УстановитьПараметр("ИспользуетсяВТабличнойЧасти", РеквизитыСпискаСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыПроизвольныхКадровыхПриказов.Ссылка,
		|	РеквизитыПроизвольныхКадровыхПриказов.Наименование,
		|	РеквизитыПроизвольныхКадровыхПриказов.ТипЗначения,
		|	РеквизитыПроизвольныхКадровыхПриказов.ОбязательноДляЗаполнения,
		|	РеквизитыПроизвольныхКадровыхПриказов.РеквизитУпорядочивания КАК РеквизитУпорядочивания
		|ИЗ
		|	ПланВидовХарактеристик.РеквизитыПроизвольныхКадровыхПриказов КАК РеквизитыПроизвольныхКадровыхПриказов
		|ГДЕ
		|	РеквизитыПроизвольныхКадровыхПриказов.Шаблон = &Шаблон
		|	И РеквизитыПроизвольныхКадровыхПриказов.ИспользуетсяВТабличнойЧасти = &ИспользуетсяВТабличнойЧасти
		|	И
		|	НЕ РеквизитыПроизвольныхКадровыхПриказов.ВАрхиве
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитУпорядочивания";  
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСотрудников()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСотрудники = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСотрудники.Организация = Объект.Организация;
	ПараметрыСотрудники.Подразделение = Объект.Подразделение;
	ПараметрыСотрудники.НачалоПериода = НачалоМесяца(Объект.Дата);
	ПараметрыСотрудники.ОкончаниеПериода = КонецМесяца(Объект.Дата);
	ПараметрыСотрудники.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
	ПараметрыСотрудники.КадровыеДанные = "ФИО";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыСотрудники);
	СотрудникиОрганизации.Сортировать("ФИО");
	
	Объект.Сотрудники.Загрузить(СотрудникиОрганизации);
	
КонецПроцедуры

&НаСервере
Функция РеквизитСуществует(РеквизитыФормы, Реквизит) 
	
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = Реквизит.Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
