#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПраваНаПроведение(Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	АдаптацияУвольнение.ПриЗаписи(ЭтотОбъект, Отказ)
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ДатаПриема = ТекущаяДатаСеанса();
	ЗаполнитьПоДаннымКандидата(ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	АдаптацияУвольнение.СформироватьДвиженияМероприятияАдаптацииУвольненияПоДокументу(Движения, ДанныеДляПроведения.ДанныеМероприятийАдаптацииУвольнения);
	АдаптацияУвольнение.ЗарегистрироватьДокументДляОбновленияЗаданийАдаптацииУвольнения(Движения);
	
	Если ЗапланироватьПрограммуОбучения Тогда
		ОбучениеРазвитие.СформироватьДвиженияПланаПоСотрудникам(Движения, ДанныеДляПроведения.ПлановыеДвиженияСотрудников);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаПриема, "Объект.ДатаПриема", Отказ, НСтр("ru='Дата приема'"), , , Ложь);
	
	АдаптацияУвольнение.ПроверитьЗаполнениеМероприятийАдаптацииВРешенииОПриеме(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	Если Не Отказ Тогда
		АдаптацияУвольнение.ПроверитьНаличиеДубляДокумента(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ОбучениеРазвитие.ПроверитьЗаполнениеПрограммыОбученияВРешенииОПриеме(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если НоваяПозиция Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДолжностьПоШтатномуРасписанию");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	АдаптацияУвольнение.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	Мероприятия.Мероприятие,
	|	Мероприятия.ДатаНачала,
	|	Мероприятия.ДатаОкончания,
	|	Мероприятия.Исполнитель
	|ИЗ
	|	Документ.РешениеОПриемеНаРаботу.МероприятияАдаптацииУвольнения КАК Мероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РешениеОПриемеНаРаботу КАК ПриемНаРаботу
	|		ПО Мероприятия.Ссылка = ПриемНаРаботу.Ссылка
	|ГДЕ
	|	Мероприятия.Ссылка = &Ссылка";
		
	ДанныеМероприятий = Запрос.Выполнить().Выгрузить();
	ДанныеМероприятий.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СобытияАдаптацииУвольнения.Тип));
	ДанныеМероприятий.ЗаполнитьЗначения(Ссылка, "ДокументОснование");
	
	ДанныеДляПроведения = Новый Структура;
	ДанныеДляПроведения.Вставить("ДанныеМероприятийАдаптацииУвольнения", ДанныеМероприятий);
	ДанныеДляПроведения.Вставить("ПлановыеДвиженияСотрудников", ДанныеДляПроведенияПланОбученияСотрудников());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ДанныеДляПроведенияПланОбученияСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Подразделение КАК Подразделение,
		|	РешениеОПриемеНаРаботуПрограммаОбучения.Мероприятие КАК Мероприятие,
		|	РешениеОПриемеНаРаботуПрограммаОбучения.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РешениеОПриемеНаРаботуПрограммаОбучения.ДатаНачала КАК ДатаНачала,
		|	РешениеОПриемеНаРаботуПрограммаОбучения.ДатаОкончания КАК ДатаОкончания,
		|	РешениеОПриемеНаРаботуПрограммаОбучения.Ответственный КАК Ответственный,
		|	РешениеОПриемеНаРаботуПрограммаОбучения.КоличествоУчебныхЧасов КАК КоличествоУчебныхЧасов,
		|	РешениеОПриемеНаРаботуПрограммаОбучения.СуммаРасходов КАК СуммаРасходов
		|ИЗ
		|	Документ.РешениеОПриемеНаРаботу.ПрограммаОбучения КАК РешениеОПриемеНаРаботуПрограммаОбучения
		|ГДЕ
		|	РешениеОПриемеНаРаботуПрограммаОбучения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Подразделение", ОрганизационнаяСтруктура.МестоПозицииВСтруктуреПредприятия(ДолжностьПоШтатномуРасписанию));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Процедура ПроверитьПраваНаПроведение(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.РешениеОПриемеНаРаботу)  Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен Тогда
			Отказ = Истина;
			ВызватьИсключение(НСтр("ru = 'Нет прав на проведение непроведенного документа.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымКандидата(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Кандидаты") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеКандидата = Справочники.Кандидаты.ДанныеКандидата(ДанныеЗаполнения);
	Если ДанныеКандидата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКандидата.Состояние <> Перечисления.СостоянияСогласования.Согласовано Тогда
		ВызватьИсключение НСтр("ru = 'Кандидат не утвержден. 
                                |Решение о приеме на работу вводится для утвержденных (одобренных) кандидатов.'");
	КонецЕсли;
	
	ПараметрыДанных = Справочники.Вакансии.ПараметрыПолученияДанныхВакансии();
	ПараметрыДанных.Согласование = Истина;
	
	ДанныеВакансии = Справочники.Вакансии.ДанныеВакансии(ДанныеКандидата.Вакансия, ПараметрыДанных);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеВакансий") Тогда
		Если Не ЗначениеЗаполнено(ДанныеКандидата.Вакансия) Тогда
			ВызватьИсключение НСтр("ru = 'Вакансия не заполнена. 
	                                |Решение о приеме на работу вводится для кандидата на согласованную вакансию.'");
		КонецЕсли;
		Если ДанныеВакансии.Согласование = Неопределено 
			Или ДанныеВакансии.Согласование.СостояниеСогласования <> Перечисления.СостоянияСогласования.Согласовано Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вакансия %1 не согласована. 
	                  |Решение о приеме на работу вводится для кандидата на согласованную вакансию.'"),
				ДанныеКандидата.Вакансия);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	ФизическоеЛицо = ДанныеКандидата.ФизическоеЛицо;
	
	Подразделение = ДанныеВакансии.Подразделение;
	Должность = ДанныеВакансии.Должность;
	ПрофильДолжности = ДанныеВакансии.ПрофильДолжности;
	НоваяПозиция = ДанныеВакансии.НоваяПозиция;
	
	Если Не ДанныеВакансии.НоваяПозиция Тогда
		ДолжностьПоШтатномуРасписанию = ДанныеВакансии.Позиция;
		ДанныеПозиции = Справочники.ШтатноеРасписание.ДанныеПозицииШтатногоРасписания(ДанныеВакансии.Позиция);
		Организация = ДанныеПозиции.Организация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли