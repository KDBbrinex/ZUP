
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, ДатаСобытия", 
			"Объект.Организация", "Объект.Ответственный", "Объект.ДатаПриема");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
			ЗаполнитьМероприятияНаСервере();
		КонецЕсли;
		
		УстановитьДоступностьЭлементов();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_ПриемНаРаботу" Тогда
		ОбновитьДанныеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьДанныеФормы();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	АдаптацияУвольнениеФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	УстановитьДоступностьЭлементов();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РешениеОПриемеНаРаботу", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.МероприятияАдаптацииУвольнения.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ЗаполнитьМероприятияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТекущийДокумент", Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Документ.РешениеОПриемеНаРаботу.Форма.ФормаВыбораФизическогоЛица", ПараметрыОткрытияФормы, Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриемаПриИзменении(Элемент)
	ЗаполнитьМероприятияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПоШтатномуРасписаниюПриИзменении(Элемент)
	ЗаполнитьМероприятияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьПрограммуОбученияПриИзменении(Элемент)
	УстановитьДоступностьПрограммаОбучения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НоваяПозицияПриИзменении(Элемент)
	
	УстановитьДоступностьПозиции(ЭтаФорма);
	УстановитьДоступностьДолжностиПодразделения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	ЗаполнитьМероприятияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗаполнитьМероприятияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНазначаемыеМероприятия

&НаКлиенте
Процедура НазначаемыеМероприятияМероприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	АдаптацияУвольнениеКлиент.НазначаемыеМероприятияМероприятиеНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НазначаемыеМероприятияМероприятиеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НазначаемыеМероприятияМероприятиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДопПараметры = ПараметрыПолученияСвойствНазначаемогоМероприятия();
	АдаптацияУвольнениеКлиент.НазначаемыеМероприятияМероприятиеОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрограммаОбучения

&НаКлиенте
Процедура ПрограммаОбученияМероприятиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрограммаОбучения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗависимыеОтМероприятияОбученияРеквизиты(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьМероприятия(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьМероприятияПослеПроверкиСпискаМероприятий", ЭтотОбъект);
	ЗарплатаКадрыРасширенныйКлиент.ПроверитьВозможностьОчисткиТабличныхЧастей(ЭтотОбъект, "МероприятияАдаптацииУвольнения", Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьНаРаботу(Команда)
	
	ДополнительныеПараметры = Новый Структура("Записан", Истина);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ДополнительныеПараметры.Записан = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПринятьНаРаботуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Документ будет записан. Продолжить?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	ПринятьНаРаботуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ПриказОформлен = ЗначениеЗаполнено(КадровыйПриказИнфоНадпись);
	Элементы.ПринятьНаРаботу.Доступность = (Не ПриказОформлен И ПравоДоступа("Добавление", Метаданные.Документы.ПриемНаРаботу));
	
	УстановитьОтображениеЗакладокФормы();
	
	УстановитьДоступностьПрограммаОбучения(ЭтаФорма);
	
	УстановитьДоступностьПозиции(ЭтаФорма);
	УстановитьДоступностьДолжностиПодразделения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМероприятияНаКлиенте()
	
	Объект.МероприятияАдаптацииУвольнения.Очистить();
	
	Если Не Объект.НоваяПозиция И Не ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.НоваяПозиция Тогда
		Если Не ЗначениеЗаполнено(Объект.Должность) И Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМероприятияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМероприятияПослеПроверкиСпискаМероприятий(Отказ, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМероприятияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятияНаСервере()
	
	ПараметрыЗаполнения = Документы.РешениеОПриемеНаРаботу.ПараметрыЗаполненияМероприятий(Объект);
	АдаптацияУвольнениеФормы.ЗаполнитьНазначаемыеМероприятия(ЭтотОбъект, ПараметрыЗаполнения);
	
	ОбучениеРазвитиеФормы.ЗаполнитьПрограммуОбученияИзПозицииШР(Объект.ПрограммаОбучения, Объект.ДолжностьПоШтатномуРасписанию, Объект.ДатаПриема);
	
	Объект.ЗапланироватьПрограммуОбучения = Объект.ПрограммаОбучения.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПолученияСвойствНазначаемогоМероприятия()
	
	ПараметрыПолучения = АдаптацияУвольнениеКлиент.ПараметрыПолученияСвойствНазначаемогоМероприятия();
	ПараметрыПолучения.ФизическоеЛицо = Объект.ФизическоеЛицо;
	ПараметрыПолучения.ДатаСобытия = Объект.ДатаПриема;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

&НаСервере
Функция СведенияОбОформленномСотруднике()
	
	Сведения = Новый Структура("Сотрудник, ПриказОПриеме, НавигационнаяСсылка");
	НеобходимыхДанные = "Организация,ПриказОПриеме,ДатаПриема,ДолжностьПоШтатномуРасписанию";
	
	СписокСотрудников = СотрудникиФормы.СотрудникиФизическогоЛица(Объект.ФизическоеЛицо, , Объект.Организация);
	
	Если СписокСотрудников.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СписокСотрудников, НеобходимыхДанные, Объект.ДатаПриема);
		УстановитьПривилегированныйРежим(Ложь);
		
		СтруктураПоиска = Новый Структура("ДолжностьПоШтатномуРасписанию, ДатаПриема", Объект.ДолжностьПоШтатномуРасписанию, Объект.ДатаПриема);
		ОформленныеСотрудники = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураПоиска);
		
		Если ОформленныеСотрудники.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Сведения, ОформленныеСотрудники[0]);
			Сведения.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Сведения.ПриказОПриеме);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

&НаКлиенте
Процедура ПринятьНаРаботуЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Записан Тогда
		Записать();
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Сведения = СведенияОбОформленномСотруднике();
	
	Если ЗначениеЗаполнено(Сведения.Сотрудник) Тогда
		
		ТекстВопросаНачало = НСтр("ru='Уже есть приказ'") + " ";
		ТекстВопросаГиперссылка = Новый ФорматированнаяСтрока(Строка(Сведения.ПриказОПриеме), , , , Сведения.НавигационнаяСсылка);
		ТекстВопросаОкончание = " " + НСтр("ru = 'оформленный на текущее рабочее место. Создать новый?'");
		
		ТекстВопроса = Новый ФорматированнаяСтрока(ТекстВопросаНачало, ТекстВопросаГиперссылка, ТекстВопросаОкончание);
		
		Оповещение = Новый ОписаниеОповещения("ОформлениеПриказаЗавершение", ЭтотОбъект, Новый Структура("ПриказОПриеме", Сведения.ПриказОПриеме));
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОформлениеПриказаЗавершение(КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПриказаЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", РеквизитыНовогоПриказа());
		
		ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		СвязатьПриказСРешением(ДополнительныеПараметры.ПриказОПриеме);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыНовогоПриказа()
	
	РеквизитыПриказа = Новый Структура("Организация, Сотрудник, ФизическоеЛицо, Подразделение, ДолжностьПоШтатномуРасписанию, ДатаПриема, Решение");
	
	ЗаполнитьЗначенияСвойств(РеквизитыПриказа, Объект);
	
	РеквизитыПриказа.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДолжностьПоШтатномуРасписанию, "Подразделение");
	РеквизитыПриказа.Сотрудник = КадровыйУчет.НовыйСотрудникФизическогоЛица(Объект.ФизическоеЛицо, Объект.Организация);
	РеквизитыПриказа.Решение = Объект.Ссылка;
	
	Возврат РеквизитыПриказа;
	
КонецФункции

&НаСервере
Процедура СвязатьПриказСРешением(ПриказОПриеме)
	
	РешениеИзПриказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПриказОПриеме, "Решение");
	
	Если Не ЗначениеЗаполнено(РешениеИзПриказа) Тогда
		
		ПриказОбъект = ПриказОПриеме.ПолучитьОбъект();
		ПриказОбъект.Решение = Объект.Ссылка;
		ПриказОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеЗакладокФормы()

	Если Элементы.ЗадачиАдаптацииСтраница.ПодчиненныеЭлементы.Количество() = 0 
		ИЛИ Элементы.ПрограммаОбученияСтраница.ПодчиненныеЭлементы.Количество() = 0 Тогда
	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СтраницыФормы",
			"ОтображениеСтраниц",
			ОтображениеСтраницФормы.Нет);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПрограммаОбучения(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрограммаОбучения",
		"Доступность",
		Форма.Объект.ЗапланироватьПрограммуОбучения);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	
	АдаптацияУвольнениеФормы.РешениеПриПолученииДанных(ЭтотОбъект);
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеОтМероприятияОбученияРеквизиты(ИдентификаторСтроки)

	ТекущиеДанные = Объект.ПрограммаОбучения.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Мероприятие) Тогда
		ТекущиеДанные.Ответственный = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ТекущиеДанные.КоличествоУчебныхЧасов = 0;
		ТекущиеДанные.СуммаРасходов = 0;
		Возврат;
	КонецЕсли;
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Мероприятие, "КоличествоУчебныхЧасов, Ответственный, СпособОпределенияСтоимости, Стоимость, КоличествоСлушателей");
	
	ТекущиеДанные.Ответственный = РеквизитыМероприятия.Ответственный;
	ТекущиеДанные.КоличествоУчебныхЧасов = РеквизитыМероприятия.КоличествоУчебныхЧасов;
	ТекущиеДанные.СуммаРасходов = ОбучениеРазвитиеКлиентСервер.СтоимостьОбученияДляСотрудника(РеквизитыМероприятия);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПозиции(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ДолжностьПоШтатномуРасписанию.Доступность = Не Объект.НоваяПозиция;
	Элементы.ДолжностьПоШтатномуРасписанию.АвтоОтметкаНеЗаполненного = Не Объект.НоваяПозиция;
	Элементы.ДолжностьПоШтатномуРасписанию.ОтметкаНеЗаполненного = Не ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) И Не Объект.НоваяПозиция;
	
	Если Объект.НоваяПозиция Тогда
		Объект.ДолжностьПоШтатномуРасписанию = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДолжностиПодразделения(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.Должность.Доступность = Объект.НоваяПозиция;
	Элементы.Подразделение.Доступность = Объект.НоваяПозиция;
	
	Если Не Объект.НоваяПозиция Тогда
		Объект.Должность = Неопределено;
		Объект.Подразделение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти