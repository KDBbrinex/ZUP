#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

&НаКлиенте
Перем ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда  // форма нового
		ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
		ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", Ложь, Ложь, Ложь);
		ДоступноИзменение = Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеПособийФСС");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьИсключаемыеПериоды = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(Параметры, "ЗаполнитьИсключаемыеПериоды");
	Если ЗаполнитьИсключаемыеПериоды = Истина Тогда
		ЗаполнитьПараметрыОплаты(Истина);
	КонецЕсли;
	
	УстановитьДоступностьПолейВводаНачислений();
	
	Если Параметры.Ключ.Пустая() Тогда // форма нового
		
		Параметры.Свойство("Основание", Основание);
		
		ЗначенияДляЗаполнения = Новый Структура("Ответственный, МесяцРасчета",
			"Объект.Ответственный",
			"Объект.ПериодРегистрации");
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		КонецЕсли;
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
		
		ЗаполнитьДанныеФормыПоОрганизации();
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			СотрудникПриИзмененииНаСервере(Истина);
		КонецЕсли;
		
		УстановитьПроцентДоплатыЗаДниНетрудоспособности();
		
		ЗаполнитьСсылкиНачислений(Истина);
		ОбновитьЭлементыПараметровОплаты();
		ОбновитьИсправленияОтпусков();
		
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
		
		Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Ложь) Тогда
			
			ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
			ПерезаполнитьИРассчитатьДокумент(Ложь);
			ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетДокументаБольничныйЛист", ВремяНачалаЗамера);
			
		Иначе
			ОчиститьРассчитанныеДанные();
			ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Истина;
		КонецЕсли;
		
	Иначе
		
		Если Параметры.Свойство("ВыполнитьПерезаполнениеСведенийОСреднемЗаработке") Тогда
			
			ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Истина;
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Ложь) Тогда
				
				ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
				ПерезаполнитьИРассчитатьДокумент(Ложь);
				ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетДокументаБольничныйЛист", ВремяНачалаЗамера);
				
			Иначе
				ОчиститьРассчитанныеДанные();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтотОбъект, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		Если Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ДокументРассчитан Тогда
			ТолькоПросмотр = Истина;
			ЭтотОбъект.Элементы.НадписьСтаж.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
	
	УстановитьСвойствоРассчитатьЗарплату();
	УстановитьЗаголовокФлажкаРассчитатьЗарплату();
	
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтотОбъект);
	
	ЗагрузитьНастройки();
	
	ОпределитьВариантДоплаты();
	
	ОбновитьФормуПоВариантуДоплаты();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтотОбъект, "Сотрудник");
	КонецЕсли;
	
	ОкончательныйРасчетНДФЛ = Ложь;
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод1);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод2);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод3);
	
	РасчетЗарплатыРасширенныйФормы.УстановитьПризнакНеобходимостиРасчета(ЭтотОбъект);
	НеобходимоПерезаполнитьНачисления = РасчетНеобходимоВыполнить;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.ПолучитьЭЛНИзФСС Тогда
		ПодключитьОбработчикОжидания("ПолучитьЭЛНИзФССПослеОткрытияФормы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Вместо обработчика обновления.
	ТекущийОбъект.ВключитьАвтозаполнениеПериодовОплаты();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	
	ЗаполнениеВыполнено = Ложь;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	Если Не ТолькоПросмотр И Не ТекущийОбъект.Проведен Тогда
		РасчетНеобходимоВыполнить = Истина;
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РасчетНеобходимоВыполнить Тогда
		
		Если НеобходимоПерезаполнитьНачисления Тогда
			ПерезаполнитьИРассчитатьНачисленияНаСервере(Ложь);
		Иначе
			ВыполнитьРасчетНачисленийНаСервере();
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ЗаполнитьТекущийОбъектОбъектомФормы(ТекущийОбъект, Объект);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитыВДанные(ТекущийОбъект);
	Если ЗаполнениеВыполнено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыСреднегоЗаработка", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыЗарплаты", Истина);
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДанныеВРеквизиты();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Объект.ДокументРассчитан Тогда
			ИмяОперации = "ПроведениеДокументаБольничныйЛист";
		Иначе
			ИмяОперации = "ПроведениеДокументаБольничныйЛистКадры";
		КонецЕсли;	
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, ИмяОперации);
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Ссылка", ЭтотОбъект.Объект.Ссылка);
	Оповестить("ДокументБольничныйЛистПослеЗаписи", ПараметрыОповещения, ЭтотОбъект);
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("Запись_БольничныйЛист", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ИмяПроцедурыПослеЗаписи") Тогда
		Обработчик = Новый ОписаниеОповещения(ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи, ЭтотОбъект, ПараметрыЗаписи);
		ПараметрыЗаписи.Удалить("ИмяПроцедурыПослеЗаписи");
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Если ИмяСобытия = "ЗаписаноЗаявлениеСотрудникаНаВыплатуПособия" И Параметр.Основание = Объект.Ссылка Тогда
			УчетПособийОбновитьСведенияОПрямыхВыплатах();
		ИначеЕсли ИмяСобытия = "ПроведеноИсправлениеОтпуска" Тогда
			ПерезаполнитьИРассчитатьНачисленияНаСервере(Истина);
		КонецЕсли;
		ИсправлениеДокументовЗарплатаКадрыКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписанПодчиненныйДокумент" И Источник = Объект.Ссылка Тогда
		УстановитьИнфоНадписьЗамещения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ВладелецФормы = ЭтотОбъект И ЗначениеЗаполнено(ВыбранноеЗначение)
		И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.БольничныйЛист") Тогда
	    Объект.ПервичныйБольничныйЛист = ВыбранноеЗначение;
		УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
		ПервичныйБольничныйЛистПриИзмененииНаСервере();
		НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ОбработатьСообщенияПользователю();
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьОтветственныхЛиц();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ДатаНачалаПриИзмененииНаСервере();
	ПриИзмененииДатыОсвобожденияОтРаботыНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ДатаОкончанияПриИзмененииНаСервере();
	ПриИзмененииДатыОсвобожденияОтРаботыНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяПродолжениемБолезниПриИзменении(Элемент)
	ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ОценкаПроизводительностиКлиент.ЗамерВремени("ИзменениеСотрудникаВФормеДокументаБольничныйЛист");
	СотрудникПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНарушенияРежимаПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДоплачиватьДоСреднегоЗаработкаПриИзменении(Элемент)
	ДоплачиватьДоСреднегоЗаработкаПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДоплачиватьДоДенежногоСодержанияПриИзменении(Элемент)
	ДоплачиватьДоДенежногоСодержанияПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПроцентДоплатыЗаДниНетрудоспособностиПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиПриИзменении(Элемент)
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПериодРегистрацииПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	ПериодРегистрацииПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЗаявлениеСотрудникаНаВыплатуПособияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи, ИмяПроцедурыПослеЗаписи");
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись;
		ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи = "ОткрытьЗаявлениеСотрудникаНаВыплатуПособия";
		Записать(ПараметрыЗаписи);
	Иначе
		ОткрытьЗаявлениеСотрудникаНаВыплатуПособия(Неопределено, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВводДополнительныхДанныхНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИменаРеквизитов = ИменаРеквизитовДляРеестровФСС();
	
	ПараметрыФормы = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ПараметрыФормы.Вставить("СтрокаВозвращаемыхРеквизитов", ИменаРеквизитов);
	ПараметрыФормы.Вставить("НомерЛисткаНетрудоспособности", Объект.НомерЛисткаНетрудоспособности);
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ПослеВводаДанныхЛисткаНетрудоспособности", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводДанныхЛисткаНетрудоспособности", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОплатыПриИзменении(Элемент)
	
	ДатаНачалаОплатыПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОплатыПриИзменении(Элемент)
	
	ДатаОкончанияОплатыПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьЛьготыПриНачисленииПособияПриИзменении(Элемент)
	
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтотОбъект);
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтотОбъект, Объект.ПрименятьЛьготыПриНачисленииПособия);

	Если Не Объект.ПрименятьЛьготыПриНачисленииПособия Тогда
		Объект.ФинансированиеФедеральнымБюджетом = Неопределено;
	КонецЕсли;
	
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ФинансированиеФедеральнымБюджетомПриИзменении(Элемент)
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыБезЛьготПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияБезЛьготПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьЗаработокПредыдущихСтрахователейПриИзменении(Элемент)
	ОбновитьДанныеДляРасчетаСреднего();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДоляНеполногоВремениПриИзменении(Элемент)
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФНаНачалоСобытияПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПособияПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыЗаСчетРаботодателяПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВидНеоплачиваемогоВремениПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаДоплатыПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗамещениеИнфоНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ЦепочкиДокументовКлиент");
		Модуль.ОткрытьФормуЗамещенияПоСсылке(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СлучайУходаЗаБольнымРебенкомПриИзменении(Элемент)
	
	СлучайУходаЗаБольнымРебенкомПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникЗаКоторымОсуществляетсяУход1ПриИзменении(Элемент)
	
	РодственникЗаКоторымОсуществляетсяУход1ПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРодственник1ПриИзменении(Элемент)
	ОбновитьНадписьДнейБолезниПервогоРодственника(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияРодственник1ПриИзменении(Элемент)
	ОбновитьНадписьДнейБолезниПервогоРодственника(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РодственникЗаКоторымОсуществляетсяУход2ПриИзменении(Элемент)
	
	РодственникЗаКоторымОсуществляетсяУход2ПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРодственник2ПриИзменении(Элемент)
	ОбновитьНадписьДнейБолезниВторогоРодственника(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияРодственник2ПриИзменении(Элемент)
	ОбновитьНадписьДнейБолезниВторогоРодственника(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПоловиннойОплатыПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПособиеПриИзменении(Элемент)
	НазначитьПособиеПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	ДатаНачалаСобытияПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоПравилам2010ГодаПриИзменении(Элемент)
	УстановитьДоступностьУчитыватьДанныеСтрахователей(ЭтотОбъект);
	Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичныйЛистокНетрудоспособностиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЕстьФиксированныеДанные(ЭтотОбъект) Тогда
		Оповещение = Новый ОписаниеОповещения("НадписьПервичныйЛистокНетрудоспособностиНажатиеПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Ручные исправления таблиц документа будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		НадписьПервичныйЛистокНетрудоспособностиНажатиеПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичныйЛистокНетрудоспособностиНажатиеПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ПараметрыОтбора.Вставить("ДатаОкончания", НачалоДня(НачалоДня(Объект.ДатаНачала)-1));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ПараметрыОтбора.Вставить("Сотрудник", Объект.Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности) Тогда
		ПараметрыОтбора.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	КонецЕсли;
	
	ПараметрыОткрытияФормыВыбора = Новый Структура;
	ПараметрыОткрытияФормыВыбора.Вставить("РежимВыбораПервичногоБольничногоЛиста", Истина);
	Если ПараметрыОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", ПараметрыОтбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ПервичныйБольничныйЛист", Объект.ПервичныйБольничныйЛист);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.БольничныйЛист.ФормаВыбора", ПараметрыОткрытияФормыВыбора, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтажНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЕстьФиксированныеДанные(ЭтотОбъект) Тогда
		Оповещение = Новый ОписаниеОповещения("НадписьСтажНажатиеПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Ручные исправления таблиц документа будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		НадписьСтажНажатиеПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтажНажатиеПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Текст = НСтр("ru = 'Не выбран сотрудник'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст, , "Объект.Сотрудник", ,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Текст = НСтр("ru = 'Не заполнена дата начала освобождения от работы'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст, , "Объект.ДатаНачала", ,Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеВидыСтажа = ВидыСтажаВЛисткеНетрудоспособности();
	
	ПараметрыФормы = КадровыйУчетРасширенныйКлиент.ПараметрыФормыРедактированияСтажей();
	ПараметрыФормы.ТолькоПросмотр          = ТолькоПросмотр;
	ПараметрыФормы.Сотрудник               = Объект.Сотрудник;
	ПараметрыФормы.ДатаСведений            = Объект.ДатаНачалаСобытия;
	ПараметрыФормы.ВидыСтажа               = Новый ФиксированныйМассив(ЗапрашиваемыеВидыСтажа.ВидыСтажа);
	ПараметрыФормы.НеобязательныеВидыСтажа = Новый ФиксированноеСоответствие(ЗапрашиваемыеВидыСтажа.НеобязательныеВидыСтажа);
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ПослеИзмененияСведенийОСтажеСотрудника", ЭтотОбъект);
	
	КадровыйУчетРасширенныйКлиент.ОткрытьФормуРедактированияСтажей(ПараметрыФормы, ОбработчикВыбора);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗарплатуПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьВидимостьПолейНормыВремени(
		ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Объект.РассчитатьЗарплату);
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДоходПолученНаТерриторииРФПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДоначислитьЗарплатуПриНеобходимостиПриИзменении(Элемент)
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ИсправленныеОтпускаСсылкаНажатие(Элемент)
	Если ИсправленныеОтпуска.Количество() = 1 Тогда
		ПараметрыФормы = Новый Структура("Ключ", ИсправленныеОтпуска[0].Значение);
		ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", ПараметрыФормы);
	Иначе
		Список = Новый СписокЗначений;
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИсправленногоОтпускаИзМеню", ЭтотОбъект, Параметры);
		Для Каждого ИсправленныйОтпуск Из ИсправленныеОтпуска Цикл
			Список.Добавить(ИсправленныйОтпуск.Значение, ИсправленныйОтпуск.Значение);
		КонецЦикла;
		ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ИсправленныеОтпускаСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИсправленногоОтпускаИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", ВыбранныйЭлемент.Значение);
		ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяРассчитатьПродлениеОтпускаСсылкаНажатие(Элемент)
	Если ОтпускаТребующиеИсправленияБезРасчета.Количество() = 1 Тогда
		ПараметрыФормы = Новый Структура("Ключ", ОтпускаТребующиеИсправленияБезРасчета[0].Значение);
		ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", ПараметрыФормы);
	Иначе
		Список = Новый СписокЗначений;
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИсправленногоОтпускаИзМеню", ЭтотОбъект, Параметры);
		Для Каждого ОтпускБезРасчета Из ОтпускаТребующиеИсправленияБезРасчета Цикл
			Список.Добавить(ОтпускБезРасчета.Значение, ОтпускБезРасчета.Значение);
		КонецЦикла;
		ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ТребуетсяРассчитатьПродлениеОтпускаСсылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтпускаТребующиеИсправленияСРасчетомСсылкаНажатие(Элемент)
	Если ОтпускаТребующиеИсправленияСРасчетом.Количество() = 1 Тогда
		СоздатьИсправлениеОтпуска(ОтпускаТребующиеИсправленияСРасчетом[0].Значение);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораОтпускаИзМеню", ЭтотОбъект, Параметры);
		ПоказатьВыборИзМеню(Оповещение, ОтпускаТребующиеИсправленияСРасчетом, Элементы.ОтпускаТребующиеИсправленияСРасчетомСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОтпускаИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		СоздатьИсправлениеОтпуска(ВыбранныйЭлемент.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КарантинПоКоронавирусуПриИзменении(Элемент)
	КарантинПоКоронавирусуПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УсловияИсчисленияКод1ПриИзменении(Элемент)
	УсловияИсчисленияКодПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УсловияИсчисленияКод2ПриИзменении(Элемент)
	УсловияИсчисленияКодПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УсловияИсчисленияКод3ПриИзменении(Элемент)
	УсловияИсчисленияКодПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсключаемыеПериодыВШапкеНадписьНажатие(Элемент)
	ИзменитьИсключаемыеПериоды(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИсключаемыеПериодыНадписьНажатие(Элемент)
	ИзменитьИсключаемыеПериоды(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПересчитатьОбработкаНавигационнойСсылки(Элемент, Ссылка, СтандартнаяОбработка)
	Если Ссылка = "Исправить" Тогда
		СтандартнаяОбработка = Ложь;
		ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(ЭтотОбъект, , Новый Структура("ЗаполнитьИсключаемыеПериоды", Истина));
	ИначеЕсли Ссылка = "ЗаполнитьИсключаемыеПериоды" Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьИсключаемыеПериоды(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПересчитатьВШапкеОбработкаНавигационнойСсылки(Элемент, Ссылка, СтандартнаяОбработка)
	ТребуетсяПересчитатьОбработкаНавигационнойСсылки(Элемент, Ссылка, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "Начисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтотОбъект, ОписаниеТаблицыНачислений, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыНачислений, Ложь, Истина);
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненностьДанныхИнформационныйТекстОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетСреднегоЗаработкаКлиент.ПоказатьПричиныПерерасчетаСреднегоЗаработка(Объект.Ссылка,
		СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияПерерасчет

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтотОбъект, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "НачисленияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	РасчетЗарплатыРасширенныйКлиент.ПередНачаломДобавленияСтрокиПерерасчета(Элемент, Отказ, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(Элемент, Отказ);
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтотОбъект, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыВидовРасчета, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетРезультатПриИзменении(Элемент)
	ОбновитьПерерасчетИтог(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыУправленческиеНачисления

&НаКлиенте
Процедура УправленческиеНачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "УправленческиеНачисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "УправленческиеНачисления", Элементы.УправленческиеНачисления.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
			ИзмененныеДанные,
			"Начисления",
			Объект.ФизическоеЛицо,
			ТекущиеДанные.Сотрудник,
			ТекущиеДанные.Начисление);
	
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриОкончанииРедактированияСтрокиНачисленияЗарплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПослеУдаления(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПослеУдаленияСтрокиНачисленияЗарплаты(ЭтотОбъект, Объект.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияНачислениеПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииНачисленияСтрокиНачисленияЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияДатаНачалаПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииДатыНачалаСтрокиНачисленияЗарплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияДатаОкончанияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииДатыОкончанияСтрокиНачисленияЗарплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПодробно(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриНажатииКнопкиПоказатьПодробностиРасчета(ЭтотОбъект, Элементы.УправленческиеНачисленияПодробно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УправленческиеНачисленияОтменитьИсправление(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриОтменеИсправленияНачисленияЗарплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаФСС(ПараметрыРедактированияСреднегоЗаработка(), ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Ложь;
	ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка,Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда) Экспорт
	
	ОчиститьСообщения();
	РассчитатьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеУдержаний(Команда)
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ПослеИзмененияСведенийОбУдержаниях", ЭтотОбъект);
	
	РасчетЗарплатыРасширенныйКлиент.ПодробнееОРасчетеУдержаний(Объект, "БольничныйЛист", ОписаниеДокумента(ЭтотОбъект), ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ПослеИзмененияСведенийОРасчетеНДФЛ", ЭтотОбъект);
	
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект.Организация, ЭтотОбъект, Объект.ПериодРегистрации, Объект.Сотрудник, , ОбработчикВыбора);
	
КонецПроцедуры

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДенежноеСодержание(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);		
		СтруктураОбъекта = ПодготовитьСтруктуруОбъектаДляРасчетаДенежногоСодержания();
		
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(СтруктураОбъекта, "БольничныйЛист","ВременнаяНетрудоспособность", ЭтаФорма, Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КорректировкаВыплатыПодробно(Команда)
	
	ПараметрыФормы = УчетНДФЛФормыКлиент.ПараметрыРедактированияКорректировокВыплаты();
	ПараметрыФормы.ТолькоПросмотр = ТолькоПросмотр;
	ПараметрыФормы.Организация = Объект.Организация;
	ПараметрыФормы.МесяцНачисления = Объект.ПериодРегистрации;
	ПараметрыФормы.СотрудникФизическоеЛицо = Объект.Сотрудник;
	ПараметрыФормы.ДанныеКорректировокВыплаты = ДанныеКорректировокВыплаты();
	
	Обработчик = Новый ОписаниеОповещения("ПриОкончанииРедактированияКорректировокВыплаты", ЭтотОбъект);
	
	УчетНДФЛФормыКлиент.НачатьРедактированиеКорректировокВыплаты(ПараметрыФормы, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда) Экспорт
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзФСС(Команда)
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана организация.'"), , "Объект.Организация");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран сотрудник.'"), , "Объект.Сотрудник");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен номер листка нетрудоспособности.'"), , "Объект.НомерЛисткаНетрудоспособности");
		Возврат;
	КонецЕсли;
	
	// Формирование параметров запроса к сервису получения ЭЛН.
	ЗапросДляПолученияЭЛН = ВыгрузитьЗапросДляПолученияЭЛН();
	Если ЗапросДляПолученияЭЛН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеИзФССЗавершение", ЭтотОбъект);
	
	// Подписание и отправка запроса, расшифровка ответа.
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьДанныеЭЛНИзФСС(Оповещение, ЗапросДляПолученияЭЛН);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьИзФайлаПослеВыбораФайла", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Фильтр      = НСтр("ru = 'Файлы XML (*.xml)|*.xml|Все файлы (*.*)|*'");
	ПараметрыЗагрузки.Диалог.Заголовок   = НСтр("ru = 'Выберите файл ЭЛН, полученный из ФСС'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
КонецПроцедуры

#Область Отпуска

&НаКлиенте
Процедура ИзменитьИсключаемыеПериоды(Команда)
	Если Не ПроверкиБЗККлиентСервер.ПериодСоответствуетТребованиям(
			ЭтотОбъект,
			"Объект",
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'нетрудоспособности'")) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = ПараметрыВводаИсключаемыхПериодов();
	Обработчик     = Новый ОписаниеОповещения("ПослеВводаИсключаемыхПериодов", ЭтотОбъект);
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ИсключаемыеПериоды", ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсключаемыеПериоды(Команда)
	ЗаполнитьИсключаемыеПериодыНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсключаемыеПериоды(Команда)
	ОчиститьИсключаемыеПериодыНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруОбъектаДляРасчетаДенежногоСодержания() 
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтаФорма);
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Ссылка", 				Объект.Ссылка);
	ОбъектСтруктура.Вставить("Сотрудник", 			Объект.Сотрудник);
	ОбъектСтруктура.Вставить("Организация", 		Объект.Организация);
	ОбъектСтруктура.Вставить("ПериодРегистрации", 	Объект.ПериодРегистрации);	
	ОбъектСтруктура.Вставить("ДатаНачалаСобытия",	Объект.ДатаНачалаСобытия);	
	ОбъектСтруктура.Вставить("ДенежноеСодержание", 	Объект.ДенежноеСодержание);
	ОбъектСтруктура.Вставить("ДенежноеСодержаниеФактическиеНачисления", 		Объект.ДенежноеСодержаниеФактическиеНачисления);
	ОбъектСтруктура.Вставить("КоэффициентыРаспределенияДенежногоСодержания", 	Объект.КоэффициентыРаспределенияДенежногоСодержания);
	ОбъектСтруктура.Вставить("ПериодРасчетаСохраняемогоСодержанияНачало", 		Объект.ПериодРасчетаСреднегоЗаработкаНачало);
	ОбъектСтруктура.Вставить("ПериодРасчетаСохраняемогоСодержанияОкончание", 	Объект.ПериодРасчетаСреднегоЗаработкаОкончание);
	ОбъектСтруктура.Вставить("ФиксПериодРасчетаСохраняемогоСодержания", 		Объект.ФиксПериодРасчетаСреднегоЗаработка);	
	ОбъектСтруктура.Вставить("СохраняемоеДенежноеСодержание", 			Объект.СохраняемоеДенежноеСодержание);		
	ОбъектСтруктура.Вставить("НазначенияРасчетаДенежногоСодержания", 	ЭтаФорма.НазначенияРасчетаДенежногоСодержания);		
	ОбъектСтруктура.Вставить("УникальныйИдентификатор",			ЭтаФорма.УникальныйИдентификатор);	
	ОбъектСтруктура.Вставить("ПериодРасчета", 		Объект[ОписаниеДокумента.МесяцНачисленияИмя]);
	
	
	Возврат ОбъектСтруктура;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ПодписиДокументов

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти

#Область ИсправлениеДокументов

&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Сторнировать(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Сторнировать(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКСторно(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКСторно(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПорядокВыплатыЗарплаты

&НаКлиенте
Процедура Подключаемый_ПорядокВыплатыПриИзменении(Элемент)
	
	РассчитатьСПерезаполнением = Неопределено;
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	
	БылоРассчитатьЗарплату = Объект.РассчитатьЗарплату;
	
	ПорядокВыплатыПриИзмененииНаСервере();
	
	Если Объект.РассчитатьЗарплату И БылоРассчитатьЗарплату <> Объект.РассчитатьЗарплату Тогда
		НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	Иначе
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ПланируемаяДатаВыплатыПриИзменении(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеПланируемойДатаВыплаты(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ=Неопределено Или Ответ.Значение<>Истина Тогда
		Если ЗначениеЗаполнено(ЭтаФорма.РасчетнаяПланируемаяДатаВыплаты) Тогда
			Объект.ПланируемаяДатаВыплаты = ЭтаФорма.РасчетнаяПланируемаяДатаВыплаты;
		КонецЕсли;
	КонецЕсли;
	
	// Старое значение планируемой даты выплаты неизвестно, проверить была ли она реально изменена или нет невозможно.
	// Поэтому необходимо в любом случае выполнить расчет.
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

#КонецОбласти

#Область МногофункциональныеДокументы

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	ЕстьПраваНаРедактированиеКадровыхДанных = 
		ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных
		И ПравоДоступа("Редактирование", Метаданные.Документы.БольничныйЛист.Реквизиты.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументРассчитанПриИзменении(Элемент)
	ДокументРассчитанПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументРассчитанПриИзмененииНаСервере()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтотОбъект, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДокументРассчитан()
	Если ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
		Объект.ДокументРассчитан = Истина;
	КонецЕсли;
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтотОбъект, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

#КонецОбласти

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтотОбъект;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтотОбъект, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтотОбъект, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	Описания.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
	Возврат Описания;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПересечениеПериодовОтсутствияНаКлиенте(Отказ, ПараметрыЗаписи, ЗакрытьПослеЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьПересечениеПериодовОтсутствияНаСервере();
	
	ДанныеСотрудника = РезультатПроверки.ДанныеСотрудников.Получить(Объект.Сотрудник);
	Если ДанныеСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПроверки.Отказ
		И ТипЗнч(ДанныеСотрудника.Регистратор) <> Тип("ДокументСсылка.ПрогулНеявка")
		И ТипЗнч(ДанныеСотрудника.Регистратор) <> Тип("ДокументСсылка.ПрогулНеявкаСписком")
		И ТипЗнч(ДанныеСотрудника.Регистратор) <> Тип("ДокументСсылка.Отпуск") Тогда
			
		ТекстСообщения = НСтр("ru = 'На период %1 сотруднику уже зарегистрирован больничный документом %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСотрудника.ПредставлениеПериода, ДанныеСотрудника.Регистратор);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
		
	ИначеЕсли ТипЗнч(ДанныеСотрудника.Регистратор) = Тип("ДокументСсылка.Отпуск") 
		И КонтролироватьПересечениеСОтпусками Тогда 
		
		ОбновитьИсправленияОтпусков();
		Возврат;
		
	КонецЕсли;
	
	Отказ = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	
	ТекстВопроса = ?(ДанныеСотрудника.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.Увольнение"),
		НСтр("ru = 'Сотрудник был уволен %1 (%2). Провести документ?'"),
		НСтр("ru = 'На период %1 сотруднику уже зарегистрировано отсутствие документом %2. Провести документ?'"));
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеСотрудника.ПредставлениеПериода, ДанныеСотрудника.Регистратор);
		
	Оповещение = Новый ОписаниеОповещения("ПроверитьПересечениеПериодовОтсутствияНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПересечениеПериодовОтсутствияНаКлиентеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
	
	Если Записать(ПараметрыЗаписи) И ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПересечениеПериодовОтсутствияНаСервере()
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо");
	ДругиеСотрудники = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(
		ФизическоеЛицо, Объект.Организация, Объект.Сотрудник, Объект.ДатаНачала, Объект.ДатаОкончания);
	Кэш = Новый Соответствие;
	
	ДанныеСостоянийСотрудников = Документы.БольничныйЛист.ДанныеСостоянийСотрудников(Объект, ДругиеСотрудники, Кэш);
	
	Возврат СостоянияСотрудников.ПроверитьПересечениеПериодовОтсутствия(
		ДанныеСостоянийСотрудников,
		Объект.Ссылка,
		?(ЗначениеЗаполнено(Объект.ИсправленныйДокумент), Объект.ИсправленныйДокумент, Основание));
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	// Если есть пересекающиеся отпуска, то не задавать вопрос о необходимости расчета пользователю
	РассчитыватьБезусловно = (ОтпускаТребующиеИсправленияСРасчетом.Количество() > 0 Или ОтпускаТребующиеИсправленияБезРасчета.Количество() > 0);
	
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьРасчетСотрудникаПередЗаписьюДокумента(
		ЭтотОбъект, "ЗаписатьНаКлиентеЗавершение", ДополнительныеПараметры, РегистрацияНачисленийДоступна, 
		ВыполнятьПредварительныйРасчетДокумента, РассчитыватьБезусловно);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ЗакрытьПослеЗаписи = ДополнительныеПараметры.ЗакрытьПослеЗаписи;
		
		Отказ = Ложь;
		ПроверитьПересечениеПериодовОтсутствияНаКлиенте(Отказ, ПараметрыЗаписи, ЗакрытьПослеЗаписи);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
		Если Записать(ПараметрыЗаписи) И ЗакрытьПослеЗаписи Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПериодРегистрации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Организация"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Сотрудник"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачала"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаОкончания"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ОграничениеПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ЯвляетсяПродолжениемБолезни"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНарушенияРежима"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДоплачиватьДоСреднегоЗаработка"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПроцентДоплатыЗаДниНетрудоспособности"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПричинаНетрудоспособности"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПорядокВыплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачалаОплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаОкончанияОплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПрименятьЛьготыПриНачисленииПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ФинансированиеФедеральнымБюджетом"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПроцентОплатыБезЛьгот"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ОграничениеПособияБезЛьгот"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "УчитыватьЗаработокПредыдущихСтрахователей"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПроцентОплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДоляНеполногоВремени"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "РайонныйКоэффициентРФНаНачалоСобытия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидОплатыПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидНеоплачиваемогоВремени"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаДоплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "СлучайУходаЗаБольнымРебенком"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачалаПоловиннойОплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "НазначитьПособие"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачалаСобытия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "РасчетПоПравилам2010Года"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "РассчитатьЗарплату"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "НадписьПервичныйЛистокНетрудоспособности"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "НадписьСтаж"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДоплачиватьДоДенежногоСодержания"));
	КонецЕсли;
	
	Для каждого ОписаниеЭлемента Из Массив Цикл
		ОписаниеЭлемента.Вставить("ПредупреждениеПриРедактировании", ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом());
	КонецЦикла;
	
	Возврат Массив
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ?(ЕстьФиксированныеДанные(Форма), ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.Авто));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФиксированныеДанные(Форма)
	Если Не Форма.РегистрацияНачисленийДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокументЗаполнен = ЗначениеЗаполнено(Форма.Объект.ИсправленныйДокумент);
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен);
КонецФункции

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	НачатьИнициализациюФормы();
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтотОбъект);
	ЗавершитьИнициализациюФормы();
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы()
	
	РасчетЗарплатыРасширенныйФормы.ПодготовитьФормуДляПредварительногоРасчетаНачислений(ЭтотОбъект);
	
	// Устанавливаем значения реквизитов формы.
	ДоступноИзменение = Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеПособийФСС");
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	УстановитьДоступностьРегистрацииНачислений();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьРеквизитФормыНазначенияРасчетаДенежногоСодержания(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнитьФорму(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы()

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнитьФорму(Ложь);
	ДополнитьФорму();
	
	ПрочитатьДатуУвольненияСотрудника();
	
	УстановитьДоступностьПорядкаВыплаты();
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты();
	УстановитьИнфонадписьРасчетаСреднегоЗаработка();
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(ЭтотОбъект);
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(ЭтотОбъект);
	УстановитьДоступностьРассчитыватьПоПравилам2010(ЭтотОбъект);
	УстановитьДоступностьУчитыватьДанныеСтрахователей(ЭтотОбъект);
	
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтотОбъект);
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтотОбъект, Объект.ПрименятьЛьготыПриНачисленииПособия);

	// чтение данных
	ДанныеВРеквизиты();
	
	ДанныеОСтажеСотрудника = ДанныеОСтажеСотрудника();
	Если ЗначениеЗаполнено(ДанныеОСтажеСотрудника) Тогда
		ДляСотрудникаВведенСтраховойСтаж = ДанныеОСтажеСотрудника.ДляСотрудникаВведенСтраховойСтаж;
	КонецЕсли;
	
	ОбновитьНадписьСтаж(ЭтотОбъект);
	УстановитьВидимостьПредупрежденияОНезаполненномСтаже();
	
	ВызовИзПриЧтенииНаСервере = (Не Объект.Ссылка.Пустая());
	Если ВызовИзПриЧтенииНаСервере Тогда
		ЗаполнитьСсылкиНачислений(Истина);
	КонецЕсли;
	
	СторнироватьОтпускВБольничномПриПересеченииПериодов = ПолучитьФункциональнуюОпцию("СторнироватьОтпускВБольничномПриПересеченииПериодов");
	КонтролироватьПересечениеСОтпусками = Объект.НеИспользуетсяСторнированиеОтпуска И Не СторнироватьОтпускВБольничномПриПересеченииПериодов;
		
	УстановитьВидимостьПерерасчетов();
	УстановитьВидимостьРасчетныхПолей();
	УстановитьДоступностьКнопокЭЛН();
	УстановитьВидимостьПодсказкаОсобыхУсловийИсчисления();
	
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	ОбновитьПерерасчетИтог(ЭтотОбъект);
	   	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	ОбновитьЭлементыПараметровОплаты();
	ОбновитьИсправленияОтпусков();
	УстановитьДоступностьПолейВводаНачислений();
	ОбновитьНадписьДнейБолезниПервогоРодственника(ЭтотОбъект);
	ОбновитьНадписьДнейБолезниВторогоРодственника(ЭтотОбъект);
	ОбновитьОстаткиОплачиваемыхДнейПоУходуЗаРодственниками();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриЗавершенииИнициализацииФормыДокументаОплатыТруда(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Объект.РассчитатьЗарплату);
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	УчетПособийОбновитьСведенияОПрямыхВыплатах();
	
	ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтотОбъект, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		// Создание элементов.
		ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтотОбъект, НСтр("ru='Расчет утвердил'"), , , "Рассчитал");
		ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
		КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	Иначе
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыПерерасчетовНулевыеСторно(), "Начисления", , РегистрацияНачисленийДоступна,, Ложь, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыУдержаний(), "Удержания", , Ложь, , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтотОбъект, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), "Начисления", , Ложь, , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура(
			"КонтролируемыеПоля,
			|ДобавлятьЭлементыФормы,
			|ДобавлятьРеквизитыФормы,
			|ОтложенноеИзменение");
		ДополнительныеПараметры.ДобавлятьЭлементыФормы = ДобавлятьЭлементыФормы;
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы = ДобавлятьРеквизитыФормы;
		ДополнительныеПараметры.ОтложенноеИзменение = ОтложенноеИзменение;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ПриДополненииФормыДокументаБольничныйЛист(ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
			
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(
			ЭтотОбъект, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(
			ЭтотОбъект, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
			ЭтотОбъект, , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЦепочкиДокументовФормы");
			Модуль.ДополнитьФормуДокументаЭлементамиЗамещения(ЭтотОбъект, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭЛН

&НаКлиенте
Процедура ПолучитьЭЛНИзФССПослеОткрытияФормы()
	ПолучитьИзФСС(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменВыполненУспешно = ЗагрузитьОтветСервисаФСС(Результат.АдресРасшифрованногоОтветаSOAP, Ложь);
	Если ОбменВыполненУспешно Тогда
		ПодписьПрошлаПроверку = (Результат.ПодписьВалидна <> Ложь);
		Если ПодписьПрошлаПроверку Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
			ПараметрыЗаписи.Вставить("ОчиститьСообщения", Ложь);
			Записать(ПараметрыЗаписи);
		КонецЕсли;
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружены данные ЛН №%1.'"),
			Объект.НомерЛисткаНетрудоспособности);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные ЭЛН загружены из ФСС'"), , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗапросДляПолученияЭЛН()
	Возврат ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляПолученияЭЛН(Объект);
КонецФункции

&НаСервере
Функция ЗагрузитьОтветСервисаФСС(Знач АдресРасшифрованногоОтветаSOAP, Знач ЗагрузкаИзФайла)
	Документ = РеквизитФормыВЗначение("Объект");
	
	РезультатОбмена = ОбменЛисткамиНетрудоспособностиФСС.ЗагрузитьОтветСервисаФСС(
		Документ,
		"getPrivateLNData",
		АдресРасшифрованногоОтветаSOAP,
		ЗагрузкаИзФайла);
	ОбменВыполненУспешно = Не РезультатОбмена.Отказ;
	
	Если ОбменВыполненУспешно Тогда
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ОбновитьФормуПослеЗагрузкиЭЛН(ЗагрузкаИзФайла);
		Модифицированность = Истина;
	КонецЕсли;
	
	Возврат ОбменВыполненУспешно;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаПослеВыбораФайла(ОписаниеФайла, ПустойПараметр) Экспорт
	Если ОписаниеФайла = Неопределено Или Не ЗначениеЗаполнено(ОписаниеФайла.Хранение) Тогда
		Возврат;
	КонецЕсли;
	ОчиститьСообщения();
	
	Попытка
		ФайлЗагружен = ЗагрузитьОтветСервисаФСС(ОписаниеФайла.Хранение, Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = СтрШаблон(
			НСтр("ru = 'При загрузке ЭЛН из файла возникла ошибка: ""%1"".'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Подробно = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки файла ""%1"":
				|%2
				|
				|Вероятно, файл не соответствует спецификации ответа веб-сервиса ФСС ЭЛН.'"), 
			ОписаниеФайла.Имя,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ИнформированиеПользователяКлиент.Предупредить(Кратко, Подробно, НСтр("ru = 'Ошибка загрузки ЭЛН из файла'"));
		ФайлЗагружен = Ложь;
	КонецПопытки;
	Если ФайлЗагружен Тогда
		Записать(Новый Структура("ОчиститьСообщения", Ложь));
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружены данные ЛН №%1.'"),
			Объект.НомерЛисткаНетрудоспособности);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные ЭЛН загружены из ФСС'"), , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПослеЗагрузкиЭЛН(ИзмененСотрудник)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИзмененСотрудник Тогда
		ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
		
		ОпределитьВариантДоплаты();
		
		ОбновитьФормуПоВариантуДоплаты();
		
		ОчиститьСсылкиНачислений();
		ОчиститьДанныеСреднегоЗаработка();
		
		Объект.ДенежноеСодержание.Очистить();
		Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
		
		ЗаполнитьПоКадровымДаннымСотрудника();
		
		УстановитьИспользованиеЗаработкаПредыдущихСтрахователей();
		ПрочитатьДатуУвольненияСотрудника();
		УстановитьПорядокВыплатыУволенному();
		УстановитьДоступностьПорядкаВыплаты();
		УстановитьВидимостьУдержаний();
		УстановитьСвойствоРассчитатьЗарплату();
		ЗаполнитьСтаж();
		
		ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
		
		УстановитьУсловияИсчисленияДляПилотногоПроекта();
	КонецЕсли;
	
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	ДатаНачалаПриИзмененииНаСервере();
	ДатаОкончанияПриИзмененииНаСервере();
	ПриИзмененииДатыОсвобожденияОтРаботыНаСервере();
	ПервичныйБольничныйЛистПриИзмененииНаСервере();
	РодственникЗаКоторымОсуществляетсяУход1ПриИзмененииНаСервере();
	РодственникЗаКоторымОсуществляетсяУход2ПриИзмененииНаСервере();
	ПерезаполнитьИРассчитатьНачисленияНаСервере(Ложь);
	
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	ОбновитьЭлементыПараметровОплаты();
	УстановитьДоступностьПолейВводаНачислений();
	УчетПособийОбновитьСведенияОПрямыхВыплатах();
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПериодРегистрацииПриИзмененииНаСервере()
	
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	
	УстановитьВидимостьПерерасчетов();
	
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	
	УстановитьСвойствоРассчитатьЗарплату();
	
	УстановитьЗаголовокФлажкаРассчитатьЗарплату();
	
	УчетПособийОбновитьСведенияОПрямыхВыплатах();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьФункциональныеОпцииФормы();
	
	Объект.ДенежноеСодержание.Очистить();
	Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
	УчетПособийОбновитьСведенияОПрямыхВыплатах();
	
	РасчетЗарплатыРасширенныйФормы.ОбновитьПлановыеДатыВыплатыПоОрганизации(ЭтотОбъект);
	
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	
	УстановитьПроцентДоплатыЗаДниНетрудоспособности();
	
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтотОбъект, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), РегистрацияНачисленийДоступна);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере(ПервичнаяИнициализацияФормы = Ложь)
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ОпределитьВариантДоплаты();
	
	ОбновитьФормуПоВариантуДоплаты();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПервичнаяИнициализацияФормы Тогда
		ОчиститьСсылкиНачислений();
		ОчиститьДанныеСреднегоЗаработка();
	КонецЕсли;
	
	Объект.ДенежноеСодержание.Очистить();
	Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
	
	Объект.РодственникЗаКоторымОсуществляетсяУход1 = Неопределено;
	Объект.РодственникЗаКоторымОсуществляетсяУход2 = Неопределено;
	
	ЗаполнитьПоКадровымДаннымСотрудника();
	
	УстановитьИспользованиеЗаработкаПредыдущихСтрахователей();
	ПрочитатьДатуУвольненияСотрудника();
	УстановитьПорядокВыплатыУволенному();
	УстановитьДоступностьПорядкаВыплаты();
	УстановитьВидимостьУдержаний();
	УстановитьСвойствоРассчитатьЗарплату();
	ЗаполнитьСтаж();
	
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	
КонецПроцедуры

&НаСервере
Процедура ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере()
	
	УстановитьСвойствоРассчитатьЗарплату();
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
		УстановитьПривилегированныйРежим(Истина);
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
		Объект.ПервичныйБольничныйЛист = Неопределено;
		ЗаполнитьПоКадровымДаннымСотрудника();
		УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(ЭтотОбъект);
		ОчиститьДанныеСреднегоЗаработка();
	КонецЕсли;
	
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПричинаНетрудоспособностиПриИзмененииНаСервере()
	
	Если Не ОбменЛисткамиНетрудоспособностиФСС.ЭтоКарантинныйЭЛН(
			Объект.ПричинаНетрудоспособности,
			Объект.НомерЛисткаНетрудоспособности) Тогда
		Объект.ЭЛНКарантинПоКоронавирусу = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	
	ОбновитьОстаткиОплачиваемыхДнейПоУходуЗаРодственниками();
	
	ЗаполнитьПараметрыОплаты(Истина);
	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	ОбновитьЭлементыПараметровОплаты();
	
	УстановитьДоступностьРассчитыватьПоПравилам2010(ЭтотОбъект);
	
	УстановитьДоступностьУчитыватьДанныеСтрахователей(ЭтотОбъект);
	
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	
	УстановитьСвойствоРассчитатьЗарплату();
	
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	
	Если Не Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Объект.ОсвобождатьСтавку = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьПолейВводаНачислений();
	
	// Ссылки начислений и средний заработок заполняются при расчете начислений.
	Если ИспользуетсяРасчетЗарплаты Тогда
		ОчиститьСсылкиНачислений();
		
		Объект.СреднийЗаработокФСС.Очистить();
		Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
		Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Объект.ДатаНачалаОплаты = Объект.ДатаНачала;
	КонецЕсли;
	
	Если ИспользуетсяРасчетЗарплаты
		И ЗначениеЗаполнено(Объект.ДатаОкончания)
		И Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
		ДатаОкончанияПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ЭтоУходЗаРодственником() Тогда
		Если ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход1) Тогда
			Объект.ДатаНачалаРодственник1 = Объект.ДатаНачала;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход2) Тогда
			Объект.ДатаНачалаРодственник2 = Объект.ДатаНачала;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
		ЗаполнитьДатуНачалаПоловиннойОплаты();
		УстановитьДоступностьРассчитыватьПоПравилам2010(ЭтотОбъект);
		ЗаполнитьПоКадровымДаннымСотрудника();
		ЗаполнитьСтаж();
		ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьВидимостьПерерасчетов();
	УстановитьПорядокВыплатыУволенному();
	УстановитьДоступностьПорядкаВыплаты();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере()
	
	Если ЭтоУходЗаРодственником() Тогда
		Если ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход1) Тогда
			Объект.ДатаОкончанияРодственник1 = Объект.ДатаОкончания;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход2) Тогда
			Объект.ДатаОкончанияРодственник2 = Объект.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаСобытияПриИзмененииНаСервере()
	
	УстановитьДоступностьРассчитыватьПоПравилам2010(ЭтотОбъект);
	
	УстановитьДоступностьПолейВводаНачислений();
	
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	// Обновляем период расчета среднего заработка.
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	УстановитьСвойствоРассчитатьЗарплату();
	
	ОпределитьВариантДоплаты();
	ОбновитьФормуПоВариантуДоплаты();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьПособиеПриИзмененииНаСервере()
	
	ЗаполнитьСсылкиНачислений(Ложь);
	
	Если Объект.НазначитьПособие Тогда
		// Если флажок "Оплачивать" включен пользователем, тогда:
		// - Выполняется полное заполнение;
		// - Если после заполнения флажок "Оплачивать" оказался отключен, то он принудительно снова включается.
		ЗаполнитьПараметрыОплаты(Истина, Объект.НазначитьПособие);
	Иначе
		// Если флажок "Оплачивать" отключен пользователем, тогда период оплаты очищается,
		// а таблица исключаемых периодов НЕ очищается, поскольку она может содержать причины неоплаты пособия.
		Объект.АвтозаполнениеПериодовОплаты = Ложь;
		Объект.ДатаНачалаОплаты    = Неопределено;
		Объект.ДатаОкончанияОплаты = Неопределено;
		Объект.ДнейОплаты          = 0;
		ОбновитьЭлементыПараметровОплаты();
	КонецЕсли;
	
	УстановитьДоступностьПолейВводаНачислений();
	
КонецПроцедуры

&НаСервере
Процедура СлучайУходаЗаБольнымРебенкомПриИзмененииНаСервере()
	
	ОбновитьОстаткиОплачиваемыхДнейПоУходуЗаРодственниками();
	
	ЗаполнитьПараметрыОплаты(Истина);
	УстановитьДоступностьПолейВводаНачислений();
	
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	
КонецПроцедуры

&НаСервере
Процедура РодственникЗаКоторымОсуществляетсяУход1ПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход1) Тогда
		
		Объект.ДатаНачалаРодственник1 = Неопределено;
		Объект.ДатаОкончанияРодственник1 = Неопределено;
		НадписьДнейБолезниПервыйРодственник = "";
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаНачалаРодственник1)
		И Не ЗначениеЗаполнено(Объект.ДатаОкончанияРодственник1) Тогда
		
		Объект.ДатаНачалаРодственник1 = Объект.ДатаНачала;
		Объект.ДатаОкончанияРодственник1 = Объект.ДатаОкончания;
		
		ОбновитьНадписьДнейБолезниПервогоРодственника(ЭтотОбъект);
		
	КонецЕсли;
	
	ОбновитьОстаткиОплачиваемыхДнейПоУходуЗаРодственниками(Истина, Ложь);
	
	ЗаполнитьПараметрыОплаты(Истина);
	УстановитьДоступностьПолейВводаНачислений();
	
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	
КонецПроцедуры

&НаСервере
Процедура РодственникЗаКоторымОсуществляетсяУход2ПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход2) Тогда
		
		Объект.ДатаНачалаРодственник2 = Неопределено;
		Объект.ДатаОкончанияРодственник2 = Неопределено;
		НадписьДнейБолезниВторойРодственник = "";
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаНачалаРодственник2)
		И Не ЗначениеЗаполнено(Объект.ДатаОкончанияРодственник2) Тогда
		
		Объект.ДатаНачалаРодственник2 = Объект.ДатаНачала;
		Объект.ДатаОкончанияРодственник2 = Объект.ДатаОкончания;
		
		ОбновитьНадписьДнейБолезниВторогоРодственника(ЭтотОбъект);
		
	КонецЕсли;
	
	ОбновитьОстаткиОплачиваемыхДнейПоУходуЗаРодственниками(Ложь, Истина);
	
	ЗаполнитьПараметрыОплаты(Истина);
	УстановитьДоступностьПолейВводаНачислений();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗарплатуПриИзмененииНаСервере()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИзмененииПризнакаРассчитыватьЗарплатуДокументаОплатыТруда(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Объект.РассчитатьЗарплату);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоплачиватьДоСреднегоЗаработкаПриИзмененииНаСервере()
	ЗаполнитьСсылкиНачислений(Ложь);
	УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура ДоплачиватьДоДенежногоСодержанияПриИзмененииНаСервере()
	УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(ЭтотОбъект);
	ОбновитьФормуПоВариантуДоплаты();
КонецПроцедуры

&НаСервере
Процедура ПервичныйБольничныйЛистПриИзмененииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеСреднегоЗаработка();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПервичномуБольничномуЛисту(Объект.ПервичныйБольничныйЛист);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ОбновитьДанныеДляРасчетаСреднего();
	
	УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(ЭтотОбъект);
	
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	
	ОбновитьЭлементыПараметровОплаты();
	
	УстановитьВидимостьПодсказкаОсобыхУсловийИсчисления();
	
	ЗаполнитьСсылкиНачислений(Истина);
	ЗаполнитьПараметрыОплаты(Истина);
	УстановитьДоступностьПолейВводаНачислений();
	
	ЗаполнитьСтаж();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыОсвобожденияОтРаботыНаСервере()
	
	ОбновитьОстаткиОплачиваемыхДнейПоУходуЗаРодственниками();
	ОбновитьИсправленияОтпусков();
	ЗаполнитьПараметрыОплаты(Истина);
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	УстановитьСвойствоРассчитатьЗарплату();
	
	ОпределитьВариантДоплаты();
	ОбновитьФормуПоВариантуДоплаты();
	
	УстановитьДоступностьПолейВводаНачислений();
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаОплатыПриИзмененииНаСервере()
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
	ЗаполнитьДнейОплатыНаОснованииПериодаОплаты();
	ОбновитьЭлементыПараметровОплаты();
	УстановитьДоступностьПолейВводаНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияОплатыПриИзмененииНаСервере()
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	ЗаполнитьДнейОплатыНаОснованииПериодаОплаты();
	ОбновитьЭлементыПараметровОплаты();
	УстановитьДоступностьПолейВводаНачислений();
	
КонецПроцедуры

&НаСервере
Процедура КарантинПоКоронавирусуПриИзмененииНаСервере()
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	УчетПособийОбновитьСведенияОПрямыхВыплатах();
КонецПроцедуры

&НаСервере
Процедура УсловияИсчисленияКодПриИзмененииНаСервере()
	
	СтараяДатаПоловиннойОплаты = Объект.ДатаНачалаПоловиннойОплаты;
	СтарыйПроцентОплаты = Объект.ПроцентОплаты;
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	
	Если СтараяДатаПоловиннойОплаты <> Объект.ДатаНачалаПоловиннойОплаты 
		ИЛИ СтарыйПроцентОплаты <> Объект.ПроцентОплаты Тогда
		ПерезаполнитьИРассчитатьНачисленияНаСервере(Ложь);
	КонецЕсли;
		
	УстановитьВидимостьПодсказкаОсобыхУсловийИсчисления();
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));

	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РайонныйКоэффициентРФНаНачалоСобытия", "Видимость", ПолучитьФункциональнуюОпциюФормы("ПрименятьРайонныйКоэффициент"));
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРедактированияСреднегоЗаработка()
	
	ПараметрыРедактирования = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРедактированияСреднегоЗаработкаФССПоДокументу();
	ПараметрыРедактирования.ДокументСсылка = Объект.Ссылка;
	ПараметрыРедактирования.Сотрудник = Объект.Сотрудник;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРедактирования.НачалоПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРедактирования.ОкончаниеПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
	ПараметрыРедактирования.ФиксПериодРасчета = Объект.ФиксПериодРасчетаСреднегоЗаработка;
	ПараметрыРедактирования.ГодыПериодаРасчета = УчетПособийСоциальногоСтрахования.ГодыПериодаРасчетаСреднего(Объект);
	ПараметрыРедактирования.ПорядокРасчета = ПорядокРасчетаСреднегоЗаработкаФСС();
	ПараметрыРедактирования.ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРедактирования.ИспользоватьДниБолезниУходаЗаДетьми	= ПараметрыРедактирования.ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми;
	ПараметрыРедактирования.УчитыватьЗаработокПредыдущихСтрахователей = Объект.УчитыватьЗаработокПредыдущихСтрахователей;

	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьТаблицыДанныхСреднегоЗаработкаФССПоДокументу(Объект, ПараметрыРедактирования);
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьФинансированиеФедеральнымБюджетом(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат
	КонецЕсли;

	Доступен = Форма.Объект.ПрименятьЛьготыПриНачисленииПособия;
		
	Форма.Элементы.ФинансированиеФедеральнымБюджетом.Доступность = Доступен;
	Форма.Элементы.ПроцентОплатыБезЛьгот.Доступность = Доступен;
	Форма.Элементы.ОграничениеПособияБезЛьгот.Доступность = Доступен;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьДнейОсвобожденияОтРаботы(Форма)
	Форма.НадписьДнейОсвобожденияОтРаботы = ПредставлениеКоличестваДней(
		Форма.Объект.ДатаНачала,
		Форма.Объект.ДатаОкончания);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДнейОплатыНаОснованииПериодаОплаты()
	Объект.ДнейОплаты = Документы.БольничныйЛист.МаксимальноеЧислоДнейОплаты(
		Объект,
		ОстатокОплачиваемыхДнейУходаЗаРодственником1,
		ОстатокОплачиваемыхДнейУходаЗаРодственником2);
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолейВводаНачислений()
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат
	КонецЕсли;
	
	ДоступностьВидаОплатыПособия = Объект.НазначитьПособие;
	ДоступностьВидаОплатыЗаСчетРаботодателя = Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
		И Не ЗначениеЗаполнено(Объект.ДатаНачалаПоловиннойОплаты)
		И Объект.ДатаНачалаОплаты < ДатаНачалаОплатыЗаСчетФСС();
	ДоступностьВидаНеоплачиваемогоВремени = Не Объект.НазначитьПособие
		Или Объект.ДатаНачала < Объект.ДатаНачалаОплаты
		Или Объект.ДатаОкончанияОплаты < Объект.ДатаОкончания;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидОплатыПособия", "Доступность", ДоступностьВидаОплатыПособия);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидОплатыЗаСчетРаботодателя", "Доступность", ДоступностьВидаОплатыЗаСчетРаботодателя);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидНеоплачиваемогоВремени", "Доступность", ДоступностьВидаНеоплачиваемогоВремени);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодсказкаОсобыхУсловийИсчисления()
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат
	КонецЕсли;
	
	ВидимостьПодсказкиОсобыхУсловийИсчислений = ВыбраныОсобыеУсловияИсчислений(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждениеОсобыеУсловийИсчисления", "Видимость", ВидимостьПодсказкиОсобыхУсловийИсчислений);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждениеДатаНачалаПоловиннойОплаты", "Видимость", ВидимостьПодсказкиОсобыхУсловийИсчислений);
	
КонецПроцедуры

&НаСервере
Функция ДатаНачалаОплатыЗаСчетФСС()
	Возврат УчетПособийСоциальногоСтрахования.ДатаНачалаОплатыЗаСчетФСС(
		Объект.ДатаНачалаСобытия,
		Объект.ПричинаНетрудоспособности);
КонецФункции

&НаСервере
Процедура ОчиститьСсылкиНачислений()
	Объект.ВидОплатыПособия            = Неопределено;
	Объект.ВидНеоплачиваемогоВремени   = Неопределено;
	Объект.ВидОплатыЗаСчетРаботодателя = Неопределено;
	Объект.ВидРасчетаДоплаты           = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиНачислений(ПервичнаяИнициализацияФормы)
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопПараметры = Документы.БольничныйЛист.ДополнительныеПараметрыВыбораНачислений(Объект, "ВидОплатыПособия");
	ПланыВидовРасчета.Начисления.УстановитьНачислениеПоУмолчаниюВФорме(ЭтотОбъект, "ВидОплатыПособия", ДопПараметры, ПервичнаяИнициализацияФормы);
	
	ДопПараметры = Документы.БольничныйЛист.ДополнительныеПараметрыВыбораНачислений(Объект, "ВидНеоплачиваемогоВремени");
	ПланыВидовРасчета.Начисления.УстановитьНачислениеПоУмолчаниюВФорме(ЭтотОбъект, "ВидНеоплачиваемогоВремени", ДопПараметры, ПервичнаяИнициализацияФормы);
	
	ДопПараметры = Документы.БольничныйЛист.ДополнительныеПараметрыВыбораНачислений(Объект, "ВидОплатыЗаСчетРаботодателя");
	ПланыВидовРасчета.Начисления.УстановитьНачислениеПоУмолчаниюВФорме(ЭтотОбъект, "ВидОплатыЗаСчетРаботодателя", ДопПараметры, ПервичнаяИнициализацияФормы);
	
	Если Объект.ДоплачиватьДоДенежногоСодержания Или Объект.ДоплачиватьДоСреднегоЗаработка Тогда
		ДопПараметры = Документы.БольничныйЛист.ДополнительныеПараметрыВыбораНачислений(Объект, "ВидРасчетаДоплаты");
		ПланыВидовРасчета.Начисления.УстановитьНачислениеПоУмолчаниюВФорме(ЭтотОбъект, "ВидРасчетаДоплаты", ДопПараметры, ПервичнаяИнициализацияФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования)
	
	// Переносит данные учета среднего заработка (результат работы формы "калькулятора")
	// в таблицы документа.
	
	Объект.СреднийЗаработокФСС.Очистить();
	Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
	Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
	Объект.ПериодыБолезниУходаЗаДетьми.Очистить();
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьДанныеУчетаСреднегоЗаработкаФСС(Объект, РезультатРедактирования, ЭтотОбъект);
	
	Объект.ФиксПериодРасчетаСреднегоЗаработка = РезультатРедактирования.ФиксПериодРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаНачало = РезультатРедактирования.НачалоПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = РезультатРедактирования.ГодыПериодаРасчета[0];
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = РезультатРедактирования.ГодыПериодаРасчета[1];
	
	Объект.СреднийДневнойЗаработок = РезультатРедактирования.СреднийЗаработок;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОСтажеСотрудника()
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат НеОпределено;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	// Поля стажа СтажЛет, СтажМесяцев автозаполняются по данным о стаже С категорией
	// КатегорииСтажа.РасширенныйСтраховой, если такового нет, то по стажу с категорией КатегорииСтажа.Страховой.
	// Если есть оба вида стажа поле ФинансированиеФедеральнымБюджетом заполняется значением
	// ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Заполняем исходные данные для получения стажа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВидыСтажа.Ссылка КАК ВидСтажа,
	|	&ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
	|		ПО (ВидыСтажа.КатегорияСтажа В (&КатегорииСтажа))
	|			И (Сотрудники.Ссылка = &Сотрудник)";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ?(ЗначениеЗаполнено(Объект.ДатаНачалаСобытия), Объект.ДатаНачалаСобытия, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КатегорииСтажа", Документы.БольничныйЛист.КатегорииСтажаВЛисткеНетрудоспособности());
	Запрос.Выполнить();
	
	// Создаем таблицу стажей
	УстановитьПривилегированныйРежим(Истина);
	ОписательВТ = КадровыйУчетРасширенный.ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц("ВТИсходныеДанные");
	ОписательВТ.ИмяПоляВидСтажа = "ВидСтажа";
	КадровыйУчетРасширенный.СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ОписательВТ, "ВТСтажиФизическихЛиц");
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасширенныйСтажДляБЛ.ВсегоМесяцев, 0) КАК СтажВМесяцахРасширенный,
	|	ЕСТЬNULL(СтажДляБЛ.ВсегоМесяцев, 0) КАК СтажВМесяцах,
	|	ВЫБОР
	|		КОГДА РасширенныйСтажДляБЛ.ВидСтажа ЕСТЬ НЕ NULL 
	|				И СтажДляБЛ.ВидСтажа ЕСТЬ НЕ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
	|	КОНЕЦ КАК ФинансированиеФедеральнымБюджетом,
	|	ВЫБОР
	|		КОГДА СтажДляБЛ.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДляСотрудникаВведенСтраховойСтаж
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК РасширенныйСтажДляБЛ
	|		ПО Сотрудники.ФизическоеЛицо = РасширенныйСтажДляБЛ.ФизическоеЛицо
	|			И (РасширенныйСтажДляБЛ.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.РасширенныйСтраховой))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажДляБЛ
	|		ПО Сотрудники.ФизическоеЛицо = СтажДляБЛ.ФизическоеЛицо
	|			И (СтажДляБЛ.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Страховой))
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	ДанныеОСтажеСотрудника = Запрос.Выполнить().Выбрать();
	ДанныеОСтажеСотрудника.Следующий();
	Возврат ДанныеОСтажеСотрудника;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияСведенийОСтажеСотрудника(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ЗаполнитьСтаж();
		ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
		НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтаж()
	
	Если Не ИспользуетсяРасчетЗарплаты
		Или Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.СтажЛет                = Неопределено;
		Объект.СтажМесяцев            = Неопределено;
		Объект.СтажРасширенныйЛет     = Неопределено;
		Объект.СтажРасширенныйМесяцев = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДанныеОСтажеСотрудника = ДанныеОСтажеСотрудника();
	Если ЗначениеЗаполнено(ДанныеОСтажеСотрудника) Тогда
		ДляСотрудникаВведенСтраховойСтаж = ДанныеОСтажеСотрудника.ДляСотрудникаВведенСтраховойСтаж;
		
		СтажЛет 				= Цел(ДанныеОСтажеСотрудника.СтажВМесяцах / 12);
		СтажМесяцев 			= ДанныеОСтажеСотрудника.СтажВМесяцах % 12;
		СтажРасширенныйЛет 		= Цел(ДанныеОСтажеСотрудника.СтажВМесяцахРасширенный / 12);
		СтажРасширенныйМесяцев 	= ДанныеОСтажеСотрудника.СтажВМесяцахРасширенный % 12;
	КонецЕсли;
	
	Если Не Объект.СтажЛет = СтажЛет
		Или Не Объект.СтажМесяцев = СтажМесяцев
		Или Не Объект.СтажРасширенныйЛет = СтажРасширенныйЛет
		Или Не Объект.СтажРасширенныйМесяцев = СтажРасширенныйМесяцев Тогда
		
		ЭтотОбъект.Модифицированность = Истина;
		
		Объект.СтажЛет 					= СтажЛет;
		Объект.СтажМесяцев 				= СтажМесяцев;
		Объект.СтажРасширенныйЛет 		= СтажРасширенныйЛет;
		Объект.СтажРасширенныйМесяцев 	= СтажРасширенныйМесяцев;
	КонецЕсли;
	
	УстановитьФинансированиеФедеральнымБюджетомНестраховыхПериодов(ЭтотОбъект);
	
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтотОбъект);
	
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтотОбъект, Объект.ПрименятьЛьготыПриНачисленииПособия);

	ОбновитьНадписьСтаж(ЭтотОбъект);
	
	УстановитьВидимостьПредупрежденияОНезаполненномСтаже();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКадровымДаннымСотрудника()
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина,
		Объект.Сотрудник,
		"Организация,Подразделение,Территория,ФизическоеЛицо,ЛьготаПриНачисленииПособий,ВидЗанятости,ДоляНеполногоРабочегоВремени",
		Объект.ДатаНачалаСобытия);
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	КадровыеДанныеСотрудника = КадровыеДанные[0];
	
	Если ТипЗнч(КадровыеДанныеСотрудника.ДоляНеполногоРабочегоВремени) = Тип("Число")
		И КадровыеДанныеСотрудника.ДоляНеполногоРабочегоВремени > 0
		И КадровыеДанныеСотрудника.ДоляНеполногоРабочегоВремени < 1 Тогда
		Объект.ДоляНеполногоВремени = КадровыеДанныеСотрудника.ДоляНеполногоРабочегоВремени;
	Иначе
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	
	Объект.ФизическоеЛицо      = КадровыеДанныеСотрудника.ФизическоеЛицо;
	Объект.ОсновноеМестоРаботы = (КадровыеДанныеСотрудника.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	
	// Районный коэффициент.
	ОбъектРК = РасчетЗарплатыРасширенный.ИсточникРайонногоКоэффициентаРФ(КадровыеДанныеСотрудника);
	Объект.РайонныйКоэффициентРФНаНачалоСобытия = РасчетЗарплатыРасширенный.РайонныйКоэффициентРФ(ОбъектРК);
	
	// Льгота подвергшимся воздействию радиации.
	Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ЛьготаПриНачисленииПособий) Тогда
		Объект.ПрименятьЛьготыПриНачисленииПособия = Истина;
		Объект.ФинансированиеФедеральнымБюджетом = КадровыеДанныеСотрудника.ЛьготаПриНачисленииПособий;
		УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтотОбъект);
		УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтотОбъект, Объект.ПрименятьЛьготыПриНачисленииПособия);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьДнейБолезниПервогоРодственника(Форма)
	
	Форма.НадписьДнейБолезниПервыйРодственник = ПредставлениеКоличестваДней(
		Форма.Объект.ДатаНачалаРодственник1,
		Форма.Объект.ДатаОкончанияРодственник1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьДнейБолезниВторогоРодственника(Форма)
	
	Форма.НадписьДнейБолезниВторойРодственник = ПредставлениеКоличестваДней(
		Форма.Объект.ДатаНачалаРодственник2,
		Форма.Объект.ДатаОкончанияРодственник2);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоличестваДней(ДатаНачала, ДатаОкончания)
	Если Не ЗначениеЗаполнено(ДатаНачала) Или ДатаНачала > ДатаОкончания Тогда
		Возврат "";
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 день;;%1 дня;%1 дней;'"),
		ОбщегоНазначенияБЗККлиентСервер.КоличествоДнейВПериоде(ДатаНачала, ДатаОкончания));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбраныОсобыеУсловияИсчислений(Форма)
	Объект = Форма.Объект;
	Возврат Объект.УсловияИсчисленияКод1 = "44" ИЛИ 
	Объект.УсловияИсчисленияКод2 = "44" ИЛИ Объект.УсловияИсчисленияКод3 = "44";
КонецФункции

&НаСервере
Процедура УстановитьИспользованиеЗаработкаПредыдущихСтрахователей()
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо");
	Объект.УчитыватьЗаработокПредыдущихСтрахователей = КадровыйУчетРасширенный.УчитыватьЗаработокПредыдущихСтрахователей(ФизическоеЛицо, Объект.Организация);
КонецПроцедуры

#Область Отпуска

&НаСервере
Функция БольничныйДаетПравоНаПродлениеОтпуска()
	Возврат Не Перечисления.ПричиныНетрудоспособности.ОтпускВытесняетБольничный(Объект.ПричинаНетрудоспособности);
КонецФункции

&НаСервере
Процедура ОбновитьИсправленияОтпусков()
	
	Если ИспользуетсяРасчетЗарплаты И КонтролироватьПересечениеСОтпусками И БольничныйДаетПравоНаПродлениеОтпуска() Тогда
		ЗаполнитьОтпускаТребующиеИсправления();
		ЗаполнитьИсправленныеОтпуска();
	Иначе
		ОтпускаТребующиеИсправленияСРасчетом.Очистить();
		ОтпускаТребующиеИсправленияБезРасчета.Очистить();
		ИсправленныеОтпуска.Очистить();
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоПересечениюСОтпусками();
	
	Если ОтпускаТребующиеИсправленияСРасчетом.Количество() > 0
		Или ОтпускаТребующиеИсправленияБезРасчета.Количество() > 0 Тогда
		ОчиститьРассчитанныеДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсправлениеОтпуска(ИсправляемыйОтпуск)

	ДополнительныеПараметры = Новый Структура("ЗаписатьЭлемент", Истина);
	ДополнительныеПараметры.Вставить("ИсправляемыйОтпуск", ИсправляемыйОтпуск);
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Создание исправления отпуска возможно только после записи данных.
				|Данные будут записаны.'");
				
		Оповещение = Новый ОписаниеОповещения("СоздатьИсправлениеОтпускаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ДополнительныеПараметры.ЗаписатьЭлемент = Ложь;
		СоздатьИсправлениеОтпускаЗавершение(Неопределено, ДополнительныеПараметры);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсправлениеОтпускаЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтпуска = Новый Структура;
	
	ОснованиеОтпуска = Новый Структура("Ссылка, Действие, ОснованиеПриостановки", 
		ДополнительныеПараметры.ИсправляемыйОтпуск, "Исправить", Объект.Ссылка);
	ПараметрыОтпуска.Вставить("Основание", ОснованиеОтпуска);
	
	ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", ПараметрыОтпуска);

КонецПроцедуры

&НаСервере
Функция ИсключаемыеНачисленияОтпусков()
	
	ВидыОтпусков = Справочники.ВидыОтпусков.ВидыЕжегодныхОплачиваемыхОтпусков();

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидОтпуска В(&ВидыОтпусков)
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)";
	
	Запрос.Параметры.Вставить("ВидыОтпусков", ВидыОтпусков);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтпускаТребующиеИсправления()
	Отборы = Новый Массив;
	ОтборыДляФПД = Новый Массив;
	
	ИсключаемыеРегистраторы = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		ИсключаемыеРегистраторы = ИсправлениеДокументовЗарплатаКадры.ПолучитьДокументыЦепочкиИсправлений(Объект.ИсправленныйДокумент);
		ИсключаемыеРегистраторы.Добавить(Объект.ИсправленныйДокумент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИсключаемыеРегистраторы.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	ВидыОтпусков = Справочники.ВидыОтпусков.ВидыЕжегодныхОплачиваемыхОтпусков();
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ФизическоеЛицо", "В", Объект.ФизическоеЛицо);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ПериодДействия", ">=", НачалоМесяца(Объект.ДатаНачала));
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ПериодДействия", "<=", НачалоМесяца(Объект.ДатаОкончания));
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени", "В", КатегорииНачислений);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ВидРасчета.ВидОтпуска", "В", ВидыОтпусков);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Организация", "В", Объект.Организация);
		
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОтборыДляФПД, "ПериодДействияНачало", "<=", Объект.ДатаОкончания);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОтборыДляФПД, "ПериодДействияКонец", ">=", Объект.ДатаНачала);
	
	ТаблицаПересекающихсяОтпусков = РегистрыРасчета.Начисления.РезультирующийПериодДействия(Отборы, ОтборыДляФПД);
	
	ОтпускаТребующиеИсправленияСРасчетом.ЗагрузитьЗначения(ОбщегоНазначения.ВыгрузитьКолонку(
		ТаблицаПересекающихсяОтпусков, "Регистратор", Истина));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсправленныеОтпуска()
	
	ПроверяемыеБольничные = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		ПроверяемыеБольничные = ИсправлениеДокументовЗарплатаКадры.ПолучитьДокументыЦепочкиИсправлений(Объект.ИсправленныйДокумент);
		ПроверяемыеБольничные.Добавить(Объект.ИсправленныйДокумент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверяемыеБольничные.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	Отпуска = Документы.БольничныйЛист.ОтпускаПриостановленныеБольничными(ПроверяемыеБольничные);
	ПроведенныеИРассчитанныеОтпуска       = Отпуска.Скопировать(Новый Структура("ПроведенИРассчитан", Истина));
	НеПроведенныеИлиНеРассчитанныеОтпуска = Отпуска.Скопировать(Новый Структура("ПроведенИРассчитан", Ложь));
	
	ИсправленныеОтпуска.ЗагрузитьЗначения(ПроведенныеИРассчитанныеОтпуска.ВыгрузитьКолонку("Ссылка"));
	ОтпускаТребующиеИсправленияБезРасчета.Очистить();
	
	Для Каждого Отпуск Из НеПроведенныеИлиНеРассчитанныеОтпуска Цикл
		НайденныйЭлемент = ОтпускаТребующиеИсправленияСРасчетом.НайтиПоЗначению(Отпуск.ИсправленныйДокумент);
		Если НайденныйЭлемент <> Неопределено Тогда
			// Отпуск проведен, но не рассчитан и пересекается с больничным.
			ОтпускаТребующиеИсправленияСРасчетом.Удалить(НайденныйЭлемент);
			ОтпускаТребующиеИсправленияБезРасчета.Добавить(Отпуск.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПересечениюСОтпусками()
	
	КоличествоОтпусковТребующихИсправленияСРасчетом = ОтпускаТребующиеИсправленияСРасчетом.Количество();
	Если КоличествоОтпусковТребующихИсправленияСРасчетом = 0 Тогда
		Элементы.ОтпускаТребующиеИсправленияСРасчетомГруппа.Видимость = Ложь;
	Иначе
		Элементы.ОтпускаТребующиеИсправленияСРасчетомГруппа.Видимость = Истина;
		Если КоличествоОтпусковТребующихИсправленияСРасчетом = 1 Тогда
			ЗаголовокСсылки = СтрШаблон(НСтр("ru='Исправить %1'"), ОтпускаТребующиеИсправленияСРасчетом[0].Значение);
		Иначе
			ЗаголовокСсылки = НСтр("ru='Исправить отпуска...'");
		КонецЕсли;
		Элементы.ОтпускаТребующиеИсправленияСРасчетомСсылка.Заголовок = ЗаголовокСсылки;
	КонецЕсли;
	
	КоличествоОтпусковТребующихИсправленияБезРасчета = ОтпускаТребующиеИсправленияБезРасчета.Количество();
	Если КоличествоОтпусковТребующихИсправленияБезРасчета = 0 Тогда
		Элементы.ТребуетсяРассчитатьПродлениеОтпускаГруппа.Видимость = Ложь;
	Иначе
		Элементы.ТребуетсяРассчитатьПродлениеОтпускаГруппа.Видимость = Истина;
		Если КоличествоОтпусковТребующихИсправленияБезРасчета = 1 Тогда
			ЗаголовокСсылки = ОтпускаТребующиеИсправленияБезРасчета[0].Значение;
		Иначе
			ЗаголовокСсылки = НСтр("ru='Открыть исправления отпусков...'");
		КонецЕсли;
		Элементы.ТребуетсяРассчитатьПродлениеОтпускаСсылка.Заголовок = ЗаголовокСсылки;
	КонецЕсли;
	
	КоличествоИсправленныхОтпусков = ИсправленныеОтпуска.Количество();
	Если КоличествоИсправленныхОтпусков = 0 Тогда
		Элементы.ИсправленныеОтпускаГруппа.Видимость = Ложь;
	Иначе
		Элементы.ИсправленныеОтпускаГруппа.Видимость = Истина;
		Если КоличествоИсправленныхОтпусков = 1 Тогда
			ЗаголовокСсылки = ИсправленныеОтпуска[0].Значение;
		Иначе
			ЗаголовокСсылки = НСтр("ru='Исправленные отпуска...'");
		КонецЕсли;
		Элементы.ИсправленныеОтпускаСсылка.Заголовок = ЗаголовокСсылки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОплаты

&НаСервере
Процедура ЗаполнитьПараметрыОплаты(Знач АвтозаполнениеПериодовОплаты, Знач ФлажокНазначитьПособие = Неопределено)
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(АвтозаполнениеПериодовОплаты) = Тип("Булево") Тогда
		Объект.АвтозаполнениеПериодовОплаты = АвтозаполнениеПериодовОплаты;
	КонецЕсли;
	
	Кэш = Новый Соответствие;
	Кэш.Вставить("ОстатокОплачиваемыхДнейУходаЗаРодственником1", ОстатокОплачиваемыхДнейУходаЗаРодственником1);
	Кэш.Вставить("ОстатокОплачиваемыхДнейУходаЗаРодственником2", ОстатокОплачиваемыхДнейУходаЗаРодственником2);
	Документы.БольничныйЛист.ЗаполнитьПараметрыОплаты(Объект, Кэш);
	
	Если ТипЗнч(ФлажокНазначитьПособие) = Тип("Булево")
		И Объект.НазначитьПособие <> ФлажокНазначитьПособие Тогда
		Объект.НазначитьПособие = ФлажокНазначитьПособие;
		Объект.АвтозаполнениеПериодовОплаты = Ложь;
	КонецЕсли;
	
	ОбновитьЭлементыПараметровОплаты(Кэш);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПараметровОплаты(Кэш = Неопределено)
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	ОтпускВытесняетБольничный = Перечисления.ПричиныНетрудоспособности.ОтпускВытесняетБольничный(
		Объект.ПричинаНетрудоспособности);
	
	ОплачиваемыеДаты = Документы.БольничныйЛист.ОплачиваемыеДаты(Объект, Кэш);
	ОплачиваемыеПериоды = ОбщегоНазначенияБЗК.ПериодыИзМассиваДат(ОплачиваемыеДаты);
	
	ОбновитьГруппуТребуетсяПересчитатьБольничный(Кэш, ОтпускВытесняетБольничный);
	ОбновитьГруппуТребуетсяОдинПериодНетрудоспособности(Кэш, ОплачиваемыеПериоды);
	
	Если Объект.ИсключаемыеПериоды.Количество() = 0 Тогда
		Элементы.ДатаНачалаОплаты.Видимость               = Истина;
		Элементы.ДатаОкончанияОплаты.Видимость            = Истина;
		Элементы.ДатаНачалаОплаты.Доступность             = Объект.НазначитьПособие;
		Элементы.ДатаОкончанияОплаты.Доступность          = Объект.НазначитьПособие;
		Элементы.ИсключаемыеПериодыГруппа.Видимость       = Ложь;
		Элементы.ИсключаемыеПериодыВШапкеГруппа.Видимость = Ложь;
		Элементы.НазначитьПособие.Заголовок               = "";
		Если Объект.ДнейОплаты > 0 Тогда
			НадписьДнейОплатыПособия = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 день;;%1 дня;%1 дней;'"),
				Объект.ДнейОплаты);
		Иначе
			НадписьДнейОплатыПособия = "";
		КонецЕсли;
	Иначе
		Элементы.ДатаНачалаОплаты.Видимость               = Ложь;
		Элементы.ДатаОкончанияОплаты.Видимость            = Ложь;
		Элементы.ИсключаемыеПериодыГруппа.Видимость       = Истина;
		Элементы.ИсключаемыеПериодыВШапкеГруппа.Видимость = Истина;
		НадписьДнейОплатыПособия = "";
		ОбновитьГруппуИсключаемыеПериоды(Кэш, ОплачиваемыеПериоды, ОтпускВытесняетБольничный);
	КонецЕсли;
	
	// Кнопка "Заполнить" видна только при наличии ручных изменений.
	Элементы.ЗаполнитьИсключаемыеПериодыВШапке.Видимость = Не Объект.АвтозаполнениеПериодовОплаты;
	Элементы.ЗаполнитьИсключаемыеПериоды.Видимость       = Не Объект.АвтозаполнениеПериодовОплаты;
	
	Элементы.ДатаНачалаПоловиннойОплаты.Видимость = (ЗначениеЗаполнено(Объект.ДатаНачалаПоловиннойОплаты)
		Или Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуТребуетсяПересчитатьБольничный(Кэш, ОтпускВытесняетБольничный)
	Если Не ОтпускВытесняетБольничный Тогда
		Элементы.ТребуетсяПересчитатьГруппа.Видимость       = Ложь;
		Элементы.ТребуетсяПересчитатьВШапкеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	ДатыОтпусков    = Документы.БольничныйЛист.ДатыОтпусков(Объект, Кэш);
	ИсключаемыеДаты = Документы.БольничныйЛист.ИсключаемыеДаты(Объект, Кэш);
	// Сравниваются 2 массива дней - Объект.ИсключаемыеПериоды и ДатыОтпусков.
	НеучтенныеДатыОтпусков = ДатыОтпусков.Скопировать();
	ИзбыточныеДатыОтпусков = Новый Массив;
	Для Каждого ИсключаемаяДата Из ИсключаемыеДаты Цикл
		Если ИсключаемаяДата.Регистрировать Тогда
			Продолжить; // Неоплачиваемый больничный.
		КонецЕсли;
		СтрокаОтличий = НеучтенныеДатыОтпусков.Найти(ИсключаемаяДата.Дата, "Дата");
		Если СтрокаОтличий = Неопределено Тогда
			// Дата отпуска избыточно учтена в больничном (избыточно добавлена в исключаемые периоды).
			ИзбыточныеДатыОтпусков.Добавить(ИсключаемаяДата.Дата);
		Иначе
			// Удаление даты отпуска из списка отличий, поскольку она учтена и в больничном и в отпусках.
			НеучтенныеДатыОтпусков.Удалить(СтрокаОтличий);
		КонецЕсли;
	КонецЦикла;
	// Отличия - повод нажать кнопку "Обновить" или ввести исправление больничного.
	Строка = "";
	// Формирование html-представления периодов в разрезе документов.
	Если НеучтенныеДатыОтпусков.Количество() > 0 Тогда
		ПредставленияРегистраторов = Новый Массив;
		ТаблицаРегистраторов = НеучтенныеДатыОтпусков.Скопировать();
		ТаблицаРегистраторов.Свернуть("Регистратор");
		Для Каждого СтрокаРегистратора Из ТаблицаРегистраторов Цикл
			Регистратор = СтрокаРегистратора.Регистратор;
			Если ЗначениеЗаполнено(Регистратор) Тогда
				Шаблон = СтрШаблон(
					"<a href=""%1"">%2 %3</a>",
					ПолучитьНавигационнуюСсылку(СтрокаРегистратора.Регистратор),
					СтрокаРегистратора.Регистратор.Метаданные().Представление(),
					"%1");
			Иначе
				Шаблон = НСтр("ru = 'Отпуск %1'");
			КонецЕсли;
			ДатыРегистратора = НеучтенныеДатыОтпусков.Скопировать(Новый Структура("Регистратор", СтрокаРегистратора.Регистратор));
			ПериодыРегистратора = ОбщегоНазначенияБЗК.ПериодыИзМассиваДат(ДатыРегистратора.ВыгрузитьКолонку("Дата"));
			Для Каждого ПериодРегистратора Из ПериодыРегистратора Цикл
				ПредставленияРегистраторов.Добавить(СтрШаблон(
					Шаблон,
					ОбщегоНазначенияБЗК.НаименованиеПериода(ПериодРегистратора.ДатаНачала, ПериодРегистратора.ДатаОкончания)));
			КонецЦикла;
		КонецЦикла;
		Строка = Строка
			+ СтрШаблон(НСтр("ru = 'Расчет не учитывает %1.'"), СтрСоединить(ПредставленияРегистраторов, "; "))
			+ " ";
	КонецЕсли;
	// Формирование представления избыточных периодов.
	Если ИзбыточныеДатыОтпусков.Количество() > 0 Тогда
		ПредставленияПериодов = Новый Массив;
		Периоды = ОбщегоНазначенияБЗК.ПериодыИзМассиваДат(ИзбыточныеДатыОтпусков);
		Для Каждого Период Из Периоды Цикл
			ПредставленияПериодов.Добавить(ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания));
		КонецЦикла;
		Строка = Строка
			+ СтрШаблон(НСтр("ru = 'Избыточно исключены периоды отпусков %1.'"), СтрСоединить(ПредставленияПериодов, ", "))
			+ " ";
	КонецЕсли;
	// Вывод в заголовок надписи.
	Если Строка = "" Тогда
		Элементы.ТребуетсяПересчитатьГруппа.Видимость       = Ложь;
		Элементы.ТребуетсяПересчитатьВШапкеГруппа.Видимость = Ложь;
	Иначе
		Элементы.ТребуетсяПересчитатьГруппа.Видимость       = Истина;
		Элементы.ТребуетсяПересчитатьВШапкеГруппа.Видимость = Истина;
		Строка = Строка
			+ НСтр("ru = 'Рекомендуется <a href=""Исправить"">исправить</a> больничный или <a href=""ЗаполнитьИсключаемыеПериоды"">заполнить параметры оплаты</a>.'");
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Строка);
		Элементы.ТребуетсяПересчитать.Заголовок       = ФорматированнаяСтрока;
		Элементы.ТребуетсяПересчитатьВШапке.Заголовок = ФорматированнаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуТребуетсяОдинПериодНетрудоспособности(Кэш, ОплачиваемыеПериоды)
	Если ОплачиваемыеПериоды.Количество() < 2 Тогда
		Элементы.ТребуетсяОдинПериодНетрудоспособностиВШапкеГруппа.Видимость = Ложь;
		Элементы.ТребуетсяОдинПериодНетрудоспособностиГруппа.Видимость       = Ложь;
		Возврат;
	КонецЕсли;
	Элементы.ТребуетсяОдинПериодНетрудоспособностиВШапкеГруппа.Видимость = Истина;
	Элементы.ТребуетсяОдинПериодНетрудоспособностиГруппа.Видимость       = Истина;
	// Формирование html-представления отпусков, попадающих в "центр" периода оплаты.
	ДатыОтпусков = Документы.БольничныйЛист.ДатыОтпусков(Объект, Кэш);
	ДатаНачалаОкна    = ОплачиваемыеПериоды[0].ДатаОкончания;
	ДатаОкончанияОкна = ОплачиваемыеПериоды[ОплачиваемыеПериоды.ВГраница()].ДатаНачала;
	ПредставленияОтпусков = Новый Массив;
	РегистраторыОтпусков = ДатыОтпусков.Скопировать();
	РегистраторыОтпусков.Свернуть("Регистратор");
	Для Каждого СтрокаРегистратора Из РегистраторыОтпусков Цикл
		Регистратор = СтрокаРегистратора.Регистратор;
		ДатыРегистратора = ДатыОтпусков.Скопировать(Новый Структура("Регистратор", Регистратор));
		ПериодыРегистратора = ОбщегоНазначенияБЗК.ПериодыИзМассиваДат(ДатыРегистратора.ВыгрузитьКолонку("Дата"));
		Для Каждого ПериодРегистратора Из ПериодыРегистратора Цикл
			Если ПериодРегистратора.ДатаНачала < ДатаОкончанияОкна // Без "=" т.к. границы окна - оплачиваемый период.
				И ПериодРегистратора.ДатаОкончания > ДатаНачалаОкна Тогда
				ПредставленияОтпусков.Добавить(СтрШаблон(
					"<a href=""%1"">%2 %3</a>",
					ПолучитьНавигационнуюСсылку(Регистратор),
					Регистратор.Метаданные().Представление(),
					ОбщегоНазначенияБЗК.НаименованиеПериода(ПериодРегистратора.ДатаНачала, ПериодРегистратора.ДатаОкончания)));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Вывод в заголовок надписи.
	СтрокаHTML = СтрШаблон(
		НСтр("ru = 'Требуется изменить (отменить или перенести) %1, поскольку формат электронного
		|документооборота с ФСС не предполагает отправку нескольких периодов оплаты по одному больничному.'"),
		СтрСоединить(ПредставленияОтпусков, "; "));
	ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(СтрокаHTML);
	Элементы.ТребуетсяОдинПериодНетрудоспособностиВШапке.Заголовок = ФорматированнаяСтрока;
	Элементы.ТребуетсяОдинПериодНетрудоспособности.Заголовок       = ФорматированнаяСтрока;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуИсключаемыеПериоды(Кэш, ОплачиваемыеПериоды, ОтпускВытесняетБольничный)
	// Формирование представления исключаемых периодов.
	ПредставленияИсключаемыхПериодов = Новый Массив;
	Для Каждого ИсключаемыйПериод Из Объект.ИсключаемыеПериоды Цикл
		ПредставленияИсключаемыхПериодов.Добавить(
			ОбщегоНазначенияБЗК.НаименованиеПериода(ИсключаемыйПериод.ДатаНачала, ИсключаемыйПериод.ДатаОкончания));
	КонецЦикла;
	// Формирование заголовка надписи.
	ЗаголовокНадписи = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';Не оплачивается %1 день;;Не оплачивается %1 дня;Не оплачивается %1 дней;'"),
		Объект.ИсключаемыеПериоды.Итог("КалендарныхДней")) + ": ";
	ЗаголовокНадписи = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокНадписи);
	Элементы.ИсключаемыеПериодыВШапкеЗаголовок.Заголовок = ЗаголовокНадписи;
	Элементы.ИсключаемыеПериодыЗаголовок.Заголовок       = ЗаголовокНадписи;
	ТекстНадписи = СтрСоединить(ПредставленияИсключаемыхПериодов, ", ");
	Элементы.ИсключаемыеПериодыНадпись.Заголовок         = ТекстНадписи;
	Элементы.ИсключаемыеПериодыВШапкеНадпись.Заголовок   = ТекстНадписи;
	// Формирование подсказки.
	Если ОтпускВытесняетБольничный Тогда
		СтрокаHTML = СтрШаблон(
				НСтр("ru = '%1 не дает права на продление отпуска и в случае пересечения с отпуском <a href=""%2"">должен оплачиваться отпуск</a>. 
					|Рекомендуется проинформировать работника.
					|Если решено изменить отпуск, то больничный потребуется исправить и пересчитать.'"),
				Перечисления.ПричиныНетрудоспособности.ПредставлениеБезКода(Объект.ПричинаНетрудоспособности),
				"https://its.1c.ru/db/newsclar#content:468901:hdoc");
		ЗаголовокПодсказки = СтроковыеФункции.ФорматированнаяСтрока(СтрокаHTML);
	Иначе
		ЗаголовокПодсказки = "";
	КонецЕсли;
	Элементы.ИсключаемыеПериодыВШапкеГруппа.РасширеннаяПодсказка.Заголовок = ЗаголовокПодсказки;
	Элементы.ИсключаемыеПериодыГруппа.РасширеннаяПодсказка.Заголовок       = ЗаголовокПодсказки;
	// Формирование представления оплачиваемых периодов.
	ПредставленияОплачиваемыхПериодов = Новый Массив;
	Для Каждого ОплачиваемыйПериод Из ОплачиваемыеПериоды Цикл
		ПредставленияОплачиваемыхПериодов.Добавить(
			ОбщегоНазначенияБЗК.НаименованиеПериода(ОплачиваемыйПериод.ДатаНачала, ОплачиваемыйПериод.ДатаОкончания));
	КонецЦикла;
	// Формирование заголовка надписи.
	ЗаголовокНадписи = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';Назначить пособие на %1 день;;Назначить пособие на %1 дня;Назначить пособие на %1 дней;'"),
		Объект.ДнейОплаты);
	ЗаголовокНадписи = ЗаголовокНадписи + ": " + СтрСоединить(ПредставленияОплачиваемыхПериодов, ", ");
	Элементы.НазначитьПособие.Заголовок = ЗаголовокНадписи;
КонецПроцедуры

&НаСервере
Процедура ОчиститьИсключаемыеПериодыНаСервере()
	Объект.ИсключаемыеПериоды.Очистить();
	ЗаполнитьПараметрыОплаты(Ложь);
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	УстановитьДоступностьПолейВводаНачислений();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсключаемыеПериодыНаСервере()
	Модифицированность = Истина;
	ЗаполнитьПараметрыОплаты(Истина);
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	УстановитьДоступностьПолейВводаНачислений();
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВводаИсключаемыхПериодов()
	ИсключаемыеПериоды = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ИсключаемыеПериоды Цикл
		Структура = Новый Структура("ДатаНачала, ДатаОкончания, Регистрировать, Изменил, Комментарий");
		ЗаполнитьЗначенияСвойств(Структура, СтрокаТаблицы);
		ИсключаемыеПериоды.Добавить(Структура);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник",           Объект.Сотрудник);
	ПараметрыФормы.Вставить("ДатаНачала",          Объект.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания",       Объект.ДатаОкончания);
	ПараметрыФормы.Вставить("НазначитьПособие",    Объект.НазначитьПособие);
	ПараметрыФормы.Вставить("ДатаНачалаСобытия",   Объект.ДатаНачалаСобытия);
	ПараметрыФормы.Вставить("ДатаНачалаОплаты",    Объект.ДатаНачалаОплаты);
	ПараметрыФормы.Вставить("ДатаОкончанияОплаты", Объект.ДатаОкончанияОплаты);
	ПараметрыФормы.Вставить("ДнейОплаты",          Объект.ДнейОплаты);
	ПараметрыФормы.Вставить("ИсключаемыеПериоды",  ИсключаемыеПериоды);
	ПараметрыФормы.Вставить("АвтозаполнениеПериодовОплаты",   Объект.АвтозаполнениеПериодовОплаты);
	ПараметрыФормы.Вставить("ПричинаНетрудоспособности",      Объект.ПричинаНетрудоспособности);
	ПараметрыФормы.Вставить("ВидНеоплачиваемогоВремени",      Объект.ВидНеоплачиваемогоВремени);
	ПараметрыФормы.Вставить("СлучайУходаЗаБольнымРебенком",   Объект.СлучайУходаЗаБольнымРебенком);
	ПараметрыФормы.Вставить("ОстатокОплачиваемыхДнейУходаЗаРодственником1", ОстатокОплачиваемыхДнейУходаЗаРодственником1);
	ПараметрыФормы.Вставить("ОстатокОплачиваемыхДнейУходаЗаРодственником2", ОстатокОплачиваемыхДнейУходаЗаРодственником2);
	Возврат ПараметрыФормы;
КонецФункции

&НаКлиенте
Процедура ПослеВводаИсключаемыхПериодов(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ПослеВводаИсключаемыхПериодовНаСервере(РезультатВыбора);
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПослеВводаИсключаемыхПериодовНаСервере(Знач РезультатВыбора)
	Объект.АвтозаполнениеПериодовОплаты = РезультатВыбора.АвтозаполнениеПериодовОплаты;
	Объект.ИсключаемыеПериоды.Очистить();
	Для Каждого Структура Из РезультатВыбора.ИсключаемыеПериоды Цикл
		ИсключаемыйПериод = Объект.ИсключаемыеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(ИсключаемыйПериод, Структура);
		ИсключаемыйПериод.КалендарныхДней = ОбщегоНазначенияБЗК.КоличествоДнейВПериоде(
			ИсключаемыйПериод.ДатаНачала,
			ИсключаемыйПериод.ДатаОкончания);
	КонецЦикла;
	ЗаполнитьПараметрыОплаты(Ложь, Объект.НазначитьПособие);
КонецПроцедуры

#КонецОбласти

// Выполнение расчета начислений.

&НаСервере
Процедура РассчитатьНаСервере()
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		ОчиститьРассчитанныеДанные();
		Возврат;
	КонецЕсли;
	Если Объект.АвтозаполнениеПериодовОплаты Тогда
		ЗаполнитьПараметрыОплаты(Истина);
	КонецЕсли;
	ПерезаполнитьИРассчитатьНачисленияНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПерезаполнениеИРасчетНачисленийНаКлиенте()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжиданияАвтоматическогоРасчета("ПерезаполнитьИРассчитатьНачисленияБезВыводаСообщений");
	
	НеобходимоПерезаполнитьНачисления = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ИмяОбработчика)
	
	ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтотОбъект, РегистрацияНачисленийДоступна, ИмяОбработчика, , "ОчиститьРассчитанныеДанныеНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИРассчитатьНачисленияБезВыводаСообщений()
	ПерезаполнитьИРассчитатьНачисленияНаСервере(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИРассчитатьНачисленияНаСервере(ВыводитьСообщения)
	
	ОбновитьИсправленияОтпусков();
	
	Если ОтпускаТребующиеИсправленияСРасчетом.Количество() > 0 Или ОтпускаТребующиеИсправленияБезРасчета.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьЗарплатуПриИзмененииНаСервере();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Ложь) Тогда
		ОчиститьРассчитанныеДанные();
		ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Истина;
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты();
		Возврат;
	КонецЕсли;
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПерезаполнитьИРассчитатьДокумент(ВыводитьСообщения);
	ЗарплатаКадрыРасширенныйКлиентСервер.СброситьФлагНеобходимостиВыполненияРасчета(ЭтотОбъект);
	НеобходимоПерезаполнитьНачисления = Ложь;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетДокументаБольничныйЛист", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИРассчитатьДокумент(ВыводитьСообщения)
	
	ОтменятьТранзакцию = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ПерезаполнитьНачисления(ВыводитьСообщения);
	УстановитьПривилегированныйРежим(Ложь);
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетНачислений()
	
	Если НеобходимоПерезаполнитьНачисления Тогда
		НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	Иначе
		ПодключитьОбработчикОжиданияАвтоматическогоРасчета("РассчитатьНачисления");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления()
	
	ВыполнитьРасчетНачисленийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетНачисленийНаСервере()
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОчиститьРассчитанныеДанные(Ложь);
	
	ОписаниеРассчитываемойТаблицы = Новый Структура("ИмяТаблицы", "Удержания");
	РассчитатьНачисленияНаСервере(ОписаниеРассчитываемойТаблицы);
	ЗарплатаКадрыРасширенныйКлиентСервер.СброситьФлагНеобходимостиВыполненияРасчета(ЭтотОбъект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетДокументаБольничныйЛист", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНачисления(ВыводитьСообщения)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьРассчитанныеДанные(Истина);
	
	ЗаполнитьСсылкиНачислений(Ложь);
	
	ТекущийОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ДокументГотовКРасчету(ВыводитьСообщения) Тогда
		ОбработатьСообщенияПользователю();
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты();
		ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаНачало)
		Или Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
	Иначе
		ОбновитьДанныеДляРасчетаСреднего();
	КонецЕсли;
	ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Истина;
	
	ПериодРасчетаЗарплаты = ПериодРасчетаЗарплатыДоНачалаОтсутствия();
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, ПериодРасчетаЗарплаты);
	
	ЗаполнитьНачисления(МенеджерРасчета, ПериодРасчетаЗарплаты);
	ЗаполнитьПерерасчеты(МенеджерРасчета);
	ЗаполнитьУдержания(МенеджерРасчета);
	ЗаполнитьПараметрыРасчетаПособияПоНетрудоспособности(МенеджерРасчета);
	
	МенеджерРасчета.РассчитатьЗарплату();
	
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисления(МенеджерРасчета, ПериодРасчетаЗарплаты)
	
	ТаблицаНачислений = МенеджерРасчета.ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям();
	ДополнитьНачисленияОплатыБольничного(ТаблицаНачислений, МенеджерРасчета);
	
	МенеджерРасчета.ЗаполнитьНачисленияСотрудникаЗаПериод(Объект.Сотрудник, ТаблицаНачислений, ПериодРасчетаЗарплаты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПерерасчеты(МенеджерРасчета)
	
	Если Не ИсправлениеДокументовРасчетЗарплаты.ДоначисленияРазрешены(МенеджерРасчета) Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицыНачислений = РасчетЗарплатыРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.Начисления;
	ТаблицыНачислений.УправленческиеНачисления = Объект.УправленческиеНачисления;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияВДанныеФормы(ТаблицыНачислений, МенеджерРасчета.Зарплата.Начисления, Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		ОписаниеТаблицы = ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправления(Объект.Организация, Объект.ПериодРегистрации, Объект.ИсправленныйДокумент, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка, ОписаниеТаблицы, ПолучитьКонтролируемыеПоля(), ОписаниеДокумента(ЭтотОбъект),, Объект.ДоначислитьЗарплатуПриНеобходимости);
	Иначе
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчета(Объект.Организация, Объект.ПериодРегистрации, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка, ПолучитьКонтролируемыеПоля(), ОписаниеДокумента(ЭтотОбъект));
	КонецЕсли;
	
	Если КонтролироватьПересечениеСОтпусками Тогда
		ИсключитьОтпускИзПерерасчетов();
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.НачисленияПерерасчетСНулевымиСторноВДанныеМенеджераРасчета(Объект.НачисленияПерерасчет, Объект.НачисленияПерерасчетНулевыеСторно, МенеджерРасчета, Объект.Организация);
	Объект.Начисления.Очистить();
	Объект.УправленческиеНачисления.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ИсключитьОтпускИзПерерасчетов()
	ИсключаемыеНачисления = ИсключаемыеНачисленияОтпусков();

	ИндексСтроки = Объект.НачисленияПерерасчет.Количество()-1;
	Пока ИндексСтроки >= 0 Цикл
		Если ИсключаемыеНачисления.Найти(Объект.НачисленияПерерасчет[ИндексСтроки].Начисление) <> Неопределено Тогда
			Объект.НачисленияПерерасчет.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержания(МенеджерРасчета)
	
	Если Не ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерРасчета.ЗаполнитьУдержанияСотрудникаЗаПериод(Объект.Сотрудник, Объект.ПериодРегистрации, КонецМесяца(Объект.ПериодРегистрации));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРасчетаПособияПоНетрудоспособности(МенеджерРасчета)
	
	ПараметрыОплаты = УчетПособийСоциальногоСтрахования.ДополнительныеПараметрыРасчетаПособияПоНетрудоспособности();
	ЗаполнитьЗначенияСвойств(ПараметрыОплаты, Объект);
	МенеджерРасчета.ДополнительныеСвойства.Вставить("ПараметрыРасчетаПособияПоНетрудоспособности", ПараметрыОплаты);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьНачисленияОплатыБольничного(ТаблицаНачислений, МенеджерРасчета)
	Кэш = Новый Соответствие;
	ПериодыНачислений = Документы.БольничныйЛист.ПериодыНачислений(Объект, Кэш);
	Если ПериодыНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СреднийЗаработокСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	РайонныйКоэффициентРФСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");
	
	Для Каждого Период Из ПериодыНачислений Цикл
		НовыйИнтервал = ТаблицаНачислений.Добавить();
		НовыйИнтервал.Сотрудник     = Объект.Сотрудник;
		НовыйИнтервал.Начисление    = Период.ВидРасчета;
		НовыйИнтервал.ДатаНачала    = Период.ДатаНачала;
		НовыйИнтервал.ДатаОкончания = Период.ДатаОкончания;
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, СреднийЗаработокСсылка, Объект.СреднийДневнойЗаработок);
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, РайонныйКоэффициентРФСсылка, Объект.РайонныйКоэффициентРФнаНачалоСобытия);
	КонецЦикла;
	
	ДополнитьНачисленияДоплатойДоСреднегоЗаработка(ТаблицаНачислений, МенеджерРасчета, ПериодыНачислений);
	ДополнитьНачисленияДоплатойДоДенежногоСодержания(ТаблицаНачислений, МенеджерРасчета, ПериодыНачислений);
КонецПроцедуры

&НаСервере
Процедура ДополнитьНачисленияДоплатойДоСреднегоЗаработка(ТаблицаНачислений, МенеджерРасчета, ПериодыНачислений)
	
	Если Не Объект.ДоплачиватьДоСреднегоЗаработка Или Не ЗначениеЗаполнено(Объект.ВидРасчетаДоплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") Тогда
		Возврат;
	КонецЕсли;
	
	СреднийЗаработокСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	ПроцентДоплатыСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности");
	ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ПрименятьПредельнуюВеличину = Ложь;
	СреднийЗаработокЗначение = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
	
	Для Каждого Период Из ПериодыНачислений Цикл
		НовыйИнтервал = ТаблицаНачислений.Добавить();
		НовыйИнтервал.Сотрудник = Объект.Сотрудник;
		НовыйИнтервал.Начисление = Объект.ВидРасчетаДоплаты;
		НовыйИнтервал.ДатаНачала    = Период.ДатаНачала;
		НовыйИнтервал.ДатаОкончания = Период.ДатаОкончания;
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, СреднийЗаработокСсылка, СреднийЗаработокЗначение);
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПроцентДоплатыСсылка, Объект.ПроцентДоплатыЗаДниНетрудоспособности);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьНачисленияДоплатойДоДенежногоСодержания(ТаблицаНачислений, МенеджерРасчета, ПериодыНачислений)
	
	Если Не Объект.ДоплачиватьДоДенежногоСодержания Или Не ЗначениеЗаполнено(Объект.ВидРасчетаДоплаты) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйИнтервал = ТаблицаНачислений.Добавить();
	НовыйИнтервал.Сотрудник = Объект.Сотрудник;
	НовыйИнтервал.Начисление = Объект.ВидРасчетаДоплаты;
	НовыйИнтервал.ДатаНачала = ПериодыНачислений[0].ДатаНачала;
	НовыйИнтервал.ДатаОкончания = Объект.ДатаОкончания;
		
	СохраняемоеДенежноеСодержаниеСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
	МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, СохраняемоеДенежноеСодержаниеСсылка, Объект.СохраняемоеДенежноеСодержание);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере(ОписаниеРассчитываемойТаблицы = Неопределено, СохранятьИсправления = Ложь)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПериодРасчетаЗарплаты = ПериодРасчетаЗарплатыДоНачалаОтсутствия();
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, ПериодРасчетаЗарплаты, СохранятьИсправления);
	ЗаполнитьУдержания(МенеджерРасчета);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета);
	ЗаполнитьПараметрыРасчетаПособияПоНетрудоспособности(МенеджерРасчета);
	МенеджерРасчета.РассчитатьЗарплату();
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РасчетЗарплатыВДанныеФормы(ДанныеМенеджераРасчета)
	
	ТаблицыНачислений = РасчетЗарплатыРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.Начисления;
	ТаблицыНачислений.НачисленияПерерасчет = Объект.НачисленияПерерасчет;
	ТаблицыНачислений.НачисленияПерерасчетНулевыеСторно = Объект.НачисленияПерерасчетНулевыеСторно;
	ТаблицыНачислений.УправленческиеНачисления = Объект.УправленческиеНачисления;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияВДанныеФормы(ТаблицыНачислений, ДанныеМенеджераРасчета.Начисления, Объект.Организация);
	
	РасчетЗарплатыРасширенныйФормы.СортироватьПерерасчеты(Объект.НачисленияПерерасчет);
	
	ТаблицыУдержаний = РасчетЗарплатыРасширенныйФормы.ТаблицыУдержанийФормы();
	ТаблицыУдержаний.Удержания = Объект.Удержания;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыУдержанияВДанныеФормы(ТаблицыУдержаний, ДанныеМенеджераРасчета.Удержания);
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНДФЛВДанныеФормы(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, ДанныеМенеджераРасчета.НДФЛ);
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыПогашениеЗаймовВДанныеФормы(Объект.ПогашениеЗаймов, ДанныеМенеджераРасчета.ПогашениеЗаймов);
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыКорректировкиВыплатыВДанныеФормы(Объект.КорректировкиВыплаты, ДанныеМенеджераРасчета.КорректировкиВыплаты);
	
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	ОбновитьПерерасчетИтог(ЭтотОбъект);
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтотОбъект, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ЗаполнитьДоступностьМестаПолученияДохода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтотОбъект, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());

	УстановитьВидимостьПерерасчетов();
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты();
	
	УстановитьСвойствоДокументРассчитан();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета)
	
	//Начисления
	РасчетЗарплатыРасширенныйФормы.НачисленияВДанныеМенеджераРасчета(Объект.Начисления, МенеджерРасчета, Объект.Организация);
	
	//НачисленияПерерасчет
	РасчетЗарплатыРасширенныйФормы.НачисленияПерерасчетСНулевымиСторноВДанныеМенеджераРасчета(Объект.НачисленияПерерасчет, Объект.НачисленияПерерасчетНулевыеСторно, МенеджерРасчета, Объект.Организация);
	
	//УправленческиеНачисления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.УправленческиеНачисленияВДанныеМенеджераРасчета(Объект.УправленческиеНачисления, МенеджерРасчета);
	КонецЕсли;
	
	//Удержания
	РасчетЗарплатыРасширенныйФормы.УдержанияВДанныеМенеджераРасчета(Объект.Удержания, МенеджерРасчета);
	
	//КорректировкиВыплаты
	РасчетЗарплатыРасширенныйФормы.КорректировкиВыплатыВДанныеМенеджераРасчета(Объект.КорректировкиВыплаты, МенеджерРасчета);
	
	//ПогашениеЗаймов
	РасчетЗарплатыРасширенныйФормы.ПогашениеЗаймовВДанныеМенеджераРасчета(Объект.ПогашениеЗаймов, МенеджерРасчета);
	
	//НДФЛ
	РасчетЗарплатыРасширенныйФормы.НДФЛВДанныеМенеджераРасчета(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, МенеджерРасчета);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, ПериодРасчетаЗарплаты, СохранятьИсправления = Истина)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	
	ИсправлениеДокументовРасчетЗарплаты.НастроитьМенеджерРасчета(МенеджерРасчета, ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ПериодРасчетаЗарплаты <> Неопределено;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты);
	МенеджерРасчета.НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Истина;
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = СохранятьИсправления;
	МенеджерРасчета.НастройкиРасчета.РасчетЗарплаты = ПериодРасчетаЗарплаты <> Неопределено;
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Истина;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Объект.Сотрудник;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = Объект.ПланируемаяДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = Ложь;
	МенеджерРасчета.НастройкиНДФЛ.ДоходПолученНаТерриторииРФ = Объект.ДоходПолученНаТерриторииРФ;
	
	МенеджерРасчета.НастройкиПособий.Вставить("ЭЛНКарантинПоКоронавирусу", Объект.ЭЛНКарантинПоКоронавирусу);
	
	ЗасчитыватьДанныеАвансов = Объект.РассчитатьЗарплату;	
	Если ЗасчитыватьДанныеАвансов
		И ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ИсправлениеВТекущемПериоде(ЭтаФорма)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, "РассчитатьЗарплату") Тогда
			 ЗасчитыватьДанныеАвансов = Ложь
	КонецЕсли;
	МенеджерРасчета.НастройкиНДФЛ.ЗасчитыватьДанныеАвансов = ЗасчитыватьДанныеАвансов;
	
	Если ПериодРасчетаЗарплаты <> Неопределено Тогда
		МенеджерРасчета.НастройкиЗаймов.Сотрудники = Объект.Сотрудник;
		МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = ПериодРасчетаЗарплаты.ДатаОкончания;
	КонецЕсли;
	МенеджерРасчета.НастройкиБухучета.КоэффициентыСреднегоЗаработкаФССДокумента = КоэффициентыСреднегоЗаработка();
	МенеджерРасчета.НастройкиБухучета.КоэффициентыРаспределенияДенежногоСодержания = Объект.КоэффициентыРаспределенияДенежногоСодержания.Выгрузить();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	Объект.Удержания.Очистить();
	РассчитатьСотрудникаНаСервере();
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере()
		
	РассчитатьНачисленияНаСервере(, Истина);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВсеНаСервере(ОписаниеТаблицы = Неопределено)
	
	ПериодРасчетаЗарплаты = ПериодРасчетаЗарплатыДоНачалаОтсутствия();
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, ПериодРасчетаЗарплаты);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета);
	ЗаполнитьПараметрыРасчетаПособияПоНетрудоспособности(МенеджерРасчета);
	МенеджерРасчета.РассчитатьЗарплату();
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСреднего()
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	Если Не ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Или Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОбработки = УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыОбновленияДанныхУчетаСреднегоЗаработкаФСС();
	ПараметрыОбработки.ДанныеОНачислениях = Объект.СреднийЗаработокФСС;
	ПараметрыОбработки.ДанныеОВремени = Объект.ОтработанноеВремяДляСреднегоФСС;
	ПараметрыОбработки.ДанныеСтрахователей = Объект.СреднийЗаработокДанныеСтрахователей;
	ПараметрыОбработки.ПериодыОтсутствий = Объект.ПериодыБолезниУходаЗаДетьми;
	ПараметрыОбработки.ПорядокРасчета = ПорядокРасчетаСреднегоЗаработкаФСС();
	
	УчетПособийСоциальногоСтрахованияРасширенный.ОбновитьДанныеУчетаСреднегоЗаработкаФСС(Объект.Сотрудник, Объект.ПериодРасчетаСреднегоЗаработкаНачало, Объект.ПериодРасчетаСреднегоЗаработкаОкончание, ПараметрыОбработки);
	
	Если Объект.ДоплачиватьДоДенежногоСодержания Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			СтруктураОбъекта = ПодготовитьСтруктуруОбъектаДляРасчетаДенежногоСодержания();
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ОбновитьДанныеСохраняемогоДенежногоСодержанияДокумента(СтруктураОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьСреднийЗаработок();
	
	УстановитьИнфонадписьРасчетаСреднегоЗаработка();
	
	ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Для расчета среднего дневного заработка заполняем структуру параметров.
	ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	
	Объект.СреднийДневнойЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
	Объект.МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
	
	Если Объект.ДоплачиватьДоДенежногоСодержания Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.РассчитатьСохраняемоеДенежноеСодержаниеДокумента(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
		КонецЕсли;

	КонецЕсли;
	
	ЗаполнениеВыполнено = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(ПравоНаЧтениеДокументаБезОграничений)
	
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ПриЗаполненииСтруктурыОписанийТаблицНачисленияЗарплаты(МассивОписанийТаблицФормы);
	КонецЕсли;
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаСервере
Функция ПорядокРасчетаСреднегоЗаработкаФСС()
	
	ПорядокРасчета = Неопределено;
	
	Если Объект.РасчетПоПравилам2010Года Тогда
		ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010");
	Иначе
		ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	КонецЕсли;
	
	Возврат ПорядокРасчета;
	
КонецФункции

&НаСервере
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
	ПараметрыРасчета.РасчетныеГоды = УчетПособийСоциальногоСтрахования.ГодыПериодаРасчетаСреднего(Объект);
	
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо", Объект.ДатаНачалаСобытия);
	Если Не КадровыеДанные.Количество() = 0 Тогда
		ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
	КонецЕсли;
	ПараметрыРасчета.НеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(ФизическоеЛицо, Объект.ДатаНачалаСобытия);
	
	ПараметрыРасчета.ДанныеНачислений = Объект.СреднийЗаработокФСС;
	ПараметрыРасчета.ДанныеВремени = Объект.ОтработанноеВремяДляСреднегоФСС;
	ПараметрыРасчета.ДанныеСтрахователей = Объект.СреднийЗаработокДанныеСтрахователей;
	ПараметрыРасчета.УчитыватьЗаработокПредыдущихСтрахователей = Объект.УчитыватьЗаработокПредыдущихСтрахователей;
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми = Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам");
	ПараметрыРасчета.ПрименятьПредельнуюВеличину = Объект.ПричинаНетрудоспособности <> ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
													И Объект.ПричинаНетрудоспособности <> ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание");
	ПараметрыРасчета.ПорядокРасчета = ПорядокРасчетаСреднегоЗаработкаФСС();
	ПараметрыРасчета.РайонныйКоэффициентРФ = Объект.РайонныйКоэффициентРФНаНачалоСобытия;
	ПараметрыРасчета.ДоляНеполногоВремени = Объект.ДоляНеполногоВремени;
	ПараметрыРасчета.Сотрудник = Объект.Сотрудник;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Подключение механизма расчета начислений.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыСохраняемоеДенежноеСодержание()
	
	Возврат КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыСохраняемоеДенежноеСодержание();

КонецФункции

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтотОбъект, ОписанияТаблиц, 2);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ВводНачисленийДанныеВРеквизит(ЭтотОбъект, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), 2);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриПолученииДанныхДокументаОплатыТруда(ЭтотОбъект);
	КонецЕсли;
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтотОбъект, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ЗаполнитьДоступностьМестаПолученияДохода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтотОбъект, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
	
	ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтотОбъект, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтотОбъект);
	ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(ЭтотОбъект);
	
	ЗаполнитьЗначениеКорректировкиВыплаты();
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	    Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетовНулевыеСторно());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, ОписаниеТаблицыСохраняемоеДенежноеСодержание());
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ПриЗаполненииМассиваОписанийТаблицНачисленияЗарплаты(ОписанияТаблиц);
	КонецЕсли;
	
	ОписанияТаблицДляРаспределенияРезультата = ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна);
	ОписанияТаблицДляРаспределенияРезультата.Добавить(ОписаниеТаблицыПерерасчетовНулевыеСторно());
	
	ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда = ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда();
	ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда.Добавить(ОписаниеТаблицыПерерасчетовНулевыеСторно());
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтотОбъект, ТекущийОбъект, ОписанияТаблиц, 2);
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтотОбъект, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата);
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтотОбъект, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда);
	
	КорректировкиВыплатыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы	= "Начисления";
	ОписаниеТаблицы.ПутьКДанным	= "Объект.Начисления";
	ОписаниеТаблицы.ИмяРеквизитаПериод	= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыНачисления";
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов = "НачисленияРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля = Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы = "Начисления,Удержания,НДФЛ,КорректировкиВыплаты";
	
	ОписаниеТаблицы.СодержитПолеКодВычета = Истина;
	
	ОписаниеТаблицы.СкрыватьПодразделениеВПростомРежиме = Истина;
	ОписаниеТаблицы.СодержитПолеМестоПолученияДохода = Истина;
	ОписаниеТаблицы.СодержитПолеИсходныйДокумент = Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы	= "НачисленияПерерасчет";
	ОписаниеТаблицы.ПутьКДанным	= "Объект.НачисленияПерерасчет";
	ОписаниеТаблицы.ИмяРеквизитаПериод	= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыНачисленияПерерасчет";
	ОписаниеТаблицы.НомерТаблицы = 1;
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ЭтоПерерасчеты = Истина;
	ОписаниеТаблицы.ИмяРеквизитаФиксСторно = "ФиксСторно";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПерерасчетРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов 		= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы	= "НачисленияПерерасчет,Удержания,НДФЛ,КорректировкиВыплаты";
	ОписаниеТаблицы.СодержитПолеМестоПолученияДохода = Истина;
	ОписаниеТаблицы.СодержитРегистраторРазовогоНачисления = Истина;
	ОписаниеТаблицы.СодержитПолеИсходныйДокумент = Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетовНулевыеСторно()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "НачисленияПерерасчетНулевыеСторно";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.НачисленияПерерасчетНулевыеСторно";
	ОписаниеТаблицы.НомерТаблицы 								= 1.1;
	
	ОписаниеТаблицы.ЭтоПерерасчеты 								= Истина;
	ОписаниеТаблицы.ИмяРеквизитаФиксСторно 						= "ФиксСторно";

	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "Удержания";
	ОписаниеТаблицы.ПутьКДанным = "Объект.Удержания";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета = "Удержание";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	ОписаниеТаблицы.НомерТаблицы = 2;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "НДФЛ";
	ОписаниеТаблицы.ПутьКДанным = "Объект.НДФЛ";
	ОписаниеТаблицы.ИмяПоляРезультат = "Налог";
	ОписаниеТаблицы.НомерТаблицы = 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыКорректировкиВыплаты()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыКорректировкиВыплаты();
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПогашениеЗаймов()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "ПогашениеЗаймов";
	ОписаниеТаблицы.ПутьКДанным = "Объект.ПогашениеЗаймов";
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.НомерТаблицы = 5;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Истина;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыКорректировкиВыплаты());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтотОбъект, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.НачисленияИмя = "Начисления";
	Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
	Описание.УдержанияИмя = "Удержания";
	Описание.НДФЛИмя = "НДФЛ";
	Описание.КорректировкиВыплатыИмя = "КорректировкиВыплаты";
	Описание.ПримененныеВычетыИмя = "ПримененныеВычетыНаДетейИИмущественные";
	Описание.ПогашениеЗаймовИмя = "ПогашениеЗаймов";
	Описание.МесяцНачисленияИмя = "ПериодРегистрации";
	Описание.ИменаПолейНачисления = "ВидОплатыПособия,ВидОплатыЗаСчетРаботодателя,ВидНеоплачиваемогоВремени,НачисленияНачисление";
	Описание.РегистрацияНачисленийДоступна = Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
	Описание.ЕстьОплатаПоСреднемуФСС = Истина;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Месяц", "МесяцНачисленияСтрокой"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Сотрудник", "Объект.Сотрудник"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Причина нетрудоспособн.", "Объект.ПричинаНетрудоспособности"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Освобождение от работы с", "Объект.ДатаНачала"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Освобождение от работы по", "Объект.ДатаОкончания"));
	Описание.ПроверяемыеПериоды.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеПроверяемогоПериода("Освобождение от работы с", "Объект.ДатаНачала", "Освобождение от работы по", "Объект.ДатаОкончания"));

	Если ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.НазначитьПособие") Тогда
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Дата начала нетрудоспособности", "Объект.ДатаНачалаСобытия"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Дата начала оплаты", "Объект.ДатаНачалаОплаты"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Дата окончания оплаты", "Объект.ДатаОкончанияОплаты"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Процент оплаты", "Объект.ПроцентОплаты"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Ограничение пособия", "Объект.ОграничениеПособия"));
		Описание.ПроверяемыеПериоды.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеПроверяемогоПериода("Дата начала оплаты", "Объект.ДатаНачалаОплаты", "Дата окончания оплаты", "Объект.ДатаОкончанияОплаты"));
	КонецЕсли;
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата(Форма);
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ДополнитьОписаниеРасчетногоДокумента(Описание);
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ФиксПериодРасчетаСреднегоЗаработка Тогда
		
		ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия, ПорядокРасчетаСреднегоЗаработкаФСС());
		
		Если НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаНачало) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаНачала)
			Или НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаОкончания) Тогда
			
			Объект.ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
			Объект.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
			
			// Период годами
			Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ПериодРасчетаСреднего.ДатаНачала);
			Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Год(ПериодРасчетаСреднего.ДатаОкончания);
			
			ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Истина; // Изменился период расчета среднего.
			
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеДляРасчетаСреднего();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей()Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = Новый Структура;
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОплаченоДней");
	НачисленияФиксРасчетВремени.Добавить("ОплаченоЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияФиксЗаполнение = Новый Массив;
	НачисленияФиксЗаполнение.Добавить("МестоПолученияДохода");
	
	НачисленияПоля = Новый Структура;
	НачисленияПоля.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	НачисленияПоля.Вставить("ФиксЗаполнение", НачисленияФиксЗаполнение);
	НачисленияПоля.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	НачисленияПоля.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить("Начисления", НачисленияПоля);
	КонтролируемыеПоля.Вставить("НачисленияПерерасчет", НачисленияПоля);
	КонтролируемыеПоля.Вставить("НДФЛ", УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля);
	КонецЕсли;
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	ОчиститьСообщения();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	Если ПараметрыДляРаспределения.РаспределятьЗависимыеТаблицы Тогда
		ОбновитьБухучетРезультатовРасчетаНаСервере(ПараметрыДляРаспределения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата(Форма) Экспорт
	
	ОписанияТаблиц = Новый Структура;
	ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Вставить("КорректировкиВыплаты", ОписаниеТаблицыКорректировкиВыплаты());
	ОписанияТаблиц.Вставить("ПогашениеЗаймов", ОписаниеТаблицыПогашениеЗаймов());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обслуживание элементов формы.

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ПериодРегистрацииПриИзмененииНаСервере();
	НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРассчитанныеДанныеНаКлиенте()
	
	ОчиститьРассчитанныеДанные();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРассчитанныеДанные(ПерезаполнитьНачисления = Истина)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ПерезаполнитьНачисления Тогда
		Объект.Начисления.Очистить();
		Объект.НачисленияПерерасчет.Очистить();
		Объект.НачисленияПерерасчетНулевыеСторно.Очистить();
		Объект.УправленческиеНачисления.Очистить();
		Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
		Объект.Показатели.Очистить();
		Объект.ПогашениеЗаймов.Очистить();
	КонецЕсли;
	
	Объект.Удержания.Очистить();
	Объект.НДФЛ.Очистить();
	Объект.КорректировкиВыплаты.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	ОбновитьПерерасчетИтог(ЭтотОбъект);
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьИнфонадписьРасчетаСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОЗаполненностиДанных = УчетПособийСоциальногоСтрахованияРасширенный.ИнформацияОЗаполненностиДанныхСреднегоЗаработка(
		Объект.Ссылка,
		ЗаполнениеВыполнено,
		ПараметрыРасчетаСреднегоДневногоЗаработкаФСС(),
		Объект.СреднийДневнойЗаработок,
		Объект.МинимальныйСреднедневнойЗаработок
	);
		
	ЗаполненностьДанныхИнформационныйТекст = ИнформацияОЗаполненностиДанных.Текст;
	ЗаполненностьДанныхКартинка	= ИнформацияОЗаполненностиДанных.Картинка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПерерасчетов()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияПерерасчет", "Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерерасчетГруппа", "Видимость", ПерерасчетыДоступны);
	
	ИсправлениеДокументовРасчетЗарплатыКлиентСервер.УстановитьДоначислениеПриИсправлении(ЭтаФорма, ПерерасчетыДоступны);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты()
	Если Не ИспользуетсяРасчетЗарплаты
		Или Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеНачисления = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
		Если ПроверяемыеНачисления.Найти(СтрокаТаблицы.Начисление) = Неопределено Тогда
			ПроверяемыеНачисления.Добавить(СтрокаТаблицы.Начисление);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.НачисленияПерерасчет Цикл
		Если ПроверяемыеНачисления.Найти(СтрокаТаблицы.Начисление) = Неопределено Тогда
			ПроверяемыеНачисления.Добавить(СтрокаТаблицы.Начисление);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Обязательное = УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(Объект.ПорядокВыплаты, ПроверяемыеНачисления);
	ОбщегоНазначенияБЗККлиентСервер.УстановитьОбязательностьПоляВводаТаблицыФормы(
		ЭтотОбъект,
		"ПланируемаяДатаВыплаты",
		Обязательное);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдержаний()
	
	УдержанияДоступны = УдержанияДоступны();
	// управление доступностью прочих удержаний, но не НДФЛ
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдержаноВсего", "Видимость", УдержанияДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдержанияИзменить", "Видимость", УдержанияДоступны);
		
КонецПроцедуры

&НаСервере
Функция УдержанияДоступны()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
		
	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНачисленоУдержаноИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	    Возврат;
	КонецЕсли;

	Объект = Форма.Объект;
	
	Форма.НачисленоИтог = 0;
	Форма.НачисленоРаботодатель = 0;
	Форма.НачисленоФСС = 0;
	
	Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
		Если СтрокаТаблицы.Начисление = Объект.ВидОплатыПособия Тогда
			Форма.НачисленоФСС = Форма.НачисленоФСС + СтрокаТаблицы.Результат;
		ИначеЕсли СтрокаТаблицы.Начисление = Объект.ВидОплатыЗаСчетРаботодателя Тогда
			Форма.НачисленоРаботодатель = Форма.НачисленоРаботодатель + СтрокаТаблицы.Результат;
		КонецЕсли;
	КонецЦикла;
	
	Форма.НачисленоИтог = Объект.Начисления.Итог("Результат");
	
	Форма.НДФЛ 					= Объект.НДФЛ.Итог("Налог");
	Форма.ПрочиеУдержания 		= Объект.Удержания.Итог("Результат")
		+ Объект.ПогашениеЗаймов.Итог("ПогашениеЗайма")
		+ Объект.ПогашениеЗаймов.Итог("ПогашениеПроцентов")
		+ Объект.ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду");
	Форма.УдержаноИтог 			= Форма.НДФЛ + Форма.ПрочиеУдержания;
	Форма.КорректировкаВыплаты 	= Объект.КорректировкиВыплаты.Итог("КорректировкаВыплаты");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	    Возврат;
	КонецЕсли;

	Форма.ПерерасчетИтог = Форма.Объект.НачисленияПерерасчет.Итог("Результат");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредупреждениеДокументНеРассчитан(Форма)
	
	Форма.ЗаполненностьДанныхИнформационныйТекст = УчетСреднегоЗаработкаКлиентСервер.ТекстПредупрежденияДокументНеРассчитан();
	Форма.ЗаполненностьДанныхКартинка = БиблиотекаКартинок.Предупреждение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляПервичногоБольничногоЛиста(Форма)

	Форма.Элементы.НадписьПервичныйЛистокНетрудоспособности.Доступность = Форма.Объект.ЯвляетсяПродолжениемБолезни;
	Если ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист) Тогда
		Форма.НадписьПервичныйЛистокНетрудоспособности = Строка(Форма.Объект.ПервичныйБольничныйЛист);
	Иначе
		Форма.НадписьПервичныйЛистокНетрудоспособности = НСтр("ru = 'Выбрать больничный...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПроцентДоплатыЗаДниНетрудоспособности",
		"Доступность",
		Форма.Объект.ДоплачиватьДоСреднегоЗаработка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидРасчетаДоплаты",
		"Доступность",
		Форма.Объект.ДоплачиватьДоСреднегоЗаработка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидРасчетаДоплаты",
		"АвтоОтметкаНезаполненного",
		Форма.Объект.ДоплачиватьДоСреднегоЗаработка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидРасчетаДоплаты",
		"ОтметкаНезаполненного",
		Не ЗначениеЗаполнено(Форма.Объект.ВидРасчетаДоплаты));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДополненияПричиныНетрудоспособности()
	Если Не ЭтотОбъект.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.УходЗаРодственникамиСтраница.Видимость = ЭтоУходЗаРодственником();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"СлучайУходаЗаБольнымРебенком",
		"Видимость",
		Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
	
	Если Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		ЗаголовокГруппыУходЗаРодственниками = НСтр("ru = 'Уход за детьми'");
		ЗаголовокПоляРодственник = НСтр("ru = 'Ребенок'");
		ЗаголовокГруппыВторойРодственник = НСтр("ru = 'Второй ребенок за которым осуществляется уход'");
	Иначе
		ЗаголовокГруппыУходЗаРодственниками = НСтр("ru = 'Уход за родственниками'");
		ЗаголовокПоляРодственник = НСтр("ru = 'Родственник'");
		ЗаголовокГруппыВторойРодственник = НСтр("ru = 'Второй родственник за которым осуществляется уход'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"УходЗаРодственникамиСтраница",
		"Заголовок",
		ЗаголовокГруппыУходЗаРодственниками);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"ГруппаРодственникЗаКоторымОсуществляетсяУход2",
		"Заголовок",
		ЗаголовокГруппыВторойРодственник);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"ГруппаРодственникЗаКоторымОсуществляетсяУход2",
		"ЗаголовокСвернутогоОтображения",
		ЗаголовокГруппыВторойРодственник);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"РодственникЗаКоторымОсуществляетсяУход1",
		"Заголовок",
		ЗаголовокПоляРодственник);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы,
		"РодственникЗаКоторымОсуществляетсяУход2",
		"Заголовок",
		ЗаголовокПоляРодственник);
	
	Если Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Элементы.СтраницыУточнениеПричины.ТекущаяСтраница = Элементы.СтраницаУточнениеПричиныПоБеременностиИРодам;
	ИначеЕсли ОбменЛисткамиНетрудоспособностиФСС.ЭтоКарантинныйЭЛН(
			Объект.ПричинаНетрудоспособности,
			Объект.НомерЛисткаНетрудоспособности) Тогда
		Элементы.СтраницыУточнениеПричины.ТекущаяСтраница = Элементы.СтраницаУточнениеПричиныКарантин;
	Иначе
		Элементы.СтраницыУточнениеПричины.ТекущаяСтраница = Элементы.СтраницаУточнениеПричиныНет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Или Не ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СреднийЗаработокФСС.Очистить();
	Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
	Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
	
	Объект.ПериодРасчетаСреднегоЗаработкаНачало  	= Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Неопределено;
	Объект.СреднийДневнойЗаработок                 = Неопределено;
	Объект.ФиксПериодРасчетаСреднегоЗаработка      = Неопределено;
	
	ОчиститьРассчитанныеДанные();
	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПроцентДоплатыЗаДниНетрудоспособности()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни")
		Или Не ЗначениеЗаполнено(Объект.Организация)
		Или ЗначениеЗаполнено(Объект.ПроцентДоплатыЗаДниНетрудоспособности) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПроцентДоплатыЗаДниНетрудоспособности = РасчетЗарплатыРасширенный.ПроцентДоплатыЗаДниНетрудоспособности(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуНачалаПоловиннойОплаты()
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаНачалаПоловиннойОплаты = Неопределено;
	
	ДнейПолнойОплаты = ДнейПолнойОплатыПередПоловинной(Объект);
	Если ДнейПолнойОплаты <> Неопределено
		И ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)
		И ЗначениеЗаполнено(Объект.ДатаНачалаОплаты)
		И ЗначениеЗаполнено(Объект.ДатаОкончанияОплаты) Тогда
		
		ДатаНачалаПоловиннойОплаты = Объект.ДатаНачалаСобытия + ДнейПолнойОплаты * 86400;
		Если Объект.ДатаОкончанияОплаты >= НачалоДня(ДатаНачалаПоловиннойОплаты) - 1 Тогда
			Объект.ДатаНачалаПоловиннойОплаты = Макс(ДатаНачалаПоловиннойОплаты, Объект.ДатаНачалаОплаты);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбраныОсобыеУсловияИсчислений(ЭтотОбъект) Тогда
		Объект.ДатаНачалаПоловиннойОплаты = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДнейПолнойОплатыПередПоловинной(Больничный)
	
	Если Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		
		Если Больничный.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
			Или Больничный.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно
			Или Больничный.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно
			Или Больничный.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
			Или Больничный.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно Тогда
			
			Возврат 10;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьОстаткиОплачиваемыхДнейПоУходуЗаРодственниками(Родственник1 = Истина, Родственник2 = Истина)
	
	Если Не ИспользуетсяРасчетЗарплаты
		Или Не Перечисления.ПричиныНетрудоспособности.ЭтоУходЗаРодственником(Объект.ПричинаНетрудоспособности) Тогда
		Элементы.ОстатокОплачиваемыхДнейУходаЗаРодственником1.Видимость = Ложь;
		Элементы.ОстатокОплачиваемыхДнейУходаЗаРодственником2.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СлучайУходаЗаБольнымРебенком = Неопределено;
	Если Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		СлучайУходаЗаБольнымРебенком = Объект.СлучайУходаЗаБольнымРебенком;
	КонецЕсли;
	
	Если Родственник1 Тогда
		ОстатокОплачиваемыхДнейУходаЗаРодственником1 = УчетПособийСоциальногоСтрахованияРасширенный.ОстатокОплачиваемыхДнейУходаЗаБольнымРодственником(
			Объект.РодственникЗаКоторымОсуществляетсяУход1,
			Макс(Объект.ДатаНачалаРодственник1, Объект.ДатаНачалаОплаты),
			СлучайУходаЗаБольнымРебенком,
			Объект.Ссылка);
		Элементы.ОстатокОплачиваемыхДнейУходаЗаРодственником1.Видимость = (ОстатокОплачиваемыхДнейУходаЗаРодственником1 <> Неопределено);
	КонецЕсли;
	Если Родственник2 Тогда
		ОстатокОплачиваемыхДнейУходаЗаРодственником2 = УчетПособийСоциальногоСтрахованияРасширенный.ОстатокОплачиваемыхДнейУходаЗаБольнымРодственником(
			Объект.РодственникЗаКоторымОсуществляетсяУход2,
			Макс(Объект.ДатаНачалаРодственник2, Объект.ДатаНачалаОплаты),
			СлучайУходаЗаБольнымРебенком,
			Объект.Ссылка);
		Элементы.ОстатокОплачиваемыхДнейУходаЗаРодственником2.Видимость = (ОстатокОплачиваемыхДнейУходаЗаРодственником2 <> Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// ПИЛОТНЫЙ ПРОЕКТ ФСС

&НаКлиенте
Процедура ОткрытьЗаявлениеСотрудникаНаВыплатуПособия(ОбъектЗаписан, ПараметрыЗаписи) Экспорт
	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ОткрытьЗаявлениеСотрудникаПоОснованию(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура УчетПособийОбновитьСведенияОПрямыхВыплатах()
	Элементы.СтраницаПилотныйПроектФСС.Видимость = ИспользуетсяРасчетЗарплаты
		И ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(
			Объект.Организация,
			Объект.ПериодРегистрации,
			Объект.ЭЛНКарантинПоКоронавирусу);
	ОбновитьГиперссылкиПрямыхВыплатИЭЛН();
КонецПроцедуры

&НаСервере
Функция ЭтоУходЗаРодственником()
	Возврат Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
		Или Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	// Поля, доступные только в первичному документе (недоступны в продолжении больничного).
	Поля = Новый Массив;
	Поля.Добавить("ПроцентОплатыБезЛьгот");
	Поля.Добавить("ОграничениеПособияБезЛьгот");
	Поля.Добавить("ФинансированиеФедеральнымБюджетом");
	Поля.Добавить("ДатаНачалаСобытия");
	Поля.Добавить("ПроцентОплаты");
	Поля.Добавить("ОграничениеПособия");
	Поля.Добавить("УчитыватьЗаработокПредыдущихСтрахователей");
	Поля.Добавить("РасчетПоПравилам2010Года");

	ПоляДоступны = Не ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист);
	
	Для Каждого Поле Из Поля Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, Поле, "Доступность", ПоляДоступны);
	КонецЦикла;
	
КонецПроцедуры

#Область ДанныеЛисткаНетрудоспособности

&НаКлиенте
Процедура ПослеВводаДанныхЛисткаНетрудоспособности(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ОбновитьДанныеЛисткаНетрудоспособностиПослеРедактированияНаСервере(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЛисткаНетрудоспособностиПослеРедактированияНаСервере(Параметр)
	ИменаРеквизитов = ИменаРеквизитовДляРеестровФСС();
	
	ТекущиеДанные = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, ИменаРеквизитов);
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(ТекущиеДанные, Параметр) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр, ИменаРеквизитов);
		ОбновитьГиперссылкиПрямыхВыплатИЭЛН();
		УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкиПрямыхВыплатИЭЛН()
	Если ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности) И ЗначениеЗаполнено(Объект.ДатаВыдачиЛисткаНетрудоспособности) Тогда
		ЗаголовокГиперссылкиЭЛН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заполнены данные ЛН №%1 от %2'"),
			Объект.НомерЛисткаНетрудоспособности,
			Формат(Объект.ДатаВыдачиЛисткаНетрудоспособности, "ДЛФ=D"));
	Иначе
		ЗаголовокГиперссылкиЭЛН = "";
	КонецЕсли;
	
	Если Элементы.СтраницаПилотныйПроектФСС.Видимость Тогда
		ГиперссылкаЗаявлениеСотрудникаНаВыплатуПособия = ПрямыеВыплатыПособийСоциальногоСтрахования.ЗаголовокГиперссылкиЗаявления(Объект.Ссылка);
		ГиперссылкаВводДополнительныхДанных = ?(
			ЗаголовокГиперссылкиЭЛН = "",
			НСтр("ru = 'Заполнить данные для реестра сведений, передаваемого в ФСС'"),
			ЗаголовокГиперссылкиЭЛН);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаРеквизитовДляРеестровФСС()
	Возврат "ПредоставленДубликатЛисткаНетрудоспособности,МедицинскаяОрганизация,НаименованиеМедицинскойОрганизации,АдресМедицинскойОрганизации,
	|ОГРНМедицинскойОрганизации,ДатаВыдачиЛисткаНетрудоспособности,КодПричиныНетрудоспособности,
	|ДополнительныйКодПричиныНетрудоспособности,ВторойКодПричиныНетрудоспособности,НаименованиеОрганизацииВЛисткеНетрудоспособности,
	|ОсновноеМестоРаботы,НомерЛисткаПоОсновномуМестуРаботы,ДатаИзмененияКодаПричиныНетрудоспособности,ДатаОкончанияПутевки,НомерПутевки,
	|ОГРН_Санатория,ПоУходуВозрастЛет1,ПоУходуВозрастМесяцев1,ПоУходуРодственнаяСвязь1,ПоУходуФИО1,ПоУходуИспользованоДней1,ПоУходуВозрастЛет2,ПоУходуВозрастМесяцев2,
	|ПоУходуРодственнаяСвязь2,ПоУходуФИО2,ПоУходуИспользованоДней2,ПоставленаНаУчетВРанниеСрокиБеременности,КодНарушенияРежима,ДатаНарушенияРежима,
	|ПериодНахожденияВСтационареСРебенкомС,ПериодНахожденияВСтационареСРебенкомПо,ДатаНаправленияВБюроМСЭ,ДатаРегистрацииДокументовМСЭ,
	|ДатаОсвидетельствованияМСЭ,ГруппаИнвалидности,ОсвобождениеДатаНачала1,ОсвобождениеДатаОкончания1,ОсвобождениеДолжностьВрача1,
	|ОсвобождениеФИОВрача1,ОсвобождениеИдентификационныйНомерВрача1,ОсвобождениеФИОВрачаПредседателяВК1,ОсвобождениеДолжностьВрачаПредседателяВК1,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1,ОсвобождениеДатаНачала2,ОсвобождениеДатаОкончания2,ОсвобождениеДолжностьВрача2,
	|ОсвобождениеФИОВрача2,ОсвобождениеИдентификационныйНомерВрача2,ОсвобождениеФИОВрачаПредседателяВК2,ОсвобождениеДолжностьВрачаПредседателяВК2,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2,ОсвобождениеДатаНачала3,ОсвобождениеДатаОкончания3,ОсвобождениеДолжностьВрача3,
	|ОсвобождениеФИОВрача3,ОсвобождениеИдентификационныйНомерВрача3,ОсвобождениеФИОВрачаПредседателяВК3,ОсвобождениеДолжностьВрачаПредседателяВК3,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3,ПриступитьКРаботеС,ДатаНовыйСтатусНетрудоспособного,НовыйСтатусНетрудоспособного,
	|НомерЛисткаПродолжения,УсловияИсчисленияКод1,УсловияИсчисленияКод2,УсловияИсчисленияКод3,ДатаАктаН1,ДатаНачалаРаботы";
КонецФункции

#КонецОбласти

// ПИЛОТНЫЙ ПРОЕКТ ФСС

&НаСервере
Процедура ОбработатьСообщенияПользователю()
	
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Для Каждого Сообщение Из Сообщения Цикл
		Если СтрНайти(Сообщение.Поле, "ПериодРегистрации") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "ПериодРегистрацииСтрокой";
		КонецЕсли;
		Если СтрНайти(Сообщение.Поле, "ПервичныйБольничныйЛист") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "НадписьПервичныйЛистокНетрудоспособности";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРассчитыватьПоПравилам2010(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Доступен = Форма.Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам")
		И ЗначениеЗаполнено(Форма.Объект.ДатаНачалаСобытия)
		И Форма.Объект.ДатаНачалаСобытия < УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтдельногоРасчетаПособийПоМатеринству();
		
	Форма.Элементы.РасчетПоПравилам2010Года.Доступность = Доступен;
	
	Если Не Доступен Тогда
		Форма.Объект.РасчетПоПравилам2010Года = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьУчитыватьДанныеСтрахователей(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Доступен = Форма.Объект.ПричинаНетрудоспособности <> ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам")
		Или Не Форма.Объект.РасчетПоПравилам2010Года;
		
	Форма.Элементы.УчитыватьЗаработокПредыдущихСтрахователей.Доступность = Доступен;
	
	Если Не Доступен Тогда
		Форма.Объект.УчитыватьЗаработокПредыдущихСтрахователей = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьРазмерыПособияПоСтажу(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;
	
	Объект =  Форма.Объект;
	ДатаУвольненияСотрудника  = Форма.ДатаУвольненияСотрудника;

	Если Объект.ПрименятьЛьготыПриНачисленииПособия
		И Не Объект.ФинансированиеФедеральнымБюджетом = ПредопределенноеЗначение("Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов") Тогда
		Объект.ПроцентОплаты = 100;
		Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение");
	Иначе
		Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
			Или Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
			Если Объект.ДатаНачалаСобытия >=  УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаВводаОграниченийДляПособийПоНС_ПЗ() Тогда
				Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты");
			Иначе
				Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.БезОграничений");
			КонецЕсли;
			Объект.ПроцентОплаты = 100;
			Возврат
		КонецЕсли;
		
		Объект.ОграничениеПособия = ?(?(Объект.СтажРасширенныйЛет > Объект.СтажЛет, Объект.СтажРасширенныйЛет, Объект.СтажЛет) * 12
										+ ?(Объект.СтажРасширенныйМесяцев > Объект.СтажМесяцев, Объект.СтажРасширенныйМесяцев, Объект.СтажМесяцев) >= 6,
		ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"),
		ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ"));
		
		Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
			Объект.ПроцентОплаты = 100;
			Возврат
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаУвольненияСотрудника)
			И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
			// Сотрудник уволен, в течение 30 календарных дней, оплачивается 60%.
			Объект.ПроцентОплаты = 60;
			Возврат;
		КонецЕсли;
		
		Объект.ПроцентОплаты = ПроцентОплатыБольничногоПоСтраховомуСтажу(?(Объект.СтажРасширенныйЛет > Объект.СтажЛет, Объект.СтажРасширенныйЛет, Объект.СтажЛет));
		
	КонецЕсли;
	
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
		Или Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
		Если Объект.ДатаНачалаСобытия >=  УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаВводаОграниченийДляПособийПоНС_ПЗ() Тогда
			Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты");
		Иначе
			Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.БезОграничений");
		КонецЕсли;
		Объект.ПроцентОплатыБезЛьгот = 100;
		Возврат
	КонецЕсли;
	
	Объект.ОграничениеПособияБезЛьгот = ?(Объект.СтажЛет * 12 + Объект.СтажМесяцев >= 6,
	ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"),
	ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ"));
	
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		Объект.ПроцентОплатыБезЛьгот = 100;
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника)
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
		// Сотрудник уволен, в течение 30 календарных дней, оплачивается 60%.
		Объект.ПроцентОплатыБезЛьгот = 60;
		Возврат;
	КонецЕсли;
	
	Объект.ПроцентОплатыБезЛьгот = ПроцентОплатыБольничногоПоСтраховомуСтажу(Объект.СтажЛет);
	
	Если ВыбраныОсобыеУсловияИсчислений(Форма) Тогда
		Объект.ПроцентОплаты = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловияИсчисленияДляПилотногоПроекта()
	
	Если Объект.УсловияИсчисленияКод1 = "47" Тогда
		Объект.УсловияИсчисленияКод1 = Неопределено;
	КонецЕсли;

	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(
			Объект.Организация,
			Объект.ПериодРегистрации,
			Объект.ЭЛНКарантинПоКоронавирусу) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУвольненияСотрудника  = ДатаУвольненияСотрудника;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника)
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
		Объект.УсловияИсчисленияКод1 = "47";
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФинансированиеФедеральнымБюджетомНестраховыхПериодов(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Объект = Форма.Объект;
	ПричинаНестраховыеПериоды = ПредопределенноеЗначение("Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов");
	Если Не ЗначениеЗаполнено(Объект.ФинансированиеФедеральнымБюджетом) Или Объект.ФинансированиеФедеральнымБюджетом = ПричинаНестраховыеПериоды Тогда
		МесяцевСтажаСотрудника 							= Объект.СтажЛет * 12 + Объект.СтажМесяцев;
		МесяцевСтажаРасширенныйСотрудника 				= Объект.СтажРасширенныйЛет * 12 + Объект.СтажРасширенныйМесяцев;
		
		Если ЗначениеЗаполнено(МесяцевСтажаСотрудника) И ЗначениеЗаполнено(МесяцевСтажаРасширенныйСотрудника)
			И МесяцевСтажаСотрудника < МесяцевСтажаРасширенныйСотрудника Тогда
			Объект.ФинансированиеФедеральнымБюджетом 	= ПричинаНестраховыеПериоды;
			Объект.ПрименятьЛьготыПриНачисленииПособия 	= ЗначениеЗаполнено(Объект.ФинансированиеФедеральнымБюджетом);
		Иначе
			Объект.ФинансированиеФедеральнымБюджетом = Неопределено;
			Объект.ПрименятьЛьготыПриНачисленииПособия = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроцентОплатыБольничногоПоСтраховомуСтажу(Лет)

	Возврат ?(Лет >= 8, 100,?(Лет >= 5, 80, 60))

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьСтаж(Форма)
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ДляСотрудникаВведенСтраховойСтаж Тогда
		Объект = Форма.Объект;
		НадписьСтаж = НСтр("ru = 'Страховой стаж: лет - %1; месяцев - %2.'");
		Если Объект.ФинансированиеФедеральнымБюджетом = ПредопределенноеЗначение("Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов")
			И Объект.ПричинаНетрудоспособности <> ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
			И ЗначениеЗаполнено(Объект.СтажРасширенныйЛет + Объект.СтажРасширенныйМесяцев) Тогда
			НадписьСтаж = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НадписьСтаж, Объект.СтажРасширенныйЛет, Объект.СтажРасширенныйМесяцев);
		Иначе
			НадписьСтаж = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НадписьСтаж, Объект.СтажЛет, Объект.СтажМесяцев);
		КонецЕсли;
	ИначеЕсли Форма.ДоступноИзменение Тогда
		НадписьСтаж = НСтр("ru = 'Ввести страховой стаж...'");
	Иначе
		НадписьСтаж = НСтр("ru = 'Страховой стаж не введен'");
	КонецЕсли;
	
	Форма.НадписьСтаж = НадписьСтаж;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВариантДоплаты()

	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	ДоплачиватьДоСреднегоЗаДниБолезни = НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни;
	ДоплачиватьДоСохраняемогоДенежногоСодержанияЗаДниБолезни = НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	
	ВариантДоплаты = 0;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") И
		 ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
						
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ВидДоговора", Объект.ДатаНачалаСобытия);
			ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
			СотрудникСлужащий = (ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего Или ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего);
			
			Если ДоплачиватьДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
				Если СотрудникСлужащий Тогда
					ВариантДоплаты = 2;
				Иначе
					Если ДоплачиватьДоСреднегоЗаДниБолезни Тогда
						ВариантДоплаты = 1;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ДоплачиватьДоСреднегоЗаДниБолезни Тогда
					ВариантДоплаты = 1;
				КонецЕсли;
			КонецЕсли;
								
		КонецЕсли;
			
	Иначе
		
		ВариантДоплаты = ?(ДоплачиватьДоСреднегоЗаДниБолезни, 1, 0);
			    		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоВариантуДоплаты()
	
	Если ВариантДоплаты = 0 Тогда
		Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница = Элементы.ДоплатаОтсутствует;
	ИначеЕсли ВариантДоплаты = 1 Тогда
		Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница = Элементы.ДоплатаДоСреднегоЗаработка;
	ИначеЕсли ВариантДоплаты = 2 Тогда
		Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница = Элементы.ДоплатаДоДенежногоСодержания;
	КонецЕсли;
			
	Если Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница <> Элементы.ДоплатаДоСреднегоЗаработка Тогда
		Объект.ДоплачиватьДоСреднегоЗаработка 			= Ложь;
		Объект.ПроцентДоплатыЗаДниНетрудоспособности 	= 0;
	КонецЕсли;
	
	Если Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница <> Элементы.ДоплатаДоДенежногоСодержания Тогда
		Объект.ДоплачиватьДоДенежногоСодержания			= Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДенежноеСодержаниеИнфо", "Видимость", Объект.ДоплачиватьДоДенежногоСодержания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПорядкаВыплаты()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПорядокВыплаты", "Доступность", Не (ЗначениеЗаполнено(ДатаУвольненияСотрудника) И ДатаУвольненияСотрудника < Объект.ДатаНачалаСобытия));
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокВыплатыУволенному()
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) И ДатаУвольненияСотрудника < Объект.ДатаНачалаСобытия Тогда
		Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДатуУвольненияСотрудника()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	ДатаУвольненияСотрудника = Неопределено;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаУвольнения", Объект.ДатаНачалаСобытия);
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУвольненияСотрудника = КадровыеДанные[0].ДатаУвольнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияСведенийОРасчетеНДФЛ(АдресРезультата, ПустойПараметр) Экспорт
	Если ТипЗнч(АдресРезультата) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ОбновитьДанныеНДФЛНаСервере(АдресРезультата);
		ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ);
	Объект.ПримененныеВычетыНаДетейИИмущественные.Загрузить(Параметр.ПримененныеВычетыНаДетейИИмущественные);
	ИзмененныеДанные.Загрузить(Параметр.ИзмененныеДанные);
	
	Если ИзмененныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОписаниеТаблицы = ОписаниеТаблицыНДФЛ();
	РассчитатьВсеНаСервере(ОписаниеТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияСведенийОбУдержаниях(АдресРезультата, ПустойПараметр) Экспорт
	Если ТипЗнч(АдресРезультата) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ОбновитьДанныеУдержанийНаСервере(АдресРезультата);
		ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Удержания.Загрузить(Параметр.Удержания.Выгрузить());
	Объект.ПогашениеЗаймов.Загрузить(Параметр.ПогашениеЗаймов.Выгрузить());
	ИзмененныеДанные.Загрузить(Параметр.ИзмененныеДанные.Выгрузить());
	Если ИзмененныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОписаниеТаблицы = ОписаниеТаблицыУдержаний();
	РассчитатьВсеНаСервере(ОписаниеТаблицы);
	
КонецПроцедуры

&НаСервере
Функция ДанныеКорректировокВыплаты()
	Возврат РасчетЗарплатыРасширенныйФормы.ДанныеКорректировокВыплаты(ЭтаФорма);
КонецФункции

&НаКлиенте
Процедура ПриОкончанииРедактированияКорректировокВыплаты(АдресРезультата, ПустойПараметр) Экспорт
	Если ТипЗнч(АдресРезультата) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ОбновитьДанныеКорректировокВыплатыНаСервере(АдресРезультата);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКорректировокВыплатыНаСервере(АдресВременногоХранилища)
	
	РасчетЗарплатыРасширенныйФормы.ОбновитьДанныеКорректировокВыплаты(ЭтаФорма, АдресВременногоХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеКорректировкиВыплаты()
	
	КорректировкаВыплаты = Объект.КорректировкиВыплаты.Итог("КорректировкаВыплаты");
	
КонецПроцедуры

&НаСервере
Процедура КорректировкиВыплатыВДанные(ТекущийОбъект)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда 
		ТекущийОбъект.КорректировкиВыплаты.Очистить();
		НоваяСтрока = ТекущийОбъект.КорректировкиВыплаты.Добавить();
		НоваяСтрока.КорректировкаВыплаты = КорректировкаВыплаты;
		Если ЗначениеЗаполнено(ТекущийОбъект.Сотрудник) Тогда 
			НоваяСтрока.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Сотрудник, "ФизическоеЛицо");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Результаты");
	ИменаЭлементов.Добавить("Условия");
	ИменаЭлементов.Добавить("ОплатаСтраница");
	ИменаЭлементов.Добавить("НачисленияСтраница");
	ИменаЭлементов.Добавить("НачисленияПерерасчетСтраница");
	ИменаЭлементов.Добавить("РассчитатьЗарплату");
	ИменаЭлементов.Добавить("КорректировкаВыплатыГруппа");
	ИменаЭлементов.Добавить("Сторнировать");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтотОбъект, ИменаЭлементов);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда
		УстановитьВидимостьПерерасчетов();
		УстановитьВидимостьУдержаний();
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьВидимостьПолейНормыВремени(
			ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Объект.РассчитатьЗарплату);
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РайонныйКоэффициентРФНаНачалоСобытия", "Видимость", ПолучитьФункциональнуюОпциюФормы("ПрименятьРайонныйКоэффициент"));
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "Результаты", "ТолькоПросмотр", Истина);
		ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(ЭтаФорма);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриУстановкеВидимостиРасчетныхПолейДокументаОплатыТруда(ЭтотОбъект);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступностьКорректировкиВыплаты(
		ЭтаФорма, ИспользуетсяРасчетЗарплаты, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокЭЛН()
	Элементы.ПолучитьИзФСС.Доступность = ЕстьПраваНаРедактированиеКадровыхДанных;
	Элементы.ЗагрузитьИзФайла.Доступность = ЕстьПраваНаРедактированиеКадровыхДанных;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляРезультатаЗаСчетФБ(Форма, Видимость, ИмяПоляРезультатЗаСчетФБ = "НачисленияРезультатВТомЧислеЗаСчетФБ")

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоляРезультатЗаСчетФБ, "Видимость", Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда
		
		Объект.ДокументРассчитан = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		Объект.Рассчитал = Неопределено;
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтотОбъект, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		УстановитьВидимостьРасчетныхПолей();
		УстановитьДоступностьКнопокЭЛН();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФлажкаРассчитатьЗарплату()
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Элементы.РассчитатьЗарплату.Заголовок = НСтр("ru = 'Рассчитать зарплату за период до начала больничного'");
	Иначе
		Элементы.РассчитатьЗарплату.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Рассчитать зарплату за %1'"), ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.ПериодРегистрации));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоРассчитатьЗарплату()
	
	ПараметрыИсправленного = Неопределено;
	Если ИсправлениеДокументовЗарплатаКадрыКлиентСервер.ЭтоИсправление(ЭтаФорма, ПараметрыИсправленного) Тогда
		НачалоПериода = ПараметрыИсправленного.ПериодРегистрации;
	Иначе
		НачалоПериода = Объект.ПериодРегистрации;
	КонецЕсли;
	
	ДоступенРасчетЗарплаты = Не Объект.ЯвляетсяПродолжениемБолезни И Объект.ДатаНачалаСобытия > НачалоПериода
								И Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
								И ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты);
	
	Если Не ДоступенРасчетЗарплаты Тогда
		Объект.РассчитатьЗарплату = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитатьЗарплату", "Доступность", ДоступенРасчетЗарплаты);
	
	РассчитатьЗарплатуПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Функция ПериодРасчетаЗарплатыДоНачалаОтсутствия()
	
	Если Не ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьСвойствоРассчитатьЗарплату();
	
	Если Не Объект.РассчитатьЗарплату Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыИсправленного = Неопределено;
	Если ИсправлениеДокументовЗарплатаКадрыКлиентСервер.ЭтоИсправление(ЭтаФорма, ПараметрыИсправленного) Тогда
		НачалоПериода = ПараметрыИсправленного.ПериодРегистрации;
	Иначе
		НачалоПериода = Объект.ПериодРегистрации;
	КонецЕсли;
	
	Если Объект.ДатаНачалаСобытия <= НачалоПериода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОкончаниеПериода = КонецМесяца(Объект.ПериодРегистрации);
	Если ОкончаниеПериода > Объект.ДатаНачалаСобытия Тогда
		ОкончаниеПериода = НачалоДня(Объект.ДатаНачалаСобытия) - 1;
	КонецЕсли;
	
	ПериодРасчетаЗарплаты = Новый СтандартныйПериод;
	ПериодРасчетаЗарплаты.ДатаНачала = НачалоПериода;
	ПериодРасчетаЗарплаты.ДатаОкончания = ОкончаниеПериода;
	
	Возврат ПериодРасчетаЗарплаты;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗапрашиваемыеЗначения = Новый Структура("Организация, МесяцРасчета", "Объект.Организация", "Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	КонецЕсли;

	УстановитьОтветственныхЛиц();
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ(ФизическоеЛицо = Неопределено) Экспорт
	
	ДополнительныеСведения = УчетНДФЛФормыРасширенный.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления = Объект.ПериодРегистрации;
	ДополнительныеСведения.ПорядокВыплаты = Объект.ПорядокВыплаты;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = Объект.ПланируемаяДатаВыплаты;
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормыРасширенный.СведенияОДоходахНДФЛДокумента(Объект, "Начисления,НачисленияПерерасчет", ДополнительныеСведения);	
	АдресСведенийОбНДФЛ = УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтотОбъект);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам", СведенияОДоходахНДФЛ.ВычетыКДоходам);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, ЭтотОбъект.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СведенияОбУдержаниях() Экспорт
	
	Возврат РасчетЗарплатыРасширенный.СведенияОбУдержаниях(ЭтотОбъект);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыСтажаВЛисткеНетрудоспособности() Экспорт
	
	Возврат Документы.БольничныйЛист.ВидыСтажаВЛисткеНетрудоспособности();
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПредупрежденияОНезаполненномСтаже()
	
	ТребуетсяВводСтажа = ИспользуетсяРасчетЗарплаты И Не ДляСотрудникаВведенСтраховойСтаж И ЗначениеЗаполнено(Объект.Сотрудник);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтажиНеЗаданыГруппа", "Видимость", ТребуетсяВводСтажа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОткрытьДенежноеСодержаниеЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ТребуетсяОбновитьДанныеУчетаСреднегоЗаработка = Ложь;
		НачатьПерезаполнениеИРасчетНачисленийНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()

	Если РегистрацияНачисленийДоступна Тогда
		РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтотОбъект, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтотОбъект, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБухучетРезультатовРасчетаНаСервере(ИсходныеДанные)
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ПериодРасчетаЗарплаты = ПериодРасчетаЗарплатыДоНачалаОтсутствия();
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, ПериодРасчетаЗарплаты);
	МенеджерРасчета.НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ = МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ;
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета);
	
	МенеджерРасчета.ЗаполнитьНастройкиОбновленияБухучета(ИсходныеДанные);
	МенеджерРасчета.ОбновитьБухучетРезультатовРасчета();
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
	
	РасчетЗарплатыРасширенныйФормы.УстановитьТекущуюСтрокуТаблицыФормы(ЭтотОбъект, ИсходныеДанные.ИмяИсходнойТаблицы, ИсходныеДанные.НомерСтрокиИсходнойТаблицы);
	
КонецПроцедуры

&НаСервере
Функция КоэффициентыСреднегоЗаработка()
	
	ТаблицаКоэффициентов = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка();
	Для каждого СтрокаТЧ Из Объект.СреднийЗаработокФСС Цикл
		НоваяСтрока = ТаблицаКоэффициентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Коэффициент = СтрокаТЧ.Сумма;
	КонецЦикла;
	ОтражениеЗарплатыВБухучетеРасширенный.СвернутьТаблицуКоэффициентовРаспределенияСреднегоЗаработка(ТаблицаКоэффициентов);
	
	Возврат ТаблицаКоэффициентов;

КонецФункции

&НаСервере
Процедура УстановитьИнфоНадписьЗамещения()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЦепочкиДокументовФормы");
		Модуль.УстановитьИнфоНадписьЗамещения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПорядокВыплатыПриИзмененииНаСервере()
	
	УстановитьВидимостьУдержаний();
	УстановитьСвойствоРассчитатьЗарплату();
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтветственныхЛиц()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

#КонецОбласти


#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти
