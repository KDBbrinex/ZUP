
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Создается новый документ.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Объект.ДатаПроисшествия = Объект.Дата;
		
		ОрганизацияПриИзмененииНаСервере();
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ПриПолученииДанныхНаСервере();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_НесчастныйСлучайНаПроизводстве", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры
	
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьДанныеФормыПоОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ЭлементРедактированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура;
	ИмяЭлемента = Элемент.Имя;
	Если ТипЗнч(ЭтотОбъект.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ЭтотОбъект.ТекущийЭлемент.Имя, "");
		ПараметрыОповещения.Вставить("ТаблицаФормы", ЭтотОбъект.ТекущийЭлемент.Имя);
	КонецЕсли;
	ПараметрыОповещения.Вставить("ИмяЭлемента", ИмяЭлемента);
	Оповещение = Новый ОписаниеОповещения("ЭлементРедактированияЗавершениеВвода", ЭтотОбъект, ПараметрыОповещения);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элемент.ТекстРедактирования,
		Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроисшествияПриИзменении(Элемент)
	
	Объект.ДатаПроисшествия = Дата(Год(ДатаПроисшествия), Месяц(ДатаПроисшествия), День(ДатаПроисшествия), Час(ВремяПроисшествия), Минута(ВремяПроисшествия), Секунда(ВремяПроисшествия));
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПроисшествия) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОкончанияВнеплановойПроверки = ДобавитьМесяц(Объект.ДатаПроисшествия, 6);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В одной или нескольких строках по пострадавшим установлена дата внеплановой спецоценки,
				|выходящая за период %1 - %2.
				|Установить дату внеплановой спецоценки %2 ?'"),
			Формат(Объект.ДатаПроисшествия, "ДЛФ=Д"),
			Формат(ДатаОкончанияВнеплановойПроверки, "ДЛФ=Д"));
	
	НайденаНеправильнаяДатаВнеплановойПроверки = Ложь;
	Для Каждого СтрокаПострадавшие Из Объект.Пострадавшие Цикл
		Если СтрокаПострадавшие.ДатаВнеплановойСпецоценки > ДатаОкончанияВнеплановойПроверки
			Или СтрокаПострадавшие.ДатаВнеплановойСпецоценки < Объект.ДатаПроисшествия Тогда
			НайденаНеправильнаяДатаВнеплановойПроверки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденаНеправильнаяДатаВнеплановойПроверки Тогда
		ДополнительныеПараметры = Новый Структура("ДатаОкончанияВнеплановойПроверки", ДатаОкончанияВнеплановойПроверки);
		Оповещение = Новый ОписаниеОповещения("ДатаПроисшествияЗавершениеИзменения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроисшествияЗавершениеИзменения(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПострадавшие Из Объект.Пострадавшие Цикл
		Если СтрокаПострадавшие.ДатаВнеплановойСпецоценки > ДополнительныеПараметры.ДатаОкончанияВнеплановойПроверки
			Или СтрокаПострадавшие.ДатаВнеплановойСпецоценки < Объект.ДатаПроисшествия Тогда
			СтрокаПострадавшие.ДатаВнеплановойСпецоценки = ДополнительныеПараметры.ДатаОкончанияВнеплановойПроверки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяПроисшествияПриИзменении(Элемент)
	Объект.ДатаПроисшествия = Дата(Год(ДатаПроисшествия), Месяц(ДатаПроисшествия), День(ДатаПроисшествия), Час(ВремяПроисшествия), Минута(ВремяПроисшествия), Секунда(ВремяПроисшествия));
КонецПроцедуры

#Область ОбработчикиПодсистемыПодписиДокументов

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомиссия

&НаКлиенте
Процедура КомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.РольВКомиссии = ПредопределенноеЗначение("Перечисление.РолиЧленовКомиссииОхраныТруда.ЧленКомиссии");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ВидУчастникаКомиссии) Тогда
		ТекущиеДанные.ВидУчастникаКомиссии = НСтр("ru = 'Из справочника'");
	КонецЕсли;
	
	ПриИзмененииВидаУчастникаКомиссии(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияЧленКомиссииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЧленКомиссии) И ТипЗнч(ТекущиеДанные.ЧленКомиссии) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТекущиеДанные.Должность = ДолжностьЧленаКомиссии(ТекущиеДанные.ЧленКомиссии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияРольВКомиссииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Комиссия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияВидУчастникаКомиссииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииВидаУчастникаКомиссии(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПострадавшие

&НаКлиенте
Процедура ПострадавшиеПострадавшийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Пострадавшие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПострадавшего(Объект, ТекущиеДанные, Объект.ДатаПроисшествия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПострадавшиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПострадавшиеИнструктажи" Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Пострадавший", ТекущиеДанные.Пострадавший);
		ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
		ПараметрыОткрытия.Вставить("Инструктажи", ИнструктажиПострадавшего(ТекущиеДанные.Пострадавший));
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ИнструктажиПострадавшегоЗавершение", ЭтотОбъект, ПараметрыОткрытия);
		ОткрытьФорму("Документ.НесчастныйСлучайНаПроизводстве.Форма.ФормаИнструктажей", ПараметрыОткрытия, ЭтотОбъект,,,,
			ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструктажиПострадавшегоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Инструктажи.НайтиСтроки(Новый Структура("Пострадавший", Результат.Пострадавший));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.Инструктажи.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	Для каждого СтрокаИнструктажа Из Результат.Инструктажи Цикл
		НоваяСтрока = Объект.Инструктажи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИнструктажа);
		НоваяСтрока.Пострадавший = Результат.Пострадавший;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ОбновитьНадписиИнструктажей(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПострадавшиеВидИСтепеньОпьяненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Пострадавшие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОпьянениеПострадавшего = Не ПустаяСтрока(ТекущиеДанные.ВидИСтепеньОпьянения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПострадавшиеСтажОбщийПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДатаСведений = Объект.ДатаПроисшествия;
	
	ТекущиеДанные = Элементы.Пострадавшие.ТекущиеДанные;
	ВидСтажаПострадавшего = ТекущиеДанные.СтажОбщийВид;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СтажОбщийВид) Тогда
		ВидыСтажа = ВидыСтажаПоКатегорииОбщий();
		Если ВидыСтажа.Количество() > 0 Тогда
			ВидСтажаПострадавшего = ВидыСтажа[0];
			ТекущиеДанные.СтажОбщийВид = ВидСтажаПострадавшего;
		КонецЕсли;
	КонецЕсли;
	ВидыСтажа = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидСтажаПострадавшего);
	
	СтажиФизическихЛиц.Очистить();
	Если ЗначениеЗаполнено(ТекущиеДанные.СтажОбщийДатаОтсчета) Тогда
		
		НоваяСтрокаСтажа = СтажиФизическихЛиц.Добавить();
		НоваяСтрокаСтажа.Период = Объект.ДатаАкта;
		НоваяСтрокаСтажа.ФизическоеЛицо = ТекущиеДанные.Пострадавший;
		НоваяСтрокаСтажа.ВидСтажа = ВидСтажаПострадавшего;
		
		НоваяСтрокаСтажа.ДатаОтсчета = ТекущиеДанные.СтажОбщийДатаОтсчета;
		НоваяСтрокаСтажа.РазмерМесяцев = ТекущиеДанные.СтажОбщийРазмерМесяцев;
		НоваяСтрокаСтажа.РазмерДней = ТекущиеДанные.СтажОбщийРазмерДней;
		НоваяСтрокаСтажа.ИсчисляетсяСДатыПриема = ТекущиеДанные.СтажОбщийИсчисляетсяСДатыПриема;
		
	КонецЕсли;
	
	ПараметрыФормы = КадровыйУчетРасширенныйКлиент.ПараметрыФормыРедактированияСтажей();
	ПараметрыФормы.ТолькоПросмотр          = ТолькоПросмотр;
	ПараметрыФормы.ФизическоеЛицо          = ТекущиеДанные.Пострадавший;
	ПараметрыФормы.ДатаСведений            = ДатаСведений;
	ПараметрыФормы.ВидыСтажа               = Новый ФиксированныйМассив(ВидыСтажа);
	ПараметрыФормы.ДанныеСтажей            = СтажиФизическихЛиц;
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ПослеИзмененияСведенийОСтажеПострадавшего", ЭтотОбъект);
	
	КадровыйУчетРасширенныйКлиент.ОткрытьФормуРедактированияСтажей(ПараметрыФормы, ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПострадавшиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораПострадавшиеНаСервере(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОчевидцы

&НаКлиенте
Процедура ОчевидцыАдресПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Очевидцы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"),
		ТекущиеДанные.Адрес);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораАдресаОчевидца", ЭтотОбъект, ПараметрыОповещения);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораАдресаОчевидца(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт 
	
	Если ТипЗнч(РезультатОткрытияФормы) <> Тип("Структура") Тогда
		// не было изменений в данных
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПараметрыОповещения.ТекущиеДанные;
	
	ТекущиеДанные.Адрес = РезультатОткрытияФормы.КонтактнаяИнформация;
	ТекущиеДанные.АдресПредставление = РезультатОткрытияФормы.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчевидцыКонтактныйТелефонПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Очевидцы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица"),
		ТекущиеДанные.КонтактныйТелефон,
		,
		,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораТелефонаОчевидца", ЭтотОбъект, ПараметрыОповещения);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораТелефонаОчевидца(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт 
	
	Если ТипЗнч(РезультатОткрытияФормы) <> Тип("Структура") Тогда
		// не было изменений в данных
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПараметрыОповещения.ТекущиеДанные;
	
	ТекущиеДанные.КонтактныйТелефон = РезультатОткрытияФормы.КонтактнаяИнформация;
	ТекущиеДанные.КонтактныйТелефонПредставление = РезультатОткрытияФормы.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчевидцыОчевидецПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Очевидцы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОчевидца(Объект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчевидцыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораОчевидцыНаСервере(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастникиОсмотра

&НаКлиенте
Процедура УчастникиОсмотраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.УчастникиОсмотра.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ВидУчастникаОсмотра) Тогда
		ТекущиеДанные.ВидУчастникаОсмотра = НСтр("ru = 'Из справочника'");
	КонецЕсли;
	
	ПриИзмененииВидаУчастникаОсмотра(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОсмотраВидУчастникаОсмотраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УчастникиОсмотра.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииВидаУчастникаОсмотра(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВиновныеЛица

&НаКлиенте
Процедура ВиновныеЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораВиновныеЛицаНаСервере(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричины

&НаКлиенте
Процедура ПричиныПроисшествияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого ПричинаПроисшествия Из ВыбранноеЗначение Цикл
		Отбор = Новый Структура("Причина", ПричинаПроисшествия);
		Если Объект.ПричиныПроисшествия.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = Объект.ПричиныПроисшествия.Добавить();
			НоваяСтрока.Причина = ПричинаПроисшествия;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура КомиссияЗаполнить(Команда)
	
	КомиссияЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХодОсмотра(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбстановкаИСостояниеМестаПроисшествия", "");
	ПараметрыОткрытия.Вставить("ОписаниеРабочегоМеста", "");
	ПараметрыОткрытия.Вставить("СостояниеЗащитныхОграждений", "");
	ПараметрыОткрытия.Вставить("СостояниеОбщеобменнойВентиляции", "");
	ПараметрыОткрытия.Вставить("ОписаниеОборудования", "");
	ПараметрыОткрытия.Вставить("СостояниеЗащитныхСредств", "");
	ПараметрыОткрытия.Вставить("СостояниеОсвещенности", "");
	ПараметрыОткрытия.Вставить("ТехническиеСредстваОсмотра", "");
	ПараметрыОткрытия.Вставить("ИзъятыеПредметы", "");
	ПараметрыОткрытия.Вставить("ПрилагаемыеДокументы", "");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Объект);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ХодОсмотраЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.НесчастныйСлучайНаПроизводстве.Форма.ФормаХодОсмотраМестаПроисшествия", ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ХодОсмотраЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПострадавшие(Команда)
	ПодборФизическихЛиц("Пострадавшие", "Пострадавший");
КонецПроцедуры

&НаКлиенте
Процедура ПодборОчевидцы(Команда)
	ПодборФизическихЛиц("Очевидцы", "Очевидец");
КонецПроцедуры

&НаКлиенте
Процедура ПодборВиновныеЛица(Команда)
	ПодборФизическихЛиц("ВиновныеЛица", "ВиновноеЛицо");
КонецПроцедуры

&НаКлиенте
Процедура ПодборПричины(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ПричиныПроисшествий.Форма.ФормаСписка", ПараметрыОткрытияФормы, Элементы.ПричиныПроисшествия);
	
КонецПроцедуры

&НаКлиенте
Процедура БольничныйЛист(Команда)
	
	ТекущиеДанные = Элементы.Пострадавшие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Пострадавший) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойСотрудник = ОсновнойСотрудникФизическогоЛица(ТекущиеДанные.Пострадавший);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Сотрудник", ОсновнойСотрудник);
	
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ФормаДокумента", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЧленамиКомиссии(Команда)
	
	Объект.УчастникиОсмотра.Очистить();
	Для каждого СтрокаУчастникаКомиссии Из Объект.Комиссия Цикл
		НоваяСтрокаУчастникаОсмотра = Объект.УчастникиОсмотра.Добавить();
		НоваяСтрокаУчастникаОсмотра.Участник = СтрокаУчастникаКомиссии.ЧленКомиссии;
		НоваяСтрокаУчастникаОсмотра.ВидУчастникаОсмотра = НСтр("ru = 'Из справочника'");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ОбновитьНадписиИнструктажей(Объект);
	
	ЗаполнитьВидыУчастниковОсмотра();
	ЗаполнитьВидыУчастниковКомиссии();
	
	ДатаПроисшествия = Объект.ДатаПроисшествия;
	ВремяПроисшествия = Объект.ДатаПроисшествия;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементРедактированияЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТаблицаФормы") Тогда
		Элементы[ДополнительныеПараметры.ТаблицаФормы].ТекущиеДанные[ДополнительныеПараметры.ИмяЭлемента] = ВведенныйТекст;
	Иначе
		Объект[ДополнительныеПараметры.ИмяЭлемента] = ВведенныйТекст;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДолжностьЧленаКомиссии(ЧленКомиссии)
	
	ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ЧленКомиссии, Истина, Объект.Организация, Объект.ДатаПроисшествия);
	Сотрудники = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "ТекущаяДолжность", Объект.ДатаПроисшествия);
	
	Если КадровыеДанные.Количество() > 0 Тогда
		ТекущаяДолжность = КадровыеДанные[0].ТекущаяДолжность;
		Если ЗначениеЗаполнено(ТекущаяДолжность) Тогда
			Возврат ТекущаяДолжность;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура КомиссияЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НесчастныйСлучайНаПроизводстве.Ссылка) КАК Документ
	|ПОМЕСТИТЬ ВТДокументыСКомиссией
	|ИЗ
	|	Документ.НесчастныйСлучайНаПроизводстве КАК НесчастныйСлучайНаПроизводстве
	|ГДЕ
	|	НесчастныйСлучайНаПроизводстве.Организация = &Организация
	|	И НесчастныйСлучайНаПроизводстве.Дата < &ДатаДокумента
	|	И НесчастныйСлучайНаПроизводстве.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НесчастныйСлучайНаПроизводстве.ЧленКомиссии КАК ЧленКомиссии,
	|	НесчастныйСлучайНаПроизводстве.Должность КАК Должность,
	|	НесчастныйСлучайНаПроизводстве.РольВКомиссии КАК РольВКомиссии
	|ИЗ
	|	ВТДокументыСКомиссией КАК ДокументыСКомиссией
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НесчастныйСлучайНаПроизводстве.Комиссия КАК НесчастныйСлучайНаПроизводстве
	|		ПО ДокументыСКомиссией.Документ = НесчастныйСлучайНаПроизводстве.Ссылка
	|ГДЕ
	|	НесчастныйСлучайНаПроизводстве.ЧленКомиссии ЕСТЬ НЕ NULL ";
	
	Объект.Комиссия.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Объект.Комиссия.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Объект.Руководитель) Тогда
			НоваяСтрокаКомиссии = Объект.Комиссия.Добавить();
			НоваяСтрокаКомиссии.ЧленКомиссии = Объект.Руководитель;
			НоваяСтрокаКомиссии.Должность = Объект.ДолжностьРуководителя;
			НоваяСтрокаКомиссии.РольВКомиссии = Перечисления.РолиЧленовКомиссииОхраныТруда.Председатель;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ОтветственныйЗаОхрануТруда) Тогда
			НоваяСтрокаКомиссии = Объект.Комиссия.Добавить();
			НоваяСтрокаКомиссии.ЧленКомиссии = Объект.ОтветственныйЗаОхрануТруда;
			НоваяСтрокаКомиссии.Должность = Объект.ДолжностьОтветственногоЗаОхрануТруда;
			НоваяСтрокаКомиссии.РольВКомиссии = Перечисления.РолиЧленовКомиссииОхраныТруда.ЧленКомиссии;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИнструктажиПострадавшего(Пострадавший)
	
	Инструктажи = Новый Массив;
	НайденныеСтроки = Объект.Инструктажи.НайтиСтроки(Новый Структура("Пострадавший", Пострадавший));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаИнструктажа = Новый Структура;
		СтрокаИнструктажа.Вставить("ВидИнструктажа", НайденнаяСтрока.ВидИнструктажа);
		СтрокаИнструктажа.Вставить("ДатаПрохождения", НайденнаяСтрока.ДатаПрохождения);
		Инструктажи.Добавить(СтрокаИнструктажа);
	КонецЦикла;
	
	Возврат Инструктажи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписиИнструктажей(Объект)
	
	Для Каждого СтрокаТаблицы Из Объект.Пострадавшие Цикл
		НайденныеСтроки = Объект.Инструктажи.НайтиСтроки(Новый Структура("Пострадавший", СтрокаТаблицы.Пострадавший));
		СтрокаТаблицы.Инструктажи = "";
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаТаблицы.Инструктажи = СтрокаТаблицы.Инструктажи + НайденнаяСтрока.ВидИнструктажа + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаТаблицы.Инструктажи, 2);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонтактнуюИнформациюОчевидцаНаСервере(Очевидец, КонтактнаяИнформация, ДатаПолученияДанных)
	
	ПолучаемыеКадровыеДанные = "АдресМестаПроживания,АдресМестаПроживанияПредставление,ТелефонМобильный,ТелефонМобильныйПредставление";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Очевидец), ПолучаемыеКадровыеДанные, ДатаПолученияДанных);
	
	Для Каждого СтрокаКадровыхДанных Из КадровыеДанные Цикл
		КонтактнаяИнформация.Адрес = СтрокаКадровыхДанных.АдресМестаПроживания;
		КонтактнаяИнформация.АдресПредставление = СтрокаКадровыхДанных.АдресМестаПроживанияПредставление;
		КонтактнаяИнформация.КонтактныйТелефон = СтрокаКадровыхДанных.ТелефонМобильный;
		КонтактнаяИнформация.КонтактныйТелефонПредставление = СтрокаКадровыхДанных.ТелефонМобильныйПредставление;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОПострадавшемНаСервере(Пострадавший, Организация, ДатаСведений, ЗаполнятьИнструктажи)
	
	ОсновнойСотрудник = КадровыйУчетРасширенный.ОсновнойСотрудникФизЛица(Пострадавший, Организация, ДатаСведений, Истина);
	КадровыеДанные = "ОбщийСтажВид, ОбщийСтажПериодРегистрации, ОбщийСтажДней, ОбщийСтажМесяцев, ОбщийСтажЛет, ДатаПриема, ДатаУвольнения,
		|ДолжностьПоШтатномуРасписанию, СтажРаботыНаПредприятииЛет, СтажРаботыНаПредприятииМесяцев, СтажРаботыНаПредприятииДней";
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОсновнойСотрудник, КадровыеДанные, ДатаСведений);
	
	// Получим сведения о стажировке
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пострадавший", Пострадавший);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Пострадавший КАК ФизическоеЛицо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	&ДатаСведений КАК ДатаОкончания";
	
	СтажировкиПострадавшего = ОбучениеРазвитие.ОбучениеСотрудников(Запрос.Выполнить().Выгрузить(), Справочники.ВидыМероприятияОбученияРазвития.Стажировка);
	СтажировкиПострадавшего.Сортировать("ДатаОкончания Убыв");
	
	СтруктураСведений = Неопределено;
	Для каждого СтрокаКадровыхДанных Из КадровыеДанныеСотрудников Цикл
		СтруктураСведений = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаКадровыхДанных);
		СведенияСОУТ = ОхранаТруда.СведенияСпецоценкиУсловийТрудаПоРабочемуМесту(СтрокаКадровыхДанных.ДолжностьПоШтатномуРасписанию, ДатаСведений);
		СтруктураСведений.Вставить("СведенияСОУТ", "");
		СтруктураСведений.Вставить("СведенияОПСОУТ", "");
		Если СведенияСОУТ <> Неопределено Тогда
			СтруктураСведений.Вставить("СведенияСОУТ", СведенияСОУТ.СведенияСОУТ);
			СтруктураСведений.Вставить("СведенияОПСОУТ", СведенияСОУТ.СведенияОПСОУТ);
		КонецЕсли;
		СтруктураСведений.Вставить("ДатаВнеплановойСпецоценки", Неопределено);
		Если ЗначениеЗаполнено(ДатаСведений) Тогда
			СтруктураСведений.Вставить("ДатаВнеплановойСпецоценки", ДобавитьМесяц(ДатаСведений, 6));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураСведений.ОбщийСтажВид) Тогда
			СтруктураСведений.Вставить("СтажОбщийВид", СтруктураСведений.ОбщийСтажВид);
			СтруктураСведений.Вставить("СтажОбщийДатаОтсчета", СтруктураСведений.ОбщийСтажПериодРегистрации);
			СтруктураСведений.Вставить("СтажОбщийРазмерМесяцев", СтруктураСведений.ОбщийСтажЛет*12 + СтруктураСведений.ОбщийСтажМесяцев);
			СтруктураСведений.Вставить("СтажОбщийРазмерДней", СтруктураСведений.ОбщийСтажДней);
		Иначе
			СтруктураСведений.Вставить("СтажОбщийВид", Неопределено);
			СтруктураСведений.Вставить("СтажОбщийДатаОтсчета", Неопределено);
			СтруктураСведений.Вставить("СтажОбщийРазмерМесяцев", 0);
			СтруктураСведений.Вставить("СтажОбщийРазмерДней", 0);
		КонецЕсли;
		
		СтруктураСведений.Вставить("НачалоСтажировки", Неопределено);
		СтруктураСведений.Вставить("ОкончаниеСтажировки", Неопределено);
		Если СтажировкиПострадавшего.Количество() > 0 Тогда
			СтруктураСведений.Вставить("НачалоСтажировки", СтажировкиПострадавшего[0].ДатаНачала);
			СтруктураСведений.Вставить("ОкончаниеСтажировки", СтажировкиПострадавшего[0].ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураСведений = Неопределено Тогда
		СтруктураСведений = Новый Структура;
		МетаданныеДокумента = Метаданные.Документы.НесчастныйСлучайНаПроизводстве;
		Для каждого РеквизитТабличнойЧасти Из МетаданныеДокумента.ТабличныеЧасти.Пострадавшие.Реквизиты Цикл
			СтруктураСведений.Вставить(РеквизитТабличнойЧасти.Имя, Неопределено);
		КонецЦикла;
		СтруктураСведений.Вставить("ДатаПриема", '00010101');
	КонецЕсли;
	
	Если ЗаполнятьИнструктажи Тогда
		СотрудникиФизическихЛиц = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Пострадавший, Организация, Истина, Истина);
		ИнструктажиПоОхранеТруда = ОхранаТруда.ИнструктажиСотрудниковПоОхранеТруда(СотрудникиФизическихЛиц);
		МассивИнструктажей = Новый Массив;
		Для каждого СтрокаИнструктажей Из ИнструктажиПоОхранеТруда Цикл
			МассивИнструктажей.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаИнструктажей));
		КонецЦикла;
		СтруктураСведений.Вставить("Инструктажи", МассивИнструктажей);
	КонецЕсли;
	
	Возврат СтруктураСведений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыСтажаПоКатегорииОбщий()
	Возврат Справочники.ВидыСтажа.ВидыСтажаПоКатегории(Перечисления.КатегорииСтажа.Общий);
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияСведенийОСтажеПострадавшего(РезультатВыбора, ПустойПараметр) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		СтруктураОтбора = Новый Структура("Пострадавший", РезультатВыбора.ФизическоеЛицо);
		НайденныеСтроки = Объект.Пострадавшие.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Для каждого СтрокаСтажа Из РезультатВыбора.ДанныеСтажей Цикл
				// Заполним стаж общий
				НайденнаяСтрока.СтажОбщийИсчисляетсяСДатыПриема = СтрокаСтажа.ИсчисляетсяСДатыПриема;
				НайденнаяСтрока.СтажОбщийДатаОтсчета = СтрокаСтажа.ДатаОтсчета;
				НайденнаяСтрока.СтажОбщийРазмерМесяцев = СтрокаСтажа.РазмерМесяцев;
				НайденнаяСтрока.СтажОбщийРазмерДней = СтрокаСтажа.РазмерДней;
				
				УстановитьПредставлениеОбщегоСтажа(НайденнаяСтрока, Объект.ДатаПроисшествия);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыУчастниковОсмотра()
	
	Для каждого СтрокаУчастникаОсмотра Из Объект.УчастникиОсмотра Цикл
		Если ТипЗнч(СтрокаУчастникаОсмотра.Участник) = Тип("Строка") Тогда
			СтрокаУчастникаОсмотра.ВидУчастникаОсмотра = НСтр("ru = 'ФИО строкой'");
		Иначе
			СтрокаУчастникаОсмотра.ВидУчастникаОсмотра = НСтр("ru = 'Из справочника'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыУчастниковКомиссии()
	
	Для каждого СтрокаУчастникаКомиссии Из Объект.Комиссия Цикл
		Если ТипЗнч(СтрокаУчастникаКомиссии.ЧленКомиссии) = Тип("Строка") Тогда
			СтрокаУчастникаКомиссии.ВидУчастникаКомиссии = НСтр("ru = 'ФИО строкой'");
		Иначе
			СтрокаУчастникаКомиссии.ВидУчастникаКомиссии = НСтр("ru = 'Из справочника'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников(ИмяТаблицы, ИмяКолонки)
	
	Возврат ПоместитьВоВременноеХранилище(ОбщегоНазначения.ВыгрузитьКолонку(Объект[ИмяТаблицы], ИмяКолонки), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораПострадавшиеНаСервере(ВыбранныеФизическиеЛица)
	
	МассивФизическихЛиц = Новый Массив;
	Для Каждого ФизическоеЛицо Из ВыбранныеФизическиеЛица Цикл
		Отбор = Новый Структура("Пострадавший", ФизическоеЛицо);
		Если Объект.Пострадавшие.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = Объект.Пострадавшие.Добавить();
			НоваяСтрока.Пострадавший = ФизическоеЛицо;
			ПриИзмененииПострадавшего(Объект, НоваяСтрока, Объект.ДатаПроисшествия, Ложь);
			
			МассивФизическихЛиц.Добавить(ФизическоеЛицо);
			
			// Удалим инструктажи
			НайденныеСтроки = Объект.Инструктажи.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Инструктажи.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним инструктажи по новым пострадавшим
	СотрудникиФизическихЛиц = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(МассивФизическихЛиц, Объект.Организация, Истина, Истина);
	ИнструктажиПоОхранеТруда = ОхранаТруда.ИнструктажиСотрудниковПоОхранеТруда(СотрудникиФизическихЛиц);
	Для Каждого ИнструктажСотрудника Из ИнструктажиПоОхранеТруда Цикл
		НоваяСтрока = Объект.Инструктажи.Добавить();
		НоваяСтрока.Пострадавший = ИнструктажСотрудника.ФизическоеЛицо;
		НоваяСтрока.ВидИнструктажа = ИнструктажСотрудника.ВидИнструктажа;
		НоваяСтрока.ДатаПрохождения = ИнструктажСотрудника.ДатаПроведения;
	КонецЦикла;
	
	ОбновитьНадписиИнструктажей(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораОчевидцыНаСервере(ВыбранныеФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ВыбранныеФизическиеЛица Цикл
		Отбор = Новый Структура("Очевидец", ФизическоеЛицо);
		Если Объект.Очевидцы.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = Объект.Очевидцы.Добавить();
			НоваяСтрока.Очевидец = ФизическоеЛицо;
			ПриИзмененииОчевидца(Объект, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораВиновныеЛицаНаСервере(ВыбранныеФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ВыбранныеФизическиеЛица Цикл
		Отбор = Новый Структура("ВиновноеЛицо", ФизическоеЛицо);
		Если Объект.ВиновныеЛица.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = Объект.ВиновныеЛица.Добавить();
			НоваяСтрока.ВиновноеЛицо = ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаУчастникаОсмотра(ТекущиеДанные)
	
	Если ТекущиеДанные.ВидУчастникаОсмотра = НСтр("ru = 'Из справочника'")
		И ТипЗнч(ТекущиеДанные.Участник) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	КонецЕсли;
	
	Если ТекущиеДанные.ВидУчастникаОсмотра = НСтр("ru = 'ФИО строкой'")
		И ТипЗнч(ТекущиеДанные.Участник) <> Тип("Строка") Тогда
		ТекущиеДанные.Участник = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаУчастникаКомиссии(ТекущиеДанные)
	
	Если ТекущиеДанные.ВидУчастникаКомиссии = НСтр("ru = 'Из справочника'") Тогда
		Если ТипЗнч(ТекущиеДанные.ЧленКомиссии) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекущиеДанные.ЧленКомиссии = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		КонецЕсли;
		Если ТипЗнч(ТекущиеДанные.Должность) <> Тип("СправочникСсылка.Должности") Тогда
			ТекущиеДанные.Должность = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидУчастникаКомиссии = НСтр("ru = 'ФИО строкой'") Тогда
		Если ТипЗнч(ТекущиеДанные.ЧленКомиссии) <> Тип("Строка") Тогда
			ТекущиеДанные.ЧленКомиссии = "";
		КонецЕсли;
		Если ТипЗнч(ТекущиеДанные.Должность) <> Тип("Строка") Тогда
			ТекущиеДанные.Должность = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеОбщегоСтажа(ТекущаяСтрока, ДатаСведений)
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.СтажОбщийДатаОтсчета) И ТекущаяСтрока.СтажОбщийРазмерМесяцев = 0
		И ТекущаяСтрока.СтажОбщийРазмерДней = 0 Тогда
		ТекущаяСтрока.СтажОбщийПредставление = НСтр("ru = 'Стаж не задан'");
		Возврат;
	КонецЕсли;
	
	СведенияОСтаже = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
	СведенияОСтаже.ДатаОтсчета = ТекущаяСтрока.СтажОбщийДатаОтсчета;
	СведенияОСтаже.Лет = Цел(ТекущаяСтрока.СтажОбщийРазмерМесяцев / 12);
	СведенияОСтаже.Месяцев = ТекущаяСтрока.СтажОбщийРазмерМесяцев - СведенияОСтаже.Лет * 12;
	СведенияОСтаже.Дней = ТекущаяСтрока.СтажОбщийРазмерДней;
	
	ПродолжительностьСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.ПродолжительностьСтажа(СведенияОСтаже, ДатаСведений);
	
	Если ПродолжительностьСтажа.Лет + ПродолжительностьСтажа.Месяцев + ПродолжительностьСтажа.Дней = 0 Тогда
		ТекущаяСтрока.СтажОбщийПредставление = НСтр("ru = 'Стаж не задан'");
	Иначе
		ТекущаяСтрока.СтажОбщийПредставление = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеСтажа(
			ПродолжительностьСтажа.Лет, ПродолжительностьСтажа.Месяцев,ПродолжительностьСтажа.Дней);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииПострадавшего(Объект, ТекущиеДанные, ДатаСведений, ЗаполнятьИнструктажи = Истина)
	
	СведенияОПострадавшем = СведенияОПострадавшемНаСервере(ТекущиеДанные.Пострадавший, Объект.Организация, ДатаСведений, ЗаполнятьИнструктажи);
	
	ТекущиеДанные.ДолжностьПоШтатномуРасписанию = СведенияОПострадавшем.ДолжностьПоШтатномуРасписанию;
	ТекущиеДанные.СведенияСОУТ = СведенияОПострадавшем.СведенияСОУТ;
	ТекущиеДанные.СведенияОПСОУТ = СведенияОПострадавшем.СведенияОПСОУТ;
	ТекущиеДанные.ДатаВнеплановойСпецоценки = СведенияОПострадавшем.ДатаВнеплановойСпецоценки;
	ТекущиеДанные.НачалоСтажировки = СведенияОПострадавшем.НачалоСтажировки;
	ТекущиеДанные.ОкончаниеСтажировки = СведенияОПострадавшем.ОкончаниеСтажировки;
	
	// Заполним стаж общий
	ТекущиеДанные.СтажОбщийВид = СведенияОПострадавшем.СтажОбщийВид;
	ТекущиеДанные.СтажОбщийДатаОтсчета = СведенияОПострадавшем.СтажОбщийДатаОтсчета;
	ТекущиеДанные.СтажОбщийРазмерМесяцев = СведенияОПострадавшем.СтажОбщийРазмерМесяцев;
	ТекущиеДанные.СтажОбщийРазмерДней = СведенияОПострадавшем.СтажОбщийРазмерДней;
	УстановитьПредставлениеОбщегоСтажа(ТекущиеДанные, ДатаСведений);
	
	// Заполним стаж работы на предприятии
	ТекущиеДанные.СтажРаботыНаПредприятииЛет = СведенияОПострадавшем.СтажРаботыНаПредприятииЛет;
	ТекущиеДанные.СтажРаботыНаПредприятииМесяцев = СведенияОПострадавшем.СтажРаботыНаПредприятииМесяцев;
	ТекущиеДанные.СтажРаботыНаПредприятииДней = СведенияОПострадавшем.СтажРаботыНаПредприятииДней;
	ТекущиеДанные.СтажВОрганизацииПредставление = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеСтажа(
		ТекущиеДанные.СтажРаботыНаПредприятииЛет, ТекущиеДанные.СтажРаботыНаПредприятииМесяцев, ТекущиеДанные.СтажРаботыНаПредприятииДней);
	
	Если ЗаполнятьИнструктажи Тогда
		ПараметрыОтбора = Новый Структура("Пострадавший", ТекущиеДанные.Пострадавший);
		НайденныеСтроки = Объект.Инструктажи.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.Инструктажи.Удалить(НайденнаяСтрока);
		КонецЦикла;
		Для Каждого ИнструктажСотрудника Из СведенияОПострадавшем.Инструктажи Цикл
			НоваяСтрока = Объект.Инструктажи.Добавить();
			НоваяСтрока.Пострадавший = ИнструктажСотрудника.ФизическоеЛицо;
			НоваяСтрока.ВидИнструктажа = ИнструктажСотрудника.ВидИнструктажа;
			НоваяСтрока.ДатаПрохождения = ИнструктажСотрудника.ДатаПроведения;
		КонецЦикла;
		ОбновитьНадписиИнструктажей(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОчевидца(Объект, ТекущиеДанные)
	
	КонтактнаяИнформация = Новый Структура;
	КонтактнаяИнформация.Вставить("Адрес", ТекущиеДанные.Адрес);
	КонтактнаяИнформация.Вставить("АдресПредставление", ТекущиеДанные.АдресПредставление);
	КонтактнаяИнформация.Вставить("КонтактныйТелефон", ТекущиеДанные.КонтактныйТелефон);
	КонтактнаяИнформация.Вставить("КонтактныйТелефонПредставление", ТекущиеДанные.КонтактныйТелефонПредставление);
	
	ЗаполнитьКонтактнуюИнформациюОчевидцаНаСервере(ТекущиеДанные.Очевидец, КонтактнаяИнформация, Объект.Дата);
	
	ТекущиеДанные.Адрес = КонтактнаяИнформация.Адрес;
	ТекущиеДанные.АдресПредставление = КонтактнаяИнформация.АдресПредставление;
	ТекущиеДанные.КонтактныйТелефон = КонтактнаяИнформация.КонтактныйТелефон;
	ТекущиеДанные.КонтактныйТелефонПредставление = КонтактнаяИнформация.КонтактныйТелефонПредставление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборФизическихЛиц(ИмяТаблицы, ИмяКолонки)
	
	НастройкиФормыВыбора = Новый НастройкиКомпоновкиДанных;
	
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		НастройкиФормыВыбора.Отбор.Элементы,
		"ДатаУвольненияИЛИ",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаЭлементовОтбора,
		"ДатаУвольнения",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаЭлементовОтбора,
		"ДатаУвольнения",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		НачалоДня(Объект.ДатаПроисшествия));
	
	КадровыйУчетКлиент.ВыбратьФизическихЛицОрганизации(Элементы[ИмяТаблицы], Объект.Организация, Истина, НастройкиФормыВыбора, АдресСпискаПодобранныхСотрудников(ИмяТаблицы, ИмяКолонки));
	
КонецПроцедуры

&НаСервере
Функция ОсновнойСотрудникФизическогоЛица(ФизическоеЛицо)
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическоеЛицо, Истина, Объект.Организация, Объект.ДатаПроисшествия);
	Если ОсновныеСотрудники.Количество() > 0 Тогда
		Возврат ОсновныеСотрудники[0].Сотрудник;
	КонецЕсли;
	
	Возврат Справочники.Сотрудники.ПустаяСсылка();
	
КонецФункции

#КонецОбласти
