#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// Событие срабатывает, например, если указано стандартное имя формы, но не сработает если указана конкретная форма.
	// Например, сработает для "РегистрСведений.НастройкиСЭДОФСС.ФормаЗаписи",
	// но не сработает для "РегистрСведений.НастройкиСЭДОФСС.Форма.ФормаЗаписи".
	Если СтрСравнить(ВидФормы, "ФормаЗаписи") = 0 Тогда
		// К сожалению, если запись отсутствует в регистре сведений,
		// то при открытии формы записи возникнет ошибка "Объект не найден".
		// Вариант решения - создать запись перед открытием формы.
		Организация = ОбщегоНазначенияБЗК.ЗначениеСвойства(Параметры, "Ключ.Организация");
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") И Не Организация.Пустая() Тогда
			УстановитьПривилегированныйРежим(Истина);
			Набор = НачатьЗаписьНабора(Организация);
			Если Набор.Количество() = 0 Тогда
				Набор.Добавить().Организация = Организация;
				ЗавершитьЗаписьНабора(Набор);
			Иначе
				ОтменитьЗаписьНабора(Набор);
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НаборЗаписей

// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.НастройкиСЭДОФСС - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(Организация) Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиСЭДОФСС) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.НастройкиСЭДОФСС.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСЭДОФСС");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить настройки СЭДО ФСС %1 по причине: %2'"),
			Организация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.НастройкиСЭДОФСС,
			Организация,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.НастройкиСЭДОФСС
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.НастройкиСЭДОФСС
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает массив организаций, в настройках которых включен флажок получения состояний ЭЛН.
Функция ОрганизацииПолучающиеСостоянияЭЛН() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиСЭДОФСС.Организация КАК Организация,
	|	Организации.ПометкаУдаления КАК ПометкаУдаления,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.НастройкиСЭДОФСС КАК НастройкиСЭДОФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО НастройкиСЭДОФСС.Организация = Организации.Ссылка
	|ГДЕ
	|	НастройкиСЭДОФСС.ПолучатьСостоянияЭЛН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления УБЫВ,
	|	Представление";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
КонецФункции

Функция НастройкиОрганизаций() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(НастройкиСЭДОФСС.ПолучатьСостоянияЭЛН, ЛОЖЬ) КАК ПолучатьСостоянияЭЛН,
	|	Организации.ПометкаУдаления КАК ПометкаУдаления,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСЭДОФСС КАК НастройкиСЭДОФСС
	|		ПО (НастройкиСЭДОФСС.Организация = Организации.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Представление";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура УстановитьФлажкиОрганизаций(СписокОрганизаций) Экспорт
	Для Каждого ЭлементСписка Из СписокОрганизаций Цикл
		Набор = НачатьЗаписьНабора(ЭлементСписка.Значение);
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.Организация = ЭлементСписка.Значение;
		Иначе
			Запись = Набор[0];
		КонецЕсли;
		Если Запись.ПолучатьСостоянияЭЛН = ЭлементСписка.Пометка Тогда
			ОтменитьЗаписьНабора(Набор);
			Продолжить;
		КонецЕсли;
		Запись.ПолучатьСостоянияЭЛН = ЭлементСписка.Пометка;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли
