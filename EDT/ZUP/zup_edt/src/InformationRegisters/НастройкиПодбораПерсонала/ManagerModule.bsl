#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНастройки(НастройкиПодбораПерсонала) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НаборЗаписей[0], НастройкиПодбораПерсонала);
	Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	Иначе
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиПоУмолчанию() Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Добавить();
	КонецЕсли;
	
	СтрокаНабора = НаборЗаписей[0];
	
	СтрокаНабора.ИспользоватьЗаявкиНаПодборПерсонала = Истина;
	СтрокаНабора.ИспользоватьОценкуЭффективностиИсточниковИнформацииОКандидатах = Истина;
	СтрокаНабора.ИспользоватьСогласованиеВакансий = Истина;
	СтрокаНабора.ДнейДоСообщения = 30;
	СтрокаНабора.ДнейДоОтклонения = 60;
	СтрокаНабора.ПричинаАвтоматическогоОтклонения = Справочники.ПричиныОтклоненияКандидатов.НайтиПоНаименованию(НСтр("ru = 'Задержка на этапе'"));
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СброситьНастройки() Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Добавить();
	КонецЕсли;
	
	СтрокаНабора = НаборЗаписей[0];
	
	СтрокаНабора.ИспользоватьЗаявкиНаПодборПерсонала = Ложь;
	СтрокаНабора.ИспользоватьОценкуЭффективностиИсточниковИнформацииОКандидатах = Ложь;
	СтрокаНабора.ИспользоватьСогласованиеВакансий = Ложь;
	СтрокаНабора.ОткрытиеВакансииТребуетСогласования = Ложь;
	СтрокаНабора.ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе = Ложь;
	СтрокаНабора.ДнейДоСообщения = 30;
	СтрокаНабора.ДнейДоОтклонения = 60;
	СтрокаНабора.ПричинаАвтоматическогоОтклонения = Справочники.ПричиныОтклоненияКандидатов.НайтиПоНаименованию("Задержка на этапе");
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ЗначенияНастроек() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСсылка",Справочники.ПричиныОтклоненияКандидатов.ПустаяСсылка());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ИспользоватьСогласованиеВакансий, ЛОЖЬ) КАК ИспользоватьСогласованиеВакансий,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ИспользоватьЗаявкиНаПодборПерсонала, ЛОЖЬ) КАК ИспользоватьЗаявкиНаПодборПерсонала,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ОткрытиеВакансииТребуетСогласования, ЛОЖЬ) КАК ОткрытиеВакансииТребуетСогласования,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ИспользоватьПоискКандидатовНаИнтернетСайтах, ЛОЖЬ) КАК ИспользоватьПоискКандидатовНаИнтернетСайтах,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ИспользоватьОценкуЭффективностиИсточниковИнформацииОКандидатах, ЛОЖЬ) КАК ИспользоватьОценкуЭффективностиИсточниковИнформацииОКандидатах,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ИспользоватьСкрытиеПерсональныхДанныхКандидатов, ЛОЖЬ) КАК ИспользоватьСкрытиеПерсональныхДанныхКандидатов,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе, ЛОЖЬ) КАК ПроверятьКандидатовЗадержавшихсяНаОдномЭтапе,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ДнейДоСообщения, 0) КАК ДнейДоСообщения,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ДнейДоОтклонения, 0) КАК ДнейДоОтклонения,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ПричинаАвтоматическогоОтклонения, &ПустаяСсылка) КАК ПричинаАвтоматическогоОтклонения,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ПериодРаботыСВакансией, 0) КАК ПериодРаботыСВакансией,
		|	ЕСТЬNULL(НастройкиПодбораПерсонала.ЕдиницаИзмеренияПериодаРаботыСВакансией, ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)) КАК ЕдиницаИзмеренияПериодаРаботыСВакансией
		|ИЗ
		|	РегистрСведений.НастройкиПодбораПерсонала КАК НастройкиПодбораПерсонала";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РегистрыСведений.НастройкиПодбораПерсонала.СоздатьМенеджерЗаписи();
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	КонецЕсли;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура УстановитьИспользованиеЗаявокИСогласованияВакансий(ПараметрыОбновления) Экспорт
	
	Если Не Константы.ИспользоватьПодборПерсонала.Получить() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.НастройкиПодбораПерсонала");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, 
			Метаданные.РегистрыСведений.НастройкиПодбораПерсонала);
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Добавить();
	КонецЕсли;
	
	СтрокаНабора = НаборЗаписей[0];
	СтрокаНабора.ИспользоватьЗаявкиНаПодборПерсонала = Истина;
	
	Если СтрокаНабора.ОткрытиеВакансииТребуетСогласования Тогда
		СтрокаНабора.ИспользоватьСогласованиеВакансий = Истина;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы.Не удалось зафиксировать транзакцию'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УстановитьПериодРаботыСВакансией(ПараметрыОбновления) Экспорт
	
	Если ЗначенияНастроек().ПериодРаботыСВакансией <> 0 Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиПодбораПерсонала");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		НастройкиПодбораПерсонала = ЗначенияНастроек();
		НастройкиПодбораПерсонала.ПериодРаботыСВакансией = 1;
		НастройкиПодбораПерсонала.ЕдиницаИзмеренияПериодаРаботыСВакансией = Перечисления.Периодичность.Месяц;
		УстановитьНастройки(НастройкиПодбораПерсонала);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы.Не удалось зафиксировать транзакцию'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли