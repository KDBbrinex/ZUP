#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСообщенийФСС

Процедура ПриЗагрузкеУведомленияОНовомСообщении(Организация, ИдентификаторСообщения) Экспорт
	Если Не СЭДОФСС.ЕстьПравоОбмена() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на обмен с сервисом электронного документооборота ФСС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(Организация, ИдентификаторСообщения);
	Если Набор.Количество() > 0 Тогда
		ОтменитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	Запись = Набор.Добавить();
	Запись.Организация = Организация;
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Запись.ТребуетОбработки = Истина; // Требуется получение и расшифровка.
	Запись.Последнее = Истина; // Неизвестно, является-ли сообщение последним.
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ПослеРасшифровкиСообщенияОбИзмененииСостоянияЭЛН(Организация, ИдентификаторСообщения, ТекстXML, Результат) Экспорт
	Если Не СЭДОФСС.ЕстьПравоОбмена() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на обмен с сервисом электронного документооборота ФСС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// Пример:
	//<lnStateChange>
	//	<ln_code>900000000003</ln_code>
	//	<snils>0000060004</snils>
	//	<ln_state>010</ln_state>
	//</lnStateChange>
	//<eln>
	//	<lnCode>900000000003</ln_code>
	//	<snils>0000060004</snils>
	//	<lnState>010</ln_state>
	//</eln>
	
	Набор = НачатьЗаписьНабора(Организация, ИдентификаторСообщения);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.Организация = Организация;
		Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	ЭлементDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'snils']/..");
	Если ЭлементDOM = Неопределено Тогда
		ОшибкаОбработки(Результат, ИдентификаторСообщения, НСтр("ru = 'В xml-содержимом сообщения не удалось найти узел с именем ""snils"".'"));
		ЗавершитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	ФрагментXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(ЭлементDOM);
	ОбъектXDTO = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(ФрагментXML);
	ЗначенияРеквизитов = ОбщегоНазначенияБЗК.ЗначенияСвойств(ОбъектXDTO, "snils, ln_code, ln_state, lnCode, lnState");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.snils) Тогда
		СНИЛСВФорматеИБ = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(ЗначенияРеквизитов.snils);
		Запись.СНИЛС = СНИЛСВФорматеИБ;
		Запись.ФизическоеЛицо = ОбменЛисткамиНетрудоспособностиФСС.ФизическоеЛицо(СНИЛСВФорматеИБ);
		Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
			ОшибкаОбработки(Результат, ИдентификаторСообщения, СтрШаблон(НСтр("ru = 'Не удалось найти физлицо по СНИЛС ""%1"".'"), СНИЛСВФорматеИБ));
			ЗавершитьЗаписьНабора(Набор);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ln_code) Тогда
		Запись.НомерЛН = ЗначенияРеквизитов.ln_code;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.lnCode) Тогда
		Запись.НомерЛН = ЗначенияРеквизитов.lnCode;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ln_state) Тогда
		ЗаполнитьСостояниеЭЛН(Запись, ЗначенияРеквизитов.ln_state);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.lnState) Тогда
		ЗаполнитьСостояниеЭЛН(Запись, ЗначенияРеквизитов.lnState);
	КонецЕсли;
	
	Запись.Загружено = Истина;
	
	ЗавершитьЗаписьНабора(Набор);
	Результат.Обработано = Истина;
	
	Попытка
		ОбновитьВторичныеДанные(Запись.Организация, Запись.НомерЛН);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при обновлении вторичных данных: %1: %2'"), Кратко, Подробно);
		ЗарплатаКадрыОтображениеОшибок.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

Процедура ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки)
	Результат.ОшибкаОбработки = Истина;
	Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка обработки сообщения %1: %2'"), ИдентификаторСообщения, ТекстОшибки);
КонецПроцедуры

Процедура ЗаполнитьСостояниеЭЛН(Запись, LN_STATE)
	СостояниеЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(LN_STATE);
	Если ЗначениеЗаполнено(СостояниеЭЛНВФСС) Тогда
		Запись.СостояниеЭЛН = СостояниеЭЛНВФСС;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

Функция КоличествоОжидающихПолучения() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|ГДЕ
	|	НЕ СообщенияФСС.Загружено";
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
КонецФункции

#КонецОбласти

#Область ОбновлениеВторичныхДанных

Процедура ОбновитьВторичныеДанные(Организация = Неопределено, НомерЛН = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПриоритетовСостоянийЭЛН.Ссылка КАК Ссылка,
	|	ТаблицаПриоритетовСостоянийЭЛН.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТПриоритетыСостоянийЭЛН
	|ИЗ
	|	&ТаблицаПриоритетовСостоянийЭЛН КАК ТаблицаПриоритетовСостоянийЭЛН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ЕСТЬNULL(ПриоритетыСостояний.Приоритет, 99) КАК Приоритет,
	|	СообщенияФСС.НомерЛН КАК НомерЛН,
	|	СообщенияФСС.Загружено КАК Загружено,
	|	ВЫБОР
	|		КОГДА НЕ СообщенияФСС.Загружено
	|			ТОГДА ИСТИНА
	|		КОГДА СообщенияФСС.СостояниеЭЛН = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Аннулирован)
	|			ТОГДА НЕ СведенияОбЭЛН.Организация ЕСТЬ NULL
	|		КОГДА СообщенияФСС.СостояниеЭЛН = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Закрыт)
	|			ТОГДА ЕСТЬNULL(СведенияОбЭЛН.Больничный, ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|					И ЕСТЬNULL(СведенияОбЭЛН.СостояниеФСС, ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Аннулирован)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетОбработки,
	|	СообщенияФСС.СостояниеЭЛН КАК СостояниеЭЛН,
	|	СообщенияФСС.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСообщения
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыСостоянийЭЛН КАК ПриоритетыСостояний
	|		ПО СообщенияФСС.СостояниеЭЛН = ПриоритетыСостояний.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО СообщенияФСС.НомерЛН = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|			И СообщенияФСС.Организация = СведенияОбЭЛН.Организация
	|ГДЕ
	|	СообщенияФСС.Организация = &Организация
	|	И СообщенияФСС.НомерЛН = &НомерЛН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	МАКСИМУМ(СообщенияФСС.ТребуетОбработки) КАК ТребуетОбработки,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(Сообщения2.Приоритет, 100) < СообщенияФСС.Приоритет
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Последнее
	|ИЗ
	|	ВТСообщения КАК СообщенияФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСообщения КАК Сообщения2
	|		ПО СообщенияФСС.НомерЛН = Сообщения2.НомерЛН
	|			И СообщенияФСС.Организация = Сообщения2.Организация
	|			И СообщенияФСС.ФизическоеЛицо = Сообщения2.ФизическоеЛицо
	|			И СообщенияФСС.ИдентификаторСообщения <> Сообщения2.ИдентификаторСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	СообщенияФСС.ИдентификаторСообщения,
	|	СообщенияФСС.Организация";
	Запрос.УстановитьПараметр("ТаблицаПриоритетовСостоянийЭЛН", ТаблицаПриоритетовСостоянийЭЛН());
	
	Если Организация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СообщенияФСС.Организация = &Организация", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Если НомерЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СообщенияФСС.НомерЛН = &НомерЛН", "");
	Иначе
		Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.Организация, СтрокаТаблицы.ИдентификаторСообщения);
		
		ЕстьИзменения = Ложь;
		Для Каждого Запись Из Набор Цикл
			Если Запись.ТребуетОбработки <> СтрокаТаблицы.ТребуетОбработки Тогда
				ЕстьИзменения = Истина;
				Запись.ТребуетОбработки = СтрокаТаблицы.ТребуетОбработки;
			КонецЕсли;
			Если Запись.Последнее <> СтрокаТаблицы.Последнее Тогда
				ЕстьИзменения = Истина;
				Запись.Последнее = СтрокаТаблицы.Последнее;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ЗавершитьЗаписьНабора(Набор);
		Иначе
			ОтменитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ТаблицаПриоритетовСостоянийЭЛН()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭЛНВФСС, Число"));
	Таблица.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Приоритеты = Перечисления.СостоянияЭЛНВФСС.Приоритеты();
	Для Каждого КлючИЗначение Из Приоритеты Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Ссылка    = КлючИЗначение.Ключ;
		СтрокаТаблицы.Приоритет = КлючИЗначение.Значение;
	КонецЦикла;
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Ссылка    = Неопределено;
	СтрокаТаблицы.Приоритет = 11;
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Ссылка    = Перечисления.СостоянияЭЛНВФСС.ПустаяСсылка();
	СтрокаТаблицы.Приоритет = 10;
	
	Возврат Таблица;
КонецФункции

#КонецОбласти

#Область НаборЗаписей

// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   Организация            - ОпределяемыйТип.Организация - Значение отбора по соответствующему измерению.
//   ИдентификаторСообщения - Строка                      - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(Организация, ИдентификаторСообщения)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторСообщения", ИдентификаторСообщения);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить уведомление ФСС об изменении состояний ЭЛН %1 %2 по причине: %3'"),
			Организация,
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН,
			ИдентификаторСообщения,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей)
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей)
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.

#КонецОбласти

#КонецОбласти

#КонецЕсли