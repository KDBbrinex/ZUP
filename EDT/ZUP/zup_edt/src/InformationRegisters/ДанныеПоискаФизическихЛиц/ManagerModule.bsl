#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьДанныеПоискаФизическихЛиц(ФизическоеЛицо, АдресаЭлектроннойПочты, Телефоны) Экспорт

	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.РегистрыСведений.ДанныеПоискаФизическихЛиц.ПолноеИмя());
	ЭлементБлокировкиДанных.УстановитьЗначение("ФизическоеЛицо", ФизическоеЛицо);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = ДанныеПоискаНаборЗаписей(ФизическоеЛицо, Телефоны, АдресаЭлектроннойПочты);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Сохранение данных поиска физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#Область ОбменДанными

// Пересчитывает зависимые данные после загрузки сообщения обмена
//
// Параметры:
//		ЗависимыеДанные - ТаблицаЗначений:
//			* ВедущиеМетаданные - ОбъектМетаданных - Метаданные ведущих данных
//			* ЗависимыеМетаданные - ОбъектМетаданных - Метаданные текущего объекта
//			* ВедущиеДанные - Массив объектов, заполненный при загрузке сообщения обмена
//				по этим объектам требуется обновить зависимые данные
//
Процедура ОбновитьЗависимыеДанныеПослеЗагрузкиОбменаДанными(ЗависимыеДанные) Экспорт
	
	Для Каждого СтрокаТаблицы Из ЗависимыеДанные Цикл
		Если СтрокаТаблицы.ВедущиеМетаданные = Метаданные.Справочники.ФизическиеЛица Тогда
			Для Каждого ФизическоеЛицоОбъект Из СтрокаТаблицы.ВедущиеДанные Цикл
				ПоискФизическихЛиц.ЗаполнитьДанныеПоискаФизическогоЛица(ФизическоеЛицоОбъект);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

Процедура ЗаполнитьДанныеПоискаФизическихЛиц(ПараметрыОбновления) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПоискаФизическихЛиц КАК ДанныеПоискаФизическихЛиц
		|		ПО ФизическиеЛица.Ссылка = ДанныеПоискаФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ДанныеПоискаФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|	И НЕ ФизическиеЛица.Ссылка В (&Обработанные)";
	Если Не ПараметрыОбновления.Свойство("Обработанные") Тогда
		Обработанные = Новый Массив;
		ПараметрыОбновления.Вставить("Обработанные");
	Иначе
		Обработанные = ПараметрыОбновления.Обработанные;
	КонецЕсли;
	Запрос.УстановитьПараметр("Обработанные", Обработанные);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ТипыКонтактнойИнформации = Новый Массив;
	ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ФизическиеЛица, ТипыКонтактнойИнформации, , Ложь);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаКИ, "Объект");
	
	ФизическиеЛицаКИ = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаКИ, "Объект", Истина);
	Для Каждого ФизическоеЛицоКИ Из ФизическиеЛицаКИ Цикл
		Контакты = ПоискФизическихЛиц.КонтактыВФорматеПоиска(ТаблицаКИ.НайтиСтроки(Новый Структура("Объект", ФизическоеЛицоКИ)));
		
		Если Не ПустаяСтрока(Контакты.Телефоны) Или Не ПустаяСтрока(Контакты.АдресаЭлектроннойПочты) Тогда
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ДанныеПоискаФизическихЛиц", "ФизическоеЛицо", ФизическоеЛицоКИ) Тогда
				Продолжить;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ДанныеПоискаНаборЗаписей(
				ФизическоеЛицоКИ, Контакты.Телефоны, Контакты.АдресаЭлектроннойПочты), Истина);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Обработанные, ФизическиеЛица);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "Обработанные", Обработанные);
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеПоискаНаборЗаписей(ФизическоеЛицо, Телефоны, АдресаЭлектроннойПочты);

	НаборЗаписей = РегистрыСведений.ДанныеПоискаФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
	НоваяЗапись.Телефоны = Телефоны;
	НоваяЗапись.АдресаЭлектроннойПочты = АдресаЭлектроннойПочты;
	
	Возврат НаборЗаписей;

КонецФункции

#КонецОбласти

#КонецЕсли